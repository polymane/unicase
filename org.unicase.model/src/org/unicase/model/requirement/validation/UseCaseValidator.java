/**
 * <copyright> </copyright> $Id$
 */
package org.unicase.model.requirement.validation;

import org.eclipse.emf.common.util.EList;
import org.unicase.model.requirement.Actor;
import org.unicase.model.requirement.FunctionalRequirement;
import org.unicase.model.requirement.NonFunctionalRequirement;
import org.unicase.model.requirement.Scenario;
import org.unicase.model.requirement.Step;
import org.unicase.model.requirement.UseCase;
import org.unicase.model.requirement.UserTask;

/*
 * A sample validator interface for {@link org.unicase.model.requirement.UseCase}. This doesn't really do anything, and
 * it's not a real EMF artifact. It was generated by the org.eclipse.emf.examples.generator.validator plug-in to
 * illustrate how EMF's code generator can be extended. This can be disabled with -vmargs
 * -Dorg.eclipse.emf.examples.generator.validator=false.
 */
public interface UseCaseValidator {
	boolean validate();

	boolean validateInitiatingActor(Actor value);

	boolean validateParticipatingActors(EList<Actor> value);

	boolean validateRealizedUserTask(UserTask value);

	boolean validatePrecondition(String value);

	boolean validateUseCaseSteps(EList<Step> value);

	boolean validatePostcondition(String value);

	boolean validateRules(String value);

	boolean validateException(String value);

	boolean validateScenarios(EList<Scenario> value);

	boolean validateFunctionalRequirements(EList<FunctionalRequirement> value);

	boolean validateNonFunctionalRequirements(EList<NonFunctionalRequirement> value);

	boolean validateIdentifiedClasses(EList<org.unicase.model.classes.Class> value);

	boolean validateIncludedUseCases(EList<UseCase> value);

	boolean validateExtendedUseCases(EList<UseCase> value);
}
