/**
 * <copyright> </copyright> $Id$
 */
package org.unicase.model.requirement.validation;

import org.eclipse.emf.common.util.EList;
import org.unicase.model.classes.Method;
import org.unicase.model.requirement.ActorInstance;
import org.unicase.model.requirement.FunctionalRequirement;
import org.unicase.model.requirement.NonFunctionalRequirement;
import org.unicase.model.requirement.Step;
import org.unicase.model.requirement.UseCase;

/*
 * A sample validator interface for {@link org.unicase.model.requirement.Scenario}. This doesn't really do anything, and
 * it's not a real EMF artifact. It was generated by the org.eclipse.emf.examples.generator.validator plug-in to
 * illustrate how EMF's code generator can be extended. This can be disabled with -vmargs
 * -Dorg.eclipse.emf.examples.generator.validator=false.
 */
public interface ScenarioValidator {
	boolean validate();

	boolean validateSteps(EList<Step> value);

	boolean validateInitiatingActorInstance(ActorInstance value);

	boolean validateParticipatingActorInstances(EList<ActorInstance> value);

	boolean validateInstantiatedUseCases(EList<UseCase> value);

	boolean validateFunctionalRequirements(EList<FunctionalRequirement> value);

	boolean validateNonFunctionalRequirements(EList<NonFunctionalRequirement> value);

	boolean validateParticipatingMethods(EList<Method> value);

	boolean validateParticipatingClasses(EList<org.unicase.model.classes.Class> value);
}
