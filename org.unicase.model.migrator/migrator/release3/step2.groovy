import org.eclipse.emf.ecore.*

/**
 * Converts the rich text string as generated by the MERichTextContol to HTML.
 * 
 * @param richText the input string
 * @return the converted HTML text
 */
public static String getHTMLFromRichText(String richText) {
	if (richText == null) {
		return "";
	}
	String[] split = richText.split("%BEGINNTEXT%");

	if (split.length == 1) {
		return "";
	} else {
		List<Integer> bulletedLines = new ArrayList<Integer>();
		try {
			StringTokenizer stringTokenizer = new StringTokenizer(split[0], ",");
			while (stringTokenizer.hasMoreElements()) {
				String nextElement = (String) stringTokenizer.nextElement();
				if (nextElement.equals(";")) {
					break;
				} else {
					bulletedLines.add(Integer.parseInt(nextElement));
				}
			}
		} catch (RuntimeException e) {
			e.printStackTrace();
			return "";
		}

		String text = split[1];

		try {

			// normalize line feeds
			text.replaceAll("\n\r", "\n");
			text.replaceAll("\r\n", "\n");
			text.replaceAll("\r", "\n");

			String[] lines = text.split("\n");
			StringBuilder newString = new StringBuilder();

			for (int i = 0; i < lines.length; i++) {
				if (bulletedLines.contains(i)) {
					newString.append("\n<ul>");
					newString.append("<li>");
					newString.append(lines[i]);
					newString.append("</li>");
					newString.append("</ul>");
				} else {
					newString.append(lines[i]);
					newString.append("<br/>\n");
				}
			}
			String newDesc = newString.toString();
			return newDesc;
		} catch (RuntimeException e) {
			e.printStackTrace();
			return text;
		}
	}
}

//change migration
getElementById = { id ->
	def element = model.IdentifiableElement.allInstances.find{e -> id.equals(e.identifier)} 
	if(element == null) {
		println "id " + id + " not found"
	}
	return element
}

isFeatureChange = { operation, EStructuralFeature feature ->
	if(feature.name.equals(operation.featureName)) {
		def id = operation.modelElementId.id
		def element = getElementById(id)
		if(element == null || element.instanceOf(feature.eContainingClass)) {
			return true
		}
	}
	return false
}

for(operation in esmodel.versioning.operations.AttributeOperation.allInstances) {
	if(isFeatureChange(operation, model.ModelElement.description)) {
		if(operation.oldValue != null) {
			operation.oldValue = getHTMLFromRichText(operation.oldValue)
		}
		if(operation.newValue != null) {
			operation.newValue = getHTMLFromRichText(operation.newValue)
		}
	}
}

// model migration
for(m in model.ModelElement.allInstances) {
	if(m.description != null) {
		m.description = getHTMLFromRichText(m.description)
	}
}