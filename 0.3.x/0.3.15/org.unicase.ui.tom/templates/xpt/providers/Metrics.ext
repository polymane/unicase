/*
 * Copyright (c) 2008 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Artem Tikhomirov (Borland) - initial API and implementation
 */

import "http://www.eclipse.org/gmf/2008/GenModel";
import "http://www.eclipse.org/emf/2002/Ecore";

cached List[GenMetricRule] getNotationMetrics(GenMetricContainer c) : c.metrics.select(m | !{ m.target }.typeSelect(GenNotationElementTarget).isEmpty()) ;
cached List[GenMetricRule] getDiagramMetrics(GenMetricContainer c) : c.metrics.select(m | !{ m.target }.typeSelect(GenDiagramElementTarget).isEmpty()) ;
cached List[GenMetricRule] getDomainMetrics(GenMetricContainer c) : c.metrics.select(m | !{ m.target }.typeSelect(GenDomainElementTarget).isEmpty()) ;

String exprFieldName(GenMetricRule m) : "expression" + validJavaIdentifier(m.key).toFirstUpper() ;
String calcMethodName(GenMetricRule m) : "calc" + validJavaIdentifier(m.key).toFirstUpper() ;

//
// CodeGenUtil#validJavaIdentifier()
//
String validJavaIdentifier(String identifier) :
JAVA org.eclipse.emf.codegen.util.CodeGenUtil.validJavaIdentifier(java.lang.String)
;
