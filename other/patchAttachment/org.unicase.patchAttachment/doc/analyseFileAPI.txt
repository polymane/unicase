1.)
Die ProjectSpace klasse hatte zu viele Methoden (sogar private) der File API.
Die Klasse ist sowieso schon sehr gross, hier haben kleine Interfaces oberste prioritaet.
Die Klasse hat jetzt nur noch eine getFile und addFile methode, welche die implementierung auf
eine private Klasse der file API delegieren. Alle anderen Methoden sind auch in dieser privaten klasse.
Somit wird das Interface fuer den user kleiner und er weiss genau welche Methoden er benutzen muss (da
nun nur noch 2 methoden sichtbar sind).
Das zu grosse interface hatte ich selbst am eigenen leib erfahren:
Als ich mich in die File API eingearbeitet hatte wusste ich zuerst gar nicht welche methode ich denn aufrufen
muss.
2.)
Es war zu viel Logik in der MEFileChooserControl Klasse. Diese UI Klasse sollte die API nur benutzen. Stattdessen
war ein grossteil der Logik in dieser Klasse geschrieben, was das ganze nicht wiederverwendbar machte.
Jetzt benutzt diese Klasse nur noch die Methode getFile und macht nichts mehr selbst.
3.) 
Man kann nun auch files adden auch wenn das projekt noch nicht geshared ist.
4.)
Pending file transfer wurde entfernt, da Max meinte, es sei unnoetig, das upload koennte man auch beim 
commit machen. Dadurch wird die logik der API einfacher.
5.)
Es gab einige bugs mit den pending file transfers. Z.B. konnte man ein file manchmal noch nicht runterladen,
solange es noch nicht auf den Server hochgeladen war. Dies passierte leider auch wenn man es selbst geadded hatte.
Da man das file dann aber im cache haben sollte, sollte es kein problem sein es runter zu laden.
6.)
Die FileTransferUtil Klasse war etwas gross und hatte zu verschiedene aufgaben 
(Antipattern "Hausmeisterklasse", low cohesion). Ich habe einige Methoden verteilt, zum Beispiel eine
CacheManager klasse die alle Methoden die mit lokalem file caching zusammenhaengen hat.