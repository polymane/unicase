[comment]
  Copyright 2008, 2010 Obeo
  All rights reserved.  This program and the accompanying materials
  are made available under the terms of the Eclipse Public License 1.0
  
  Any license can be applied to the files generated with this template.
  
  author <a href="mailto:stephane.bouchet@obeo.fr">Stephane Bouchet</a>
[/comment]
[module classBody('http://www.eclipse.org/uml2/2.1.0/UML')/]
[import org::unicase::papyrus::diagram::common::common/]

[template public generateClassBody(c : Class)]
public[if (c.isAbstract)] abstract[/if] class [c.normalizeName()/][for (superC : Class | c.superClass) before(' extends ') separator(', ')][superC.normalizeName()/][/for][for (interf : Interface | c.getImplementedInterfaces()) before(' implements ') separator(',')] [interf.normalizeName()/][/for] {
[for (p : Property | c.getAllAttributes())][p.propertyBody()/][/for]
[for (p : Property | c.getAllAttributes())]
[if (p.visibility <> 'private')]

	/**
	 * the [p.normalizeName()/] getter.
	 * @return the [p.normalizeName()/].
	 */
	[p.visibility/] [if (p.upper = -1 or p.upper > 1)]List<[p.type.normalizeName()/]>[else][p.type.normalizeName()/][/if] get[p.normalizeName().toUpperFirst()/]() {
		return this.[p.normalizeName()/];
	}

	/**
	 * the [p.normalizeName()/] setter.
	 * @param p_[p.normalizeName()/] the [p.normalizeName()/] to set.
	 */
	[p.visibility/] void set[p.normalizeName().toUpperFirst()/]([if (p.upper = -1 or p.upper > 1)]List<[p.type.normalizeName()/]>[else][p.type.normalizeName()/][/if] p_[p.normalizeName()/]) {
		this.[p.normalizeName()/] = p_[p.normalizeName()/];
	}
[/if]
[/for]
[for (p : Property | c.getAssociations().memberEnd)]
[if (listContains(c.getAllAttributes(), p) = false)] 
[p.propertyBody()/]
[/if]
[/for]
[for (o : Operation | c.getOperations())]
[o.operationBody()/]
[/for]
[for (interf : Interface | c.getImplementedInterfaces())]
[for (o : Operation | interf.ownedOperation)]
[o.operationBody()/]
[/for]
[/for]
}
[/template]

[template private operationBody(o : Operation)]

	/**
	 *[for (cmt : Comment | o.ownedComment)] [cmt._body/][/for]
[for (p : Parameter | o.ownedParameter) ? (p.direction <> ParameterDirectionKind::return)]
[paramOperationComment(p)/]
[/for]
[if (not o.type.oclIsUndefined())]
[returnOperationComment()/]
[/if]
	 */
	[o.visibility/] [o.returnTypeOperation()/]([o.getInParameter()/]) {
[if (not o.type.oclIsUndefined())]
	// [protected ('for operation '.concat(o.normalizeName()))]
	// TODO should be implemented
	return null;
	// [/protected]
[else]
	// [protected ('for operation '.concat(o.normalizeName()))]
	// TODO should be implemented
	// [/protected]
[/if]
	}
[/template]

[template private propertyBody(p : Property)]
[if (p.upper = -1 or p.upper > 1)]

	/**
	 * the [p.normalizeName()/] attribute.
	 */
	private List<[p.type.normalizeName()/]> [p.normalizeName()/];
[else]

	/**
	 * the [p.normalizeName()/] attribute.
	 */
	private [p.type.normalizeName()/] [p.normalizeName()/];
[/if]
[/template]