/*
 * Copyright (c) 2006,2007 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Alexander Shatalin (Borland) - initial API and implementation
 */

«IMPORT "http://www.eclipse.org/gmf/2009/GenModel"»
«IMPORT "http://www.eclipse.org/emf/2002/Ecore"»
«EXTENSION xpt::editor::Utils»

«DEFINE Editor FOR gmfgen::GenEditorView-»
	«EXPAND xpt::Common::copyright FOR editorGen-»
package «packageName»;

	«EXPAND xpt::Common::generatedClassComment»
	«REM»modified extends«ENDREM»
public class «className»  extends org.unicase.ui.unicasecommon.diagram.part.ModelDiagramEditor«EXPAND implementsList FOR getEditorImplementsList(self)» {
	«REM»END modified extends«ENDREM»
	«EXPAND attributes-»
	
	«EXPAND getContextID-»
	«EXPAND createPaletteRoot FOR editorGen.diagram.palette-»
	
	«EXPAND getPreferencesHint-»
	
	«EXPAND getContributorId-»
	«EXPAND getAdapter-»
	
	«EXPAND getDocumentProvider-»
	
	«EXPAND getEditingDomain-»
	
	«EXPAND setDocumentProvider-»
	«IF isIDEMode(self)-»
	
		«EXPAND gotoMarker-»
		
		«EXPAND isSaveAsAllowed-»
		
		«EXPAND doSaveAs-»
		
		«EXPAND performSaveAs-»
		
		«EXPAND getShowInContext-»
		«EXPAND getNavigatorSelection FOR editorGen.navigator-»
	«ENDIF-»

	«EXPAND configureGraphicalViewer-»

	«IF editorGen.diagram.generateCreateShortcutAction()-»
	
		«EXPAND initializeGraphicalViewer-»
		
		«EXPAND DropTargetListener-»
	«ENDIF-»

	«EXPAND additions-»
	
	
	«EXPAND xpt::Common::generatedMemberComment»
	public static class «editorGen.modelID»DiagramOpener extends org.unicase.ui.unicasecommon.common.diagram.DiagramOpener implements org.unicase.workspace.ui.util.ModelElementOpener { 
		«EXPAND xpt::Common::generatedMemberComment»
		@Override
		public int canOpen(org.eclipse.emf.ecore.EObject modelElement) {
			if (modelElement instanceof «editorGen.diagram.domainDiagramElement.ecoreClass.name») {			
			 org.unicase.model.diagram.MEDiagram diagram = (org.unicase.model.diagram.MEDiagram) modelElement;

			return 1;
			 }
	
		return 0;
		}
	
		«EXPAND xpt::Common::generatedMemberComment»
		@Override
		public void openModelElement(org.eclipse.emf.ecore.EObject modelElement) {
			if (modelElement instanceof org.unicase.model.diagram.MEDiagram) {
			org.unicase.model.diagram.MEDiagram diagram = (org.unicase.model.diagram.MEDiagram) modelElement;
			super.openDiagram(diagram, "«editorGen.editor.iD»");
		} else {
			throw new IllegalArgumentException("Opener only applicable for MEDiagrams");
		}
	}
	}
	«EXPAND xpt::Common::generatedMemberComment»
	public static class «editorGen.modelID»DiagramTypeTester extends org.unicase.ui.unicasecommon.diagram.part.DiagramTypeTester  {
	
		«EXPAND xpt::Common::generatedMemberComment»
		@Override
		public boolean test(Object receiver, String property, Object[] args, Object expectedValue){
			if(receiver instanceof org.unicase.model.diagram.MEDiagram){
				return super.test(receiver, property, args, expectedValue);
			}
			org.eclipse.gmf.runtime.notation.View view = null;
			org.eclipse.ui.IEditorPart iep = org.eclipse.ui.PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().getActiveEditor();
			if(iep instanceof org.eclipse.gmf.runtime.diagram.ui.resources.editor.parts.DiagramDocumentEditor){
				org.eclipse.gmf.runtime.diagram.ui.resources.editor.parts.DiagramDocumentEditor dde = (org.eclipse.gmf.runtime.diagram.ui.resources.editor.parts.DiagramDocumentEditor) iep;
				org.eclipse.gmf.runtime.diagram.ui.editparts.DiagramEditPart editPart = dde.getDiagramEditPart();
				view = org.unicase.ui.unicasecommon.diagram.util.EditPartUtility.getView(editPart);
			}
			if(«editorGen.modelID»VisualIDRegistry.getNodeVisualID(view, (org.eclipse.emf.ecore.EObject)receiver) != -1){
				return true;
			}
			return false;
		}
	
	}
	
}
«ENDDEFINE»