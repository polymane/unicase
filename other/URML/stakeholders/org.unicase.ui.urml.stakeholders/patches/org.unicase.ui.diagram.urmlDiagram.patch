Index: .project
===================================================================
--- .project	(revision 12229)
+++ .project	(working copy)
@@ -20,15 +20,9 @@
 			<arguments>
 			</arguments>
 		</buildCommand>
-		<buildCommand>
-			<name>com.atlassw.tools.eclipse.checkstyle.CheckstyleBuilder</name>
-			<arguments>
-			</arguments>
-		</buildCommand>
 	</buildSpec>
 	<natures>
 		<nature>org.eclipse.jdt.core.javanature</nature>
 		<nature>org.eclipse.pde.PluginNature</nature>
-		<nature>com.atlassw.tools.eclipse.checkstyle.CheckstyleNature</nature>
 	</natures>
 </projectDescription>
Index: icons/danger.jpg
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: icons/nonfunctionalrequirement.jpg
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: icons/service.jpg
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: icons/serviceprovider.jpg
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: icons/goal.jpg
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: icons/proceduralmitigation.jpg
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: icons/product.jpg
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: icons/functionalrequirement.jpg
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: icons/feature.jpg
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: icons/actor.jpg
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: icons/stakeholder.jpg
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: plugin.properties
===================================================================
--- plugin.properties	(revision 12229)
+++ plugin.properties	(working copy)
@@ -71,3 +71,4 @@
 # Commands and menu actions
 cmdcategory.name=Urml Editor Commands
 cmdcategory.desc=Urml Editor Commands
+metatype.name.UrmlModelElementAssociations_4048="associated to" Link
Index: plugin.xml
===================================================================
--- plugin.xml	(revision 12229)
+++ plugin.xml	(working copy)
@@ -1,6 +1,7 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <?eclipse version="3.0"?>
 <plugin>
+   <extension-point id="filters" name="URML Diagram Filters" schema="schema/org.unicase.ui.diagram.urmlDiagram.filters.exsd"/>
 
    <extension point="org.eclipse.team.core.fileTypes" id="repo-ftype">
       <?gmfgen generated="true"?>
@@ -151,7 +152,7 @@
          <Priority name="Lowest"/>
          <context viewClass="org.eclipse.gmf.runtime.notation.Diagram" semanticHints="Urml"/>
          <context viewClass="org.eclipse.gmf.runtime.notation.Node" semanticHints="2002,2001,2006,2012,2007,2008,2009,2010,2011,2013,2014,2015"/>
-         <context viewClass="org.eclipse.gmf.runtime.notation.Edge" semanticHints="4008,4034,4035,4036,4045,4038,4004,4018,4016,4023,4024,4025,4005,4043,4044,4012,4013,4017,4022,4046,4033,4040,4032,4047"/>
+         <context viewClass="org.eclipse.gmf.runtime.notation.Edge" semanticHints="4008,4034,4035,4036,4045,4038,4004,4018,4016,4023,4024,4025,4005,4043,4044,4012,4013,4017,4022,4046,4033,4040,4032,4047,4048"/>
       </viewProvider>
    </extension>
 
@@ -166,7 +167,7 @@
             <method name="getType()" value="2002,2001,2006,2012,2007,2008,2009,2010,2011,2013,2014,2015"/>
          </object>
          <object class="org.eclipse.gmf.runtime.notation.Edge" id="generated-links">
-            <method name="getType()" value="4008,4034,4035,4036,4045,4038,4004,4018,4016,4023,4024,4025,4005,4043,4044,4012,4013,4017,4022,4046,4033,4040,4032,4047"/>
+            <method name="getType()" value="4008,4034,4035,4036,4045,4038,4004,4018,4016,4023,4024,4025,4005,4043,4044,4012,4013,4017,4022,4046,4033,4040,4032,4047,4048"/>
          </object>
          <object class="org.eclipse.gmf.runtime.notation.Node" id="generated-labels">
             <method name="getType()" value="5008,5009,5010,5011,5002,5003,5004,5005,5006,5012,5013,5014"/>
@@ -562,6 +563,15 @@
             <param name="semanticHint" value="4047"/>
          </specializationType>
       </metamodel>
+      <metamodel nsURI="http://unicase.org/model/urml">
+         <specializationType
+               id="org.unicase.ui.diagram.urmlDiagram.UrmlModelElementAssociations_4048"
+               name="%metatype.name.UrmlModelElementAssociations_4048"
+               kind="org.eclipse.gmf.runtime.emf.type.core.IHintedType">
+            <specializes id="org.eclipse.gmf.runtime.emf.type.core.null"/>
+            <param name="semanticHint" value="4048"/>
+         </specializationType>
+      </metamodel>
    </extension>
 
    <extension point="org.eclipse.gmf.runtime.emf.type.core.elementTypeBindings" id="element-types-bindings">
@@ -611,6 +621,7 @@
          <elementType ref="org.unicase.ui.diagram.urmlDiagram.VariationPointInstanceSelectedFeatures_4040"/>
          <elementType ref="org.unicase.ui.diagram.urmlDiagram.ProductVariationPointInstances_4032"/>
          <elementType ref="org.unicase.ui.diagram.urmlDiagram.ProductFeatures_4047"/>
+         <elementType ref="org.unicase.ui.diagram.urmlDiagram.UrmlModelElementAssociations_4048"/>
          <advice ref="org.eclipse.gmf.runtime.diagram.core.advice.notationDepdendents"/>
       </binding>
    </extension>
Index: src/org/unicase/ui/diagram/urml/sheet/UrmlSheetLabelProvider.java
===================================================================
--- src/org/unicase/ui/diagram/urml/sheet/UrmlSheetLabelProvider.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/sheet/UrmlSheetLabelProvider.java	(working copy)
@@ -14,7 +14,8 @@
 /**
  * @generated
  */
-public class UrmlSheetLabelProvider extends BaseLabelProvider implements ILabelProvider {
+public class UrmlSheetLabelProvider extends BaseLabelProvider implements
+		ILabelProvider {
 
 	/**
 	 * @generated
@@ -70,7 +71,8 @@
 			if (etype != null) {
 				return etype;
 			}
-			view = view.eContainer() instanceof View ? (View) view.eContainer() : null;
+			view = view.eContainer() instanceof View ? (View) view.eContainer()
+					: null;
 		}
 		return null;
 	}
Index: src/org/unicase/ui/diagram/urml/sheet/UrmlPropertySection.java
===================================================================
--- src/org/unicase/ui/diagram/urml/sheet/UrmlPropertySection.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/sheet/UrmlPropertySection.java	(working copy)
@@ -22,7 +22,8 @@
 /**
  * @generated
  */
-public class UrmlPropertySection extends AdvancedPropertySection implements IPropertySourceProvider {
+public class UrmlPropertySection extends AdvancedPropertySection implements
+		IPropertySourceProvider {
 
 	/**
 	 * @generated
@@ -33,13 +34,15 @@
 		}
 		AdapterFactory af = getAdapterFactory(object);
 		if (af != null) {
-			IItemPropertySource ips = (IItemPropertySource) af.adapt(object, IItemPropertySource.class);
+			IItemPropertySource ips = (IItemPropertySource) af.adapt(object,
+					IItemPropertySource.class);
 			if (ips != null) {
 				return new PropertySource(object, ips);
 			}
 		}
 		if (object instanceof IAdaptable) {
-			return (IPropertySource) ((IAdaptable) object).getAdapter(IPropertySource.class);
+			return (IPropertySource) ((IAdaptable) object)
+					.getAdapter(IPropertySource.class);
 		}
 		return null;
 	}
@@ -78,12 +81,14 @@
 	 * @generated
 	 */
 	public void setInput(IWorkbenchPart part, ISelection selection) {
-		if (selection.isEmpty() || false == selection instanceof StructuredSelection) {
+		if (selection.isEmpty()
+				|| false == selection instanceof StructuredSelection) {
 			super.setInput(part, selection);
 			return;
 		}
 		final StructuredSelection structuredSelection = ((StructuredSelection) selection);
-		ArrayList transformedSelection = new ArrayList(structuredSelection.size());
+		ArrayList transformedSelection = new ArrayList(
+				structuredSelection.size());
 		for (Iterator it = structuredSelection.iterator(); it.hasNext();) {
 			Object r = transformSelection(it.next());
 			if (r != null) {
@@ -98,11 +103,14 @@
 	 */
 	protected AdapterFactory getAdapterFactory(Object object) {
 		if (getEditingDomain() instanceof AdapterFactoryEditingDomain) {
-			return ((AdapterFactoryEditingDomain) getEditingDomain()).getAdapterFactory();
+			return ((AdapterFactoryEditingDomain) getEditingDomain())
+					.getAdapterFactory();
 		}
-		TransactionalEditingDomain editingDomain = TransactionUtil.getEditingDomain(object);
+		TransactionalEditingDomain editingDomain = TransactionUtil
+				.getEditingDomain(object);
 		if (editingDomain != null) {
-			return ((AdapterFactoryEditingDomain) editingDomain).getAdapterFactory();
+			return ((AdapterFactoryEditingDomain) editingDomain)
+					.getAdapterFactory();
 		}
 		return null;
 	}
Index: src/org/unicase/ui/diagram/urml/edit/policies/GoalRealizedFeaturesItemSemanticEditPolicy.java
===================================================================
--- src/org/unicase/ui/diagram/urml/edit/policies/GoalRealizedFeaturesItemSemanticEditPolicy.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/edit/policies/GoalRealizedFeaturesItemSemanticEditPolicy.java	(working copy)
@@ -8,7 +8,8 @@
 /**
  * @generated
  */
-public class GoalRealizedFeaturesItemSemanticEditPolicy extends UrmlBaseItemSemanticEditPolicy {
+public class GoalRealizedFeaturesItemSemanticEditPolicy extends
+		UrmlBaseItemSemanticEditPolicy {
 
 	/**
 	 * @generated
Index: src/org/unicase/ui/diagram/urml/edit/policies/ActorItemSemanticEditPolicy.java
===================================================================
--- src/org/unicase/ui/diagram/urml/edit/policies/ActorItemSemanticEditPolicy.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/edit/policies/ActorItemSemanticEditPolicy.java	(working copy)
@@ -18,8 +18,11 @@
 import org.unicase.ui.diagram.urml.edit.commands.AssetTriggeredDangersReorientCommand;
 import org.unicase.ui.diagram.urml.edit.commands.DangerHarmedAssetsCreateCommand;
 import org.unicase.ui.diagram.urml.edit.commands.DangerHarmedAssetsReorientCommand;
+import org.unicase.ui.diagram.urml.edit.commands.UrmlModelElementAssociationsCreateCommand;
+import org.unicase.ui.diagram.urml.edit.commands.UrmlModelElementAssociationsReorientCommand;
 import org.unicase.ui.diagram.urml.edit.parts.AssetTriggeredDangersEditPart;
 import org.unicase.ui.diagram.urml.edit.parts.DangerHarmedAssetsEditPart;
+import org.unicase.ui.diagram.urml.edit.parts.UrmlModelElementAssociationsEditPart;
 import org.unicase.ui.diagram.urml.part.UrmlVisualIDRegistry;
 import org.unicase.ui.diagram.urml.providers.UrmlElementTypes;
 
@@ -40,23 +43,42 @@
 	 */
 	protected Command getDestroyElementCommand(DestroyElementRequest req) {
 		View view = (View) getHost().getModel();
-		CompositeTransactionalCommand cmd = new CompositeTransactionalCommand(getEditingDomain(), null);
+		CompositeTransactionalCommand cmd = new CompositeTransactionalCommand(
+				getEditingDomain(), null);
 		cmd.setTransactionNestingEnabled(false);
-		for (Iterator it = view.getTargetEdges().iterator(); it.hasNext();) {
+		for (Iterator<?> it = view.getTargetEdges().iterator(); it.hasNext();) {
 			Edge incomingLink = (Edge) it.next();
 			if (UrmlVisualIDRegistry.getVisualID(incomingLink) == DangerHarmedAssetsEditPart.VISUAL_ID) {
-				DestroyReferenceRequest r = new DestroyReferenceRequest(incomingLink.getSource().getElement(), null,
-					incomingLink.getTarget().getElement(), false);
+				DestroyReferenceRequest r = new DestroyReferenceRequest(
+						incomingLink.getSource().getElement(), null,
+						incomingLink.getTarget().getElement(), false);
+				cmd.add(new DestroyReferenceCommand(r));
+				cmd.add(new DeleteCommand(getEditingDomain(), incomingLink));
+				continue;
+			}
+			if (UrmlVisualIDRegistry.getVisualID(incomingLink) == UrmlModelElementAssociationsEditPart.VISUAL_ID) {
+				DestroyReferenceRequest r = new DestroyReferenceRequest(
+						incomingLink.getSource().getElement(), null,
+						incomingLink.getTarget().getElement(), false);
 				cmd.add(new DestroyReferenceCommand(r));
 				cmd.add(new DeleteCommand(getEditingDomain(), incomingLink));
 				continue;
 			}
 		}
-		for (Iterator it = view.getSourceEdges().iterator(); it.hasNext();) {
+		for (Iterator<?> it = view.getSourceEdges().iterator(); it.hasNext();) {
 			Edge outgoingLink = (Edge) it.next();
 			if (UrmlVisualIDRegistry.getVisualID(outgoingLink) == AssetTriggeredDangersEditPart.VISUAL_ID) {
-				DestroyReferenceRequest r = new DestroyReferenceRequest(outgoingLink.getSource().getElement(), null,
-					outgoingLink.getTarget().getElement(), false);
+				DestroyReferenceRequest r = new DestroyReferenceRequest(
+						outgoingLink.getSource().getElement(), null,
+						outgoingLink.getTarget().getElement(), false);
+				cmd.add(new DestroyReferenceCommand(r));
+				cmd.add(new DeleteCommand(getEditingDomain(), outgoingLink));
+				continue;
+			}
+			if (UrmlVisualIDRegistry.getVisualID(outgoingLink) == UrmlModelElementAssociationsEditPart.VISUAL_ID) {
+				DestroyReferenceRequest r = new DestroyReferenceRequest(
+						outgoingLink.getSource().getElement(), null,
+						outgoingLink.getTarget().getElement(), false);
 				cmd.add(new DestroyReferenceCommand(r));
 				cmd.add(new DeleteCommand(getEditingDomain(), outgoingLink));
 				continue;
@@ -79,19 +101,27 @@
 	 */
 	protected Command getCreateRelationshipCommand(CreateRelationshipRequest req) {
 		Command command = req.getTarget() == null ? getStartCreateRelationshipCommand(req)
-			: getCompleteCreateRelationshipCommand(req);
-		return command != null ? command : super.getCreateRelationshipCommand(req);
+				: getCompleteCreateRelationshipCommand(req);
+		return command != null ? command : super
+				.getCreateRelationshipCommand(req);
 	}
 
 	/**
 	 * @generated
 	 */
-	protected Command getStartCreateRelationshipCommand(CreateRelationshipRequest req) {
+	protected Command getStartCreateRelationshipCommand(
+			CreateRelationshipRequest req) {
 		if (UrmlElementTypes.DangerHarmedAssets_4013 == req.getElementType()) {
 			return null;
 		}
 		if (UrmlElementTypes.AssetTriggeredDangers_4017 == req.getElementType()) {
-			return getGEFWrapper(new AssetTriggeredDangersCreateCommand(req, req.getSource(), req.getTarget()));
+			return getGEFWrapper(new AssetTriggeredDangersCreateCommand(req,
+					req.getSource(), req.getTarget()));
+		}
+		if (UrmlElementTypes.UrmlModelElementAssociations_4048 == req
+				.getElementType()) {
+			return getGEFWrapper(new UrmlModelElementAssociationsCreateCommand(
+					req, req.getSource(), req.getTarget()));
 		}
 		return null;
 	}
@@ -99,13 +129,20 @@
 	/**
 	 * @generated
 	 */
-	protected Command getCompleteCreateRelationshipCommand(CreateRelationshipRequest req) {
+	protected Command getCompleteCreateRelationshipCommand(
+			CreateRelationshipRequest req) {
 		if (UrmlElementTypes.DangerHarmedAssets_4013 == req.getElementType()) {
-			return getGEFWrapper(new DangerHarmedAssetsCreateCommand(req, req.getSource(), req.getTarget()));
+			return getGEFWrapper(new DangerHarmedAssetsCreateCommand(req,
+					req.getSource(), req.getTarget()));
 		}
 		if (UrmlElementTypes.AssetTriggeredDangers_4017 == req.getElementType()) {
 			return null;
 		}
+		if (UrmlElementTypes.UrmlModelElementAssociations_4048 == req
+				.getElementType()) {
+			return getGEFWrapper(new UrmlModelElementAssociationsCreateCommand(
+					req, req.getSource(), req.getTarget()));
+		}
 		return null;
 	}
 
@@ -115,12 +152,16 @@
 	 * 
 	 * @generated
 	 */
-	protected Command getReorientReferenceRelationshipCommand(ReorientReferenceRelationshipRequest req) {
+	protected Command getReorientReferenceRelationshipCommand(
+			ReorientReferenceRelationshipRequest req) {
 		switch (getVisualID(req)) {
 		case DangerHarmedAssetsEditPart.VISUAL_ID:
 			return getGEFWrapper(new DangerHarmedAssetsReorientCommand(req));
 		case AssetTriggeredDangersEditPart.VISUAL_ID:
 			return getGEFWrapper(new AssetTriggeredDangersReorientCommand(req));
+		case UrmlModelElementAssociationsEditPart.VISUAL_ID:
+			return getGEFWrapper(new UrmlModelElementAssociationsReorientCommand(
+					req));
 		}
 		return super.getReorientReferenceRelationshipCommand(req);
 	}
Index: src/org/unicase/ui/diagram/urml/edit/policies/GoalReference2ItemSemanticEditPolicy.java
===================================================================
--- src/org/unicase/ui/diagram/urml/edit/policies/GoalReference2ItemSemanticEditPolicy.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/edit/policies/GoalReference2ItemSemanticEditPolicy.java	(working copy)
@@ -2,13 +2,19 @@
 
 import org.eclipse.gef.commands.Command;
 import org.eclipse.gmf.runtime.emf.type.core.commands.DestroyElementCommand;
+import org.eclipse.gmf.runtime.emf.type.core.requests.CreateRelationshipRequest;
 import org.eclipse.gmf.runtime.emf.type.core.requests.DestroyElementRequest;
+import org.eclipse.gmf.runtime.emf.type.core.requests.ReorientReferenceRelationshipRequest;
+import org.unicase.ui.diagram.urml.edit.commands.UrmlModelElementAssociationsCreateCommand;
+import org.unicase.ui.diagram.urml.edit.commands.UrmlModelElementAssociationsReorientCommand;
+import org.unicase.ui.diagram.urml.edit.parts.UrmlModelElementAssociationsEditPart;
 import org.unicase.ui.diagram.urml.providers.UrmlElementTypes;
 
 /**
  * @generated
  */
-public class GoalReference2ItemSemanticEditPolicy extends UrmlBaseItemSemanticEditPolicy {
+public class GoalReference2ItemSemanticEditPolicy extends
+		UrmlBaseItemSemanticEditPolicy {
 
 	/**
 	 * @generated
@@ -24,4 +30,56 @@
 		return getGEFWrapper(new DestroyElementCommand(req));
 	}
 
+	/**
+	 * @generated
+	 */
+	protected Command getCreateRelationshipCommand(CreateRelationshipRequest req) {
+		Command command = req.getTarget() == null ? getStartCreateRelationshipCommand(req)
+				: getCompleteCreateRelationshipCommand(req);
+		return command != null ? command : super
+				.getCreateRelationshipCommand(req);
+	}
+
+	/**
+	 * @generated
+	 */
+	protected Command getStartCreateRelationshipCommand(
+			CreateRelationshipRequest req) {
+		if (UrmlElementTypes.UrmlModelElementAssociations_4048 == req
+				.getElementType()) {
+			return getGEFWrapper(new UrmlModelElementAssociationsCreateCommand(
+					req, req.getSource(), req.getTarget()));
+		}
+		return null;
+	}
+
+	/**
+	 * @generated
+	 */
+	protected Command getCompleteCreateRelationshipCommand(
+			CreateRelationshipRequest req) {
+		if (UrmlElementTypes.UrmlModelElementAssociations_4048 == req
+				.getElementType()) {
+			return getGEFWrapper(new UrmlModelElementAssociationsCreateCommand(
+					req, req.getSource(), req.getTarget()));
+		}
+		return null;
+	}
+
+	/**
+	 * Returns command to reorient EReference based link. New link target or source
+	 * should be the domain model element associated with this node.
+	 * 
+	 * @generated
+	 */
+	protected Command getReorientReferenceRelationshipCommand(
+			ReorientReferenceRelationshipRequest req) {
+		switch (getVisualID(req)) {
+		case UrmlModelElementAssociationsEditPart.VISUAL_ID:
+			return getGEFWrapper(new UrmlModelElementAssociationsReorientCommand(
+					req));
+		}
+		return super.getReorientReferenceRelationshipCommand(req);
+	}
+
 }
Index: src/org/unicase/ui/diagram/urml/edit/policies/UrmlModelElementAssociationsItemSemanticEditPolicy.java
===================================================================
--- src/org/unicase/ui/diagram/urml/edit/policies/UrmlModelElementAssociationsItemSemanticEditPolicy.java	(revision 0)
+++ src/org/unicase/ui/diagram/urml/edit/policies/UrmlModelElementAssociationsItemSemanticEditPolicy.java	(revision 0)
@@ -0,0 +1,28 @@
+package org.unicase.ui.diagram.urml.edit.policies;
+
+import org.eclipse.gef.commands.Command;
+import org.eclipse.gmf.runtime.emf.type.core.commands.DestroyReferenceCommand;
+import org.eclipse.gmf.runtime.emf.type.core.requests.DestroyReferenceRequest;
+import org.unicase.ui.diagram.urml.providers.UrmlElementTypes;
+
+/**
+ * @generated
+ */
+public class UrmlModelElementAssociationsItemSemanticEditPolicy extends
+		UrmlBaseItemSemanticEditPolicy {
+
+	/**
+	 * @generated
+	 */
+	public UrmlModelElementAssociationsItemSemanticEditPolicy() {
+		super(UrmlElementTypes.UrmlModelElementAssociations_4048);
+	}
+
+	/**
+	 * @generated
+	 */
+	protected Command getDestroyReferenceCommand(DestroyReferenceRequest req) {
+		return getGEFWrapper(new DestroyReferenceCommand(req));
+	}
+
+}
Index: src/org/unicase/ui/diagram/urml/edit/policies/GoalReference4ItemSemanticEditPolicy.java
===================================================================
--- src/org/unicase/ui/diagram/urml/edit/policies/GoalReference4ItemSemanticEditPolicy.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/edit/policies/GoalReference4ItemSemanticEditPolicy.java	(working copy)
@@ -2,13 +2,19 @@
 
 import org.eclipse.gef.commands.Command;
 import org.eclipse.gmf.runtime.emf.type.core.commands.DestroyElementCommand;
+import org.eclipse.gmf.runtime.emf.type.core.requests.CreateRelationshipRequest;
 import org.eclipse.gmf.runtime.emf.type.core.requests.DestroyElementRequest;
+import org.eclipse.gmf.runtime.emf.type.core.requests.ReorientReferenceRelationshipRequest;
+import org.unicase.ui.diagram.urml.edit.commands.UrmlModelElementAssociationsCreateCommand;
+import org.unicase.ui.diagram.urml.edit.commands.UrmlModelElementAssociationsReorientCommand;
+import org.unicase.ui.diagram.urml.edit.parts.UrmlModelElementAssociationsEditPart;
 import org.unicase.ui.diagram.urml.providers.UrmlElementTypes;
 
 /**
  * @generated
  */
-public class GoalReference4ItemSemanticEditPolicy extends UrmlBaseItemSemanticEditPolicy {
+public class GoalReference4ItemSemanticEditPolicy extends
+		UrmlBaseItemSemanticEditPolicy {
 
 	/**
 	 * @generated
@@ -24,4 +30,56 @@
 		return getGEFWrapper(new DestroyElementCommand(req));
 	}
 
+	/**
+	 * @generated
+	 */
+	protected Command getCreateRelationshipCommand(CreateRelationshipRequest req) {
+		Command command = req.getTarget() == null ? getStartCreateRelationshipCommand(req)
+				: getCompleteCreateRelationshipCommand(req);
+		return command != null ? command : super
+				.getCreateRelationshipCommand(req);
+	}
+
+	/**
+	 * @generated
+	 */
+	protected Command getStartCreateRelationshipCommand(
+			CreateRelationshipRequest req) {
+		if (UrmlElementTypes.UrmlModelElementAssociations_4048 == req
+				.getElementType()) {
+			return getGEFWrapper(new UrmlModelElementAssociationsCreateCommand(
+					req, req.getSource(), req.getTarget()));
+		}
+		return null;
+	}
+
+	/**
+	 * @generated
+	 */
+	protected Command getCompleteCreateRelationshipCommand(
+			CreateRelationshipRequest req) {
+		if (UrmlElementTypes.UrmlModelElementAssociations_4048 == req
+				.getElementType()) {
+			return getGEFWrapper(new UrmlModelElementAssociationsCreateCommand(
+					req, req.getSource(), req.getTarget()));
+		}
+		return null;
+	}
+
+	/**
+	 * Returns command to reorient EReference based link. New link target or source
+	 * should be the domain model element associated with this node.
+	 * 
+	 * @generated
+	 */
+	protected Command getReorientReferenceRelationshipCommand(
+			ReorientReferenceRelationshipRequest req) {
+		switch (getVisualID(req)) {
+		case UrmlModelElementAssociationsEditPart.VISUAL_ID:
+			return getGEFWrapper(new UrmlModelElementAssociationsReorientCommand(
+					req));
+		}
+		return super.getReorientReferenceRelationshipCommand(req);
+	}
+
 }
Index: src/org/unicase/ui/diagram/urml/edit/policies/FunctionalRequirementSubFunctionalRequirementsItemSemanticEditPolicy.java
===================================================================
--- src/org/unicase/ui/diagram/urml/edit/policies/FunctionalRequirementSubFunctionalRequirementsItemSemanticEditPolicy.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/edit/policies/FunctionalRequirementSubFunctionalRequirementsItemSemanticEditPolicy.java	(working copy)
@@ -14,14 +14,15 @@
 /**
  * @generated
  */
-public class FunctionalRequirementSubFunctionalRequirementsItemSemanticEditPolicy extends
-	UrmlBaseItemSemanticEditPolicy {
+public class FunctionalRequirementSubFunctionalRequirementsItemSemanticEditPolicy
+		extends UrmlBaseItemSemanticEditPolicy {
 
 	/**
 	 * @generated
 	 */
 	public FunctionalRequirementSubFunctionalRequirementsItemSemanticEditPolicy() {
-		super(UrmlElementTypes.FunctionalRequirementSubFunctionalRequirements_4044);
+		super(
+				UrmlElementTypes.FunctionalRequirementSubFunctionalRequirements_4044);
 	}
 
 	/**
@@ -29,11 +30,13 @@
 	 */
 	protected Command getDestroyReferenceCommand(DestroyReferenceRequest req) {
 		return getGEFWrapper(new DestroyReferenceCommand(req) {
-			protected CommandResult doExecuteWithResult(IProgressMonitor progressMonitor, IAdaptable info)
-				throws ExecutionException {
+			protected CommandResult doExecuteWithResult(
+					IProgressMonitor progressMonitor, IAdaptable info)
+					throws ExecutionException {
 				EObject referencedObject = getReferencedObject();
 				Resource resource = referencedObject.eResource();
-				CommandResult result = super.doExecuteWithResult(progressMonitor, info);
+				CommandResult result = super.doExecuteWithResult(
+						progressMonitor, info);
 				if (resource != null) {
 					resource.getContents().add(referencedObject);
 				}
Index: src/org/unicase/ui/diagram/urml/edit/policies/VariationPointInstanceSelectedFeaturesItemSemanticEditPolicy.java
===================================================================
--- src/org/unicase/ui/diagram/urml/edit/policies/VariationPointInstanceSelectedFeaturesItemSemanticEditPolicy.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/edit/policies/VariationPointInstanceSelectedFeaturesItemSemanticEditPolicy.java	(working copy)
@@ -8,7 +8,8 @@
 /**
  * @generated
  */
-public class VariationPointInstanceSelectedFeaturesItemSemanticEditPolicy extends UrmlBaseItemSemanticEditPolicy {
+public class VariationPointInstanceSelectedFeaturesItemSemanticEditPolicy
+		extends UrmlBaseItemSemanticEditPolicy {
 
 	/**
 	 * @generated
Index: src/org/unicase/ui/diagram/urml/edit/policies/RequirementImplementingServicesItemSemanticEditPolicy.java
===================================================================
--- src/org/unicase/ui/diagram/urml/edit/policies/RequirementImplementingServicesItemSemanticEditPolicy.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/edit/policies/RequirementImplementingServicesItemSemanticEditPolicy.java	(working copy)
@@ -8,7 +8,8 @@
 /**
  * @generated
  */
-public class RequirementImplementingServicesItemSemanticEditPolicy extends UrmlBaseItemSemanticEditPolicy {
+public class RequirementImplementingServicesItemSemanticEditPolicy extends
+		UrmlBaseItemSemanticEditPolicy {
 
 	/**
 	 * @generated
Index: src/org/unicase/ui/diagram/urml/edit/policies/ProductItemSemanticEditPolicy.java
===================================================================
--- src/org/unicase/ui/diagram/urml/edit/policies/ProductItemSemanticEditPolicy.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/edit/policies/ProductItemSemanticEditPolicy.java	(working copy)
@@ -18,15 +18,19 @@
 import org.unicase.ui.diagram.urml.edit.commands.ProductFeaturesReorientCommand;
 import org.unicase.ui.diagram.urml.edit.commands.ProductVariationPointInstancesCreateCommand;
 import org.unicase.ui.diagram.urml.edit.commands.ProductVariationPointInstancesReorientCommand;
+import org.unicase.ui.diagram.urml.edit.commands.UrmlModelElementAssociationsCreateCommand;
+import org.unicase.ui.diagram.urml.edit.commands.UrmlModelElementAssociationsReorientCommand;
 import org.unicase.ui.diagram.urml.edit.parts.ProductFeaturesEditPart;
 import org.unicase.ui.diagram.urml.edit.parts.ProductVariationPointInstancesEditPart;
+import org.unicase.ui.diagram.urml.edit.parts.UrmlModelElementAssociationsEditPart;
 import org.unicase.ui.diagram.urml.part.UrmlVisualIDRegistry;
 import org.unicase.ui.diagram.urml.providers.UrmlElementTypes;
 
 /**
  * @generated
  */
-public class ProductItemSemanticEditPolicy extends UrmlBaseItemSemanticEditPolicy {
+public class ProductItemSemanticEditPolicy extends
+		UrmlBaseItemSemanticEditPolicy {
 
 	/**
 	 * @generated
@@ -40,20 +44,42 @@
 	 */
 	protected Command getDestroyElementCommand(DestroyElementRequest req) {
 		View view = (View) getHost().getModel();
-		CompositeTransactionalCommand cmd = new CompositeTransactionalCommand(getEditingDomain(), null);
+		CompositeTransactionalCommand cmd = new CompositeTransactionalCommand(
+				getEditingDomain(), null);
 		cmd.setTransactionNestingEnabled(false);
-		for (Iterator it = view.getSourceEdges().iterator(); it.hasNext();) {
+		for (Iterator<?> it = view.getTargetEdges().iterator(); it.hasNext();) {
+			Edge incomingLink = (Edge) it.next();
+			if (UrmlVisualIDRegistry.getVisualID(incomingLink) == UrmlModelElementAssociationsEditPart.VISUAL_ID) {
+				DestroyReferenceRequest r = new DestroyReferenceRequest(
+						incomingLink.getSource().getElement(), null,
+						incomingLink.getTarget().getElement(), false);
+				cmd.add(new DestroyReferenceCommand(r));
+				cmd.add(new DeleteCommand(getEditingDomain(), incomingLink));
+				continue;
+			}
+		}
+		for (Iterator<?> it = view.getSourceEdges().iterator(); it.hasNext();) {
 			Edge outgoingLink = (Edge) it.next();
 			if (UrmlVisualIDRegistry.getVisualID(outgoingLink) == ProductVariationPointInstancesEditPart.VISUAL_ID) {
-				DestroyReferenceRequest r = new DestroyReferenceRequest(outgoingLink.getSource().getElement(), null,
-					outgoingLink.getTarget().getElement(), false);
+				DestroyReferenceRequest r = new DestroyReferenceRequest(
+						outgoingLink.getSource().getElement(), null,
+						outgoingLink.getTarget().getElement(), false);
 				cmd.add(new DestroyReferenceCommand(r));
 				cmd.add(new DeleteCommand(getEditingDomain(), outgoingLink));
 				continue;
 			}
 			if (UrmlVisualIDRegistry.getVisualID(outgoingLink) == ProductFeaturesEditPart.VISUAL_ID) {
-				DestroyReferenceRequest r = new DestroyReferenceRequest(outgoingLink.getSource().getElement(), null,
-					outgoingLink.getTarget().getElement(), false);
+				DestroyReferenceRequest r = new DestroyReferenceRequest(
+						outgoingLink.getSource().getElement(), null,
+						outgoingLink.getTarget().getElement(), false);
+				cmd.add(new DestroyReferenceCommand(r));
+				cmd.add(new DeleteCommand(getEditingDomain(), outgoingLink));
+				continue;
+			}
+			if (UrmlVisualIDRegistry.getVisualID(outgoingLink) == UrmlModelElementAssociationsEditPart.VISUAL_ID) {
+				DestroyReferenceRequest r = new DestroyReferenceRequest(
+						outgoingLink.getSource().getElement(), null,
+						outgoingLink.getTarget().getElement(), false);
 				cmd.add(new DestroyReferenceCommand(r));
 				cmd.add(new DeleteCommand(getEditingDomain(), outgoingLink));
 				continue;
@@ -76,19 +102,29 @@
 	 */
 	protected Command getCreateRelationshipCommand(CreateRelationshipRequest req) {
 		Command command = req.getTarget() == null ? getStartCreateRelationshipCommand(req)
-			: getCompleteCreateRelationshipCommand(req);
-		return command != null ? command : super.getCreateRelationshipCommand(req);
+				: getCompleteCreateRelationshipCommand(req);
+		return command != null ? command : super
+				.getCreateRelationshipCommand(req);
 	}
 
 	/**
 	 * @generated
 	 */
-	protected Command getStartCreateRelationshipCommand(CreateRelationshipRequest req) {
-		if (UrmlElementTypes.ProductVariationPointInstances_4032 == req.getElementType()) {
-			return getGEFWrapper(new ProductVariationPointInstancesCreateCommand(req, req.getSource(), req.getTarget()));
+	protected Command getStartCreateRelationshipCommand(
+			CreateRelationshipRequest req) {
+		if (UrmlElementTypes.ProductVariationPointInstances_4032 == req
+				.getElementType()) {
+			return getGEFWrapper(new ProductVariationPointInstancesCreateCommand(
+					req, req.getSource(), req.getTarget()));
 		}
 		if (UrmlElementTypes.ProductFeatures_4047 == req.getElementType()) {
-			return getGEFWrapper(new ProductFeaturesCreateCommand(req, req.getSource(), req.getTarget()));
+			return getGEFWrapper(new ProductFeaturesCreateCommand(req,
+					req.getSource(), req.getTarget()));
+		}
+		if (UrmlElementTypes.UrmlModelElementAssociations_4048 == req
+				.getElementType()) {
+			return getGEFWrapper(new UrmlModelElementAssociationsCreateCommand(
+					req, req.getSource(), req.getTarget()));
 		}
 		return null;
 	}
@@ -96,13 +132,20 @@
 	/**
 	 * @generated
 	 */
-	protected Command getCompleteCreateRelationshipCommand(CreateRelationshipRequest req) {
-		if (UrmlElementTypes.ProductVariationPointInstances_4032 == req.getElementType()) {
+	protected Command getCompleteCreateRelationshipCommand(
+			CreateRelationshipRequest req) {
+		if (UrmlElementTypes.ProductVariationPointInstances_4032 == req
+				.getElementType()) {
 			return null;
 		}
 		if (UrmlElementTypes.ProductFeatures_4047 == req.getElementType()) {
 			return null;
 		}
+		if (UrmlElementTypes.UrmlModelElementAssociations_4048 == req
+				.getElementType()) {
+			return getGEFWrapper(new UrmlModelElementAssociationsCreateCommand(
+					req, req.getSource(), req.getTarget()));
+		}
 		return null;
 	}
 
@@ -112,12 +155,17 @@
 	 * 
 	 * @generated
 	 */
-	protected Command getReorientReferenceRelationshipCommand(ReorientReferenceRelationshipRequest req) {
+	protected Command getReorientReferenceRelationshipCommand(
+			ReorientReferenceRelationshipRequest req) {
 		switch (getVisualID(req)) {
 		case ProductVariationPointInstancesEditPart.VISUAL_ID:
-			return getGEFWrapper(new ProductVariationPointInstancesReorientCommand(req));
+			return getGEFWrapper(new ProductVariationPointInstancesReorientCommand(
+					req));
 		case ProductFeaturesEditPart.VISUAL_ID:
 			return getGEFWrapper(new ProductFeaturesReorientCommand(req));
+		case UrmlModelElementAssociationsEditPart.VISUAL_ID:
+			return getGEFWrapper(new UrmlModelElementAssociationsReorientCommand(
+					req));
 		}
 		return super.getReorientReferenceRelationshipCommand(req);
 	}
Index: src/org/unicase/ui/diagram/urml/edit/policies/NonFunctionalRequirementItemSemanticEditPolicy.java
===================================================================
--- src/org/unicase/ui/diagram/urml/edit/policies/NonFunctionalRequirementItemSemanticEditPolicy.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/edit/policies/NonFunctionalRequirementItemSemanticEditPolicy.java	(working copy)
@@ -28,17 +28,21 @@
 import org.unicase.ui.diagram.urml.edit.commands.NonFunctionalRequirementSubNonFunctionalRequirementsReorientCommand;
 import org.unicase.ui.diagram.urml.edit.commands.RequirementImplementingServicesCreateCommand;
 import org.unicase.ui.diagram.urml.edit.commands.RequirementImplementingServicesReorientCommand;
+import org.unicase.ui.diagram.urml.edit.commands.UrmlModelElementAssociationsCreateCommand;
+import org.unicase.ui.diagram.urml.edit.commands.UrmlModelElementAssociationsReorientCommand;
 import org.unicase.ui.diagram.urml.edit.parts.AbstractFeatureConstrainingNonFunctionalRequirementsEditPart;
 import org.unicase.ui.diagram.urml.edit.parts.MitigationMitigatedDangersEditPart;
 import org.unicase.ui.diagram.urml.edit.parts.NonFunctionalRequirementSubNonFunctionalRequirementsEditPart;
 import org.unicase.ui.diagram.urml.edit.parts.RequirementImplementingServicesEditPart;
+import org.unicase.ui.diagram.urml.edit.parts.UrmlModelElementAssociationsEditPart;
 import org.unicase.ui.diagram.urml.part.UrmlVisualIDRegistry;
 import org.unicase.ui.diagram.urml.providers.UrmlElementTypes;
 
 /**
  * @generated
  */
-public class NonFunctionalRequirementItemSemanticEditPolicy extends UrmlBaseItemSemanticEditPolicy {
+public class NonFunctionalRequirementItemSemanticEditPolicy extends
+		UrmlBaseItemSemanticEditPolicy {
 
 	/**
 	 * @generated
@@ -52,26 +56,31 @@
 	 */
 	protected Command getDestroyElementCommand(DestroyElementRequest req) {
 		View view = (View) getHost().getModel();
-		CompositeTransactionalCommand cmd = new CompositeTransactionalCommand(getEditingDomain(), null);
+		CompositeTransactionalCommand cmd = new CompositeTransactionalCommand(
+				getEditingDomain(), null);
 		cmd.setTransactionNestingEnabled(false);
-		for (Iterator it = view.getTargetEdges().iterator(); it.hasNext();) {
+		for (Iterator<?> it = view.getTargetEdges().iterator(); it.hasNext();) {
 			Edge incomingLink = (Edge) it.next();
 			if (UrmlVisualIDRegistry.getVisualID(incomingLink) == AbstractFeatureConstrainingNonFunctionalRequirementsEditPart.VISUAL_ID) {
-				DestroyReferenceRequest r = new DestroyReferenceRequest(incomingLink.getSource().getElement(), null,
-					incomingLink.getTarget().getElement(), false);
+				DestroyReferenceRequest r = new DestroyReferenceRequest(
+						incomingLink.getSource().getElement(), null,
+						incomingLink.getTarget().getElement(), false);
 				cmd.add(new DestroyReferenceCommand(r));
 				cmd.add(new DeleteCommand(getEditingDomain(), incomingLink));
 				continue;
 			}
 			if (UrmlVisualIDRegistry.getVisualID(incomingLink) == NonFunctionalRequirementSubNonFunctionalRequirementsEditPart.VISUAL_ID) {
-				DestroyReferenceRequest r = new DestroyReferenceRequest(incomingLink.getSource().getElement(), null,
-					incomingLink.getTarget().getElement(), false);
+				DestroyReferenceRequest r = new DestroyReferenceRequest(
+						incomingLink.getSource().getElement(), null,
+						incomingLink.getTarget().getElement(), false);
 				cmd.add(new DestroyReferenceCommand(r) {
-					protected CommandResult doExecuteWithResult(IProgressMonitor progressMonitor, IAdaptable info)
-						throws ExecutionException {
+					protected CommandResult doExecuteWithResult(
+							IProgressMonitor progressMonitor, IAdaptable info)
+							throws ExecutionException {
 						EObject referencedObject = getReferencedObject();
 						Resource resource = referencedObject.eResource();
-						CommandResult result = super.doExecuteWithResult(progressMonitor, info);
+						CommandResult result = super.doExecuteWithResult(
+								progressMonitor, info);
 						if (resource != null) {
 							resource.getContents().add(referencedObject);
 						}
@@ -81,25 +90,37 @@
 				cmd.add(new DeleteCommand(getEditingDomain(), incomingLink));
 				continue;
 			}
+			if (UrmlVisualIDRegistry.getVisualID(incomingLink) == UrmlModelElementAssociationsEditPart.VISUAL_ID) {
+				DestroyReferenceRequest r = new DestroyReferenceRequest(
+						incomingLink.getSource().getElement(), null,
+						incomingLink.getTarget().getElement(), false);
+				cmd.add(new DestroyReferenceCommand(r));
+				cmd.add(new DeleteCommand(getEditingDomain(), incomingLink));
+				continue;
+			}
 		}
-		for (Iterator it = view.getSourceEdges().iterator(); it.hasNext();) {
+		for (Iterator<?> it = view.getSourceEdges().iterator(); it.hasNext();) {
 			Edge outgoingLink = (Edge) it.next();
 			if (UrmlVisualIDRegistry.getVisualID(outgoingLink) == RequirementImplementingServicesEditPart.VISUAL_ID) {
-				DestroyReferenceRequest r = new DestroyReferenceRequest(outgoingLink.getSource().getElement(), null,
-					outgoingLink.getTarget().getElement(), false);
+				DestroyReferenceRequest r = new DestroyReferenceRequest(
+						outgoingLink.getSource().getElement(), null,
+						outgoingLink.getTarget().getElement(), false);
 				cmd.add(new DestroyReferenceCommand(r));
 				cmd.add(new DeleteCommand(getEditingDomain(), outgoingLink));
 				continue;
 			}
 			if (UrmlVisualIDRegistry.getVisualID(outgoingLink) == NonFunctionalRequirementSubNonFunctionalRequirementsEditPart.VISUAL_ID) {
-				DestroyReferenceRequest r = new DestroyReferenceRequest(outgoingLink.getSource().getElement(), null,
-					outgoingLink.getTarget().getElement(), false);
+				DestroyReferenceRequest r = new DestroyReferenceRequest(
+						outgoingLink.getSource().getElement(), null,
+						outgoingLink.getTarget().getElement(), false);
 				cmd.add(new DestroyReferenceCommand(r) {
-					protected CommandResult doExecuteWithResult(IProgressMonitor progressMonitor, IAdaptable info)
-						throws ExecutionException {
+					protected CommandResult doExecuteWithResult(
+							IProgressMonitor progressMonitor, IAdaptable info)
+							throws ExecutionException {
 						EObject referencedObject = getReferencedObject();
 						Resource resource = referencedObject.eResource();
-						CommandResult result = super.doExecuteWithResult(progressMonitor, info);
+						CommandResult result = super.doExecuteWithResult(
+								progressMonitor, info);
 						if (resource != null) {
 							resource.getContents().add(referencedObject);
 						}
@@ -110,8 +131,17 @@
 				continue;
 			}
 			if (UrmlVisualIDRegistry.getVisualID(outgoingLink) == MitigationMitigatedDangersEditPart.VISUAL_ID) {
-				DestroyReferenceRequest r = new DestroyReferenceRequest(outgoingLink.getSource().getElement(), null,
-					outgoingLink.getTarget().getElement(), false);
+				DestroyReferenceRequest r = new DestroyReferenceRequest(
+						outgoingLink.getSource().getElement(), null,
+						outgoingLink.getTarget().getElement(), false);
+				cmd.add(new DestroyReferenceCommand(r));
+				cmd.add(new DeleteCommand(getEditingDomain(), outgoingLink));
+				continue;
+			}
+			if (UrmlVisualIDRegistry.getVisualID(outgoingLink) == UrmlModelElementAssociationsEditPart.VISUAL_ID) {
+				DestroyReferenceRequest r = new DestroyReferenceRequest(
+						outgoingLink.getSource().getElement(), null,
+						outgoingLink.getTarget().getElement(), false);
 				cmd.add(new DestroyReferenceCommand(r));
 				cmd.add(new DeleteCommand(getEditingDomain(), outgoingLink));
 				continue;
@@ -134,26 +164,39 @@
 	 */
 	protected Command getCreateRelationshipCommand(CreateRelationshipRequest req) {
 		Command command = req.getTarget() == null ? getStartCreateRelationshipCommand(req)
-			: getCompleteCreateRelationshipCommand(req);
-		return command != null ? command : super.getCreateRelationshipCommand(req);
+				: getCompleteCreateRelationshipCommand(req);
+		return command != null ? command : super
+				.getCreateRelationshipCommand(req);
 	}
 
 	/**
 	 * @generated
 	 */
-	protected Command getStartCreateRelationshipCommand(CreateRelationshipRequest req) {
-		if (UrmlElementTypes.AbstractFeatureConstrainingNonFunctionalRequirements_4036 == req.getElementType()) {
+	protected Command getStartCreateRelationshipCommand(
+			CreateRelationshipRequest req) {
+		if (UrmlElementTypes.AbstractFeatureConstrainingNonFunctionalRequirements_4036 == req
+				.getElementType()) {
 			return null;
 		}
-		if (UrmlElementTypes.RequirementImplementingServices_4005 == req.getElementType()) {
-			return getGEFWrapper(new RequirementImplementingServicesCreateCommand(req, req.getSource(), req.getTarget()));
+		if (UrmlElementTypes.RequirementImplementingServices_4005 == req
+				.getElementType()) {
+			return getGEFWrapper(new RequirementImplementingServicesCreateCommand(
+					req, req.getSource(), req.getTarget()));
 		}
-		if (UrmlElementTypes.NonFunctionalRequirementSubNonFunctionalRequirements_4043 == req.getElementType()) {
-			return getGEFWrapper(new NonFunctionalRequirementSubNonFunctionalRequirementsCreateCommand(req, req
-				.getSource(), req.getTarget()));
+		if (UrmlElementTypes.NonFunctionalRequirementSubNonFunctionalRequirements_4043 == req
+				.getElementType()) {
+			return getGEFWrapper(new NonFunctionalRequirementSubNonFunctionalRequirementsCreateCommand(
+					req, req.getSource(), req.getTarget()));
 		}
-		if (UrmlElementTypes.MitigationMitigatedDangers_4012 == req.getElementType()) {
-			return getGEFWrapper(new MitigationMitigatedDangersCreateCommand(req, req.getSource(), req.getTarget()));
+		if (UrmlElementTypes.MitigationMitigatedDangers_4012 == req
+				.getElementType()) {
+			return getGEFWrapper(new MitigationMitigatedDangersCreateCommand(
+					req, req.getSource(), req.getTarget()));
+		}
+		if (UrmlElementTypes.UrmlModelElementAssociations_4048 == req
+				.getElementType()) {
+			return getGEFWrapper(new UrmlModelElementAssociationsCreateCommand(
+					req, req.getSource(), req.getTarget()));
 		}
 		return null;
 	}
@@ -161,21 +204,31 @@
 	/**
 	 * @generated
 	 */
-	protected Command getCompleteCreateRelationshipCommand(CreateRelationshipRequest req) {
-		if (UrmlElementTypes.AbstractFeatureConstrainingNonFunctionalRequirements_4036 == req.getElementType()) {
-			return getGEFWrapper(new AbstractFeatureConstrainingNonFunctionalRequirementsCreateCommand(req, req
-				.getSource(), req.getTarget()));
+	protected Command getCompleteCreateRelationshipCommand(
+			CreateRelationshipRequest req) {
+		if (UrmlElementTypes.AbstractFeatureConstrainingNonFunctionalRequirements_4036 == req
+				.getElementType()) {
+			return getGEFWrapper(new AbstractFeatureConstrainingNonFunctionalRequirementsCreateCommand(
+					req, req.getSource(), req.getTarget()));
 		}
-		if (UrmlElementTypes.RequirementImplementingServices_4005 == req.getElementType()) {
+		if (UrmlElementTypes.RequirementImplementingServices_4005 == req
+				.getElementType()) {
 			return null;
 		}
-		if (UrmlElementTypes.NonFunctionalRequirementSubNonFunctionalRequirements_4043 == req.getElementType()) {
-			return getGEFWrapper(new NonFunctionalRequirementSubNonFunctionalRequirementsCreateCommand(req, req
-				.getSource(), req.getTarget()));
+		if (UrmlElementTypes.NonFunctionalRequirementSubNonFunctionalRequirements_4043 == req
+				.getElementType()) {
+			return getGEFWrapper(new NonFunctionalRequirementSubNonFunctionalRequirementsCreateCommand(
+					req, req.getSource(), req.getTarget()));
 		}
-		if (UrmlElementTypes.MitigationMitigatedDangers_4012 == req.getElementType()) {
+		if (UrmlElementTypes.MitigationMitigatedDangers_4012 == req
+				.getElementType()) {
 			return null;
 		}
+		if (UrmlElementTypes.UrmlModelElementAssociations_4048 == req
+				.getElementType()) {
+			return getGEFWrapper(new UrmlModelElementAssociationsCreateCommand(
+					req, req.getSource(), req.getTarget()));
+		}
 		return null;
 	}
 
@@ -185,16 +238,24 @@
 	 * 
 	 * @generated
 	 */
-	protected Command getReorientReferenceRelationshipCommand(ReorientReferenceRelationshipRequest req) {
+	protected Command getReorientReferenceRelationshipCommand(
+			ReorientReferenceRelationshipRequest req) {
 		switch (getVisualID(req)) {
 		case AbstractFeatureConstrainingNonFunctionalRequirementsEditPart.VISUAL_ID:
-			return getGEFWrapper(new AbstractFeatureConstrainingNonFunctionalRequirementsReorientCommand(req));
+			return getGEFWrapper(new AbstractFeatureConstrainingNonFunctionalRequirementsReorientCommand(
+					req));
 		case RequirementImplementingServicesEditPart.VISUAL_ID:
-			return getGEFWrapper(new RequirementImplementingServicesReorientCommand(req));
+			return getGEFWrapper(new RequirementImplementingServicesReorientCommand(
+					req));
 		case NonFunctionalRequirementSubNonFunctionalRequirementsEditPart.VISUAL_ID:
-			return getGEFWrapper(new NonFunctionalRequirementSubNonFunctionalRequirementsReorientCommand(req));
+			return getGEFWrapper(new NonFunctionalRequirementSubNonFunctionalRequirementsReorientCommand(
+					req));
 		case MitigationMitigatedDangersEditPart.VISUAL_ID:
-			return getGEFWrapper(new MitigationMitigatedDangersReorientCommand(req));
+			return getGEFWrapper(new MitigationMitigatedDangersReorientCommand(
+					req));
+		case UrmlModelElementAssociationsEditPart.VISUAL_ID:
+			return getGEFWrapper(new UrmlModelElementAssociationsReorientCommand(
+					req));
 		}
 		return super.getReorientReferenceRelationshipCommand(req);
 	}
Index: src/org/unicase/ui/diagram/urml/edit/policies/AbstractFeatureExcludedFeaturesItemSemanticEditPolicy.java
===================================================================
--- src/org/unicase/ui/diagram/urml/edit/policies/AbstractFeatureExcludedFeaturesItemSemanticEditPolicy.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/edit/policies/AbstractFeatureExcludedFeaturesItemSemanticEditPolicy.java	(working copy)
@@ -8,7 +8,8 @@
 /**
  * @generated
  */
-public class AbstractFeatureExcludedFeaturesItemSemanticEditPolicy extends UrmlBaseItemSemanticEditPolicy {
+public class AbstractFeatureExcludedFeaturesItemSemanticEditPolicy extends
+		UrmlBaseItemSemanticEditPolicy {
 
 	/**
 	 * @generated
Index: src/org/unicase/ui/diagram/urml/edit/policies/AbstractFeatureDetailingFunctionalRequirementsItemSemanticEditPolicy.java
===================================================================
--- src/org/unicase/ui/diagram/urml/edit/policies/AbstractFeatureDetailingFunctionalRequirementsItemSemanticEditPolicy.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/edit/policies/AbstractFeatureDetailingFunctionalRequirementsItemSemanticEditPolicy.java	(working copy)
@@ -8,14 +8,15 @@
 /**
  * @generated
  */
-public class AbstractFeatureDetailingFunctionalRequirementsItemSemanticEditPolicy extends
-	UrmlBaseItemSemanticEditPolicy {
+public class AbstractFeatureDetailingFunctionalRequirementsItemSemanticEditPolicy
+		extends UrmlBaseItemSemanticEditPolicy {
 
 	/**
 	 * @generated
 	 */
 	public AbstractFeatureDetailingFunctionalRequirementsItemSemanticEditPolicy() {
-		super(UrmlElementTypes.AbstractFeatureDetailingFunctionalRequirements_4035);
+		super(
+				UrmlElementTypes.AbstractFeatureDetailingFunctionalRequirements_4035);
 	}
 
 	/**
Index: src/org/unicase/ui/diagram/urml/edit/policies/GoalReferenceItemSemanticEditPolicy.java
===================================================================
--- src/org/unicase/ui/diagram/urml/edit/policies/GoalReferenceItemSemanticEditPolicy.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/edit/policies/GoalReferenceItemSemanticEditPolicy.java	(working copy)
@@ -2,13 +2,19 @@
 
 import org.eclipse.gef.commands.Command;
 import org.eclipse.gmf.runtime.emf.type.core.commands.DestroyElementCommand;
+import org.eclipse.gmf.runtime.emf.type.core.requests.CreateRelationshipRequest;
 import org.eclipse.gmf.runtime.emf.type.core.requests.DestroyElementRequest;
+import org.eclipse.gmf.runtime.emf.type.core.requests.ReorientReferenceRelationshipRequest;
+import org.unicase.ui.diagram.urml.edit.commands.UrmlModelElementAssociationsCreateCommand;
+import org.unicase.ui.diagram.urml.edit.commands.UrmlModelElementAssociationsReorientCommand;
+import org.unicase.ui.diagram.urml.edit.parts.UrmlModelElementAssociationsEditPart;
 import org.unicase.ui.diagram.urml.providers.UrmlElementTypes;
 
 /**
  * @generated
  */
-public class GoalReferenceItemSemanticEditPolicy extends UrmlBaseItemSemanticEditPolicy {
+public class GoalReferenceItemSemanticEditPolicy extends
+		UrmlBaseItemSemanticEditPolicy {
 
 	/**
 	 * @generated
@@ -24,4 +30,56 @@
 		return getGEFWrapper(new DestroyElementCommand(req));
 	}
 
+	/**
+	 * @generated
+	 */
+	protected Command getCreateRelationshipCommand(CreateRelationshipRequest req) {
+		Command command = req.getTarget() == null ? getStartCreateRelationshipCommand(req)
+				: getCompleteCreateRelationshipCommand(req);
+		return command != null ? command : super
+				.getCreateRelationshipCommand(req);
+	}
+
+	/**
+	 * @generated
+	 */
+	protected Command getStartCreateRelationshipCommand(
+			CreateRelationshipRequest req) {
+		if (UrmlElementTypes.UrmlModelElementAssociations_4048 == req
+				.getElementType()) {
+			return getGEFWrapper(new UrmlModelElementAssociationsCreateCommand(
+					req, req.getSource(), req.getTarget()));
+		}
+		return null;
+	}
+
+	/**
+	 * @generated
+	 */
+	protected Command getCompleteCreateRelationshipCommand(
+			CreateRelationshipRequest req) {
+		if (UrmlElementTypes.UrmlModelElementAssociations_4048 == req
+				.getElementType()) {
+			return getGEFWrapper(new UrmlModelElementAssociationsCreateCommand(
+					req, req.getSource(), req.getTarget()));
+		}
+		return null;
+	}
+
+	/**
+	 * Returns command to reorient EReference based link. New link target or source
+	 * should be the domain model element associated with this node.
+	 * 
+	 * @generated
+	 */
+	protected Command getReorientReferenceRelationshipCommand(
+			ReorientReferenceRelationshipRequest req) {
+		switch (getVisualID(req)) {
+		case UrmlModelElementAssociationsEditPart.VISUAL_ID:
+			return getGEFWrapper(new UrmlModelElementAssociationsReorientCommand(
+					req));
+		}
+		return super.getReorientReferenceRelationshipCommand(req);
+	}
+
 }
Index: src/org/unicase/ui/diagram/urml/edit/policies/VariationPointOptionalSubFeaturesItemSemanticEditPolicy.java
===================================================================
--- src/org/unicase/ui/diagram/urml/edit/policies/VariationPointOptionalSubFeaturesItemSemanticEditPolicy.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/edit/policies/VariationPointOptionalSubFeaturesItemSemanticEditPolicy.java	(working copy)
@@ -14,7 +14,8 @@
 /**
  * @generated
  */
-public class VariationPointOptionalSubFeaturesItemSemanticEditPolicy extends UrmlBaseItemSemanticEditPolicy {
+public class VariationPointOptionalSubFeaturesItemSemanticEditPolicy extends
+		UrmlBaseItemSemanticEditPolicy {
 
 	/**
 	 * @generated
@@ -28,11 +29,13 @@
 	 */
 	protected Command getDestroyReferenceCommand(DestroyReferenceRequest req) {
 		return getGEFWrapper(new DestroyReferenceCommand(req) {
-			protected CommandResult doExecuteWithResult(IProgressMonitor progressMonitor, IAdaptable info)
-				throws ExecutionException {
+			protected CommandResult doExecuteWithResult(
+					IProgressMonitor progressMonitor, IAdaptable info)
+					throws ExecutionException {
 				EObject referencedObject = getReferencedObject();
 				Resource resource = referencedObject.eResource();
-				CommandResult result = super.doExecuteWithResult(progressMonitor, info);
+				CommandResult result = super.doExecuteWithResult(
+						progressMonitor, info);
 				if (resource != null) {
 					resource.getContents().add(referencedObject);
 				}
Index: src/org/unicase/ui/diagram/urml/edit/policies/ProductFeaturesItemSemanticEditPolicy.java
===================================================================
--- src/org/unicase/ui/diagram/urml/edit/policies/ProductFeaturesItemSemanticEditPolicy.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/edit/policies/ProductFeaturesItemSemanticEditPolicy.java	(working copy)
@@ -8,7 +8,8 @@
 /**
  * @generated
  */
-public class ProductFeaturesItemSemanticEditPolicy extends UrmlBaseItemSemanticEditPolicy {
+public class ProductFeaturesItemSemanticEditPolicy extends
+		UrmlBaseItemSemanticEditPolicy {
 
 	/**
 	 * @generated
Index: src/org/unicase/ui/diagram/urml/edit/policies/ServiceItemSemanticEditPolicy.java
===================================================================
--- src/org/unicase/ui/diagram/urml/edit/policies/ServiceItemSemanticEditPolicy.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/edit/policies/ServiceItemSemanticEditPolicy.java	(working copy)
@@ -28,17 +28,21 @@
 import org.unicase.ui.diagram.urml.edit.commands.RequirementImplementingServicesReorientCommand;
 import org.unicase.ui.diagram.urml.edit.commands.ServiceSubServicesCreateCommand;
 import org.unicase.ui.diagram.urml.edit.commands.ServiceSubServicesReorientCommand;
+import org.unicase.ui.diagram.urml.edit.commands.UrmlModelElementAssociationsCreateCommand;
+import org.unicase.ui.diagram.urml.edit.commands.UrmlModelElementAssociationsReorientCommand;
 import org.unicase.ui.diagram.urml.edit.parts.AssetTriggeredDangersEditPart;
 import org.unicase.ui.diagram.urml.edit.parts.DangerHarmedAssetsEditPart;
 import org.unicase.ui.diagram.urml.edit.parts.RequirementImplementingServicesEditPart;
 import org.unicase.ui.diagram.urml.edit.parts.ServiceSubServicesEditPart;
+import org.unicase.ui.diagram.urml.edit.parts.UrmlModelElementAssociationsEditPart;
 import org.unicase.ui.diagram.urml.part.UrmlVisualIDRegistry;
 import org.unicase.ui.diagram.urml.providers.UrmlElementTypes;
 
 /**
  * @generated
  */
-public class ServiceItemSemanticEditPolicy extends UrmlBaseItemSemanticEditPolicy {
+public class ServiceItemSemanticEditPolicy extends
+		UrmlBaseItemSemanticEditPolicy {
 
 	/**
 	 * @generated
@@ -52,33 +56,39 @@
 	 */
 	protected Command getDestroyElementCommand(DestroyElementRequest req) {
 		View view = (View) getHost().getModel();
-		CompositeTransactionalCommand cmd = new CompositeTransactionalCommand(getEditingDomain(), null);
+		CompositeTransactionalCommand cmd = new CompositeTransactionalCommand(
+				getEditingDomain(), null);
 		cmd.setTransactionNestingEnabled(false);
-		for (Iterator it = view.getTargetEdges().iterator(); it.hasNext();) {
+		for (Iterator<?> it = view.getTargetEdges().iterator(); it.hasNext();) {
 			Edge incomingLink = (Edge) it.next();
 			if (UrmlVisualIDRegistry.getVisualID(incomingLink) == RequirementImplementingServicesEditPart.VISUAL_ID) {
-				DestroyReferenceRequest r = new DestroyReferenceRequest(incomingLink.getSource().getElement(), null,
-					incomingLink.getTarget().getElement(), false);
+				DestroyReferenceRequest r = new DestroyReferenceRequest(
+						incomingLink.getSource().getElement(), null,
+						incomingLink.getTarget().getElement(), false);
 				cmd.add(new DestroyReferenceCommand(r));
 				cmd.add(new DeleteCommand(getEditingDomain(), incomingLink));
 				continue;
 			}
 			if (UrmlVisualIDRegistry.getVisualID(incomingLink) == DangerHarmedAssetsEditPart.VISUAL_ID) {
-				DestroyReferenceRequest r = new DestroyReferenceRequest(incomingLink.getSource().getElement(), null,
-					incomingLink.getTarget().getElement(), false);
+				DestroyReferenceRequest r = new DestroyReferenceRequest(
+						incomingLink.getSource().getElement(), null,
+						incomingLink.getTarget().getElement(), false);
 				cmd.add(new DestroyReferenceCommand(r));
 				cmd.add(new DeleteCommand(getEditingDomain(), incomingLink));
 				continue;
 			}
 			if (UrmlVisualIDRegistry.getVisualID(incomingLink) == ServiceSubServicesEditPart.VISUAL_ID) {
-				DestroyReferenceRequest r = new DestroyReferenceRequest(incomingLink.getSource().getElement(), null,
-					incomingLink.getTarget().getElement(), false);
+				DestroyReferenceRequest r = new DestroyReferenceRequest(
+						incomingLink.getSource().getElement(), null,
+						incomingLink.getTarget().getElement(), false);
 				cmd.add(new DestroyReferenceCommand(r) {
-					protected CommandResult doExecuteWithResult(IProgressMonitor progressMonitor, IAdaptable info)
-						throws ExecutionException {
+					protected CommandResult doExecuteWithResult(
+							IProgressMonitor progressMonitor, IAdaptable info)
+							throws ExecutionException {
 						EObject referencedObject = getReferencedObject();
 						Resource resource = referencedObject.eResource();
-						CommandResult result = super.doExecuteWithResult(progressMonitor, info);
+						CommandResult result = super.doExecuteWithResult(
+								progressMonitor, info);
 						if (resource != null) {
 							resource.getContents().add(referencedObject);
 						}
@@ -88,25 +98,37 @@
 				cmd.add(new DeleteCommand(getEditingDomain(), incomingLink));
 				continue;
 			}
+			if (UrmlVisualIDRegistry.getVisualID(incomingLink) == UrmlModelElementAssociationsEditPart.VISUAL_ID) {
+				DestroyReferenceRequest r = new DestroyReferenceRequest(
+						incomingLink.getSource().getElement(), null,
+						incomingLink.getTarget().getElement(), false);
+				cmd.add(new DestroyReferenceCommand(r));
+				cmd.add(new DeleteCommand(getEditingDomain(), incomingLink));
+				continue;
+			}
 		}
-		for (Iterator it = view.getSourceEdges().iterator(); it.hasNext();) {
+		for (Iterator<?> it = view.getSourceEdges().iterator(); it.hasNext();) {
 			Edge outgoingLink = (Edge) it.next();
 			if (UrmlVisualIDRegistry.getVisualID(outgoingLink) == AssetTriggeredDangersEditPart.VISUAL_ID) {
-				DestroyReferenceRequest r = new DestroyReferenceRequest(outgoingLink.getSource().getElement(), null,
-					outgoingLink.getTarget().getElement(), false);
+				DestroyReferenceRequest r = new DestroyReferenceRequest(
+						outgoingLink.getSource().getElement(), null,
+						outgoingLink.getTarget().getElement(), false);
 				cmd.add(new DestroyReferenceCommand(r));
 				cmd.add(new DeleteCommand(getEditingDomain(), outgoingLink));
 				continue;
 			}
 			if (UrmlVisualIDRegistry.getVisualID(outgoingLink) == ServiceSubServicesEditPart.VISUAL_ID) {
-				DestroyReferenceRequest r = new DestroyReferenceRequest(outgoingLink.getSource().getElement(), null,
-					outgoingLink.getTarget().getElement(), false);
+				DestroyReferenceRequest r = new DestroyReferenceRequest(
+						outgoingLink.getSource().getElement(), null,
+						outgoingLink.getTarget().getElement(), false);
 				cmd.add(new DestroyReferenceCommand(r) {
-					protected CommandResult doExecuteWithResult(IProgressMonitor progressMonitor, IAdaptable info)
-						throws ExecutionException {
+					protected CommandResult doExecuteWithResult(
+							IProgressMonitor progressMonitor, IAdaptable info)
+							throws ExecutionException {
 						EObject referencedObject = getReferencedObject();
 						Resource resource = referencedObject.eResource();
-						CommandResult result = super.doExecuteWithResult(progressMonitor, info);
+						CommandResult result = super.doExecuteWithResult(
+								progressMonitor, info);
 						if (resource != null) {
 							resource.getContents().add(referencedObject);
 						}
@@ -116,6 +138,14 @@
 				cmd.add(new DeleteCommand(getEditingDomain(), outgoingLink));
 				continue;
 			}
+			if (UrmlVisualIDRegistry.getVisualID(outgoingLink) == UrmlModelElementAssociationsEditPart.VISUAL_ID) {
+				DestroyReferenceRequest r = new DestroyReferenceRequest(
+						outgoingLink.getSource().getElement(), null,
+						outgoingLink.getTarget().getElement(), false);
+				cmd.add(new DestroyReferenceCommand(r));
+				cmd.add(new DeleteCommand(getEditingDomain(), outgoingLink));
+				continue;
+			}
 		}
 		EAnnotation annotation = view.getEAnnotation("Shortcut"); //$NON-NLS-1$
 		if (annotation == null) {
@@ -134,25 +164,35 @@
 	 */
 	protected Command getCreateRelationshipCommand(CreateRelationshipRequest req) {
 		Command command = req.getTarget() == null ? getStartCreateRelationshipCommand(req)
-			: getCompleteCreateRelationshipCommand(req);
-		return command != null ? command : super.getCreateRelationshipCommand(req);
+				: getCompleteCreateRelationshipCommand(req);
+		return command != null ? command : super
+				.getCreateRelationshipCommand(req);
 	}
 
 	/**
 	 * @generated
 	 */
-	protected Command getStartCreateRelationshipCommand(CreateRelationshipRequest req) {
-		if (UrmlElementTypes.RequirementImplementingServices_4005 == req.getElementType()) {
+	protected Command getStartCreateRelationshipCommand(
+			CreateRelationshipRequest req) {
+		if (UrmlElementTypes.RequirementImplementingServices_4005 == req
+				.getElementType()) {
 			return null;
 		}
 		if (UrmlElementTypes.DangerHarmedAssets_4013 == req.getElementType()) {
 			return null;
 		}
 		if (UrmlElementTypes.AssetTriggeredDangers_4017 == req.getElementType()) {
-			return getGEFWrapper(new AssetTriggeredDangersCreateCommand(req, req.getSource(), req.getTarget()));
+			return getGEFWrapper(new AssetTriggeredDangersCreateCommand(req,
+					req.getSource(), req.getTarget()));
 		}
 		if (UrmlElementTypes.ServiceSubServices_4022 == req.getElementType()) {
-			return getGEFWrapper(new ServiceSubServicesCreateCommand(req, req.getSource(), req.getTarget()));
+			return getGEFWrapper(new ServiceSubServicesCreateCommand(req,
+					req.getSource(), req.getTarget()));
+		}
+		if (UrmlElementTypes.UrmlModelElementAssociations_4048 == req
+				.getElementType()) {
+			return getGEFWrapper(new UrmlModelElementAssociationsCreateCommand(
+					req, req.getSource(), req.getTarget()));
 		}
 		return null;
 	}
@@ -160,18 +200,28 @@
 	/**
 	 * @generated
 	 */
-	protected Command getCompleteCreateRelationshipCommand(CreateRelationshipRequest req) {
-		if (UrmlElementTypes.RequirementImplementingServices_4005 == req.getElementType()) {
-			return getGEFWrapper(new RequirementImplementingServicesCreateCommand(req, req.getSource(), req.getTarget()));
+	protected Command getCompleteCreateRelationshipCommand(
+			CreateRelationshipRequest req) {
+		if (UrmlElementTypes.RequirementImplementingServices_4005 == req
+				.getElementType()) {
+			return getGEFWrapper(new RequirementImplementingServicesCreateCommand(
+					req, req.getSource(), req.getTarget()));
 		}
 		if (UrmlElementTypes.DangerHarmedAssets_4013 == req.getElementType()) {
-			return getGEFWrapper(new DangerHarmedAssetsCreateCommand(req, req.getSource(), req.getTarget()));
+			return getGEFWrapper(new DangerHarmedAssetsCreateCommand(req,
+					req.getSource(), req.getTarget()));
 		}
 		if (UrmlElementTypes.AssetTriggeredDangers_4017 == req.getElementType()) {
 			return null;
 		}
 		if (UrmlElementTypes.ServiceSubServices_4022 == req.getElementType()) {
-			return getGEFWrapper(new ServiceSubServicesCreateCommand(req, req.getSource(), req.getTarget()));
+			return getGEFWrapper(new ServiceSubServicesCreateCommand(req,
+					req.getSource(), req.getTarget()));
+		}
+		if (UrmlElementTypes.UrmlModelElementAssociations_4048 == req
+				.getElementType()) {
+			return getGEFWrapper(new UrmlModelElementAssociationsCreateCommand(
+					req, req.getSource(), req.getTarget()));
 		}
 		return null;
 	}
@@ -182,16 +232,21 @@
 	 * 
 	 * @generated
 	 */
-	protected Command getReorientReferenceRelationshipCommand(ReorientReferenceRelationshipRequest req) {
+	protected Command getReorientReferenceRelationshipCommand(
+			ReorientReferenceRelationshipRequest req) {
 		switch (getVisualID(req)) {
 		case RequirementImplementingServicesEditPart.VISUAL_ID:
-			return getGEFWrapper(new RequirementImplementingServicesReorientCommand(req));
+			return getGEFWrapper(new RequirementImplementingServicesReorientCommand(
+					req));
 		case DangerHarmedAssetsEditPart.VISUAL_ID:
 			return getGEFWrapper(new DangerHarmedAssetsReorientCommand(req));
 		case AssetTriggeredDangersEditPart.VISUAL_ID:
 			return getGEFWrapper(new AssetTriggeredDangersReorientCommand(req));
 		case ServiceSubServicesEditPart.VISUAL_ID:
 			return getGEFWrapper(new ServiceSubServicesReorientCommand(req));
+		case UrmlModelElementAssociationsEditPart.VISUAL_ID:
+			return getGEFWrapper(new UrmlModelElementAssociationsReorientCommand(
+					req));
 		}
 		return super.getReorientReferenceRelationshipCommand(req);
 	}
Index: src/org/unicase/ui/diagram/urml/edit/policies/ProductVariationPointInstancesItemSemanticEditPolicy.java
===================================================================
--- src/org/unicase/ui/diagram/urml/edit/policies/ProductVariationPointInstancesItemSemanticEditPolicy.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/edit/policies/ProductVariationPointInstancesItemSemanticEditPolicy.java	(working copy)
@@ -8,7 +8,8 @@
 /**
  * @generated
  */
-public class ProductVariationPointInstancesItemSemanticEditPolicy extends UrmlBaseItemSemanticEditPolicy {
+public class ProductVariationPointInstancesItemSemanticEditPolicy extends
+		UrmlBaseItemSemanticEditPolicy {
 
 	/**
 	 * @generated
Index: src/org/unicase/ui/diagram/urml/edit/policies/VariationPointInstanceVariationPointItemSemanticEditPolicy.java
===================================================================
--- src/org/unicase/ui/diagram/urml/edit/policies/VariationPointInstanceVariationPointItemSemanticEditPolicy.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/edit/policies/VariationPointInstanceVariationPointItemSemanticEditPolicy.java	(working copy)
@@ -8,7 +8,8 @@
 /**
  * @generated
  */
-public class VariationPointInstanceVariationPointItemSemanticEditPolicy extends UrmlBaseItemSemanticEditPolicy {
+public class VariationPointInstanceVariationPointItemSemanticEditPolicy extends
+		UrmlBaseItemSemanticEditPolicy {
 
 	/**
 	 * @generated
Index: src/org/unicase/ui/diagram/urml/edit/policies/AbstractFeatureRequiredFeaturesItemSemanticEditPolicy.java
===================================================================
--- src/org/unicase/ui/diagram/urml/edit/policies/AbstractFeatureRequiredFeaturesItemSemanticEditPolicy.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/edit/policies/AbstractFeatureRequiredFeaturesItemSemanticEditPolicy.java	(working copy)
@@ -8,7 +8,8 @@
 /**
  * @generated
  */
-public class AbstractFeatureRequiredFeaturesItemSemanticEditPolicy extends UrmlBaseItemSemanticEditPolicy {
+public class AbstractFeatureRequiredFeaturesItemSemanticEditPolicy extends
+		UrmlBaseItemSemanticEditPolicy {
 
 	/**
 	 * @generated
Index: src/org/unicase/ui/diagram/urml/edit/policies/VariationPointItemSemanticEditPolicy.java
===================================================================
--- src/org/unicase/ui/diagram/urml/edit/policies/VariationPointItemSemanticEditPolicy.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/edit/policies/VariationPointItemSemanticEditPolicy.java	(working copy)
@@ -32,6 +32,8 @@
 import org.unicase.ui.diagram.urml.edit.commands.AbstractFeatureSubFeaturesReorientCommand;
 import org.unicase.ui.diagram.urml.edit.commands.GoalRealizedFeaturesCreateCommand;
 import org.unicase.ui.diagram.urml.edit.commands.GoalRealizedFeaturesReorientCommand;
+import org.unicase.ui.diagram.urml.edit.commands.UrmlModelElementAssociationsCreateCommand;
+import org.unicase.ui.diagram.urml.edit.commands.UrmlModelElementAssociationsReorientCommand;
 import org.unicase.ui.diagram.urml.edit.commands.VariationPointInstanceSelectedFeaturesCreateCommand;
 import org.unicase.ui.diagram.urml.edit.commands.VariationPointInstanceSelectedFeaturesReorientCommand;
 import org.unicase.ui.diagram.urml.edit.commands.VariationPointInstanceVariationPointCreateCommand;
@@ -44,6 +46,7 @@
 import org.unicase.ui.diagram.urml.edit.parts.AbstractFeatureRequiredFeaturesEditPart;
 import org.unicase.ui.diagram.urml.edit.parts.AbstractFeatureSubFeaturesEditPart;
 import org.unicase.ui.diagram.urml.edit.parts.GoalRealizedFeaturesEditPart;
+import org.unicase.ui.diagram.urml.edit.parts.UrmlModelElementAssociationsEditPart;
 import org.unicase.ui.diagram.urml.edit.parts.VariationPointInstanceSelectedFeaturesEditPart;
 import org.unicase.ui.diagram.urml.edit.parts.VariationPointInstanceVariationPointEditPart;
 import org.unicase.ui.diagram.urml.edit.parts.VariationPointOptionalSubFeaturesEditPart;
@@ -53,7 +56,8 @@
 /**
  * @generated
  */
-public class VariationPointItemSemanticEditPolicy extends UrmlBaseItemSemanticEditPolicy {
+public class VariationPointItemSemanticEditPolicy extends
+		UrmlBaseItemSemanticEditPolicy {
 
 	/**
 	 * @generated
@@ -67,19 +71,23 @@
 	 */
 	protected Command getDestroyElementCommand(DestroyElementRequest req) {
 		View view = (View) getHost().getModel();
-		CompositeTransactionalCommand cmd = new CompositeTransactionalCommand(getEditingDomain(), null);
+		CompositeTransactionalCommand cmd = new CompositeTransactionalCommand(
+				getEditingDomain(), null);
 		cmd.setTransactionNestingEnabled(false);
-		for (Iterator it = view.getTargetEdges().iterator(); it.hasNext();) {
+		for (Iterator<?> it = view.getTargetEdges().iterator(); it.hasNext();) {
 			Edge incomingLink = (Edge) it.next();
 			if (UrmlVisualIDRegistry.getVisualID(incomingLink) == AbstractFeatureSubFeaturesEditPart.VISUAL_ID) {
-				DestroyReferenceRequest r = new DestroyReferenceRequest(incomingLink.getSource().getElement(), null,
-					incomingLink.getTarget().getElement(), false);
+				DestroyReferenceRequest r = new DestroyReferenceRequest(
+						incomingLink.getSource().getElement(), null,
+						incomingLink.getTarget().getElement(), false);
 				cmd.add(new DestroyReferenceCommand(r) {
-					protected CommandResult doExecuteWithResult(IProgressMonitor progressMonitor, IAdaptable info)
-						throws ExecutionException {
+					protected CommandResult doExecuteWithResult(
+							IProgressMonitor progressMonitor, IAdaptable info)
+							throws ExecutionException {
 						EObject referencedObject = getReferencedObject();
 						Resource resource = referencedObject.eResource();
-						CommandResult result = super.doExecuteWithResult(progressMonitor, info);
+						CommandResult result = super.doExecuteWithResult(
+								progressMonitor, info);
 						if (resource != null) {
 							resource.getContents().add(referencedObject);
 						}
@@ -90,35 +98,41 @@
 				continue;
 			}
 			if (UrmlVisualIDRegistry.getVisualID(incomingLink) == AbstractFeatureRequiredFeaturesEditPart.VISUAL_ID) {
-				DestroyReferenceRequest r = new DestroyReferenceRequest(incomingLink.getSource().getElement(), null,
-					incomingLink.getTarget().getElement(), false);
+				DestroyReferenceRequest r = new DestroyReferenceRequest(
+						incomingLink.getSource().getElement(), null,
+						incomingLink.getTarget().getElement(), false);
 				cmd.add(new DestroyReferenceCommand(r));
 				cmd.add(new DeleteCommand(getEditingDomain(), incomingLink));
 				continue;
 			}
 			if (UrmlVisualIDRegistry.getVisualID(incomingLink) == AbstractFeatureExcludedFeaturesEditPart.VISUAL_ID) {
-				DestroyReferenceRequest r = new DestroyReferenceRequest(incomingLink.getSource().getElement(), null,
-					incomingLink.getTarget().getElement(), false);
+				DestroyReferenceRequest r = new DestroyReferenceRequest(
+						incomingLink.getSource().getElement(), null,
+						incomingLink.getTarget().getElement(), false);
 				cmd.add(new DestroyReferenceCommand(r));
 				cmd.add(new DeleteCommand(getEditingDomain(), incomingLink));
 				continue;
 			}
 			if (UrmlVisualIDRegistry.getVisualID(incomingLink) == GoalRealizedFeaturesEditPart.VISUAL_ID) {
-				DestroyReferenceRequest r = new DestroyReferenceRequest(incomingLink.getSource().getElement(), null,
-					incomingLink.getTarget().getElement(), false);
+				DestroyReferenceRequest r = new DestroyReferenceRequest(
+						incomingLink.getSource().getElement(), null,
+						incomingLink.getTarget().getElement(), false);
 				cmd.add(new DestroyReferenceCommand(r));
 				cmd.add(new DeleteCommand(getEditingDomain(), incomingLink));
 				continue;
 			}
 			if (UrmlVisualIDRegistry.getVisualID(incomingLink) == VariationPointOptionalSubFeaturesEditPart.VISUAL_ID) {
-				DestroyReferenceRequest r = new DestroyReferenceRequest(incomingLink.getSource().getElement(), null,
-					incomingLink.getTarget().getElement(), false);
+				DestroyReferenceRequest r = new DestroyReferenceRequest(
+						incomingLink.getSource().getElement(), null,
+						incomingLink.getTarget().getElement(), false);
 				cmd.add(new DestroyReferenceCommand(r) {
-					protected CommandResult doExecuteWithResult(IProgressMonitor progressMonitor, IAdaptable info)
-						throws ExecutionException {
+					protected CommandResult doExecuteWithResult(
+							IProgressMonitor progressMonitor, IAdaptable info)
+							throws ExecutionException {
 						EObject referencedObject = getReferencedObject();
 						Resource resource = referencedObject.eResource();
-						CommandResult result = super.doExecuteWithResult(progressMonitor, info);
+						CommandResult result = super.doExecuteWithResult(
+								progressMonitor, info);
 						if (resource != null) {
 							resource.getContents().add(referencedObject);
 						}
@@ -129,31 +143,44 @@
 				continue;
 			}
 			if (UrmlVisualIDRegistry.getVisualID(incomingLink) == VariationPointInstanceVariationPointEditPart.VISUAL_ID) {
-				DestroyReferenceRequest r = new DestroyReferenceRequest(incomingLink.getSource().getElement(), null,
-					incomingLink.getTarget().getElement(), false);
+				DestroyReferenceRequest r = new DestroyReferenceRequest(
+						incomingLink.getSource().getElement(), null,
+						incomingLink.getTarget().getElement(), false);
 				cmd.add(new DestroyReferenceCommand(r));
 				cmd.add(new DeleteCommand(getEditingDomain(), incomingLink));
 				continue;
 			}
 			if (UrmlVisualIDRegistry.getVisualID(incomingLink) == VariationPointInstanceSelectedFeaturesEditPart.VISUAL_ID) {
-				DestroyReferenceRequest r = new DestroyReferenceRequest(incomingLink.getSource().getElement(), null,
-					incomingLink.getTarget().getElement(), false);
+				DestroyReferenceRequest r = new DestroyReferenceRequest(
+						incomingLink.getSource().getElement(), null,
+						incomingLink.getTarget().getElement(), false);
+				cmd.add(new DestroyReferenceCommand(r));
+				cmd.add(new DeleteCommand(getEditingDomain(), incomingLink));
+				continue;
+			}
+			if (UrmlVisualIDRegistry.getVisualID(incomingLink) == UrmlModelElementAssociationsEditPart.VISUAL_ID) {
+				DestroyReferenceRequest r = new DestroyReferenceRequest(
+						incomingLink.getSource().getElement(), null,
+						incomingLink.getTarget().getElement(), false);
 				cmd.add(new DestroyReferenceCommand(r));
 				cmd.add(new DeleteCommand(getEditingDomain(), incomingLink));
 				continue;
 			}
 		}
-		for (Iterator it = view.getSourceEdges().iterator(); it.hasNext();) {
+		for (Iterator<?> it = view.getSourceEdges().iterator(); it.hasNext();) {
 			Edge outgoingLink = (Edge) it.next();
 			if (UrmlVisualIDRegistry.getVisualID(outgoingLink) == AbstractFeatureSubFeaturesEditPart.VISUAL_ID) {
-				DestroyReferenceRequest r = new DestroyReferenceRequest(outgoingLink.getSource().getElement(), null,
-					outgoingLink.getTarget().getElement(), false);
+				DestroyReferenceRequest r = new DestroyReferenceRequest(
+						outgoingLink.getSource().getElement(), null,
+						outgoingLink.getTarget().getElement(), false);
 				cmd.add(new DestroyReferenceCommand(r) {
-					protected CommandResult doExecuteWithResult(IProgressMonitor progressMonitor, IAdaptable info)
-						throws ExecutionException {
+					protected CommandResult doExecuteWithResult(
+							IProgressMonitor progressMonitor, IAdaptable info)
+							throws ExecutionException {
 						EObject referencedObject = getReferencedObject();
 						Resource resource = referencedObject.eResource();
-						CommandResult result = super.doExecuteWithResult(progressMonitor, info);
+						CommandResult result = super.doExecuteWithResult(
+								progressMonitor, info);
 						if (resource != null) {
 							resource.getContents().add(referencedObject);
 						}
@@ -164,42 +191,49 @@
 				continue;
 			}
 			if (UrmlVisualIDRegistry.getVisualID(outgoingLink) == AbstractFeatureDetailingFunctionalRequirementsEditPart.VISUAL_ID) {
-				DestroyReferenceRequest r = new DestroyReferenceRequest(outgoingLink.getSource().getElement(), null,
-					outgoingLink.getTarget().getElement(), false);
+				DestroyReferenceRequest r = new DestroyReferenceRequest(
+						outgoingLink.getSource().getElement(), null,
+						outgoingLink.getTarget().getElement(), false);
 				cmd.add(new DestroyReferenceCommand(r));
 				cmd.add(new DeleteCommand(getEditingDomain(), outgoingLink));
 				continue;
 			}
 			if (UrmlVisualIDRegistry.getVisualID(outgoingLink) == AbstractFeatureConstrainingNonFunctionalRequirementsEditPart.VISUAL_ID) {
-				DestroyReferenceRequest r = new DestroyReferenceRequest(outgoingLink.getSource().getElement(), null,
-					outgoingLink.getTarget().getElement(), false);
+				DestroyReferenceRequest r = new DestroyReferenceRequest(
+						outgoingLink.getSource().getElement(), null,
+						outgoingLink.getTarget().getElement(), false);
 				cmd.add(new DestroyReferenceCommand(r));
 				cmd.add(new DeleteCommand(getEditingDomain(), outgoingLink));
 				continue;
 			}
 			if (UrmlVisualIDRegistry.getVisualID(outgoingLink) == AbstractFeatureRequiredFeaturesEditPart.VISUAL_ID) {
-				DestroyReferenceRequest r = new DestroyReferenceRequest(outgoingLink.getSource().getElement(), null,
-					outgoingLink.getTarget().getElement(), false);
+				DestroyReferenceRequest r = new DestroyReferenceRequest(
+						outgoingLink.getSource().getElement(), null,
+						outgoingLink.getTarget().getElement(), false);
 				cmd.add(new DestroyReferenceCommand(r));
 				cmd.add(new DeleteCommand(getEditingDomain(), outgoingLink));
 				continue;
 			}
 			if (UrmlVisualIDRegistry.getVisualID(outgoingLink) == AbstractFeatureExcludedFeaturesEditPart.VISUAL_ID) {
-				DestroyReferenceRequest r = new DestroyReferenceRequest(outgoingLink.getSource().getElement(), null,
-					outgoingLink.getTarget().getElement(), false);
+				DestroyReferenceRequest r = new DestroyReferenceRequest(
+						outgoingLink.getSource().getElement(), null,
+						outgoingLink.getTarget().getElement(), false);
 				cmd.add(new DestroyReferenceCommand(r));
 				cmd.add(new DeleteCommand(getEditingDomain(), outgoingLink));
 				continue;
 			}
 			if (UrmlVisualIDRegistry.getVisualID(outgoingLink) == VariationPointOptionalSubFeaturesEditPart.VISUAL_ID) {
-				DestroyReferenceRequest r = new DestroyReferenceRequest(outgoingLink.getSource().getElement(), null,
-					outgoingLink.getTarget().getElement(), false);
+				DestroyReferenceRequest r = new DestroyReferenceRequest(
+						outgoingLink.getSource().getElement(), null,
+						outgoingLink.getTarget().getElement(), false);
 				cmd.add(new DestroyReferenceCommand(r) {
-					protected CommandResult doExecuteWithResult(IProgressMonitor progressMonitor, IAdaptable info)
-						throws ExecutionException {
+					protected CommandResult doExecuteWithResult(
+							IProgressMonitor progressMonitor, IAdaptable info)
+							throws ExecutionException {
 						EObject referencedObject = getReferencedObject();
 						Resource resource = referencedObject.eResource();
-						CommandResult result = super.doExecuteWithResult(progressMonitor, info);
+						CommandResult result = super.doExecuteWithResult(
+								progressMonitor, info);
 						if (resource != null) {
 							resource.getContents().add(referencedObject);
 						}
@@ -209,6 +243,14 @@
 				cmd.add(new DeleteCommand(getEditingDomain(), outgoingLink));
 				continue;
 			}
+			if (UrmlVisualIDRegistry.getVisualID(outgoingLink) == UrmlModelElementAssociationsEditPart.VISUAL_ID) {
+				DestroyReferenceRequest r = new DestroyReferenceRequest(
+						outgoingLink.getSource().getElement(), null,
+						outgoingLink.getTarget().getElement(), false);
+				cmd.add(new DestroyReferenceCommand(r));
+				cmd.add(new DeleteCommand(getEditingDomain(), outgoingLink));
+				continue;
+			}
 		}
 		EAnnotation annotation = view.getEAnnotation("Shortcut"); //$NON-NLS-1$
 		if (annotation == null) {
@@ -227,80 +269,116 @@
 	 */
 	protected Command getCreateRelationshipCommand(CreateRelationshipRequest req) {
 		Command command = req.getTarget() == null ? getStartCreateRelationshipCommand(req)
-			: getCompleteCreateRelationshipCommand(req);
-		return command != null ? command : super.getCreateRelationshipCommand(req);
+				: getCompleteCreateRelationshipCommand(req);
+		return command != null ? command : super
+				.getCreateRelationshipCommand(req);
 	}
 
 	/**
 	 * @generated
 	 */
-	protected Command getStartCreateRelationshipCommand(CreateRelationshipRequest req) {
-		if (UrmlElementTypes.AbstractFeatureSubFeatures_4034 == req.getElementType()) {
-			return getGEFWrapper(new AbstractFeatureSubFeaturesCreateCommand(req, req.getSource(), req.getTarget()));
+	protected Command getStartCreateRelationshipCommand(
+			CreateRelationshipRequest req) {
+		if (UrmlElementTypes.AbstractFeatureSubFeatures_4034 == req
+				.getElementType()) {
+			return getGEFWrapper(new AbstractFeatureSubFeaturesCreateCommand(
+					req, req.getSource(), req.getTarget()));
 		}
-		if (UrmlElementTypes.AbstractFeatureDetailingFunctionalRequirements_4035 == req.getElementType()) {
-			return getGEFWrapper(new AbstractFeatureDetailingFunctionalRequirementsCreateCommand(req, req.getSource(),
-				req.getTarget()));
+		if (UrmlElementTypes.AbstractFeatureDetailingFunctionalRequirements_4035 == req
+				.getElementType()) {
+			return getGEFWrapper(new AbstractFeatureDetailingFunctionalRequirementsCreateCommand(
+					req, req.getSource(), req.getTarget()));
 		}
-		if (UrmlElementTypes.AbstractFeatureConstrainingNonFunctionalRequirements_4036 == req.getElementType()) {
-			return getGEFWrapper(new AbstractFeatureConstrainingNonFunctionalRequirementsCreateCommand(req, req
-				.getSource(), req.getTarget()));
+		if (UrmlElementTypes.AbstractFeatureConstrainingNonFunctionalRequirements_4036 == req
+				.getElementType()) {
+			return getGEFWrapper(new AbstractFeatureConstrainingNonFunctionalRequirementsCreateCommand(
+					req, req.getSource(), req.getTarget()));
 		}
-		if (UrmlElementTypes.AbstractFeatureRequiredFeatures_4045 == req.getElementType()) {
-			return getGEFWrapper(new AbstractFeatureRequiredFeaturesCreateCommand(req, req.getSource(), req.getTarget()));
+		if (UrmlElementTypes.AbstractFeatureRequiredFeatures_4045 == req
+				.getElementType()) {
+			return getGEFWrapper(new AbstractFeatureRequiredFeaturesCreateCommand(
+					req, req.getSource(), req.getTarget()));
 		}
-		if (UrmlElementTypes.AbstractFeatureExcludedFeatures_4038 == req.getElementType()) {
-			return getGEFWrapper(new AbstractFeatureExcludedFeaturesCreateCommand(req, req.getSource(), req.getTarget()));
+		if (UrmlElementTypes.AbstractFeatureExcludedFeatures_4038 == req
+				.getElementType()) {
+			return getGEFWrapper(new AbstractFeatureExcludedFeaturesCreateCommand(
+					req, req.getSource(), req.getTarget()));
 		}
 		if (UrmlElementTypes.GoalRealizedFeatures_4004 == req.getElementType()) {
 			return null;
 		}
-		if (UrmlElementTypes.VariationPointOptionalSubFeatures_4046 == req.getElementType()) {
-			return getGEFWrapper(new VariationPointOptionalSubFeaturesCreateCommand(req, req.getSource(), req
-				.getTarget()));
+		if (UrmlElementTypes.VariationPointOptionalSubFeatures_4046 == req
+				.getElementType()) {
+			return getGEFWrapper(new VariationPointOptionalSubFeaturesCreateCommand(
+					req, req.getSource(), req.getTarget()));
 		}
-		if (UrmlElementTypes.VariationPointInstanceVariationPoint_4033 == req.getElementType()) {
+		if (UrmlElementTypes.VariationPointInstanceVariationPoint_4033 == req
+				.getElementType()) {
 			return null;
 		}
-		if (UrmlElementTypes.VariationPointInstanceSelectedFeatures_4040 == req.getElementType()) {
+		if (UrmlElementTypes.VariationPointInstanceSelectedFeatures_4040 == req
+				.getElementType()) {
 			return null;
 		}
+		if (UrmlElementTypes.UrmlModelElementAssociations_4048 == req
+				.getElementType()) {
+			return getGEFWrapper(new UrmlModelElementAssociationsCreateCommand(
+					req, req.getSource(), req.getTarget()));
+		}
 		return null;
 	}
 
 	/**
 	 * @generated
 	 */
-	protected Command getCompleteCreateRelationshipCommand(CreateRelationshipRequest req) {
-		if (UrmlElementTypes.AbstractFeatureSubFeatures_4034 == req.getElementType()) {
-			return getGEFWrapper(new AbstractFeatureSubFeaturesCreateCommand(req, req.getSource(), req.getTarget()));
+	protected Command getCompleteCreateRelationshipCommand(
+			CreateRelationshipRequest req) {
+		if (UrmlElementTypes.AbstractFeatureSubFeatures_4034 == req
+				.getElementType()) {
+			return getGEFWrapper(new AbstractFeatureSubFeaturesCreateCommand(
+					req, req.getSource(), req.getTarget()));
 		}
-		if (UrmlElementTypes.AbstractFeatureDetailingFunctionalRequirements_4035 == req.getElementType()) {
+		if (UrmlElementTypes.AbstractFeatureDetailingFunctionalRequirements_4035 == req
+				.getElementType()) {
 			return null;
 		}
-		if (UrmlElementTypes.AbstractFeatureConstrainingNonFunctionalRequirements_4036 == req.getElementType()) {
+		if (UrmlElementTypes.AbstractFeatureConstrainingNonFunctionalRequirements_4036 == req
+				.getElementType()) {
 			return null;
 		}
-		if (UrmlElementTypes.AbstractFeatureRequiredFeatures_4045 == req.getElementType()) {
-			return getGEFWrapper(new AbstractFeatureRequiredFeaturesCreateCommand(req, req.getSource(), req.getTarget()));
+		if (UrmlElementTypes.AbstractFeatureRequiredFeatures_4045 == req
+				.getElementType()) {
+			return getGEFWrapper(new AbstractFeatureRequiredFeaturesCreateCommand(
+					req, req.getSource(), req.getTarget()));
 		}
-		if (UrmlElementTypes.AbstractFeatureExcludedFeatures_4038 == req.getElementType()) {
-			return getGEFWrapper(new AbstractFeatureExcludedFeaturesCreateCommand(req, req.getSource(), req.getTarget()));
+		if (UrmlElementTypes.AbstractFeatureExcludedFeatures_4038 == req
+				.getElementType()) {
+			return getGEFWrapper(new AbstractFeatureExcludedFeaturesCreateCommand(
+					req, req.getSource(), req.getTarget()));
 		}
 		if (UrmlElementTypes.GoalRealizedFeatures_4004 == req.getElementType()) {
-			return getGEFWrapper(new GoalRealizedFeaturesCreateCommand(req, req.getSource(), req.getTarget()));
+			return getGEFWrapper(new GoalRealizedFeaturesCreateCommand(req,
+					req.getSource(), req.getTarget()));
 		}
-		if (UrmlElementTypes.VariationPointOptionalSubFeatures_4046 == req.getElementType()) {
-			return getGEFWrapper(new VariationPointOptionalSubFeaturesCreateCommand(req, req.getSource(), req
-				.getTarget()));
+		if (UrmlElementTypes.VariationPointOptionalSubFeatures_4046 == req
+				.getElementType()) {
+			return getGEFWrapper(new VariationPointOptionalSubFeaturesCreateCommand(
+					req, req.getSource(), req.getTarget()));
 		}
-		if (UrmlElementTypes.VariationPointInstanceVariationPoint_4033 == req.getElementType()) {
-			return getGEFWrapper(new VariationPointInstanceVariationPointCreateCommand(req, req.getSource(), req
-				.getTarget()));
+		if (UrmlElementTypes.VariationPointInstanceVariationPoint_4033 == req
+				.getElementType()) {
+			return getGEFWrapper(new VariationPointInstanceVariationPointCreateCommand(
+					req, req.getSource(), req.getTarget()));
 		}
-		if (UrmlElementTypes.VariationPointInstanceSelectedFeatures_4040 == req.getElementType()) {
-			return getGEFWrapper(new VariationPointInstanceSelectedFeaturesCreateCommand(req, req.getSource(), req
-				.getTarget()));
+		if (UrmlElementTypes.VariationPointInstanceSelectedFeatures_4040 == req
+				.getElementType()) {
+			return getGEFWrapper(new VariationPointInstanceSelectedFeaturesCreateCommand(
+					req, req.getSource(), req.getTarget()));
+		}
+		if (UrmlElementTypes.UrmlModelElementAssociations_4048 == req
+				.getElementType()) {
+			return getGEFWrapper(new UrmlModelElementAssociationsCreateCommand(
+					req, req.getSource(), req.getTarget()));
 		}
 		return null;
 	}
@@ -311,26 +389,38 @@
 	 * 
 	 * @generated
 	 */
-	protected Command getReorientReferenceRelationshipCommand(ReorientReferenceRelationshipRequest req) {
+	protected Command getReorientReferenceRelationshipCommand(
+			ReorientReferenceRelationshipRequest req) {
 		switch (getVisualID(req)) {
 		case AbstractFeatureSubFeaturesEditPart.VISUAL_ID:
-			return getGEFWrapper(new AbstractFeatureSubFeaturesReorientCommand(req));
+			return getGEFWrapper(new AbstractFeatureSubFeaturesReorientCommand(
+					req));
 		case AbstractFeatureDetailingFunctionalRequirementsEditPart.VISUAL_ID:
-			return getGEFWrapper(new AbstractFeatureDetailingFunctionalRequirementsReorientCommand(req));
+			return getGEFWrapper(new AbstractFeatureDetailingFunctionalRequirementsReorientCommand(
+					req));
 		case AbstractFeatureConstrainingNonFunctionalRequirementsEditPart.VISUAL_ID:
-			return getGEFWrapper(new AbstractFeatureConstrainingNonFunctionalRequirementsReorientCommand(req));
+			return getGEFWrapper(new AbstractFeatureConstrainingNonFunctionalRequirementsReorientCommand(
+					req));
 		case AbstractFeatureRequiredFeaturesEditPart.VISUAL_ID:
-			return getGEFWrapper(new AbstractFeatureRequiredFeaturesReorientCommand(req));
+			return getGEFWrapper(new AbstractFeatureRequiredFeaturesReorientCommand(
+					req));
 		case AbstractFeatureExcludedFeaturesEditPart.VISUAL_ID:
-			return getGEFWrapper(new AbstractFeatureExcludedFeaturesReorientCommand(req));
+			return getGEFWrapper(new AbstractFeatureExcludedFeaturesReorientCommand(
+					req));
 		case GoalRealizedFeaturesEditPart.VISUAL_ID:
 			return getGEFWrapper(new GoalRealizedFeaturesReorientCommand(req));
 		case VariationPointOptionalSubFeaturesEditPart.VISUAL_ID:
-			return getGEFWrapper(new VariationPointOptionalSubFeaturesReorientCommand(req));
+			return getGEFWrapper(new VariationPointOptionalSubFeaturesReorientCommand(
+					req));
 		case VariationPointInstanceVariationPointEditPart.VISUAL_ID:
-			return getGEFWrapper(new VariationPointInstanceVariationPointReorientCommand(req));
+			return getGEFWrapper(new VariationPointInstanceVariationPointReorientCommand(
+					req));
 		case VariationPointInstanceSelectedFeaturesEditPart.VISUAL_ID:
-			return getGEFWrapper(new VariationPointInstanceSelectedFeaturesReorientCommand(req));
+			return getGEFWrapper(new VariationPointInstanceSelectedFeaturesReorientCommand(
+					req));
+		case UrmlModelElementAssociationsEditPart.VISUAL_ID:
+			return getGEFWrapper(new UrmlModelElementAssociationsReorientCommand(
+					req));
 		}
 		return super.getReorientReferenceRelationshipCommand(req);
 	}
Index: src/org/unicase/ui/diagram/urml/edit/policies/GoalSubGoalsItemSemanticEditPolicy.java
===================================================================
--- src/org/unicase/ui/diagram/urml/edit/policies/GoalSubGoalsItemSemanticEditPolicy.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/edit/policies/GoalSubGoalsItemSemanticEditPolicy.java	(working copy)
@@ -14,7 +14,8 @@
 /**
  * @generated
  */
-public class GoalSubGoalsItemSemanticEditPolicy extends UrmlBaseItemSemanticEditPolicy {
+public class GoalSubGoalsItemSemanticEditPolicy extends
+		UrmlBaseItemSemanticEditPolicy {
 
 	/**
 	 * @generated
@@ -28,11 +29,13 @@
 	 */
 	protected Command getDestroyReferenceCommand(DestroyReferenceRequest req) {
 		return getGEFWrapper(new DestroyReferenceCommand(req) {
-			protected CommandResult doExecuteWithResult(IProgressMonitor progressMonitor, IAdaptable info)
-				throws ExecutionException {
+			protected CommandResult doExecuteWithResult(
+					IProgressMonitor progressMonitor, IAdaptable info)
+					throws ExecutionException {
 				EObject referencedObject = getReferencedObject();
 				Resource resource = referencedObject.eResource();
-				CommandResult result = super.doExecuteWithResult(progressMonitor, info);
+				CommandResult result = super.doExecuteWithResult(
+						progressMonitor, info);
 				if (resource != null) {
 					resource.getContents().add(referencedObject);
 				}
Index: src/org/unicase/ui/diagram/urml/edit/policies/AbstractFeatureConstrainingNonFunctionalRequirementsItemSemanticEditPolicy.java
===================================================================
--- src/org/unicase/ui/diagram/urml/edit/policies/AbstractFeatureConstrainingNonFunctionalRequirementsItemSemanticEditPolicy.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/edit/policies/AbstractFeatureConstrainingNonFunctionalRequirementsItemSemanticEditPolicy.java	(working copy)
@@ -8,14 +8,15 @@
 /**
  * @generated
  */
-public class AbstractFeatureConstrainingNonFunctionalRequirementsItemSemanticEditPolicy extends
-	UrmlBaseItemSemanticEditPolicy {
+public class AbstractFeatureConstrainingNonFunctionalRequirementsItemSemanticEditPolicy
+		extends UrmlBaseItemSemanticEditPolicy {
 
 	/**
 	 * @generated
 	 */
 	public AbstractFeatureConstrainingNonFunctionalRequirementsItemSemanticEditPolicy() {
-		super(UrmlElementTypes.AbstractFeatureConstrainingNonFunctionalRequirements_4036);
+		super(
+				UrmlElementTypes.AbstractFeatureConstrainingNonFunctionalRequirements_4036);
 	}
 
 	/**
Index: src/org/unicase/ui/diagram/urml/edit/policies/UrmlTextSelectionEditPolicy.java
===================================================================
--- src/org/unicase/ui/diagram/urml/edit/policies/UrmlTextSelectionEditPolicy.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/edit/policies/UrmlTextSelectionEditPolicy.java	(working copy)
@@ -127,8 +127,10 @@
 		if (getHostFigure() instanceof Label) {
 			Label feedbackFigure = new Label();
 			feedbackFigure.setOpaque(true);
-			feedbackFigure.setBackgroundColor(ColorConstants.menuBackgroundSelected);
-			feedbackFigure.setForegroundColor(ColorConstants.menuForegroundSelected);
+			feedbackFigure
+					.setBackgroundColor(ColorConstants.menuBackgroundSelected);
+			feedbackFigure
+					.setForegroundColor(ColorConstants.menuForegroundSelected);
 			return feedbackFigure;
 		} else {
 			RectangleFigure feedbackFigure = new RectangleFigure();
@@ -168,7 +170,8 @@
 				updateLabel((Label) selectionFeedbackFigure);
 				selectionFeedbackFigure.setBounds(getFeedbackBounds());
 			} else {
-				selectionFeedbackFigure.setBounds(getFeedbackBounds().expand(5, 5));
+				selectionFeedbackFigure.setBounds(getFeedbackBounds().expand(5,
+						5));
 			}
 		}
 	}
Index: src/org/unicase/ui/diagram/urml/edit/policies/DangerItemSemanticEditPolicy.java
===================================================================
--- src/org/unicase/ui/diagram/urml/edit/policies/DangerItemSemanticEditPolicy.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/edit/policies/DangerItemSemanticEditPolicy.java	(working copy)
@@ -20,16 +20,20 @@
 import org.unicase.ui.diagram.urml.edit.commands.DangerHarmedAssetsReorientCommand;
 import org.unicase.ui.diagram.urml.edit.commands.MitigationMitigatedDangersCreateCommand;
 import org.unicase.ui.diagram.urml.edit.commands.MitigationMitigatedDangersReorientCommand;
+import org.unicase.ui.diagram.urml.edit.commands.UrmlModelElementAssociationsCreateCommand;
+import org.unicase.ui.diagram.urml.edit.commands.UrmlModelElementAssociationsReorientCommand;
 import org.unicase.ui.diagram.urml.edit.parts.AssetTriggeredDangersEditPart;
 import org.unicase.ui.diagram.urml.edit.parts.DangerHarmedAssetsEditPart;
 import org.unicase.ui.diagram.urml.edit.parts.MitigationMitigatedDangersEditPart;
+import org.unicase.ui.diagram.urml.edit.parts.UrmlModelElementAssociationsEditPart;
 import org.unicase.ui.diagram.urml.part.UrmlVisualIDRegistry;
 import org.unicase.ui.diagram.urml.providers.UrmlElementTypes;
 
 /**
  * @generated
  */
-public class DangerItemSemanticEditPolicy extends UrmlBaseItemSemanticEditPolicy {
+public class DangerItemSemanticEditPolicy extends
+		UrmlBaseItemSemanticEditPolicy {
 
 	/**
 	 * @generated
@@ -43,30 +47,50 @@
 	 */
 	protected Command getDestroyElementCommand(DestroyElementRequest req) {
 		View view = (View) getHost().getModel();
-		CompositeTransactionalCommand cmd = new CompositeTransactionalCommand(getEditingDomain(), null);
+		CompositeTransactionalCommand cmd = new CompositeTransactionalCommand(
+				getEditingDomain(), null);
 		cmd.setTransactionNestingEnabled(false);
-		for (Iterator it = view.getTargetEdges().iterator(); it.hasNext();) {
+		for (Iterator<?> it = view.getTargetEdges().iterator(); it.hasNext();) {
 			Edge incomingLink = (Edge) it.next();
 			if (UrmlVisualIDRegistry.getVisualID(incomingLink) == MitigationMitigatedDangersEditPart.VISUAL_ID) {
-				DestroyReferenceRequest r = new DestroyReferenceRequest(incomingLink.getSource().getElement(), null,
-					incomingLink.getTarget().getElement(), false);
+				DestroyReferenceRequest r = new DestroyReferenceRequest(
+						incomingLink.getSource().getElement(), null,
+						incomingLink.getTarget().getElement(), false);
 				cmd.add(new DestroyReferenceCommand(r));
 				cmd.add(new DeleteCommand(getEditingDomain(), incomingLink));
 				continue;
 			}
 			if (UrmlVisualIDRegistry.getVisualID(incomingLink) == AssetTriggeredDangersEditPart.VISUAL_ID) {
-				DestroyReferenceRequest r = new DestroyReferenceRequest(incomingLink.getSource().getElement(), null,
-					incomingLink.getTarget().getElement(), false);
+				DestroyReferenceRequest r = new DestroyReferenceRequest(
+						incomingLink.getSource().getElement(), null,
+						incomingLink.getTarget().getElement(), false);
+				cmd.add(new DestroyReferenceCommand(r));
+				cmd.add(new DeleteCommand(getEditingDomain(), incomingLink));
+				continue;
+			}
+			if (UrmlVisualIDRegistry.getVisualID(incomingLink) == UrmlModelElementAssociationsEditPart.VISUAL_ID) {
+				DestroyReferenceRequest r = new DestroyReferenceRequest(
+						incomingLink.getSource().getElement(), null,
+						incomingLink.getTarget().getElement(), false);
 				cmd.add(new DestroyReferenceCommand(r));
 				cmd.add(new DeleteCommand(getEditingDomain(), incomingLink));
 				continue;
 			}
 		}
-		for (Iterator it = view.getSourceEdges().iterator(); it.hasNext();) {
+		for (Iterator<?> it = view.getSourceEdges().iterator(); it.hasNext();) {
 			Edge outgoingLink = (Edge) it.next();
 			if (UrmlVisualIDRegistry.getVisualID(outgoingLink) == DangerHarmedAssetsEditPart.VISUAL_ID) {
-				DestroyReferenceRequest r = new DestroyReferenceRequest(outgoingLink.getSource().getElement(), null,
-					outgoingLink.getTarget().getElement(), false);
+				DestroyReferenceRequest r = new DestroyReferenceRequest(
+						outgoingLink.getSource().getElement(), null,
+						outgoingLink.getTarget().getElement(), false);
+				cmd.add(new DestroyReferenceCommand(r));
+				cmd.add(new DeleteCommand(getEditingDomain(), outgoingLink));
+				continue;
+			}
+			if (UrmlVisualIDRegistry.getVisualID(outgoingLink) == UrmlModelElementAssociationsEditPart.VISUAL_ID) {
+				DestroyReferenceRequest r = new DestroyReferenceRequest(
+						outgoingLink.getSource().getElement(), null,
+						outgoingLink.getTarget().getElement(), false);
 				cmd.add(new DestroyReferenceCommand(r));
 				cmd.add(new DeleteCommand(getEditingDomain(), outgoingLink));
 				continue;
@@ -89,38 +113,56 @@
 	 */
 	protected Command getCreateRelationshipCommand(CreateRelationshipRequest req) {
 		Command command = req.getTarget() == null ? getStartCreateRelationshipCommand(req)
-			: getCompleteCreateRelationshipCommand(req);
-		return command != null ? command : super.getCreateRelationshipCommand(req);
+				: getCompleteCreateRelationshipCommand(req);
+		return command != null ? command : super
+				.getCreateRelationshipCommand(req);
 	}
 
 	/**
 	 * @generated
 	 */
-	protected Command getStartCreateRelationshipCommand(CreateRelationshipRequest req) {
-		if (UrmlElementTypes.MitigationMitigatedDangers_4012 == req.getElementType()) {
+	protected Command getStartCreateRelationshipCommand(
+			CreateRelationshipRequest req) {
+		if (UrmlElementTypes.MitigationMitigatedDangers_4012 == req
+				.getElementType()) {
 			return null;
 		}
 		if (UrmlElementTypes.DangerHarmedAssets_4013 == req.getElementType()) {
-			return getGEFWrapper(new DangerHarmedAssetsCreateCommand(req, req.getSource(), req.getTarget()));
+			return getGEFWrapper(new DangerHarmedAssetsCreateCommand(req,
+					req.getSource(), req.getTarget()));
 		}
 		if (UrmlElementTypes.AssetTriggeredDangers_4017 == req.getElementType()) {
 			return null;
 		}
+		if (UrmlElementTypes.UrmlModelElementAssociations_4048 == req
+				.getElementType()) {
+			return getGEFWrapper(new UrmlModelElementAssociationsCreateCommand(
+					req, req.getSource(), req.getTarget()));
+		}
 		return null;
 	}
 
 	/**
 	 * @generated
 	 */
-	protected Command getCompleteCreateRelationshipCommand(CreateRelationshipRequest req) {
-		if (UrmlElementTypes.MitigationMitigatedDangers_4012 == req.getElementType()) {
-			return getGEFWrapper(new MitigationMitigatedDangersCreateCommand(req, req.getSource(), req.getTarget()));
+	protected Command getCompleteCreateRelationshipCommand(
+			CreateRelationshipRequest req) {
+		if (UrmlElementTypes.MitigationMitigatedDangers_4012 == req
+				.getElementType()) {
+			return getGEFWrapper(new MitigationMitigatedDangersCreateCommand(
+					req, req.getSource(), req.getTarget()));
 		}
 		if (UrmlElementTypes.DangerHarmedAssets_4013 == req.getElementType()) {
 			return null;
 		}
 		if (UrmlElementTypes.AssetTriggeredDangers_4017 == req.getElementType()) {
-			return getGEFWrapper(new AssetTriggeredDangersCreateCommand(req, req.getSource(), req.getTarget()));
+			return getGEFWrapper(new AssetTriggeredDangersCreateCommand(req,
+					req.getSource(), req.getTarget()));
+		}
+		if (UrmlElementTypes.UrmlModelElementAssociations_4048 == req
+				.getElementType()) {
+			return getGEFWrapper(new UrmlModelElementAssociationsCreateCommand(
+					req, req.getSource(), req.getTarget()));
 		}
 		return null;
 	}
@@ -131,14 +173,19 @@
 	 * 
 	 * @generated
 	 */
-	protected Command getReorientReferenceRelationshipCommand(ReorientReferenceRelationshipRequest req) {
+	protected Command getReorientReferenceRelationshipCommand(
+			ReorientReferenceRelationshipRequest req) {
 		switch (getVisualID(req)) {
 		case MitigationMitigatedDangersEditPart.VISUAL_ID:
-			return getGEFWrapper(new MitigationMitigatedDangersReorientCommand(req));
+			return getGEFWrapper(new MitigationMitigatedDangersReorientCommand(
+					req));
 		case DangerHarmedAssetsEditPart.VISUAL_ID:
 			return getGEFWrapper(new DangerHarmedAssetsReorientCommand(req));
 		case AssetTriggeredDangersEditPart.VISUAL_ID:
 			return getGEFWrapper(new AssetTriggeredDangersReorientCommand(req));
+		case UrmlModelElementAssociationsEditPart.VISUAL_ID:
+			return getGEFWrapper(new UrmlModelElementAssociationsReorientCommand(
+					req));
 		}
 		return super.getReorientReferenceRelationshipCommand(req);
 	}
Index: src/org/unicase/ui/diagram/urml/edit/policies/StakeholderItemSemanticEditPolicy.java
===================================================================
--- src/org/unicase/ui/diagram/urml/edit/policies/StakeholderItemSemanticEditPolicy.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/edit/policies/StakeholderItemSemanticEditPolicy.java	(working copy)
@@ -16,14 +16,18 @@
 import org.eclipse.gmf.runtime.notation.View;
 import org.unicase.ui.diagram.urml.edit.commands.StakeholderGoalsCreateCommand;
 import org.unicase.ui.diagram.urml.edit.commands.StakeholderGoalsReorientCommand;
+import org.unicase.ui.diagram.urml.edit.commands.UrmlModelElementAssociationsCreateCommand;
+import org.unicase.ui.diagram.urml.edit.commands.UrmlModelElementAssociationsReorientCommand;
 import org.unicase.ui.diagram.urml.edit.parts.StakeholderGoalsEditPart;
+import org.unicase.ui.diagram.urml.edit.parts.UrmlModelElementAssociationsEditPart;
 import org.unicase.ui.diagram.urml.part.UrmlVisualIDRegistry;
 import org.unicase.ui.diagram.urml.providers.UrmlElementTypes;
 
 /**
  * @generated
  */
-public class StakeholderItemSemanticEditPolicy extends UrmlBaseItemSemanticEditPolicy {
+public class StakeholderItemSemanticEditPolicy extends
+		UrmlBaseItemSemanticEditPolicy {
 
 	/**
 	 * @generated
@@ -37,13 +41,34 @@
 	 */
 	protected Command getDestroyElementCommand(DestroyElementRequest req) {
 		View view = (View) getHost().getModel();
-		CompositeTransactionalCommand cmd = new CompositeTransactionalCommand(getEditingDomain(), null);
+		CompositeTransactionalCommand cmd = new CompositeTransactionalCommand(
+				getEditingDomain(), null);
 		cmd.setTransactionNestingEnabled(false);
-		for (Iterator it = view.getSourceEdges().iterator(); it.hasNext();) {
+		for (Iterator<?> it = view.getTargetEdges().iterator(); it.hasNext();) {
+			Edge incomingLink = (Edge) it.next();
+			if (UrmlVisualIDRegistry.getVisualID(incomingLink) == UrmlModelElementAssociationsEditPart.VISUAL_ID) {
+				DestroyReferenceRequest r = new DestroyReferenceRequest(
+						incomingLink.getSource().getElement(), null,
+						incomingLink.getTarget().getElement(), false);
+				cmd.add(new DestroyReferenceCommand(r));
+				cmd.add(new DeleteCommand(getEditingDomain(), incomingLink));
+				continue;
+			}
+		}
+		for (Iterator<?> it = view.getSourceEdges().iterator(); it.hasNext();) {
 			Edge outgoingLink = (Edge) it.next();
 			if (UrmlVisualIDRegistry.getVisualID(outgoingLink) == StakeholderGoalsEditPart.VISUAL_ID) {
-				DestroyReferenceRequest r = new DestroyReferenceRequest(outgoingLink.getSource().getElement(), null,
-					outgoingLink.getTarget().getElement(), false);
+				DestroyReferenceRequest r = new DestroyReferenceRequest(
+						outgoingLink.getSource().getElement(), null,
+						outgoingLink.getTarget().getElement(), false);
+				cmd.add(new DestroyReferenceCommand(r));
+				cmd.add(new DeleteCommand(getEditingDomain(), outgoingLink));
+				continue;
+			}
+			if (UrmlVisualIDRegistry.getVisualID(outgoingLink) == UrmlModelElementAssociationsEditPart.VISUAL_ID) {
+				DestroyReferenceRequest r = new DestroyReferenceRequest(
+						outgoingLink.getSource().getElement(), null,
+						outgoingLink.getTarget().getElement(), false);
 				cmd.add(new DestroyReferenceCommand(r));
 				cmd.add(new DeleteCommand(getEditingDomain(), outgoingLink));
 				continue;
@@ -66,16 +91,24 @@
 	 */
 	protected Command getCreateRelationshipCommand(CreateRelationshipRequest req) {
 		Command command = req.getTarget() == null ? getStartCreateRelationshipCommand(req)
-			: getCompleteCreateRelationshipCommand(req);
-		return command != null ? command : super.getCreateRelationshipCommand(req);
+				: getCompleteCreateRelationshipCommand(req);
+		return command != null ? command : super
+				.getCreateRelationshipCommand(req);
 	}
 
 	/**
 	 * @generated
 	 */
-	protected Command getStartCreateRelationshipCommand(CreateRelationshipRequest req) {
+	protected Command getStartCreateRelationshipCommand(
+			CreateRelationshipRequest req) {
 		if (UrmlElementTypes.StakeholderGoals_4008 == req.getElementType()) {
-			return getGEFWrapper(new StakeholderGoalsCreateCommand(req, req.getSource(), req.getTarget()));
+			return getGEFWrapper(new StakeholderGoalsCreateCommand(req,
+					req.getSource(), req.getTarget()));
+		}
+		if (UrmlElementTypes.UrmlModelElementAssociations_4048 == req
+				.getElementType()) {
+			return getGEFWrapper(new UrmlModelElementAssociationsCreateCommand(
+					req, req.getSource(), req.getTarget()));
 		}
 		return null;
 	}
@@ -83,10 +116,16 @@
 	/**
 	 * @generated
 	 */
-	protected Command getCompleteCreateRelationshipCommand(CreateRelationshipRequest req) {
+	protected Command getCompleteCreateRelationshipCommand(
+			CreateRelationshipRequest req) {
 		if (UrmlElementTypes.StakeholderGoals_4008 == req.getElementType()) {
 			return null;
 		}
+		if (UrmlElementTypes.UrmlModelElementAssociations_4048 == req
+				.getElementType()) {
+			return getGEFWrapper(new UrmlModelElementAssociationsCreateCommand(
+					req, req.getSource(), req.getTarget()));
+		}
 		return null;
 	}
 
@@ -96,10 +135,14 @@
 	 * 
 	 * @generated
 	 */
-	protected Command getReorientReferenceRelationshipCommand(ReorientReferenceRelationshipRequest req) {
+	protected Command getReorientReferenceRelationshipCommand(
+			ReorientReferenceRelationshipRequest req) {
 		switch (getVisualID(req)) {
 		case StakeholderGoalsEditPart.VISUAL_ID:
 			return getGEFWrapper(new StakeholderGoalsReorientCommand(req));
+		case UrmlModelElementAssociationsEditPart.VISUAL_ID:
+			return getGEFWrapper(new UrmlModelElementAssociationsReorientCommand(
+					req));
 		}
 		return super.getReorientReferenceRelationshipCommand(req);
 	}
Index: src/org/unicase/ui/diagram/urml/edit/policies/DangerHarmedAssetsItemSemanticEditPolicy.java
===================================================================
--- src/org/unicase/ui/diagram/urml/edit/policies/DangerHarmedAssetsItemSemanticEditPolicy.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/edit/policies/DangerHarmedAssetsItemSemanticEditPolicy.java	(working copy)
@@ -8,7 +8,8 @@
 /**
  * @generated
  */
-public class DangerHarmedAssetsItemSemanticEditPolicy extends UrmlBaseItemSemanticEditPolicy {
+public class DangerHarmedAssetsItemSemanticEditPolicy extends
+		UrmlBaseItemSemanticEditPolicy {
 
 	/**
 	 * @generated
Index: src/org/unicase/ui/diagram/urml/edit/policies/UrmlTextNonResizableEditPolicy.java
===================================================================
--- src/org/unicase/ui/diagram/urml/edit/policies/UrmlTextNonResizableEditPolicy.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/edit/policies/UrmlTextNonResizableEditPolicy.java	(working copy)
@@ -133,8 +133,10 @@
 		if (getHostFigure() instanceof Label) {
 			Label feedbackFigure = new Label();
 			feedbackFigure.setOpaque(true);
-			feedbackFigure.setBackgroundColor(ColorConstants.menuBackgroundSelected);
-			feedbackFigure.setForegroundColor(ColorConstants.menuForegroundSelected);
+			feedbackFigure
+					.setBackgroundColor(ColorConstants.menuBackgroundSelected);
+			feedbackFigure
+					.setForegroundColor(ColorConstants.menuForegroundSelected);
 			return feedbackFigure;
 		} else {
 			RectangleFigure feedbackFigure = new RectangleFigure();
@@ -174,7 +176,8 @@
 				updateLabel((Label) selectionFeedbackFigure);
 				selectionFeedbackFigure.setBounds(getFeedbackBounds());
 			} else {
-				selectionFeedbackFigure.setBounds(getFeedbackBounds().expand(5, 5));
+				selectionFeedbackFigure.setBounds(getFeedbackBounds().expand(5,
+						5));
 			}
 		}
 	}
Index: src/org/unicase/ui/diagram/urml/edit/policies/AbstractFeatureSubFeaturesItemSemanticEditPolicy.java
===================================================================
--- src/org/unicase/ui/diagram/urml/edit/policies/AbstractFeatureSubFeaturesItemSemanticEditPolicy.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/edit/policies/AbstractFeatureSubFeaturesItemSemanticEditPolicy.java	(working copy)
@@ -14,7 +14,8 @@
 /**
  * @generated
  */
-public class AbstractFeatureSubFeaturesItemSemanticEditPolicy extends UrmlBaseItemSemanticEditPolicy {
+public class AbstractFeatureSubFeaturesItemSemanticEditPolicy extends
+		UrmlBaseItemSemanticEditPolicy {
 
 	/**
 	 * @generated
@@ -28,11 +29,13 @@
 	 */
 	protected Command getDestroyReferenceCommand(DestroyReferenceRequest req) {
 		return getGEFWrapper(new DestroyReferenceCommand(req) {
-			protected CommandResult doExecuteWithResult(IProgressMonitor progressMonitor, IAdaptable info)
-				throws ExecutionException {
+			protected CommandResult doExecuteWithResult(
+					IProgressMonitor progressMonitor, IAdaptable info)
+					throws ExecutionException {
 				EObject referencedObject = getReferencedObject();
 				Resource resource = referencedObject.eResource();
-				CommandResult result = super.doExecuteWithResult(progressMonitor, info);
+				CommandResult result = super.doExecuteWithResult(
+						progressMonitor, info);
 				if (resource != null) {
 					resource.getContents().add(referencedObject);
 				}
Index: src/org/unicase/ui/diagram/urml/edit/policies/FunctionalRequirementItemSemanticEditPolicy.java
===================================================================
--- src/org/unicase/ui/diagram/urml/edit/policies/FunctionalRequirementItemSemanticEditPolicy.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/edit/policies/FunctionalRequirementItemSemanticEditPolicy.java	(working copy)
@@ -28,17 +28,21 @@
 import org.unicase.ui.diagram.urml.edit.commands.MitigationMitigatedDangersReorientCommand;
 import org.unicase.ui.diagram.urml.edit.commands.RequirementImplementingServicesCreateCommand;
 import org.unicase.ui.diagram.urml.edit.commands.RequirementImplementingServicesReorientCommand;
+import org.unicase.ui.diagram.urml.edit.commands.UrmlModelElementAssociationsCreateCommand;
+import org.unicase.ui.diagram.urml.edit.commands.UrmlModelElementAssociationsReorientCommand;
 import org.unicase.ui.diagram.urml.edit.parts.AbstractFeatureDetailingFunctionalRequirementsEditPart;
 import org.unicase.ui.diagram.urml.edit.parts.FunctionalRequirementSubFunctionalRequirementsEditPart;
 import org.unicase.ui.diagram.urml.edit.parts.MitigationMitigatedDangersEditPart;
 import org.unicase.ui.diagram.urml.edit.parts.RequirementImplementingServicesEditPart;
+import org.unicase.ui.diagram.urml.edit.parts.UrmlModelElementAssociationsEditPart;
 import org.unicase.ui.diagram.urml.part.UrmlVisualIDRegistry;
 import org.unicase.ui.diagram.urml.providers.UrmlElementTypes;
 
 /**
  * @generated
  */
-public class FunctionalRequirementItemSemanticEditPolicy extends UrmlBaseItemSemanticEditPolicy {
+public class FunctionalRequirementItemSemanticEditPolicy extends
+		UrmlBaseItemSemanticEditPolicy {
 
 	/**
 	 * @generated
@@ -52,26 +56,31 @@
 	 */
 	protected Command getDestroyElementCommand(DestroyElementRequest req) {
 		View view = (View) getHost().getModel();
-		CompositeTransactionalCommand cmd = new CompositeTransactionalCommand(getEditingDomain(), null);
+		CompositeTransactionalCommand cmd = new CompositeTransactionalCommand(
+				getEditingDomain(), null);
 		cmd.setTransactionNestingEnabled(false);
-		for (Iterator it = view.getTargetEdges().iterator(); it.hasNext();) {
+		for (Iterator<?> it = view.getTargetEdges().iterator(); it.hasNext();) {
 			Edge incomingLink = (Edge) it.next();
 			if (UrmlVisualIDRegistry.getVisualID(incomingLink) == AbstractFeatureDetailingFunctionalRequirementsEditPart.VISUAL_ID) {
-				DestroyReferenceRequest r = new DestroyReferenceRequest(incomingLink.getSource().getElement(), null,
-					incomingLink.getTarget().getElement(), false);
+				DestroyReferenceRequest r = new DestroyReferenceRequest(
+						incomingLink.getSource().getElement(), null,
+						incomingLink.getTarget().getElement(), false);
 				cmd.add(new DestroyReferenceCommand(r));
 				cmd.add(new DeleteCommand(getEditingDomain(), incomingLink));
 				continue;
 			}
 			if (UrmlVisualIDRegistry.getVisualID(incomingLink) == FunctionalRequirementSubFunctionalRequirementsEditPart.VISUAL_ID) {
-				DestroyReferenceRequest r = new DestroyReferenceRequest(incomingLink.getSource().getElement(), null,
-					incomingLink.getTarget().getElement(), false);
+				DestroyReferenceRequest r = new DestroyReferenceRequest(
+						incomingLink.getSource().getElement(), null,
+						incomingLink.getTarget().getElement(), false);
 				cmd.add(new DestroyReferenceCommand(r) {
-					protected CommandResult doExecuteWithResult(IProgressMonitor progressMonitor, IAdaptable info)
-						throws ExecutionException {
+					protected CommandResult doExecuteWithResult(
+							IProgressMonitor progressMonitor, IAdaptable info)
+							throws ExecutionException {
 						EObject referencedObject = getReferencedObject();
 						Resource resource = referencedObject.eResource();
-						CommandResult result = super.doExecuteWithResult(progressMonitor, info);
+						CommandResult result = super.doExecuteWithResult(
+								progressMonitor, info);
 						if (resource != null) {
 							resource.getContents().add(referencedObject);
 						}
@@ -81,25 +90,37 @@
 				cmd.add(new DeleteCommand(getEditingDomain(), incomingLink));
 				continue;
 			}
+			if (UrmlVisualIDRegistry.getVisualID(incomingLink) == UrmlModelElementAssociationsEditPart.VISUAL_ID) {
+				DestroyReferenceRequest r = new DestroyReferenceRequest(
+						incomingLink.getSource().getElement(), null,
+						incomingLink.getTarget().getElement(), false);
+				cmd.add(new DestroyReferenceCommand(r));
+				cmd.add(new DeleteCommand(getEditingDomain(), incomingLink));
+				continue;
+			}
 		}
-		for (Iterator it = view.getSourceEdges().iterator(); it.hasNext();) {
+		for (Iterator<?> it = view.getSourceEdges().iterator(); it.hasNext();) {
 			Edge outgoingLink = (Edge) it.next();
 			if (UrmlVisualIDRegistry.getVisualID(outgoingLink) == RequirementImplementingServicesEditPart.VISUAL_ID) {
-				DestroyReferenceRequest r = new DestroyReferenceRequest(outgoingLink.getSource().getElement(), null,
-					outgoingLink.getTarget().getElement(), false);
+				DestroyReferenceRequest r = new DestroyReferenceRequest(
+						outgoingLink.getSource().getElement(), null,
+						outgoingLink.getTarget().getElement(), false);
 				cmd.add(new DestroyReferenceCommand(r));
 				cmd.add(new DeleteCommand(getEditingDomain(), outgoingLink));
 				continue;
 			}
 			if (UrmlVisualIDRegistry.getVisualID(outgoingLink) == FunctionalRequirementSubFunctionalRequirementsEditPart.VISUAL_ID) {
-				DestroyReferenceRequest r = new DestroyReferenceRequest(outgoingLink.getSource().getElement(), null,
-					outgoingLink.getTarget().getElement(), false);
+				DestroyReferenceRequest r = new DestroyReferenceRequest(
+						outgoingLink.getSource().getElement(), null,
+						outgoingLink.getTarget().getElement(), false);
 				cmd.add(new DestroyReferenceCommand(r) {
-					protected CommandResult doExecuteWithResult(IProgressMonitor progressMonitor, IAdaptable info)
-						throws ExecutionException {
+					protected CommandResult doExecuteWithResult(
+							IProgressMonitor progressMonitor, IAdaptable info)
+							throws ExecutionException {
 						EObject referencedObject = getReferencedObject();
 						Resource resource = referencedObject.eResource();
-						CommandResult result = super.doExecuteWithResult(progressMonitor, info);
+						CommandResult result = super.doExecuteWithResult(
+								progressMonitor, info);
 						if (resource != null) {
 							resource.getContents().add(referencedObject);
 						}
@@ -110,8 +131,17 @@
 				continue;
 			}
 			if (UrmlVisualIDRegistry.getVisualID(outgoingLink) == MitigationMitigatedDangersEditPart.VISUAL_ID) {
-				DestroyReferenceRequest r = new DestroyReferenceRequest(outgoingLink.getSource().getElement(), null,
-					outgoingLink.getTarget().getElement(), false);
+				DestroyReferenceRequest r = new DestroyReferenceRequest(
+						outgoingLink.getSource().getElement(), null,
+						outgoingLink.getTarget().getElement(), false);
+				cmd.add(new DestroyReferenceCommand(r));
+				cmd.add(new DeleteCommand(getEditingDomain(), outgoingLink));
+				continue;
+			}
+			if (UrmlVisualIDRegistry.getVisualID(outgoingLink) == UrmlModelElementAssociationsEditPart.VISUAL_ID) {
+				DestroyReferenceRequest r = new DestroyReferenceRequest(
+						outgoingLink.getSource().getElement(), null,
+						outgoingLink.getTarget().getElement(), false);
 				cmd.add(new DestroyReferenceCommand(r));
 				cmd.add(new DeleteCommand(getEditingDomain(), outgoingLink));
 				continue;
@@ -134,26 +164,39 @@
 	 */
 	protected Command getCreateRelationshipCommand(CreateRelationshipRequest req) {
 		Command command = req.getTarget() == null ? getStartCreateRelationshipCommand(req)
-			: getCompleteCreateRelationshipCommand(req);
-		return command != null ? command : super.getCreateRelationshipCommand(req);
+				: getCompleteCreateRelationshipCommand(req);
+		return command != null ? command : super
+				.getCreateRelationshipCommand(req);
 	}
 
 	/**
 	 * @generated
 	 */
-	protected Command getStartCreateRelationshipCommand(CreateRelationshipRequest req) {
-		if (UrmlElementTypes.AbstractFeatureDetailingFunctionalRequirements_4035 == req.getElementType()) {
+	protected Command getStartCreateRelationshipCommand(
+			CreateRelationshipRequest req) {
+		if (UrmlElementTypes.AbstractFeatureDetailingFunctionalRequirements_4035 == req
+				.getElementType()) {
 			return null;
 		}
-		if (UrmlElementTypes.RequirementImplementingServices_4005 == req.getElementType()) {
-			return getGEFWrapper(new RequirementImplementingServicesCreateCommand(req, req.getSource(), req.getTarget()));
+		if (UrmlElementTypes.RequirementImplementingServices_4005 == req
+				.getElementType()) {
+			return getGEFWrapper(new RequirementImplementingServicesCreateCommand(
+					req, req.getSource(), req.getTarget()));
 		}
-		if (UrmlElementTypes.FunctionalRequirementSubFunctionalRequirements_4044 == req.getElementType()) {
-			return getGEFWrapper(new FunctionalRequirementSubFunctionalRequirementsCreateCommand(req, req.getSource(),
-				req.getTarget()));
+		if (UrmlElementTypes.FunctionalRequirementSubFunctionalRequirements_4044 == req
+				.getElementType()) {
+			return getGEFWrapper(new FunctionalRequirementSubFunctionalRequirementsCreateCommand(
+					req, req.getSource(), req.getTarget()));
 		}
-		if (UrmlElementTypes.MitigationMitigatedDangers_4012 == req.getElementType()) {
-			return getGEFWrapper(new MitigationMitigatedDangersCreateCommand(req, req.getSource(), req.getTarget()));
+		if (UrmlElementTypes.MitigationMitigatedDangers_4012 == req
+				.getElementType()) {
+			return getGEFWrapper(new MitigationMitigatedDangersCreateCommand(
+					req, req.getSource(), req.getTarget()));
+		}
+		if (UrmlElementTypes.UrmlModelElementAssociations_4048 == req
+				.getElementType()) {
+			return getGEFWrapper(new UrmlModelElementAssociationsCreateCommand(
+					req, req.getSource(), req.getTarget()));
 		}
 		return null;
 	}
@@ -161,21 +204,31 @@
 	/**
 	 * @generated
 	 */
-	protected Command getCompleteCreateRelationshipCommand(CreateRelationshipRequest req) {
-		if (UrmlElementTypes.AbstractFeatureDetailingFunctionalRequirements_4035 == req.getElementType()) {
-			return getGEFWrapper(new AbstractFeatureDetailingFunctionalRequirementsCreateCommand(req, req.getSource(),
-				req.getTarget()));
+	protected Command getCompleteCreateRelationshipCommand(
+			CreateRelationshipRequest req) {
+		if (UrmlElementTypes.AbstractFeatureDetailingFunctionalRequirements_4035 == req
+				.getElementType()) {
+			return getGEFWrapper(new AbstractFeatureDetailingFunctionalRequirementsCreateCommand(
+					req, req.getSource(), req.getTarget()));
 		}
-		if (UrmlElementTypes.RequirementImplementingServices_4005 == req.getElementType()) {
+		if (UrmlElementTypes.RequirementImplementingServices_4005 == req
+				.getElementType()) {
 			return null;
 		}
-		if (UrmlElementTypes.FunctionalRequirementSubFunctionalRequirements_4044 == req.getElementType()) {
-			return getGEFWrapper(new FunctionalRequirementSubFunctionalRequirementsCreateCommand(req, req.getSource(),
-				req.getTarget()));
+		if (UrmlElementTypes.FunctionalRequirementSubFunctionalRequirements_4044 == req
+				.getElementType()) {
+			return getGEFWrapper(new FunctionalRequirementSubFunctionalRequirementsCreateCommand(
+					req, req.getSource(), req.getTarget()));
 		}
-		if (UrmlElementTypes.MitigationMitigatedDangers_4012 == req.getElementType()) {
+		if (UrmlElementTypes.MitigationMitigatedDangers_4012 == req
+				.getElementType()) {
 			return null;
 		}
+		if (UrmlElementTypes.UrmlModelElementAssociations_4048 == req
+				.getElementType()) {
+			return getGEFWrapper(new UrmlModelElementAssociationsCreateCommand(
+					req, req.getSource(), req.getTarget()));
+		}
 		return null;
 	}
 
@@ -185,16 +238,24 @@
 	 * 
 	 * @generated
 	 */
-	protected Command getReorientReferenceRelationshipCommand(ReorientReferenceRelationshipRequest req) {
+	protected Command getReorientReferenceRelationshipCommand(
+			ReorientReferenceRelationshipRequest req) {
 		switch (getVisualID(req)) {
 		case AbstractFeatureDetailingFunctionalRequirementsEditPart.VISUAL_ID:
-			return getGEFWrapper(new AbstractFeatureDetailingFunctionalRequirementsReorientCommand(req));
+			return getGEFWrapper(new AbstractFeatureDetailingFunctionalRequirementsReorientCommand(
+					req));
 		case RequirementImplementingServicesEditPart.VISUAL_ID:
-			return getGEFWrapper(new RequirementImplementingServicesReorientCommand(req));
+			return getGEFWrapper(new RequirementImplementingServicesReorientCommand(
+					req));
 		case FunctionalRequirementSubFunctionalRequirementsEditPart.VISUAL_ID:
-			return getGEFWrapper(new FunctionalRequirementSubFunctionalRequirementsReorientCommand(req));
+			return getGEFWrapper(new FunctionalRequirementSubFunctionalRequirementsReorientCommand(
+					req));
 		case MitigationMitigatedDangersEditPart.VISUAL_ID:
-			return getGEFWrapper(new MitigationMitigatedDangersReorientCommand(req));
+			return getGEFWrapper(new MitigationMitigatedDangersReorientCommand(
+					req));
+		case UrmlModelElementAssociationsEditPart.VISUAL_ID:
+			return getGEFWrapper(new UrmlModelElementAssociationsReorientCommand(
+					req));
 		}
 		return super.getReorientReferenceRelationshipCommand(req);
 	}
Index: src/org/unicase/ui/diagram/urml/edit/policies/StakeholderGoalsItemSemanticEditPolicy.java
===================================================================
--- src/org/unicase/ui/diagram/urml/edit/policies/StakeholderGoalsItemSemanticEditPolicy.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/edit/policies/StakeholderGoalsItemSemanticEditPolicy.java	(working copy)
@@ -8,7 +8,8 @@
 /**
  * @generated
  */
-public class StakeholderGoalsItemSemanticEditPolicy extends UrmlBaseItemSemanticEditPolicy {
+public class StakeholderGoalsItemSemanticEditPolicy extends
+		UrmlBaseItemSemanticEditPolicy {
 
 	/**
 	 * @generated
Index: src/org/unicase/ui/diagram/urml/edit/policies/MitigationMitigatedDangersItemSemanticEditPolicy.java
===================================================================
--- src/org/unicase/ui/diagram/urml/edit/policies/MitigationMitigatedDangersItemSemanticEditPolicy.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/edit/policies/MitigationMitigatedDangersItemSemanticEditPolicy.java	(working copy)
@@ -8,7 +8,8 @@
 /**
  * @generated
  */
-public class MitigationMitigatedDangersItemSemanticEditPolicy extends UrmlBaseItemSemanticEditPolicy {
+public class MitigationMitigatedDangersItemSemanticEditPolicy extends
+		UrmlBaseItemSemanticEditPolicy {
 
 	/**
 	 * @generated
Index: src/org/unicase/ui/diagram/urml/edit/policies/URMLDiagramCanonicalEditPolicy.java
===================================================================
--- src/org/unicase/ui/diagram/urml/edit/policies/URMLDiagramCanonicalEditPolicy.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/edit/policies/URMLDiagramCanonicalEditPolicy.java	(working copy)
@@ -1,5 +1,6 @@
 package org.unicase.ui.diagram.urml.edit.policies;
 
+import java.util.ArrayList;
 import java.util.Collection;
 import java.util.Collections;
 import java.util.HashMap;
@@ -12,17 +13,23 @@
 
 import org.eclipse.core.runtime.IAdaptable;
 import org.eclipse.emf.ecore.EObject;
+import org.eclipse.emf.ecore.EStructuralFeature;
 import org.eclipse.gef.EditPart;
 import org.eclipse.gef.commands.Command;
 import org.eclipse.gmf.runtime.diagram.core.util.ViewUtil;
 import org.eclipse.gmf.runtime.diagram.ui.commands.DeferredLayoutCommand;
 import org.eclipse.gmf.runtime.diagram.ui.commands.ICommandProxy;
+import org.eclipse.gmf.runtime.diagram.ui.commands.SetViewMutabilityCommand;
 import org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart;
 import org.eclipse.gmf.runtime.diagram.ui.editpolicies.CanonicalConnectionEditPolicy;
+import org.eclipse.gmf.runtime.diagram.ui.editpolicies.CanonicalEditPolicy;
 import org.eclipse.gmf.runtime.diagram.ui.requests.CreateConnectionViewRequest;
+import org.eclipse.gmf.runtime.diagram.ui.requests.CreateViewRequest;
 import org.eclipse.gmf.runtime.diagram.ui.requests.RequestConstants;
+import org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter;
 import org.eclipse.gmf.runtime.notation.Diagram;
 import org.eclipse.gmf.runtime.notation.Edge;
+import org.eclipse.gmf.runtime.notation.Node;
 import org.eclipse.gmf.runtime.notation.View;
 import org.unicase.model.diagram.DiagramPackage;
 import org.unicase.ui.diagram.urml.edit.parts.ActorEditPart;
@@ -50,21 +57,38 @@
 /**
  * @generated
  */
-public class URMLDiagramCanonicalEditPolicy extends CanonicalConnectionEditPolicy {
+public class URMLDiagramCanonicalEditPolicy extends CanonicalEditPolicy {
 
 	/**
 	 * @generated
 	 */
-	Set myFeaturesToSynchronize;
+	protected void refreshOnActivate() {
+		// Need to activate editpart children before invoking the canonical refresh for EditParts to add event listeners
+		List<?> c = getHost().getChildren();
+		for (int i = 0; i < c.size(); i++) {
+			((EditPart) c.get(i)).activate();
+		}
+		super.refreshOnActivate();
+	}
 
 	/**
 	 * @generated
 	 */
+	protected EStructuralFeature getFeatureToSynchronize() {
+		return DiagramPackage.eINSTANCE.getMEDiagram_NewElements();
+	}
+
+	/**
+	 * @generated
+	 */
+	@SuppressWarnings("rawtypes")
 	protected List getSemanticChildrenList() {
 		View viewObject = (View) getHost().getModel();
-		List result = new LinkedList();
-		for (Iterator it = UrmlDiagramUpdater.getURMLDiagram_1000SemanticChildren(viewObject).iterator(); it.hasNext();) {
-			result.add(((UrmlNodeDescriptor) it.next()).getModelElement());
+		LinkedList<EObject> result = new LinkedList<EObject>();
+		List<UrmlNodeDescriptor> childDescriptors = UrmlDiagramUpdater
+				.getURMLDiagram_1000SemanticChildren(viewObject);
+		for (UrmlNodeDescriptor d : childDescriptors) {
+			result.add(d.getModelElement());
 		}
 		return result;
 	}
@@ -72,14 +96,16 @@
 	/**
 	 * @generated
 	 */
-	protected boolean shouldDeleteView(View view) {
-		return true;
+	protected boolean isOrphaned(Collection<EObject> semanticChildren,
+			final View view) {
+		return isMyDiagramElement(view)
+				&& !semanticChildren.contains(view.getElement());
 	}
 
 	/**
 	 * @generated
 	 */
-	protected boolean isOrphaned(Collection semanticChildren, final View view) {
+	private boolean isMyDiagramElement(View view) {
 		int visualID = UrmlVisualIDRegistry.getVisualID(view);
 		switch (visualID) {
 		case StakeholderEditPart.VISUAL_ID:
@@ -94,9 +120,7 @@
 		case VariationPointEditPart.VISUAL_ID:
 		case VariationPointInstanceEditPart.VISUAL_ID:
 		case ProductEditPart.VISUAL_ID:
-			if (!semanticChildren.contains(view.getElement())) {
-				return true;
-			}
+			return true;
 		}
 		return false;
 	}
@@ -104,66 +128,92 @@
 	/**
 	 * @generated
 	 */
-	protected String getDefaultFactoryHint() {
-		return null;
-	}
-
-	/**
-	 * @generated
-	 */
-	protected Set getFeaturesToSynchronize() {
-		if (myFeaturesToSynchronize == null) {
-			myFeaturesToSynchronize = new HashSet();
-			myFeaturesToSynchronize.add(DiagramPackage.eINSTANCE.getMEDiagram_NewElements());
+	protected void refreshSemantic() {
+		if (resolveSemanticElement() == null) {
+			return;
 		}
-		return myFeaturesToSynchronize;
-	}
-
-	/**
-	 * @generated
-	 */
-	protected List getSemanticConnectionsList() {
-		return Collections.EMPTY_LIST;
-	}
-
-	/**
-	 * @generated
-	 */
-	protected EObject getSourceElement(EObject relationship) {
-		return null;
-	}
-
-	/**
-	 * @generated
-	 */
-	protected EObject getTargetElement(EObject relationship) {
-		return null;
-	}
+		LinkedList<IAdaptable> createdViews = new LinkedList<IAdaptable>();
+		List<UrmlNodeDescriptor> childDescriptors = UrmlDiagramUpdater
+				.getURMLDiagram_1000SemanticChildren((View) getHost()
+						.getModel());
+		LinkedList<View> orphaned = new LinkedList<View>();
+		// we care to check only views we recognize as ours
+		LinkedList<View> knownViewChildren = new LinkedList<View>();
+		for (View v : getViewChildren()) {
+			if (isMyDiagramElement(v)) {
+				knownViewChildren.add(v);
+			}
+		}
+		// alternative to #cleanCanonicalSemanticChildren(getViewChildren(), semanticChildren)
+		//
+		// iteration happens over list of desired semantic elements, trying to find best matching View, while original CEP
+		// iterates views, potentially losing view (size/bounds) information - i.e. if there are few views to reference same EObject, only last one 
+		// to answer isOrphaned == true will be used for the domain element representation, see #cleanCanonicalSemanticChildren()
+		for (Iterator<UrmlNodeDescriptor> descriptorsIterator = childDescriptors
+				.iterator(); descriptorsIterator.hasNext();) {
+			UrmlNodeDescriptor next = descriptorsIterator.next();
+			String hint = UrmlVisualIDRegistry.getType(next.getVisualID());
+			LinkedList<View> perfectMatch = new LinkedList<View>(); // both semanticElement and hint match that of NodeDescriptor
+			for (View childView : getViewChildren()) {
+				EObject semanticElement = childView.getElement();
+				if (next.getModelElement().equals(semanticElement)) {
+					if (hint.equals(childView.getType())) {
+						perfectMatch.add(childView);
+						// actually, can stop iteration over view children here, but
+						// may want to use not the first view but last one as a 'real' match (the way original CEP does
+						// with its trick with viewToSemanticMap inside #cleanCanonicalSemanticChildren
+					}
+				}
+			}
+			if (perfectMatch.size() > 0) {
+				descriptorsIterator.remove(); // precise match found no need to create anything for the NodeDescriptor
+				// use only one view (first or last?), keep rest as orphaned for further consideration
+				knownViewChildren.remove(perfectMatch.getFirst());
+			}
+		}
+		// those left in knownViewChildren are subject to removal - they are our diagram elements we didn't find match to,
+		// or those we have potential matches to, and thus need to be recreated, preserving size/location information.
+		orphaned.addAll(knownViewChildren);
+		//
+		ArrayList<CreateViewRequest.ViewDescriptor> viewDescriptors = new ArrayList<CreateViewRequest.ViewDescriptor>(
+				childDescriptors.size());
+		for (UrmlNodeDescriptor next : childDescriptors) {
+			String hint = UrmlVisualIDRegistry.getType(next.getVisualID());
+			IAdaptable elementAdapter = new CanonicalElementAdapter(
+					next.getModelElement(), hint);
+			CreateViewRequest.ViewDescriptor descriptor = new CreateViewRequest.ViewDescriptor(
+					elementAdapter, Node.class, hint, ViewUtil.APPEND, false,
+					host().getDiagramPreferencesHint());
+			viewDescriptors.add(descriptor);
+		}
 
-	/**
-	 * @generated
-	 */
-	protected boolean shouldIncludeConnection(Edge connector, Collection children) {
-		return false;
-	}
+		boolean changed = deleteViews(orphaned.iterator());
+		//
+		CreateViewRequest request = getCreateViewRequest(viewDescriptors);
+		Command cmd = getCreateViewCommand(request);
+		if (cmd != null && cmd.canExecute()) {
+			SetViewMutabilityCommand.makeMutable(
+					new EObjectAdapter(host().getNotationView())).execute();
+			executeCommand(cmd);
+			@SuppressWarnings("unchecked")
+			List<IAdaptable> nl = (List<IAdaptable>) request.getNewObject();
+			createdViews.addAll(nl);
+		}
+		if (changed || createdViews.size() > 0) {
+			postProcessRefreshSemantic(createdViews);
+		}
 
-	/**
-	 * @generated
-	 */
-	protected void refreshSemantic() {
-		List createdViews = new LinkedList();
-		createdViews.addAll(refreshSemanticChildren());
-		List createdConnectionViews = new LinkedList();
-		createdConnectionViews.addAll(refreshSemanticConnections());
-		createdConnectionViews.addAll(refreshConnections());
+		Collection<IAdaptable> createdConnectionViews = refreshConnections();
 
 		if (createdViews.size() > 1) {
 			// perform a layout of the container
-			DeferredLayoutCommand layoutCmd = new DeferredLayoutCommand(host().getEditingDomain(), createdViews, host());
+			DeferredLayoutCommand layoutCmd = new DeferredLayoutCommand(host()
+					.getEditingDomain(), createdViews, host());
 			executeCommand(new ICommandProxy(layoutCmd));
 		}
 
 		createdViews.addAll(createdConnectionViews);
+
 		makeViewsImmutable(createdViews);
 	}
 
@@ -177,15 +227,19 @@
 	/**
 	 * @generated
 	 */
-	private Collection refreshConnections() {
-		Map domain2NotationMap = new HashMap();
-		Collection linkDescriptors = collectAllLinks(getDiagram(), domain2NotationMap);
+	private Collection<IAdaptable> refreshConnections() {
+		Map<EObject, View> domain2NotationMap = new HashMap<EObject, View>();
+		Collection<UrmlLinkDescriptor> linkDescriptors = collectAllLinks(
+				getDiagram(), domain2NotationMap);
 		Collection existingLinks = new LinkedList(getDiagram().getEdges());
-		for (Iterator linksIterator = existingLinks.iterator(); linksIterator.hasNext();) {
+		for (Iterator linksIterator = existingLinks.iterator(); linksIterator
+				.hasNext();) {
 			Edge nextDiagramLink = (Edge) linksIterator.next();
-			int diagramLinkVisualID = UrmlVisualIDRegistry.getVisualID(nextDiagramLink);
+			int diagramLinkVisualID = UrmlVisualIDRegistry
+					.getVisualID(nextDiagramLink);
 			if (diagramLinkVisualID == -1) {
-				if (nextDiagramLink.getSource() != null && nextDiagramLink.getTarget() != null) {
+				if (nextDiagramLink.getSource() != null
+						&& nextDiagramLink.getTarget() != null) {
 					linksIterator.remove();
 				}
 				continue;
@@ -193,12 +247,16 @@
 			EObject diagramLinkObject = nextDiagramLink.getElement();
 			EObject diagramLinkSrc = nextDiagramLink.getSource().getElement();
 			EObject diagramLinkDst = nextDiagramLink.getTarget().getElement();
-			for (Iterator linkDescriptorsIterator = linkDescriptors.iterator(); linkDescriptorsIterator.hasNext();) {
-				UrmlLinkDescriptor nextLinkDescriptor = (UrmlLinkDescriptor) linkDescriptorsIterator.next();
+			for (Iterator<UrmlLinkDescriptor> linkDescriptorsIterator = linkDescriptors
+					.iterator(); linkDescriptorsIterator.hasNext();) {
+				UrmlLinkDescriptor nextLinkDescriptor = linkDescriptorsIterator
+						.next();
 				if (diagramLinkObject == nextLinkDescriptor.getModelElement()
-					&& diagramLinkSrc == nextLinkDescriptor.getSource()
-					&& diagramLinkDst == nextLinkDescriptor.getDestination()
-					&& diagramLinkVisualID == nextLinkDescriptor.getVisualID()) {
+						&& diagramLinkSrc == nextLinkDescriptor.getSource()
+						&& diagramLinkDst == nextLinkDescriptor
+								.getDestination()
+						&& diagramLinkVisualID == nextLinkDescriptor
+								.getVisualID()) {
 					linksIterator.remove();
 					linkDescriptorsIterator.remove();
 					break;
@@ -212,171 +270,210 @@
 	/**
 	 * @generated
 	 */
-	private Collection collectAllLinks(View view, Map domain2NotationMap) {
-		if (!URMLDiagramEditPart.MODEL_ID.equals(UrmlVisualIDRegistry.getModelID(view))) {
-			return Collections.EMPTY_LIST;
+	private Collection<UrmlLinkDescriptor> collectAllLinks(View view,
+			Map<EObject, View> domain2NotationMap) {
+		if (!URMLDiagramEditPart.MODEL_ID.equals(UrmlVisualIDRegistry
+				.getModelID(view))) {
+			return Collections.emptyList();
 		}
-		Collection result = new LinkedList();
+		LinkedList<UrmlLinkDescriptor> result = new LinkedList<UrmlLinkDescriptor>();
 		switch (UrmlVisualIDRegistry.getVisualID(view)) {
 		case URMLDiagramEditPart.VISUAL_ID: {
 			if (!domain2NotationMap.containsKey(view.getElement())) {
-				result.addAll(UrmlDiagramUpdater.getURMLDiagram_1000ContainedLinks(view));
+				result.addAll(UrmlDiagramUpdater
+						.getURMLDiagram_1000ContainedLinks(view));
 			}
-			if (!domain2NotationMap.containsKey(view.getElement()) || view.getEAnnotation("Shortcut") == null) { //$NON-NLS-1$
+			if (!domain2NotationMap.containsKey(view.getElement())
+					|| view.getEAnnotation("Shortcut") == null) { //$NON-NLS-1$
 				domain2NotationMap.put(view.getElement(), view);
 			}
 			break;
 		}
 		case StakeholderEditPart.VISUAL_ID: {
 			if (!domain2NotationMap.containsKey(view.getElement())) {
-				result.addAll(UrmlDiagramUpdater.getStakeholder_2002ContainedLinks(view));
+				result.addAll(UrmlDiagramUpdater
+						.getStakeholder_2002ContainedLinks(view));
 			}
-			if (!domain2NotationMap.containsKey(view.getElement()) || view.getEAnnotation("Shortcut") == null) { //$NON-NLS-1$
+			if (!domain2NotationMap.containsKey(view.getElement())
+					|| view.getEAnnotation("Shortcut") == null) { //$NON-NLS-1$
 				domain2NotationMap.put(view.getElement(), view);
 			}
 			break;
 		}
 		case GoalEditPart.VISUAL_ID: {
 			if (!domain2NotationMap.containsKey(view.getElement())) {
-				result.addAll(UrmlDiagramUpdater.getGoal_2001ContainedLinks(view));
+				result.addAll(UrmlDiagramUpdater
+						.getGoal_2001ContainedLinks(view));
 			}
-			if (!domain2NotationMap.containsKey(view.getElement()) || view.getEAnnotation("Shortcut") == null) { //$NON-NLS-1$
+			if (!domain2NotationMap.containsKey(view.getElement())
+					|| view.getEAnnotation("Shortcut") == null) { //$NON-NLS-1$
 				domain2NotationMap.put(view.getElement(), view);
 			}
 			break;
 		}
 		case FunctionalRequirementEditPart.VISUAL_ID: {
 			if (!domain2NotationMap.containsKey(view.getElement())) {
-				result.addAll(UrmlDiagramUpdater.getFunctionalRequirement_2006ContainedLinks(view));
+				result.addAll(UrmlDiagramUpdater
+						.getFunctionalRequirement_2006ContainedLinks(view));
 			}
-			if (!domain2NotationMap.containsKey(view.getElement()) || view.getEAnnotation("Shortcut") == null) { //$NON-NLS-1$
+			if (!domain2NotationMap.containsKey(view.getElement())
+					|| view.getEAnnotation("Shortcut") == null) { //$NON-NLS-1$
 				domain2NotationMap.put(view.getElement(), view);
 			}
 			break;
 		}
 		case FeatureEditPart.VISUAL_ID: {
 			if (!domain2NotationMap.containsKey(view.getElement())) {
-				result.addAll(UrmlDiagramUpdater.getFeature_2012ContainedLinks(view));
+				result.addAll(UrmlDiagramUpdater
+						.getFeature_2012ContainedLinks(view));
 			}
-			if (!domain2NotationMap.containsKey(view.getElement()) || view.getEAnnotation("Shortcut") == null) { //$NON-NLS-1$
+			if (!domain2NotationMap.containsKey(view.getElement())
+					|| view.getEAnnotation("Shortcut") == null) { //$NON-NLS-1$
 				domain2NotationMap.put(view.getElement(), view);
 			}
 			break;
 		}
 		case ServiceEditPart.VISUAL_ID: {
 			if (!domain2NotationMap.containsKey(view.getElement())) {
-				result.addAll(UrmlDiagramUpdater.getService_2007ContainedLinks(view));
+				result.addAll(UrmlDiagramUpdater
+						.getService_2007ContainedLinks(view));
 			}
-			if (!domain2NotationMap.containsKey(view.getElement()) || view.getEAnnotation("Shortcut") == null) { //$NON-NLS-1$
+			if (!domain2NotationMap.containsKey(view.getElement())
+					|| view.getEAnnotation("Shortcut") == null) { //$NON-NLS-1$
 				domain2NotationMap.put(view.getElement(), view);
 			}
 			break;
 		}
 		case NonFunctionalRequirementEditPart.VISUAL_ID: {
 			if (!domain2NotationMap.containsKey(view.getElement())) {
-				result.addAll(UrmlDiagramUpdater.getNonFunctionalRequirement_2008ContainedLinks(view));
+				result.addAll(UrmlDiagramUpdater
+						.getNonFunctionalRequirement_2008ContainedLinks(view));
 			}
-			if (!domain2NotationMap.containsKey(view.getElement()) || view.getEAnnotation("Shortcut") == null) { //$NON-NLS-1$
+			if (!domain2NotationMap.containsKey(view.getElement())
+					|| view.getEAnnotation("Shortcut") == null) { //$NON-NLS-1$
 				domain2NotationMap.put(view.getElement(), view);
 			}
 			break;
 		}
 		case DangerEditPart.VISUAL_ID: {
 			if (!domain2NotationMap.containsKey(view.getElement())) {
-				result.addAll(UrmlDiagramUpdater.getDanger_2009ContainedLinks(view));
+				result.addAll(UrmlDiagramUpdater
+						.getDanger_2009ContainedLinks(view));
 			}
-			if (!domain2NotationMap.containsKey(view.getElement()) || view.getEAnnotation("Shortcut") == null) { //$NON-NLS-1$
+			if (!domain2NotationMap.containsKey(view.getElement())
+					|| view.getEAnnotation("Shortcut") == null) { //$NON-NLS-1$
 				domain2NotationMap.put(view.getElement(), view);
 			}
 			break;
 		}
 		case ActorEditPart.VISUAL_ID: {
 			if (!domain2NotationMap.containsKey(view.getElement())) {
-				result.addAll(UrmlDiagramUpdater.getActor_2010ContainedLinks(view));
+				result.addAll(UrmlDiagramUpdater
+						.getActor_2010ContainedLinks(view));
 			}
-			if (!domain2NotationMap.containsKey(view.getElement()) || view.getEAnnotation("Shortcut") == null) { //$NON-NLS-1$
+			if (!domain2NotationMap.containsKey(view.getElement())
+					|| view.getEAnnotation("Shortcut") == null) { //$NON-NLS-1$
 				domain2NotationMap.put(view.getElement(), view);
 			}
 			break;
 		}
 		case ProceduralMitigationEditPart.VISUAL_ID: {
 			if (!domain2NotationMap.containsKey(view.getElement())) {
-				result.addAll(UrmlDiagramUpdater.getProceduralMitigation_2011ContainedLinks(view));
+				result.addAll(UrmlDiagramUpdater
+						.getProceduralMitigation_2011ContainedLinks(view));
 			}
-			if (!domain2NotationMap.containsKey(view.getElement()) || view.getEAnnotation("Shortcut") == null) { //$NON-NLS-1$
+			if (!domain2NotationMap.containsKey(view.getElement())
+					|| view.getEAnnotation("Shortcut") == null) { //$NON-NLS-1$
 				domain2NotationMap.put(view.getElement(), view);
 			}
 			break;
 		}
 		case VariationPointEditPart.VISUAL_ID: {
 			if (!domain2NotationMap.containsKey(view.getElement())) {
-				result.addAll(UrmlDiagramUpdater.getVariationPoint_2013ContainedLinks(view));
+				result.addAll(UrmlDiagramUpdater
+						.getVariationPoint_2013ContainedLinks(view));
 			}
-			if (!domain2NotationMap.containsKey(view.getElement()) || view.getEAnnotation("Shortcut") == null) { //$NON-NLS-1$
+			if (!domain2NotationMap.containsKey(view.getElement())
+					|| view.getEAnnotation("Shortcut") == null) { //$NON-NLS-1$
 				domain2NotationMap.put(view.getElement(), view);
 			}
 			break;
 		}
 		case VariationPointInstanceEditPart.VISUAL_ID: {
 			if (!domain2NotationMap.containsKey(view.getElement())) {
-				result.addAll(UrmlDiagramUpdater.getVariationPointInstance_2014ContainedLinks(view));
+				result.addAll(UrmlDiagramUpdater
+						.getVariationPointInstance_2014ContainedLinks(view));
 			}
-			if (!domain2NotationMap.containsKey(view.getElement()) || view.getEAnnotation("Shortcut") == null) { //$NON-NLS-1$
+			if (!domain2NotationMap.containsKey(view.getElement())
+					|| view.getEAnnotation("Shortcut") == null) { //$NON-NLS-1$
 				domain2NotationMap.put(view.getElement(), view);
 			}
 			break;
 		}
 		case ProductEditPart.VISUAL_ID: {
 			if (!domain2NotationMap.containsKey(view.getElement())) {
-				result.addAll(UrmlDiagramUpdater.getProduct_2015ContainedLinks(view));
+				result.addAll(UrmlDiagramUpdater
+						.getProduct_2015ContainedLinks(view));
 			}
-			if (!domain2NotationMap.containsKey(view.getElement()) || view.getEAnnotation("Shortcut") == null) { //$NON-NLS-1$
+			if (!domain2NotationMap.containsKey(view.getElement())
+					|| view.getEAnnotation("Shortcut") == null) { //$NON-NLS-1$
 				domain2NotationMap.put(view.getElement(), view);
 			}
 			break;
 		}
 		case GoalReferenceEditPart.VISUAL_ID: {
 			if (!domain2NotationMap.containsKey(view.getElement())) {
-				result.addAll(UrmlDiagramUpdater.getGoalReference_4016ContainedLinks(view));
+				result.addAll(UrmlDiagramUpdater
+						.getGoalReference_4016ContainedLinks(view));
 			}
-			if (!domain2NotationMap.containsKey(view.getElement()) || view.getEAnnotation("Shortcut") == null) { //$NON-NLS-1$
+			if (!domain2NotationMap.containsKey(view.getElement())
+					|| view.getEAnnotation("Shortcut") == null) { //$NON-NLS-1$
 				domain2NotationMap.put(view.getElement(), view);
 			}
 			break;
 		}
 		case GoalReference2EditPart.VISUAL_ID: {
 			if (!domain2NotationMap.containsKey(view.getElement())) {
-				result.addAll(UrmlDiagramUpdater.getGoalReference_4023ContainedLinks(view));
+				result.addAll(UrmlDiagramUpdater
+						.getGoalReference_4023ContainedLinks(view));
 			}
-			if (!domain2NotationMap.containsKey(view.getElement()) || view.getEAnnotation("Shortcut") == null) { //$NON-NLS-1$
+			if (!domain2NotationMap.containsKey(view.getElement())
+					|| view.getEAnnotation("Shortcut") == null) { //$NON-NLS-1$
 				domain2NotationMap.put(view.getElement(), view);
 			}
 			break;
 		}
 		case GoalReference3EditPart.VISUAL_ID: {
 			if (!domain2NotationMap.containsKey(view.getElement())) {
-				result.addAll(UrmlDiagramUpdater.getGoalReference_4024ContainedLinks(view));
+				result.addAll(UrmlDiagramUpdater
+						.getGoalReference_4024ContainedLinks(view));
 			}
-			if (!domain2NotationMap.containsKey(view.getElement()) || view.getEAnnotation("Shortcut") == null) { //$NON-NLS-1$
+			if (!domain2NotationMap.containsKey(view.getElement())
+					|| view.getEAnnotation("Shortcut") == null) { //$NON-NLS-1$
 				domain2NotationMap.put(view.getElement(), view);
 			}
 			break;
 		}
 		case GoalReference4EditPart.VISUAL_ID: {
 			if (!domain2NotationMap.containsKey(view.getElement())) {
-				result.addAll(UrmlDiagramUpdater.getGoalReference_4025ContainedLinks(view));
+				result.addAll(UrmlDiagramUpdater
+						.getGoalReference_4025ContainedLinks(view));
 			}
-			if (!domain2NotationMap.containsKey(view.getElement()) || view.getEAnnotation("Shortcut") == null) { //$NON-NLS-1$
+			if (!domain2NotationMap.containsKey(view.getElement())
+					|| view.getEAnnotation("Shortcut") == null) { //$NON-NLS-1$
 				domain2NotationMap.put(view.getElement(), view);
 			}
 			break;
 		}
 		}
-		for (Iterator children = view.getChildren().iterator(); children.hasNext();) {
-			result.addAll(collectAllLinks((View) children.next(), domain2NotationMap));
+		for (Iterator children = view.getChildren().iterator(); children
+				.hasNext();) {
+			result.addAll(collectAllLinks((View) children.next(),
+					domain2NotationMap));
 		}
 		for (Iterator edges = view.getSourceEdges().iterator(); edges.hasNext();) {
-			result.addAll(collectAllLinks((View) edges.next(), domain2NotationMap));
+			result.addAll(collectAllLinks((View) edges.next(),
+					domain2NotationMap));
 		}
 		return result;
 	}
@@ -384,19 +481,26 @@
 	/**
 	 * @generated
 	 */
-	private Collection createConnections(Collection linkDescriptors, Map domain2NotationMap) {
-		List adapters = new LinkedList();
-		for (Iterator linkDescriptorsIterator = linkDescriptors.iterator(); linkDescriptorsIterator.hasNext();) {
-			final UrmlLinkDescriptor nextLinkDescriptor = (UrmlLinkDescriptor) linkDescriptorsIterator.next();
-			EditPart sourceEditPart = getEditPart(nextLinkDescriptor.getSource(), domain2NotationMap);
-			EditPart targetEditPart = getEditPart(nextLinkDescriptor.getDestination(), domain2NotationMap);
+	private Collection<IAdaptable> createConnections(
+			Collection<UrmlLinkDescriptor> linkDescriptors,
+			Map<EObject, View> domain2NotationMap) {
+		LinkedList<IAdaptable> adapters = new LinkedList<IAdaptable>();
+		for (UrmlLinkDescriptor nextLinkDescriptor : linkDescriptors) {
+			EditPart sourceEditPart = getEditPart(
+					nextLinkDescriptor.getSource(), domain2NotationMap);
+			EditPart targetEditPart = getEditPart(
+					nextLinkDescriptor.getDestination(), domain2NotationMap);
 			if (sourceEditPart == null || targetEditPart == null) {
 				continue;
 			}
 			CreateConnectionViewRequest.ConnectionViewDescriptor descriptor = new CreateConnectionViewRequest.ConnectionViewDescriptor(
-				nextLinkDescriptor.getSemanticAdapter(), String.valueOf(nextLinkDescriptor.getVisualID()),
-				ViewUtil.APPEND, false, ((IGraphicalEditPart) getHost()).getDiagramPreferencesHint());
-			CreateConnectionViewRequest ccr = new CreateConnectionViewRequest(descriptor);
+					nextLinkDescriptor.getSemanticAdapter(),
+					UrmlVisualIDRegistry.getType(nextLinkDescriptor
+							.getVisualID()), ViewUtil.APPEND, false,
+					((IGraphicalEditPart) getHost())
+							.getDiagramPreferencesHint());
+			CreateConnectionViewRequest ccr = new CreateConnectionViewRequest(
+					descriptor);
 			ccr.setType(RequestConstants.REQ_CONNECTION_START);
 			ccr.setSourceEditPart(sourceEditPart);
 			sourceEditPart.getCommand(ccr);
@@ -417,10 +521,12 @@
 	/**
 	 * @generated
 	 */
-	private EditPart getEditPart(EObject domainModelElement, Map domain2NotationMap) {
+	private EditPart getEditPart(EObject domainModelElement,
+			Map<EObject, View> domain2NotationMap) {
 		View view = (View) domain2NotationMap.get(domainModelElement);
 		if (view != null) {
-			return (EditPart) getHost().getViewer().getEditPartRegistry().get(view);
+			return (EditPart) getHost().getViewer().getEditPartRegistry()
+					.get(view);
 		}
 		return null;
 	}
Index: src/org/unicase/ui/diagram/urml/edit/policies/FeatureItemSemanticEditPolicy.java
===================================================================
--- src/org/unicase/ui/diagram/urml/edit/policies/FeatureItemSemanticEditPolicy.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/edit/policies/FeatureItemSemanticEditPolicy.java	(working copy)
@@ -34,6 +34,8 @@
 import org.unicase.ui.diagram.urml.edit.commands.GoalRealizedFeaturesReorientCommand;
 import org.unicase.ui.diagram.urml.edit.commands.ProductFeaturesCreateCommand;
 import org.unicase.ui.diagram.urml.edit.commands.ProductFeaturesReorientCommand;
+import org.unicase.ui.diagram.urml.edit.commands.UrmlModelElementAssociationsCreateCommand;
+import org.unicase.ui.diagram.urml.edit.commands.UrmlModelElementAssociationsReorientCommand;
 import org.unicase.ui.diagram.urml.edit.commands.VariationPointInstanceSelectedFeaturesCreateCommand;
 import org.unicase.ui.diagram.urml.edit.commands.VariationPointInstanceSelectedFeaturesReorientCommand;
 import org.unicase.ui.diagram.urml.edit.commands.VariationPointOptionalSubFeaturesCreateCommand;
@@ -45,6 +47,7 @@
 import org.unicase.ui.diagram.urml.edit.parts.AbstractFeatureSubFeaturesEditPart;
 import org.unicase.ui.diagram.urml.edit.parts.GoalRealizedFeaturesEditPart;
 import org.unicase.ui.diagram.urml.edit.parts.ProductFeaturesEditPart;
+import org.unicase.ui.diagram.urml.edit.parts.UrmlModelElementAssociationsEditPart;
 import org.unicase.ui.diagram.urml.edit.parts.VariationPointInstanceSelectedFeaturesEditPart;
 import org.unicase.ui.diagram.urml.edit.parts.VariationPointOptionalSubFeaturesEditPart;
 import org.unicase.ui.diagram.urml.part.UrmlVisualIDRegistry;
@@ -53,7 +56,8 @@
 /**
  * @generated
  */
-public class FeatureItemSemanticEditPolicy extends UrmlBaseItemSemanticEditPolicy {
+public class FeatureItemSemanticEditPolicy extends
+		UrmlBaseItemSemanticEditPolicy {
 
 	/**
 	 * @generated
@@ -67,19 +71,23 @@
 	 */
 	protected Command getDestroyElementCommand(DestroyElementRequest req) {
 		View view = (View) getHost().getModel();
-		CompositeTransactionalCommand cmd = new CompositeTransactionalCommand(getEditingDomain(), null);
+		CompositeTransactionalCommand cmd = new CompositeTransactionalCommand(
+				getEditingDomain(), null);
 		cmd.setTransactionNestingEnabled(false);
-		for (Iterator it = view.getTargetEdges().iterator(); it.hasNext();) {
+		for (Iterator<?> it = view.getTargetEdges().iterator(); it.hasNext();) {
 			Edge incomingLink = (Edge) it.next();
 			if (UrmlVisualIDRegistry.getVisualID(incomingLink) == AbstractFeatureSubFeaturesEditPart.VISUAL_ID) {
-				DestroyReferenceRequest r = new DestroyReferenceRequest(incomingLink.getSource().getElement(), null,
-					incomingLink.getTarget().getElement(), false);
+				DestroyReferenceRequest r = new DestroyReferenceRequest(
+						incomingLink.getSource().getElement(), null,
+						incomingLink.getTarget().getElement(), false);
 				cmd.add(new DestroyReferenceCommand(r) {
-					protected CommandResult doExecuteWithResult(IProgressMonitor progressMonitor, IAdaptable info)
-						throws ExecutionException {
+					protected CommandResult doExecuteWithResult(
+							IProgressMonitor progressMonitor, IAdaptable info)
+							throws ExecutionException {
 						EObject referencedObject = getReferencedObject();
 						Resource resource = referencedObject.eResource();
-						CommandResult result = super.doExecuteWithResult(progressMonitor, info);
+						CommandResult result = super.doExecuteWithResult(
+								progressMonitor, info);
 						if (resource != null) {
 							resource.getContents().add(referencedObject);
 						}
@@ -90,35 +98,41 @@
 				continue;
 			}
 			if (UrmlVisualIDRegistry.getVisualID(incomingLink) == AbstractFeatureRequiredFeaturesEditPart.VISUAL_ID) {
-				DestroyReferenceRequest r = new DestroyReferenceRequest(incomingLink.getSource().getElement(), null,
-					incomingLink.getTarget().getElement(), false);
+				DestroyReferenceRequest r = new DestroyReferenceRequest(
+						incomingLink.getSource().getElement(), null,
+						incomingLink.getTarget().getElement(), false);
 				cmd.add(new DestroyReferenceCommand(r));
 				cmd.add(new DeleteCommand(getEditingDomain(), incomingLink));
 				continue;
 			}
 			if (UrmlVisualIDRegistry.getVisualID(incomingLink) == AbstractFeatureExcludedFeaturesEditPart.VISUAL_ID) {
-				DestroyReferenceRequest r = new DestroyReferenceRequest(incomingLink.getSource().getElement(), null,
-					incomingLink.getTarget().getElement(), false);
+				DestroyReferenceRequest r = new DestroyReferenceRequest(
+						incomingLink.getSource().getElement(), null,
+						incomingLink.getTarget().getElement(), false);
 				cmd.add(new DestroyReferenceCommand(r));
 				cmd.add(new DeleteCommand(getEditingDomain(), incomingLink));
 				continue;
 			}
 			if (UrmlVisualIDRegistry.getVisualID(incomingLink) == GoalRealizedFeaturesEditPart.VISUAL_ID) {
-				DestroyReferenceRequest r = new DestroyReferenceRequest(incomingLink.getSource().getElement(), null,
-					incomingLink.getTarget().getElement(), false);
+				DestroyReferenceRequest r = new DestroyReferenceRequest(
+						incomingLink.getSource().getElement(), null,
+						incomingLink.getTarget().getElement(), false);
 				cmd.add(new DestroyReferenceCommand(r));
 				cmd.add(new DeleteCommand(getEditingDomain(), incomingLink));
 				continue;
 			}
 			if (UrmlVisualIDRegistry.getVisualID(incomingLink) == VariationPointOptionalSubFeaturesEditPart.VISUAL_ID) {
-				DestroyReferenceRequest r = new DestroyReferenceRequest(incomingLink.getSource().getElement(), null,
-					incomingLink.getTarget().getElement(), false);
+				DestroyReferenceRequest r = new DestroyReferenceRequest(
+						incomingLink.getSource().getElement(), null,
+						incomingLink.getTarget().getElement(), false);
 				cmd.add(new DestroyReferenceCommand(r) {
-					protected CommandResult doExecuteWithResult(IProgressMonitor progressMonitor, IAdaptable info)
-						throws ExecutionException {
+					protected CommandResult doExecuteWithResult(
+							IProgressMonitor progressMonitor, IAdaptable info)
+							throws ExecutionException {
 						EObject referencedObject = getReferencedObject();
 						Resource resource = referencedObject.eResource();
-						CommandResult result = super.doExecuteWithResult(progressMonitor, info);
+						CommandResult result = super.doExecuteWithResult(
+								progressMonitor, info);
 						if (resource != null) {
 							resource.getContents().add(referencedObject);
 						}
@@ -129,31 +143,44 @@
 				continue;
 			}
 			if (UrmlVisualIDRegistry.getVisualID(incomingLink) == VariationPointInstanceSelectedFeaturesEditPart.VISUAL_ID) {
-				DestroyReferenceRequest r = new DestroyReferenceRequest(incomingLink.getSource().getElement(), null,
-					incomingLink.getTarget().getElement(), false);
+				DestroyReferenceRequest r = new DestroyReferenceRequest(
+						incomingLink.getSource().getElement(), null,
+						incomingLink.getTarget().getElement(), false);
 				cmd.add(new DestroyReferenceCommand(r));
 				cmd.add(new DeleteCommand(getEditingDomain(), incomingLink));
 				continue;
 			}
 			if (UrmlVisualIDRegistry.getVisualID(incomingLink) == ProductFeaturesEditPart.VISUAL_ID) {
-				DestroyReferenceRequest r = new DestroyReferenceRequest(incomingLink.getSource().getElement(), null,
-					incomingLink.getTarget().getElement(), false);
+				DestroyReferenceRequest r = new DestroyReferenceRequest(
+						incomingLink.getSource().getElement(), null,
+						incomingLink.getTarget().getElement(), false);
+				cmd.add(new DestroyReferenceCommand(r));
+				cmd.add(new DeleteCommand(getEditingDomain(), incomingLink));
+				continue;
+			}
+			if (UrmlVisualIDRegistry.getVisualID(incomingLink) == UrmlModelElementAssociationsEditPart.VISUAL_ID) {
+				DestroyReferenceRequest r = new DestroyReferenceRequest(
+						incomingLink.getSource().getElement(), null,
+						incomingLink.getTarget().getElement(), false);
 				cmd.add(new DestroyReferenceCommand(r));
 				cmd.add(new DeleteCommand(getEditingDomain(), incomingLink));
 				continue;
 			}
 		}
-		for (Iterator it = view.getSourceEdges().iterator(); it.hasNext();) {
+		for (Iterator<?> it = view.getSourceEdges().iterator(); it.hasNext();) {
 			Edge outgoingLink = (Edge) it.next();
 			if (UrmlVisualIDRegistry.getVisualID(outgoingLink) == AbstractFeatureSubFeaturesEditPart.VISUAL_ID) {
-				DestroyReferenceRequest r = new DestroyReferenceRequest(outgoingLink.getSource().getElement(), null,
-					outgoingLink.getTarget().getElement(), false);
+				DestroyReferenceRequest r = new DestroyReferenceRequest(
+						outgoingLink.getSource().getElement(), null,
+						outgoingLink.getTarget().getElement(), false);
 				cmd.add(new DestroyReferenceCommand(r) {
-					protected CommandResult doExecuteWithResult(IProgressMonitor progressMonitor, IAdaptable info)
-						throws ExecutionException {
+					protected CommandResult doExecuteWithResult(
+							IProgressMonitor progressMonitor, IAdaptable info)
+							throws ExecutionException {
 						EObject referencedObject = getReferencedObject();
 						Resource resource = referencedObject.eResource();
-						CommandResult result = super.doExecuteWithResult(progressMonitor, info);
+						CommandResult result = super.doExecuteWithResult(
+								progressMonitor, info);
 						if (resource != null) {
 							resource.getContents().add(referencedObject);
 						}
@@ -164,29 +191,41 @@
 				continue;
 			}
 			if (UrmlVisualIDRegistry.getVisualID(outgoingLink) == AbstractFeatureDetailingFunctionalRequirementsEditPart.VISUAL_ID) {
-				DestroyReferenceRequest r = new DestroyReferenceRequest(outgoingLink.getSource().getElement(), null,
-					outgoingLink.getTarget().getElement(), false);
+				DestroyReferenceRequest r = new DestroyReferenceRequest(
+						outgoingLink.getSource().getElement(), null,
+						outgoingLink.getTarget().getElement(), false);
 				cmd.add(new DestroyReferenceCommand(r));
 				cmd.add(new DeleteCommand(getEditingDomain(), outgoingLink));
 				continue;
 			}
 			if (UrmlVisualIDRegistry.getVisualID(outgoingLink) == AbstractFeatureConstrainingNonFunctionalRequirementsEditPart.VISUAL_ID) {
-				DestroyReferenceRequest r = new DestroyReferenceRequest(outgoingLink.getSource().getElement(), null,
-					outgoingLink.getTarget().getElement(), false);
+				DestroyReferenceRequest r = new DestroyReferenceRequest(
+						outgoingLink.getSource().getElement(), null,
+						outgoingLink.getTarget().getElement(), false);
 				cmd.add(new DestroyReferenceCommand(r));
 				cmd.add(new DeleteCommand(getEditingDomain(), outgoingLink));
 				continue;
 			}
 			if (UrmlVisualIDRegistry.getVisualID(outgoingLink) == AbstractFeatureRequiredFeaturesEditPart.VISUAL_ID) {
-				DestroyReferenceRequest r = new DestroyReferenceRequest(outgoingLink.getSource().getElement(), null,
-					outgoingLink.getTarget().getElement(), false);
+				DestroyReferenceRequest r = new DestroyReferenceRequest(
+						outgoingLink.getSource().getElement(), null,
+						outgoingLink.getTarget().getElement(), false);
 				cmd.add(new DestroyReferenceCommand(r));
 				cmd.add(new DeleteCommand(getEditingDomain(), outgoingLink));
 				continue;
 			}
 			if (UrmlVisualIDRegistry.getVisualID(outgoingLink) == AbstractFeatureExcludedFeaturesEditPart.VISUAL_ID) {
-				DestroyReferenceRequest r = new DestroyReferenceRequest(outgoingLink.getSource().getElement(), null,
-					outgoingLink.getTarget().getElement(), false);
+				DestroyReferenceRequest r = new DestroyReferenceRequest(
+						outgoingLink.getSource().getElement(), null,
+						outgoingLink.getTarget().getElement(), false);
+				cmd.add(new DestroyReferenceCommand(r));
+				cmd.add(new DeleteCommand(getEditingDomain(), outgoingLink));
+				continue;
+			}
+			if (UrmlVisualIDRegistry.getVisualID(outgoingLink) == UrmlModelElementAssociationsEditPart.VISUAL_ID) {
+				DestroyReferenceRequest r = new DestroyReferenceRequest(
+						outgoingLink.getSource().getElement(), null,
+						outgoingLink.getTarget().getElement(), false);
 				cmd.add(new DestroyReferenceCommand(r));
 				cmd.add(new DeleteCommand(getEditingDomain(), outgoingLink));
 				continue;
@@ -209,78 +248,113 @@
 	 */
 	protected Command getCreateRelationshipCommand(CreateRelationshipRequest req) {
 		Command command = req.getTarget() == null ? getStartCreateRelationshipCommand(req)
-			: getCompleteCreateRelationshipCommand(req);
-		return command != null ? command : super.getCreateRelationshipCommand(req);
+				: getCompleteCreateRelationshipCommand(req);
+		return command != null ? command : super
+				.getCreateRelationshipCommand(req);
 	}
 
 	/**
 	 * @generated
 	 */
-	protected Command getStartCreateRelationshipCommand(CreateRelationshipRequest req) {
-		if (UrmlElementTypes.AbstractFeatureSubFeatures_4034 == req.getElementType()) {
-			return getGEFWrapper(new AbstractFeatureSubFeaturesCreateCommand(req, req.getSource(), req.getTarget()));
+	protected Command getStartCreateRelationshipCommand(
+			CreateRelationshipRequest req) {
+		if (UrmlElementTypes.AbstractFeatureSubFeatures_4034 == req
+				.getElementType()) {
+			return getGEFWrapper(new AbstractFeatureSubFeaturesCreateCommand(
+					req, req.getSource(), req.getTarget()));
 		}
-		if (UrmlElementTypes.AbstractFeatureDetailingFunctionalRequirements_4035 == req.getElementType()) {
-			return getGEFWrapper(new AbstractFeatureDetailingFunctionalRequirementsCreateCommand(req, req.getSource(),
-				req.getTarget()));
+		if (UrmlElementTypes.AbstractFeatureDetailingFunctionalRequirements_4035 == req
+				.getElementType()) {
+			return getGEFWrapper(new AbstractFeatureDetailingFunctionalRequirementsCreateCommand(
+					req, req.getSource(), req.getTarget()));
 		}
-		if (UrmlElementTypes.AbstractFeatureConstrainingNonFunctionalRequirements_4036 == req.getElementType()) {
-			return getGEFWrapper(new AbstractFeatureConstrainingNonFunctionalRequirementsCreateCommand(req, req
-				.getSource(), req.getTarget()));
+		if (UrmlElementTypes.AbstractFeatureConstrainingNonFunctionalRequirements_4036 == req
+				.getElementType()) {
+			return getGEFWrapper(new AbstractFeatureConstrainingNonFunctionalRequirementsCreateCommand(
+					req, req.getSource(), req.getTarget()));
 		}
-		if (UrmlElementTypes.AbstractFeatureRequiredFeatures_4045 == req.getElementType()) {
-			return getGEFWrapper(new AbstractFeatureRequiredFeaturesCreateCommand(req, req.getSource(), req.getTarget()));
+		if (UrmlElementTypes.AbstractFeatureRequiredFeatures_4045 == req
+				.getElementType()) {
+			return getGEFWrapper(new AbstractFeatureRequiredFeaturesCreateCommand(
+					req, req.getSource(), req.getTarget()));
 		}
-		if (UrmlElementTypes.AbstractFeatureExcludedFeatures_4038 == req.getElementType()) {
-			return getGEFWrapper(new AbstractFeatureExcludedFeaturesCreateCommand(req, req.getSource(), req.getTarget()));
+		if (UrmlElementTypes.AbstractFeatureExcludedFeatures_4038 == req
+				.getElementType()) {
+			return getGEFWrapper(new AbstractFeatureExcludedFeaturesCreateCommand(
+					req, req.getSource(), req.getTarget()));
 		}
 		if (UrmlElementTypes.GoalRealizedFeatures_4004 == req.getElementType()) {
 			return null;
 		}
-		if (UrmlElementTypes.VariationPointOptionalSubFeatures_4046 == req.getElementType()) {
+		if (UrmlElementTypes.VariationPointOptionalSubFeatures_4046 == req
+				.getElementType()) {
 			return null;
 		}
-		if (UrmlElementTypes.VariationPointInstanceSelectedFeatures_4040 == req.getElementType()) {
+		if (UrmlElementTypes.VariationPointInstanceSelectedFeatures_4040 == req
+				.getElementType()) {
 			return null;
 		}
 		if (UrmlElementTypes.ProductFeatures_4047 == req.getElementType()) {
 			return null;
 		}
+		if (UrmlElementTypes.UrmlModelElementAssociations_4048 == req
+				.getElementType()) {
+			return getGEFWrapper(new UrmlModelElementAssociationsCreateCommand(
+					req, req.getSource(), req.getTarget()));
+		}
 		return null;
 	}
 
 	/**
 	 * @generated
 	 */
-	protected Command getCompleteCreateRelationshipCommand(CreateRelationshipRequest req) {
-		if (UrmlElementTypes.AbstractFeatureSubFeatures_4034 == req.getElementType()) {
-			return getGEFWrapper(new AbstractFeatureSubFeaturesCreateCommand(req, req.getSource(), req.getTarget()));
+	protected Command getCompleteCreateRelationshipCommand(
+			CreateRelationshipRequest req) {
+		if (UrmlElementTypes.AbstractFeatureSubFeatures_4034 == req
+				.getElementType()) {
+			return getGEFWrapper(new AbstractFeatureSubFeaturesCreateCommand(
+					req, req.getSource(), req.getTarget()));
 		}
-		if (UrmlElementTypes.AbstractFeatureDetailingFunctionalRequirements_4035 == req.getElementType()) {
+		if (UrmlElementTypes.AbstractFeatureDetailingFunctionalRequirements_4035 == req
+				.getElementType()) {
 			return null;
 		}
-		if (UrmlElementTypes.AbstractFeatureConstrainingNonFunctionalRequirements_4036 == req.getElementType()) {
+		if (UrmlElementTypes.AbstractFeatureConstrainingNonFunctionalRequirements_4036 == req
+				.getElementType()) {
 			return null;
 		}
-		if (UrmlElementTypes.AbstractFeatureRequiredFeatures_4045 == req.getElementType()) {
-			return getGEFWrapper(new AbstractFeatureRequiredFeaturesCreateCommand(req, req.getSource(), req.getTarget()));
+		if (UrmlElementTypes.AbstractFeatureRequiredFeatures_4045 == req
+				.getElementType()) {
+			return getGEFWrapper(new AbstractFeatureRequiredFeaturesCreateCommand(
+					req, req.getSource(), req.getTarget()));
 		}
-		if (UrmlElementTypes.AbstractFeatureExcludedFeatures_4038 == req.getElementType()) {
-			return getGEFWrapper(new AbstractFeatureExcludedFeaturesCreateCommand(req, req.getSource(), req.getTarget()));
+		if (UrmlElementTypes.AbstractFeatureExcludedFeatures_4038 == req
+				.getElementType()) {
+			return getGEFWrapper(new AbstractFeatureExcludedFeaturesCreateCommand(
+					req, req.getSource(), req.getTarget()));
 		}
 		if (UrmlElementTypes.GoalRealizedFeatures_4004 == req.getElementType()) {
-			return getGEFWrapper(new GoalRealizedFeaturesCreateCommand(req, req.getSource(), req.getTarget()));
+			return getGEFWrapper(new GoalRealizedFeaturesCreateCommand(req,
+					req.getSource(), req.getTarget()));
 		}
-		if (UrmlElementTypes.VariationPointOptionalSubFeatures_4046 == req.getElementType()) {
-			return getGEFWrapper(new VariationPointOptionalSubFeaturesCreateCommand(req, req.getSource(), req
-				.getTarget()));
+		if (UrmlElementTypes.VariationPointOptionalSubFeatures_4046 == req
+				.getElementType()) {
+			return getGEFWrapper(new VariationPointOptionalSubFeaturesCreateCommand(
+					req, req.getSource(), req.getTarget()));
 		}
-		if (UrmlElementTypes.VariationPointInstanceSelectedFeatures_4040 == req.getElementType()) {
-			return getGEFWrapper(new VariationPointInstanceSelectedFeaturesCreateCommand(req, req.getSource(), req
-				.getTarget()));
+		if (UrmlElementTypes.VariationPointInstanceSelectedFeatures_4040 == req
+				.getElementType()) {
+			return getGEFWrapper(new VariationPointInstanceSelectedFeaturesCreateCommand(
+					req, req.getSource(), req.getTarget()));
 		}
 		if (UrmlElementTypes.ProductFeatures_4047 == req.getElementType()) {
-			return getGEFWrapper(new ProductFeaturesCreateCommand(req, req.getSource(), req.getTarget()));
+			return getGEFWrapper(new ProductFeaturesCreateCommand(req,
+					req.getSource(), req.getTarget()));
+		}
+		if (UrmlElementTypes.UrmlModelElementAssociations_4048 == req
+				.getElementType()) {
+			return getGEFWrapper(new UrmlModelElementAssociationsCreateCommand(
+					req, req.getSource(), req.getTarget()));
 		}
 		return null;
 	}
@@ -291,26 +365,37 @@
 	 * 
 	 * @generated
 	 */
-	protected Command getReorientReferenceRelationshipCommand(ReorientReferenceRelationshipRequest req) {
+	protected Command getReorientReferenceRelationshipCommand(
+			ReorientReferenceRelationshipRequest req) {
 		switch (getVisualID(req)) {
 		case AbstractFeatureSubFeaturesEditPart.VISUAL_ID:
-			return getGEFWrapper(new AbstractFeatureSubFeaturesReorientCommand(req));
+			return getGEFWrapper(new AbstractFeatureSubFeaturesReorientCommand(
+					req));
 		case AbstractFeatureDetailingFunctionalRequirementsEditPart.VISUAL_ID:
-			return getGEFWrapper(new AbstractFeatureDetailingFunctionalRequirementsReorientCommand(req));
+			return getGEFWrapper(new AbstractFeatureDetailingFunctionalRequirementsReorientCommand(
+					req));
 		case AbstractFeatureConstrainingNonFunctionalRequirementsEditPart.VISUAL_ID:
-			return getGEFWrapper(new AbstractFeatureConstrainingNonFunctionalRequirementsReorientCommand(req));
+			return getGEFWrapper(new AbstractFeatureConstrainingNonFunctionalRequirementsReorientCommand(
+					req));
 		case AbstractFeatureRequiredFeaturesEditPart.VISUAL_ID:
-			return getGEFWrapper(new AbstractFeatureRequiredFeaturesReorientCommand(req));
+			return getGEFWrapper(new AbstractFeatureRequiredFeaturesReorientCommand(
+					req));
 		case AbstractFeatureExcludedFeaturesEditPart.VISUAL_ID:
-			return getGEFWrapper(new AbstractFeatureExcludedFeaturesReorientCommand(req));
+			return getGEFWrapper(new AbstractFeatureExcludedFeaturesReorientCommand(
+					req));
 		case GoalRealizedFeaturesEditPart.VISUAL_ID:
 			return getGEFWrapper(new GoalRealizedFeaturesReorientCommand(req));
 		case VariationPointOptionalSubFeaturesEditPart.VISUAL_ID:
-			return getGEFWrapper(new VariationPointOptionalSubFeaturesReorientCommand(req));
+			return getGEFWrapper(new VariationPointOptionalSubFeaturesReorientCommand(
+					req));
 		case VariationPointInstanceSelectedFeaturesEditPart.VISUAL_ID:
-			return getGEFWrapper(new VariationPointInstanceSelectedFeaturesReorientCommand(req));
+			return getGEFWrapper(new VariationPointInstanceSelectedFeaturesReorientCommand(
+					req));
 		case ProductFeaturesEditPart.VISUAL_ID:
 			return getGEFWrapper(new ProductFeaturesReorientCommand(req));
+		case UrmlModelElementAssociationsEditPart.VISUAL_ID:
+			return getGEFWrapper(new UrmlModelElementAssociationsReorientCommand(
+					req));
 		}
 		return super.getReorientReferenceRelationshipCommand(req);
 	}
Index: src/org/unicase/ui/diagram/urml/edit/policies/VariationPointInstanceItemSemanticEditPolicy.java
===================================================================
--- src/org/unicase/ui/diagram/urml/edit/policies/VariationPointInstanceItemSemanticEditPolicy.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/edit/policies/VariationPointInstanceItemSemanticEditPolicy.java	(working copy)
@@ -16,11 +16,14 @@
 import org.eclipse.gmf.runtime.notation.View;
 import org.unicase.ui.diagram.urml.edit.commands.ProductVariationPointInstancesCreateCommand;
 import org.unicase.ui.diagram.urml.edit.commands.ProductVariationPointInstancesReorientCommand;
+import org.unicase.ui.diagram.urml.edit.commands.UrmlModelElementAssociationsCreateCommand;
+import org.unicase.ui.diagram.urml.edit.commands.UrmlModelElementAssociationsReorientCommand;
 import org.unicase.ui.diagram.urml.edit.commands.VariationPointInstanceSelectedFeaturesCreateCommand;
 import org.unicase.ui.diagram.urml.edit.commands.VariationPointInstanceSelectedFeaturesReorientCommand;
 import org.unicase.ui.diagram.urml.edit.commands.VariationPointInstanceVariationPointCreateCommand;
 import org.unicase.ui.diagram.urml.edit.commands.VariationPointInstanceVariationPointReorientCommand;
 import org.unicase.ui.diagram.urml.edit.parts.ProductVariationPointInstancesEditPart;
+import org.unicase.ui.diagram.urml.edit.parts.UrmlModelElementAssociationsEditPart;
 import org.unicase.ui.diagram.urml.edit.parts.VariationPointInstanceSelectedFeaturesEditPart;
 import org.unicase.ui.diagram.urml.edit.parts.VariationPointInstanceVariationPointEditPart;
 import org.unicase.ui.diagram.urml.part.UrmlVisualIDRegistry;
@@ -29,7 +32,8 @@
 /**
  * @generated
  */
-public class VariationPointInstanceItemSemanticEditPolicy extends UrmlBaseItemSemanticEditPolicy {
+public class VariationPointInstanceItemSemanticEditPolicy extends
+		UrmlBaseItemSemanticEditPolicy {
 
 	/**
 	 * @generated
@@ -43,30 +47,50 @@
 	 */
 	protected Command getDestroyElementCommand(DestroyElementRequest req) {
 		View view = (View) getHost().getModel();
-		CompositeTransactionalCommand cmd = new CompositeTransactionalCommand(getEditingDomain(), null);
+		CompositeTransactionalCommand cmd = new CompositeTransactionalCommand(
+				getEditingDomain(), null);
 		cmd.setTransactionNestingEnabled(false);
-		for (Iterator it = view.getTargetEdges().iterator(); it.hasNext();) {
+		for (Iterator<?> it = view.getTargetEdges().iterator(); it.hasNext();) {
 			Edge incomingLink = (Edge) it.next();
 			if (UrmlVisualIDRegistry.getVisualID(incomingLink) == ProductVariationPointInstancesEditPart.VISUAL_ID) {
-				DestroyReferenceRequest r = new DestroyReferenceRequest(incomingLink.getSource().getElement(), null,
-					incomingLink.getTarget().getElement(), false);
+				DestroyReferenceRequest r = new DestroyReferenceRequest(
+						incomingLink.getSource().getElement(), null,
+						incomingLink.getTarget().getElement(), false);
+				cmd.add(new DestroyReferenceCommand(r));
+				cmd.add(new DeleteCommand(getEditingDomain(), incomingLink));
+				continue;
+			}
+			if (UrmlVisualIDRegistry.getVisualID(incomingLink) == UrmlModelElementAssociationsEditPart.VISUAL_ID) {
+				DestroyReferenceRequest r = new DestroyReferenceRequest(
+						incomingLink.getSource().getElement(), null,
+						incomingLink.getTarget().getElement(), false);
 				cmd.add(new DestroyReferenceCommand(r));
 				cmd.add(new DeleteCommand(getEditingDomain(), incomingLink));
 				continue;
 			}
 		}
-		for (Iterator it = view.getSourceEdges().iterator(); it.hasNext();) {
+		for (Iterator<?> it = view.getSourceEdges().iterator(); it.hasNext();) {
 			Edge outgoingLink = (Edge) it.next();
 			if (UrmlVisualIDRegistry.getVisualID(outgoingLink) == VariationPointInstanceVariationPointEditPart.VISUAL_ID) {
-				DestroyReferenceRequest r = new DestroyReferenceRequest(outgoingLink.getSource().getElement(), null,
-					outgoingLink.getTarget().getElement(), false);
+				DestroyReferenceRequest r = new DestroyReferenceRequest(
+						outgoingLink.getSource().getElement(), null,
+						outgoingLink.getTarget().getElement(), false);
 				cmd.add(new DestroyReferenceCommand(r));
 				cmd.add(new DeleteCommand(getEditingDomain(), outgoingLink));
 				continue;
 			}
 			if (UrmlVisualIDRegistry.getVisualID(outgoingLink) == VariationPointInstanceSelectedFeaturesEditPart.VISUAL_ID) {
-				DestroyReferenceRequest r = new DestroyReferenceRequest(outgoingLink.getSource().getElement(), null,
-					outgoingLink.getTarget().getElement(), false);
+				DestroyReferenceRequest r = new DestroyReferenceRequest(
+						outgoingLink.getSource().getElement(), null,
+						outgoingLink.getTarget().getElement(), false);
+				cmd.add(new DestroyReferenceCommand(r));
+				cmd.add(new DeleteCommand(getEditingDomain(), outgoingLink));
+				continue;
+			}
+			if (UrmlVisualIDRegistry.getVisualID(outgoingLink) == UrmlModelElementAssociationsEditPart.VISUAL_ID) {
+				DestroyReferenceRequest r = new DestroyReferenceRequest(
+						outgoingLink.getSource().getElement(), null,
+						outgoingLink.getTarget().getElement(), false);
 				cmd.add(new DestroyReferenceCommand(r));
 				cmd.add(new DeleteCommand(getEditingDomain(), outgoingLink));
 				continue;
@@ -89,40 +113,60 @@
 	 */
 	protected Command getCreateRelationshipCommand(CreateRelationshipRequest req) {
 		Command command = req.getTarget() == null ? getStartCreateRelationshipCommand(req)
-			: getCompleteCreateRelationshipCommand(req);
-		return command != null ? command : super.getCreateRelationshipCommand(req);
+				: getCompleteCreateRelationshipCommand(req);
+		return command != null ? command : super
+				.getCreateRelationshipCommand(req);
 	}
 
 	/**
 	 * @generated
 	 */
-	protected Command getStartCreateRelationshipCommand(CreateRelationshipRequest req) {
-		if (UrmlElementTypes.VariationPointInstanceVariationPoint_4033 == req.getElementType()) {
-			return getGEFWrapper(new VariationPointInstanceVariationPointCreateCommand(req, req.getSource(), req
-				.getTarget()));
+	protected Command getStartCreateRelationshipCommand(
+			CreateRelationshipRequest req) {
+		if (UrmlElementTypes.VariationPointInstanceVariationPoint_4033 == req
+				.getElementType()) {
+			return getGEFWrapper(new VariationPointInstanceVariationPointCreateCommand(
+					req, req.getSource(), req.getTarget()));
 		}
-		if (UrmlElementTypes.VariationPointInstanceSelectedFeatures_4040 == req.getElementType()) {
-			return getGEFWrapper(new VariationPointInstanceSelectedFeaturesCreateCommand(req, req.getSource(), req
-				.getTarget()));
+		if (UrmlElementTypes.VariationPointInstanceSelectedFeatures_4040 == req
+				.getElementType()) {
+			return getGEFWrapper(new VariationPointInstanceSelectedFeaturesCreateCommand(
+					req, req.getSource(), req.getTarget()));
 		}
-		if (UrmlElementTypes.ProductVariationPointInstances_4032 == req.getElementType()) {
+		if (UrmlElementTypes.ProductVariationPointInstances_4032 == req
+				.getElementType()) {
 			return null;
 		}
+		if (UrmlElementTypes.UrmlModelElementAssociations_4048 == req
+				.getElementType()) {
+			return getGEFWrapper(new UrmlModelElementAssociationsCreateCommand(
+					req, req.getSource(), req.getTarget()));
+		}
 		return null;
 	}
 
 	/**
 	 * @generated
 	 */
-	protected Command getCompleteCreateRelationshipCommand(CreateRelationshipRequest req) {
-		if (UrmlElementTypes.VariationPointInstanceVariationPoint_4033 == req.getElementType()) {
+	protected Command getCompleteCreateRelationshipCommand(
+			CreateRelationshipRequest req) {
+		if (UrmlElementTypes.VariationPointInstanceVariationPoint_4033 == req
+				.getElementType()) {
 			return null;
 		}
-		if (UrmlElementTypes.VariationPointInstanceSelectedFeatures_4040 == req.getElementType()) {
+		if (UrmlElementTypes.VariationPointInstanceSelectedFeatures_4040 == req
+				.getElementType()) {
 			return null;
 		}
-		if (UrmlElementTypes.ProductVariationPointInstances_4032 == req.getElementType()) {
-			return getGEFWrapper(new ProductVariationPointInstancesCreateCommand(req, req.getSource(), req.getTarget()));
+		if (UrmlElementTypes.ProductVariationPointInstances_4032 == req
+				.getElementType()) {
+			return getGEFWrapper(new ProductVariationPointInstancesCreateCommand(
+					req, req.getSource(), req.getTarget()));
+		}
+		if (UrmlElementTypes.UrmlModelElementAssociations_4048 == req
+				.getElementType()) {
+			return getGEFWrapper(new UrmlModelElementAssociationsCreateCommand(
+					req, req.getSource(), req.getTarget()));
 		}
 		return null;
 	}
@@ -133,14 +177,21 @@
 	 * 
 	 * @generated
 	 */
-	protected Command getReorientReferenceRelationshipCommand(ReorientReferenceRelationshipRequest req) {
+	protected Command getReorientReferenceRelationshipCommand(
+			ReorientReferenceRelationshipRequest req) {
 		switch (getVisualID(req)) {
 		case VariationPointInstanceVariationPointEditPart.VISUAL_ID:
-			return getGEFWrapper(new VariationPointInstanceVariationPointReorientCommand(req));
+			return getGEFWrapper(new VariationPointInstanceVariationPointReorientCommand(
+					req));
 		case VariationPointInstanceSelectedFeaturesEditPart.VISUAL_ID:
-			return getGEFWrapper(new VariationPointInstanceSelectedFeaturesReorientCommand(req));
+			return getGEFWrapper(new VariationPointInstanceSelectedFeaturesReorientCommand(
+					req));
 		case ProductVariationPointInstancesEditPart.VISUAL_ID:
-			return getGEFWrapper(new ProductVariationPointInstancesReorientCommand(req));
+			return getGEFWrapper(new ProductVariationPointInstancesReorientCommand(
+					req));
+		case UrmlModelElementAssociationsEditPart.VISUAL_ID:
+			return getGEFWrapper(new UrmlModelElementAssociationsReorientCommand(
+					req));
 		}
 		return super.getReorientReferenceRelationshipCommand(req);
 	}
Index: src/org/unicase/ui/diagram/urml/edit/policies/UrmlBaseItemSemanticEditPolicy.java
===================================================================
--- src/org/unicase/ui/diagram/urml/edit/policies/UrmlBaseItemSemanticEditPolicy.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/edit/policies/UrmlBaseItemSemanticEditPolicy.java	(working copy)
@@ -32,6 +32,7 @@
 import org.eclipse.gmf.runtime.notation.View;
 import org.unicase.model.diagram.MEDiagram;
 import org.unicase.model.urml.Stakeholder;
+import org.unicase.model.urml.UrmlModelElement;
 import org.unicase.model.urml.danger.Asset;
 import org.unicase.model.urml.danger.Danger;
 import org.unicase.model.urml.danger.Mitigation;
@@ -41,11 +42,13 @@
 import org.unicase.model.urml.feature.VariationPoint;
 import org.unicase.model.urml.feature.VariationPointInstance;
 import org.unicase.model.urml.goal.Goal;
+import org.unicase.model.urml.goal.GoalReference;
 import org.unicase.model.urml.requirement.FunctionalRequirement;
 import org.unicase.model.urml.requirement.NonFunctionalRequirement;
 import org.unicase.model.urml.requirement.Requirement;
 import org.unicase.model.urml.service.Service;
 import org.unicase.ui.diagram.urml.edit.helpers.UrmlBaseEditHelper;
+import org.unicase.ui.diagram.urml.part.UrmlDiagramEditorPlugin;
 import org.unicase.ui.diagram.urml.part.UrmlVisualIDRegistry;
 import org.unicase.ui.diagram.urml.providers.UrmlElementTypes;
 
@@ -82,9 +85,11 @@
 	 */
 	public Command getCommand(Request request) {
 		if (request instanceof ReconnectRequest) {
-			Object view = ((ReconnectRequest) request).getConnectionEditPart().getModel();
+			Object view = ((ReconnectRequest) request).getConnectionEditPart()
+					.getModel();
 			if (view instanceof View) {
-				Integer id = new Integer(UrmlVisualIDRegistry.getVisualID((View) view));
+				Integer id = new Integer(
+						UrmlVisualIDRegistry.getVisualID((View) view));
 				request.getExtendedData().put(VISUAL_ID_KEY, id);
 			}
 		}
@@ -107,10 +112,12 @@
 	protected Command getSemanticCommand(IEditCommandRequest request) {
 		IEditCommandRequest completedRequest = completeRequest(request);
 		Command semanticCommand = getSemanticCommandSwitch(completedRequest);
-		semanticCommand = getEditHelperCommand(completedRequest, semanticCommand);
+		semanticCommand = getEditHelperCommand(completedRequest,
+				semanticCommand);
 		if (completedRequest instanceof DestroyRequest) {
 			DestroyRequest destroyRequest = (DestroyRequest) completedRequest;
-			return shouldProceed(destroyRequest) ? addDeleteViewCommand(semanticCommand, destroyRequest) : null;
+			return shouldProceed(destroyRequest) ? addDeleteViewCommand(
+					semanticCommand, destroyRequest) : null;
 		}
 		return semanticCommand;
 	}
@@ -118,28 +125,35 @@
 	/**
 	 * @generated
 	 */
-	protected Command addDeleteViewCommand(Command mainCommand, DestroyRequest completedRequest) {
-		Command deleteViewCommand = getGEFWrapper(new DeleteCommand(getEditingDomain(), (View) getHost().getModel()));
-		return mainCommand == null ? deleteViewCommand : mainCommand.chain(deleteViewCommand);
+	protected Command addDeleteViewCommand(Command mainCommand,
+			DestroyRequest completedRequest) {
+		Command deleteViewCommand = getGEFWrapper(new DeleteCommand(
+				getEditingDomain(), (View) getHost().getModel()));
+		return mainCommand == null ? deleteViewCommand : mainCommand
+				.chain(deleteViewCommand);
 	}
 
 	/**
 	 * @generated
 	 */
-	private Command getEditHelperCommand(IEditCommandRequest request, Command editPolicyCommand) {
+	private Command getEditHelperCommand(IEditCommandRequest request,
+			Command editPolicyCommand) {
 		if (editPolicyCommand != null) {
 			ICommand command = editPolicyCommand instanceof ICommandProxy ? ((ICommandProxy) editPolicyCommand)
-				.getICommand() : new CommandProxy(editPolicyCommand);
-			request.setParameter(UrmlBaseEditHelper.EDIT_POLICY_COMMAND, command);
+					.getICommand() : new CommandProxy(editPolicyCommand);
+			request.setParameter(UrmlBaseEditHelper.EDIT_POLICY_COMMAND,
+					command);
 		}
 		IElementType requestContextElementType = getContextElementType(request);
-		request.setParameter(UrmlBaseEditHelper.CONTEXT_ELEMENT_TYPE, requestContextElementType);
+		request.setParameter(UrmlBaseEditHelper.CONTEXT_ELEMENT_TYPE,
+				requestContextElementType);
 		ICommand command = requestContextElementType.getEditCommand(request);
 		request.setParameter(UrmlBaseEditHelper.EDIT_POLICY_COMMAND, null);
 		request.setParameter(UrmlBaseEditHelper.CONTEXT_ELEMENT_TYPE, null);
 		if (command != null) {
 			if (!(command instanceof CompositeTransactionalCommand)) {
-				command = new CompositeTransactionalCommand(getEditingDomain(), command.getLabel()).compose(command);
+				command = new CompositeTransactionalCommand(getEditingDomain(),
+						command.getLabel()).compose(command);
 			}
 			return new ICommandProxy(command);
 		}
@@ -150,8 +164,10 @@
 	 * @generated
 	 */
 	private IElementType getContextElementType(IEditCommandRequest request) {
-		IElementType requestContextElementType = UrmlElementTypes.getElementType(getVisualID(request));
-		return requestContextElementType != null ? requestContextElementType : myElementType;
+		IElementType requestContextElementType = UrmlElementTypes
+				.getElementType(getVisualID(request));
+		return requestContextElementType != null ? requestContextElementType
+				: myElementType;
 	}
 
 	/**
@@ -250,14 +266,16 @@
 	/**
 	 * @generated
 	 */
-	protected Command getReorientReferenceRelationshipCommand(ReorientReferenceRelationshipRequest req) {
+	protected Command getReorientReferenceRelationshipCommand(
+			ReorientReferenceRelationshipRequest req) {
 		return UnexecutableCommand.INSTANCE;
 	}
 
 	/**
 	 * @generated
 	 */
-	protected Command getReorientRelationshipCommand(ReorientRelationshipRequest req) {
+	protected Command getReorientRelationshipCommand(
+			ReorientRelationshipRequest req) {
 		return UnexecutableCommand.INSTANCE;
 	}
 
@@ -284,7 +302,8 @@
 	 */
 	protected void addDestroyShortcutsCommand(ICompositeCommand cmd, View view) {
 		assert view.getEAnnotation("Shortcut") == null; //$NON-NLS-1$
-		for (Iterator it = view.getDiagram().getChildren().iterator(); it.hasNext();) {
+		for (Iterator it = view.getDiagram().getChildren().iterator(); it
+				.hasNext();) {
 			View nextView = (View) it.next();
 			if (nextView.getEAnnotation("Shortcut") == null || !nextView.isSetElement() || nextView.getElement() != view.getElement()) { //$NON-NLS-1$
 				continue;
@@ -296,17 +315,33 @@
 	/**
 	 * @generated
 	 */
+	public static LinkConstraints getLinkConstraints() {
+		LinkConstraints cached = UrmlDiagramEditorPlugin.getInstance()
+				.getLinkConstraints();
+		if (cached == null) {
+			UrmlDiagramEditorPlugin.getInstance().setLinkConstraints(
+					cached = new LinkConstraints());
+		}
+		return cached;
+	}
+
+	/**
+	 * @generated
+	 */
 	public static class LinkConstraints {
 
 		/**
 		 * @generated
 		 */
-		private static final String OPPOSITE_END_VAR = "oppositeEnd"; //$NON-NLS-1$
+		LinkConstraints() {
+			// use static method #getLinkConstraints() to access instance
+		}
 
 		/**
 		 * @generated
 		 */
-		public static boolean canCreateStakeholderGoals_4008(Stakeholder source, Goal target) {
+		public boolean canCreateStakeholderGoals_4008(Stakeholder source,
+				Goal target) {
 			if (source != null) {
 				if (source.getGoals().contains(target)) {
 					return false;
@@ -322,7 +357,8 @@
 		/**
 		 * @generated
 		 */
-		public static boolean canCreateAbstractFeatureSubFeatures_4034(AbstractFeature source, AbstractFeature target) {
+		public boolean canCreateAbstractFeatureSubFeatures_4034(
+				AbstractFeature source, AbstractFeature target) {
 			if (source != null) {
 				if (source.getSubFeatures().contains(target)) {
 					return false;
@@ -341,48 +377,55 @@
 		/**
 		 * @generated
 		 */
-		public static boolean canCreateAbstractFeatureDetailingFunctionalRequirements_4035(AbstractFeature source,
-			FunctionalRequirement target) {
+		public boolean canCreateAbstractFeatureDetailingFunctionalRequirements_4035(
+				AbstractFeature source, FunctionalRequirement target) {
 			if (source != null) {
-				if (source.getDetailingFunctionalRequirements().contains(target)) {
+				if (source.getDetailingFunctionalRequirements()
+						.contains(target)) {
 					return false;
 				}
 			}
-			if (target != null && (target.getDetailedFeatures().contains(target))) {
+			if (target != null
+					&& (target.getDetailedFeatures().contains(target))) {
 				return false;
 			}
 
-			return canExistAbstractFeatureDetailingFunctionalRequirements_4035(source, target);
+			return canExistAbstractFeatureDetailingFunctionalRequirements_4035(
+					source, target);
 		}
 
 		/**
 		 * @generated
 		 */
-		public static boolean canCreateAbstractFeatureConstrainingNonFunctionalRequirements_4036(
-			AbstractFeature source, NonFunctionalRequirement target) {
+		public boolean canCreateAbstractFeatureConstrainingNonFunctionalRequirements_4036(
+				AbstractFeature source, NonFunctionalRequirement target) {
 			if (source != null) {
-				if (source.getConstrainingNonFunctionalRequirements().contains(target)) {
+				if (source.getConstrainingNonFunctionalRequirements().contains(
+						target)) {
 					return false;
 				}
 			}
-			if (target != null && (target.getConstrainedFeatures().contains(target))) {
+			if (target != null
+					&& (target.getConstrainedFeatures().contains(target))) {
 				return false;
 			}
 
-			return canExistAbstractFeatureConstrainingNonFunctionalRequirements_4036(source, target);
+			return canExistAbstractFeatureConstrainingNonFunctionalRequirements_4036(
+					source, target);
 		}
 
 		/**
 		 * @generated
 		 */
-		public static boolean canCreateAbstractFeatureRequiredFeatures_4045(AbstractFeature source,
-			AbstractFeature target) {
+		public boolean canCreateAbstractFeatureRequiredFeatures_4045(
+				AbstractFeature source, AbstractFeature target) {
 			if (source != null) {
 				if (source.getRequiredFeatures().contains(target)) {
 					return false;
 				}
 			}
-			if (target != null && (target.getRequiringFeatures().contains(target))) {
+			if (target != null
+					&& (target.getRequiringFeatures().contains(target))) {
 				return false;
 			}
 
@@ -392,14 +435,15 @@
 		/**
 		 * @generated
 		 */
-		public static boolean canCreateAbstractFeatureExcludedFeatures_4038(AbstractFeature source,
-			AbstractFeature target) {
+		public boolean canCreateAbstractFeatureExcludedFeatures_4038(
+				AbstractFeature source, AbstractFeature target) {
 			if (source != null) {
 				if (source.getExcludedFeatures().contains(target)) {
 					return false;
 				}
 			}
-			if (target != null && (target.getExcludingFeatures().contains(target))) {
+			if (target != null
+					&& (target.getExcludingFeatures().contains(target))) {
 				return false;
 			}
 
@@ -409,7 +453,8 @@
 		/**
 		 * @generated
 		 */
-		public static boolean canCreateGoalRealizedFeatures_4004(Goal source, AbstractFeature target) {
+		public boolean canCreateGoalRealizedFeatures_4004(Goal source,
+				AbstractFeature target) {
 			if (source != null) {
 				if (source.getRealizedFeatures().contains(target)) {
 					return false;
@@ -425,7 +470,7 @@
 		/**
 		 * @generated
 		 */
-		public static boolean canCreateGoalSubGoals_4018(Goal source, Goal target) {
+		public boolean canCreateGoalSubGoals_4018(Goal source, Goal target) {
 			if (source != null) {
 				if (source.getSubGoals().contains(target)) {
 					return false;
@@ -444,41 +489,47 @@
 		/**
 		 * @generated
 		 */
-		public static boolean canCreateGoalReference_4016(MEDiagram container, Goal source, Goal target) {
-			return canExistGoalReference_4016(container, source, target);
+		public boolean canCreateGoalReference_4016(MEDiagram container,
+				Goal source, Goal target) {
+			return canExistGoalReference_4016(container, null, source, target);
 		}
 
 		/**
 		 * @generated
 		 */
-		public static boolean canCreateGoalReference_4023(MEDiagram container, Goal source, Goal target) {
-			return canExistGoalReference_4023(container, source, target);
+		public boolean canCreateGoalReference_4023(MEDiagram container,
+				Goal source, Goal target) {
+			return canExistGoalReference_4023(container, null, source, target);
 		}
 
 		/**
 		 * @generated
 		 */
-		public static boolean canCreateGoalReference_4024(MEDiagram container, Goal source, Goal target) {
-			return canExistGoalReference_4024(container, source, target);
+		public boolean canCreateGoalReference_4024(MEDiagram container,
+				Goal source, Goal target) {
+			return canExistGoalReference_4024(container, null, source, target);
 		}
 
 		/**
 		 * @generated
 		 */
-		public static boolean canCreateGoalReference_4025(MEDiagram container, Goal source, Goal target) {
-			return canExistGoalReference_4025(container, source, target);
+		public boolean canCreateGoalReference_4025(MEDiagram container,
+				Goal source, Goal target) {
+			return canExistGoalReference_4025(container, null, source, target);
 		}
 
 		/**
 		 * @generated
 		 */
-		public static boolean canCreateRequirementImplementingServices_4005(Requirement source, Service target) {
+		public boolean canCreateRequirementImplementingServices_4005(
+				Requirement source, Service target) {
 			if (source != null) {
 				if (source.getImplementingServices().contains(target)) {
 					return false;
 				}
 			}
-			if (target != null && (target.getSatisfiedRequirements().contains(target))) {
+			if (target != null
+					&& (target.getSatisfiedRequirements().contains(target))) {
 				return false;
 			}
 
@@ -488,8 +539,8 @@
 		/**
 		 * @generated
 		 */
-		public static boolean canCreateNonFunctionalRequirementSubNonFunctionalRequirements_4043(
-			NonFunctionalRequirement source, NonFunctionalRequirement target) {
+		public boolean canCreateNonFunctionalRequirementSubNonFunctionalRequirements_4043(
+				NonFunctionalRequirement source, NonFunctionalRequirement target) {
 			if (source != null) {
 				if (source.getSubNonFunctionalRequirements().contains(target)) {
 					return false;
@@ -498,18 +549,20 @@
 					return false;
 				}
 			}
-			if (target != null && (target.getParentNonFunctionalRequirement() != null)) {
+			if (target != null
+					&& (target.getParentNonFunctionalRequirement() != null)) {
 				return false;
 			}
 
-			return canExistNonFunctionalRequirementSubNonFunctionalRequirements_4043(source, target);
+			return canExistNonFunctionalRequirementSubNonFunctionalRequirements_4043(
+					source, target);
 		}
 
 		/**
 		 * @generated
 		 */
-		public static boolean canCreateFunctionalRequirementSubFunctionalRequirements_4044(
-			FunctionalRequirement source, FunctionalRequirement target) {
+		public boolean canCreateFunctionalRequirementSubFunctionalRequirements_4044(
+				FunctionalRequirement source, FunctionalRequirement target) {
 			if (source != null) {
 				if (source.getSubFunctionalRequirements().contains(target)) {
 					return false;
@@ -518,17 +571,20 @@
 					return false;
 				}
 			}
-			if (target != null && (target.getParentFunctionalRequirement() != null)) {
+			if (target != null
+					&& (target.getParentFunctionalRequirement() != null)) {
 				return false;
 			}
 
-			return canExistFunctionalRequirementSubFunctionalRequirements_4044(source, target);
+			return canExistFunctionalRequirementSubFunctionalRequirements_4044(
+					source, target);
 		}
 
 		/**
 		 * @generated
 		 */
-		public static boolean canCreateMitigationMitigatedDangers_4012(Mitigation source, Danger target) {
+		public boolean canCreateMitigationMitigatedDangers_4012(
+				Mitigation source, Danger target) {
 			if (source != null) {
 				if (source.getMitigatedDangers().contains(target)) {
 					return false;
@@ -544,7 +600,8 @@
 		/**
 		 * @generated
 		 */
-		public static boolean canCreateDangerHarmedAssets_4013(Danger source, Asset target) {
+		public boolean canCreateDangerHarmedAssets_4013(Danger source,
+				Asset target) {
 			if (source != null) {
 				if (source.getHarmedAssets().contains(target)) {
 					return false;
@@ -560,13 +617,15 @@
 		/**
 		 * @generated
 		 */
-		public static boolean canCreateAssetTriggeredDangers_4017(Asset source, Danger target) {
+		public boolean canCreateAssetTriggeredDangers_4017(Asset source,
+				Danger target) {
 			if (source != null) {
 				if (source.getTriggeredDangers().contains(target)) {
 					return false;
 				}
 			}
-			if (target != null && (target.getTriggeringAssets().contains(target))) {
+			if (target != null
+					&& (target.getTriggeringAssets().contains(target))) {
 				return false;
 			}
 
@@ -576,7 +635,8 @@
 		/**
 		 * @generated
 		 */
-		public static boolean canCreateServiceSubServices_4022(Service source, Service target) {
+		public boolean canCreateServiceSubServices_4022(Service source,
+				Service target) {
 			if (source != null) {
 				if (source.getSubServices().contains(target)) {
 					return false;
@@ -595,8 +655,8 @@
 		/**
 		 * @generated
 		 */
-		public static boolean canCreateVariationPointOptionalSubFeatures_4046(VariationPoint source,
-			AbstractFeature target) {
+		public boolean canCreateVariationPointOptionalSubFeatures_4046(
+				VariationPoint source, AbstractFeature target) {
 			if (source != null) {
 				if (source.getOptionalSubFeatures().contains(target)) {
 					return false;
@@ -605,18 +665,20 @@
 					return false;
 				}
 			}
-			if (target != null && (target.getOptionalParentVariationPoint() != null)) {
+			if (target != null
+					&& (target.getOptionalParentVariationPoint() != null)) {
 				return false;
 			}
 
-			return canExistVariationPointOptionalSubFeatures_4046(source, target);
+			return canExistVariationPointOptionalSubFeatures_4046(source,
+					target);
 		}
 
 		/**
 		 * @generated
 		 */
-		public static boolean canCreateVariationPointInstanceVariationPoint_4033(VariationPointInstance source,
-			VariationPoint target) {
+		public boolean canCreateVariationPointInstanceVariationPoint_4033(
+				VariationPointInstance source, VariationPoint target) {
 			if (source != null) {
 				if (source.getVariationPoint() != null) {
 					return false;
@@ -626,30 +688,34 @@
 				return false;
 			}
 
-			return canExistVariationPointInstanceVariationPoint_4033(source, target);
+			return canExistVariationPointInstanceVariationPoint_4033(source,
+					target);
 		}
 
 		/**
 		 * @generated
 		 */
-		public static boolean canCreateVariationPointInstanceSelectedFeatures_4040(VariationPointInstance source,
-			AbstractFeature target) {
+		public boolean canCreateVariationPointInstanceSelectedFeatures_4040(
+				VariationPointInstance source, AbstractFeature target) {
 			if (source != null) {
 				if (source.getSelectedFeatures().contains(target)) {
 					return false;
 				}
 			}
-			if (target != null && (target.getVariationPointInstances().contains(target))) {
+			if (target != null
+					&& (target.getVariationPointInstances().contains(target))) {
 				return false;
 			}
 
-			return canExistVariationPointInstanceSelectedFeatures_4040(source, target);
+			return canExistVariationPointInstanceSelectedFeatures_4040(source,
+					target);
 		}
 
 		/**
 		 * @generated
 		 */
-		public static boolean canCreateProductVariationPointInstances_4032(Product source, VariationPointInstance target) {
+		public boolean canCreateProductVariationPointInstances_4032(
+				Product source, VariationPointInstance target) {
 			if (source != null) {
 				if (source.getVariationPointInstances().contains(target)) {
 					return false;
@@ -665,7 +731,8 @@
 		/**
 		 * @generated
 		 */
-		public static boolean canCreateProductFeatures_4047(Product source, Feature target) {
+		public boolean canCreateProductFeatures_4047(Product source,
+				Feature target) {
 			if (source != null) {
 				if (source.getFeatures().contains(target)) {
 					return false;
@@ -681,177 +748,213 @@
 		/**
 		 * @generated
 		 */
-		public static boolean canExistStakeholderGoals_4008(Stakeholder source, Goal target) {
+		public boolean canCreateUrmlModelElementAssociations_4048(
+				UrmlModelElement source, UrmlModelElement target) {
+			if (source != null) {
+				if (source.getAssociations().contains(target)) {
+					return false;
+				}
+			}
+
+			return canExistUrmlModelElementAssociations_4048(source, target);
+		}
+
+		/**
+		 * @generated
+		 */
+		public boolean canExistStakeholderGoals_4008(Stakeholder source,
+				Goal target) {
 			return true;
 		}
 
 		/**
 		 * @generated
 		 */
-		public static boolean canExistAbstractFeatureSubFeatures_4034(AbstractFeature source, AbstractFeature target) {
+		public boolean canExistAbstractFeatureSubFeatures_4034(
+				AbstractFeature source, AbstractFeature target) {
 			return true;
 		}
 
 		/**
 		 * @generated
 		 */
-		public static boolean canExistAbstractFeatureDetailingFunctionalRequirements_4035(AbstractFeature source,
-			FunctionalRequirement target) {
+		public boolean canExistAbstractFeatureDetailingFunctionalRequirements_4035(
+				AbstractFeature source, FunctionalRequirement target) {
 			return true;
 		}
 
 		/**
 		 * @generated
 		 */
-		public static boolean canExistAbstractFeatureConstrainingNonFunctionalRequirements_4036(AbstractFeature source,
-			NonFunctionalRequirement target) {
+		public boolean canExistAbstractFeatureConstrainingNonFunctionalRequirements_4036(
+				AbstractFeature source, NonFunctionalRequirement target) {
 			return true;
 		}
 
 		/**
 		 * @generated
 		 */
-		public static boolean canExistAbstractFeatureRequiredFeatures_4045(AbstractFeature source,
-			AbstractFeature target) {
+		public boolean canExistAbstractFeatureRequiredFeatures_4045(
+				AbstractFeature source, AbstractFeature target) {
 			return true;
 		}
 
 		/**
 		 * @generated
 		 */
-		public static boolean canExistAbstractFeatureExcludedFeatures_4038(AbstractFeature source,
-			AbstractFeature target) {
+		public boolean canExistAbstractFeatureExcludedFeatures_4038(
+				AbstractFeature source, AbstractFeature target) {
 			return true;
 		}
 
 		/**
 		 * @generated
 		 */
-		public static boolean canExistGoalRealizedFeatures_4004(Goal source, AbstractFeature target) {
+		public boolean canExistGoalRealizedFeatures_4004(Goal source,
+				AbstractFeature target) {
 			return true;
 		}
 
 		/**
 		 * @generated
 		 */
-		public static boolean canExistGoalSubGoals_4018(Goal source, Goal target) {
+		public boolean canExistGoalSubGoals_4018(Goal source, Goal target) {
 			return true;
 		}
 
 		/**
 		 * @generated
 		 */
-		public static boolean canExistGoalReference_4016(MEDiagram container, Goal source, Goal target) {
+		public boolean canExistGoalReference_4016(MEDiagram container,
+				GoalReference linkInstance, Goal source, Goal target) {
 			return true;
 		}
 
 		/**
 		 * @generated
 		 */
-		public static boolean canExistGoalReference_4023(MEDiagram container, Goal source, Goal target) {
+		public boolean canExistGoalReference_4023(MEDiagram container,
+				GoalReference linkInstance, Goal source, Goal target) {
 			return true;
 		}
 
 		/**
 		 * @generated
 		 */
-		public static boolean canExistGoalReference_4024(MEDiagram container, Goal source, Goal target) {
+		public boolean canExistGoalReference_4024(MEDiagram container,
+				GoalReference linkInstance, Goal source, Goal target) {
 			return true;
 		}
 
 		/**
 		 * @generated
 		 */
-		public static boolean canExistGoalReference_4025(MEDiagram container, Goal source, Goal target) {
+		public boolean canExistGoalReference_4025(MEDiagram container,
+				GoalReference linkInstance, Goal source, Goal target) {
 			return true;
 		}
 
 		/**
 		 * @generated
 		 */
-		public static boolean canExistRequirementImplementingServices_4005(Requirement source, Service target) {
+		public boolean canExistRequirementImplementingServices_4005(
+				Requirement source, Service target) {
 			return true;
 		}
 
 		/**
 		 * @generated
 		 */
-		public static boolean canExistNonFunctionalRequirementSubNonFunctionalRequirements_4043(
-			NonFunctionalRequirement source, NonFunctionalRequirement target) {
+		public boolean canExistNonFunctionalRequirementSubNonFunctionalRequirements_4043(
+				NonFunctionalRequirement source, NonFunctionalRequirement target) {
 			return true;
 		}
 
 		/**
 		 * @generated
 		 */
-		public static boolean canExistFunctionalRequirementSubFunctionalRequirements_4044(FunctionalRequirement source,
-			FunctionalRequirement target) {
+		public boolean canExistFunctionalRequirementSubFunctionalRequirements_4044(
+				FunctionalRequirement source, FunctionalRequirement target) {
 			return true;
 		}
 
 		/**
 		 * @generated
 		 */
-		public static boolean canExistMitigationMitigatedDangers_4012(Mitigation source, Danger target) {
+		public boolean canExistMitigationMitigatedDangers_4012(
+				Mitigation source, Danger target) {
 			return true;
 		}
 
 		/**
 		 * @generated
 		 */
-		public static boolean canExistDangerHarmedAssets_4013(Danger source, Asset target) {
+		public boolean canExistDangerHarmedAssets_4013(Danger source,
+				Asset target) {
 			return true;
 		}
 
 		/**
 		 * @generated
 		 */
-		public static boolean canExistAssetTriggeredDangers_4017(Asset source, Danger target) {
+		public boolean canExistAssetTriggeredDangers_4017(Asset source,
+				Danger target) {
 			return true;
 		}
 
 		/**
 		 * @generated
 		 */
-		public static boolean canExistServiceSubServices_4022(Service source, Service target) {
+		public boolean canExistServiceSubServices_4022(Service source,
+				Service target) {
 			return true;
 		}
 
 		/**
 		 * @generated
 		 */
-		public static boolean canExistVariationPointOptionalSubFeatures_4046(VariationPoint source,
-			AbstractFeature target) {
+		public boolean canExistVariationPointOptionalSubFeatures_4046(
+				VariationPoint source, AbstractFeature target) {
 			return true;
 		}
 
 		/**
 		 * @generated
 		 */
-		public static boolean canExistVariationPointInstanceVariationPoint_4033(VariationPointInstance source,
-			VariationPoint target) {
+		public boolean canExistVariationPointInstanceVariationPoint_4033(
+				VariationPointInstance source, VariationPoint target) {
 			return true;
 		}
 
 		/**
 		 * @generated
 		 */
-		public static boolean canExistVariationPointInstanceSelectedFeatures_4040(VariationPointInstance source,
-			AbstractFeature target) {
+		public boolean canExistVariationPointInstanceSelectedFeatures_4040(
+				VariationPointInstance source, AbstractFeature target) {
 			return true;
 		}
 
 		/**
 		 * @generated
 		 */
-		public static boolean canExistProductVariationPointInstances_4032(Product source, VariationPointInstance target) {
+		public boolean canExistProductVariationPointInstances_4032(
+				Product source, VariationPointInstance target) {
 			return true;
 		}
 
 		/**
 		 * @generated
 		 */
-		public static boolean canExistProductFeatures_4047(Product source, Feature target) {
+		public boolean canExistProductFeatures_4047(Product source,
+				Feature target) {
+			return true;
+		}
+
+		/**
+		 * @generated
+		 */
+		public boolean canExistUrmlModelElementAssociations_4048(
+				UrmlModelElement source, UrmlModelElement target) {
 			return true;
 		}
 	}
Index: src/org/unicase/ui/diagram/urml/edit/policies/ProceduralMitigationItemSemanticEditPolicy.java
===================================================================
--- src/org/unicase/ui/diagram/urml/edit/policies/ProceduralMitigationItemSemanticEditPolicy.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/edit/policies/ProceduralMitigationItemSemanticEditPolicy.java	(working copy)
@@ -16,14 +16,18 @@
 import org.eclipse.gmf.runtime.notation.View;
 import org.unicase.ui.diagram.urml.edit.commands.MitigationMitigatedDangersCreateCommand;
 import org.unicase.ui.diagram.urml.edit.commands.MitigationMitigatedDangersReorientCommand;
+import org.unicase.ui.diagram.urml.edit.commands.UrmlModelElementAssociationsCreateCommand;
+import org.unicase.ui.diagram.urml.edit.commands.UrmlModelElementAssociationsReorientCommand;
 import org.unicase.ui.diagram.urml.edit.parts.MitigationMitigatedDangersEditPart;
+import org.unicase.ui.diagram.urml.edit.parts.UrmlModelElementAssociationsEditPart;
 import org.unicase.ui.diagram.urml.part.UrmlVisualIDRegistry;
 import org.unicase.ui.diagram.urml.providers.UrmlElementTypes;
 
 /**
  * @generated
  */
-public class ProceduralMitigationItemSemanticEditPolicy extends UrmlBaseItemSemanticEditPolicy {
+public class ProceduralMitigationItemSemanticEditPolicy extends
+		UrmlBaseItemSemanticEditPolicy {
 
 	/**
 	 * @generated
@@ -37,13 +41,34 @@
 	 */
 	protected Command getDestroyElementCommand(DestroyElementRequest req) {
 		View view = (View) getHost().getModel();
-		CompositeTransactionalCommand cmd = new CompositeTransactionalCommand(getEditingDomain(), null);
+		CompositeTransactionalCommand cmd = new CompositeTransactionalCommand(
+				getEditingDomain(), null);
 		cmd.setTransactionNestingEnabled(false);
-		for (Iterator it = view.getSourceEdges().iterator(); it.hasNext();) {
+		for (Iterator<?> it = view.getTargetEdges().iterator(); it.hasNext();) {
+			Edge incomingLink = (Edge) it.next();
+			if (UrmlVisualIDRegistry.getVisualID(incomingLink) == UrmlModelElementAssociationsEditPart.VISUAL_ID) {
+				DestroyReferenceRequest r = new DestroyReferenceRequest(
+						incomingLink.getSource().getElement(), null,
+						incomingLink.getTarget().getElement(), false);
+				cmd.add(new DestroyReferenceCommand(r));
+				cmd.add(new DeleteCommand(getEditingDomain(), incomingLink));
+				continue;
+			}
+		}
+		for (Iterator<?> it = view.getSourceEdges().iterator(); it.hasNext();) {
 			Edge outgoingLink = (Edge) it.next();
 			if (UrmlVisualIDRegistry.getVisualID(outgoingLink) == MitigationMitigatedDangersEditPart.VISUAL_ID) {
-				DestroyReferenceRequest r = new DestroyReferenceRequest(outgoingLink.getSource().getElement(), null,
-					outgoingLink.getTarget().getElement(), false);
+				DestroyReferenceRequest r = new DestroyReferenceRequest(
+						outgoingLink.getSource().getElement(), null,
+						outgoingLink.getTarget().getElement(), false);
+				cmd.add(new DestroyReferenceCommand(r));
+				cmd.add(new DeleteCommand(getEditingDomain(), outgoingLink));
+				continue;
+			}
+			if (UrmlVisualIDRegistry.getVisualID(outgoingLink) == UrmlModelElementAssociationsEditPart.VISUAL_ID) {
+				DestroyReferenceRequest r = new DestroyReferenceRequest(
+						outgoingLink.getSource().getElement(), null,
+						outgoingLink.getTarget().getElement(), false);
 				cmd.add(new DestroyReferenceCommand(r));
 				cmd.add(new DeleteCommand(getEditingDomain(), outgoingLink));
 				continue;
@@ -66,16 +91,25 @@
 	 */
 	protected Command getCreateRelationshipCommand(CreateRelationshipRequest req) {
 		Command command = req.getTarget() == null ? getStartCreateRelationshipCommand(req)
-			: getCompleteCreateRelationshipCommand(req);
-		return command != null ? command : super.getCreateRelationshipCommand(req);
+				: getCompleteCreateRelationshipCommand(req);
+		return command != null ? command : super
+				.getCreateRelationshipCommand(req);
 	}
 
 	/**
 	 * @generated
 	 */
-	protected Command getStartCreateRelationshipCommand(CreateRelationshipRequest req) {
-		if (UrmlElementTypes.MitigationMitigatedDangers_4012 == req.getElementType()) {
-			return getGEFWrapper(new MitigationMitigatedDangersCreateCommand(req, req.getSource(), req.getTarget()));
+	protected Command getStartCreateRelationshipCommand(
+			CreateRelationshipRequest req) {
+		if (UrmlElementTypes.MitigationMitigatedDangers_4012 == req
+				.getElementType()) {
+			return getGEFWrapper(new MitigationMitigatedDangersCreateCommand(
+					req, req.getSource(), req.getTarget()));
+		}
+		if (UrmlElementTypes.UrmlModelElementAssociations_4048 == req
+				.getElementType()) {
+			return getGEFWrapper(new UrmlModelElementAssociationsCreateCommand(
+					req, req.getSource(), req.getTarget()));
 		}
 		return null;
 	}
@@ -83,10 +117,17 @@
 	/**
 	 * @generated
 	 */
-	protected Command getCompleteCreateRelationshipCommand(CreateRelationshipRequest req) {
-		if (UrmlElementTypes.MitigationMitigatedDangers_4012 == req.getElementType()) {
+	protected Command getCompleteCreateRelationshipCommand(
+			CreateRelationshipRequest req) {
+		if (UrmlElementTypes.MitigationMitigatedDangers_4012 == req
+				.getElementType()) {
 			return null;
 		}
+		if (UrmlElementTypes.UrmlModelElementAssociations_4048 == req
+				.getElementType()) {
+			return getGEFWrapper(new UrmlModelElementAssociationsCreateCommand(
+					req, req.getSource(), req.getTarget()));
+		}
 		return null;
 	}
 
@@ -96,10 +137,15 @@
 	 * 
 	 * @generated
 	 */
-	protected Command getReorientReferenceRelationshipCommand(ReorientReferenceRelationshipRequest req) {
+	protected Command getReorientReferenceRelationshipCommand(
+			ReorientReferenceRelationshipRequest req) {
 		switch (getVisualID(req)) {
 		case MitigationMitigatedDangersEditPart.VISUAL_ID:
-			return getGEFWrapper(new MitigationMitigatedDangersReorientCommand(req));
+			return getGEFWrapper(new MitigationMitigatedDangersReorientCommand(
+					req));
+		case UrmlModelElementAssociationsEditPart.VISUAL_ID:
+			return getGEFWrapper(new UrmlModelElementAssociationsReorientCommand(
+					req));
 		}
 		return super.getReorientReferenceRelationshipCommand(req);
 	}
Index: src/org/unicase/ui/diagram/urml/edit/policies/GoalItemSemanticEditPolicy.java
===================================================================
--- src/org/unicase/ui/diagram/urml/edit/policies/GoalItemSemanticEditPolicy.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/edit/policies/GoalItemSemanticEditPolicy.java	(working copy)
@@ -35,6 +35,8 @@
 import org.unicase.ui.diagram.urml.edit.commands.GoalSubGoalsReorientCommand;
 import org.unicase.ui.diagram.urml.edit.commands.StakeholderGoalsCreateCommand;
 import org.unicase.ui.diagram.urml.edit.commands.StakeholderGoalsReorientCommand;
+import org.unicase.ui.diagram.urml.edit.commands.UrmlModelElementAssociationsCreateCommand;
+import org.unicase.ui.diagram.urml.edit.commands.UrmlModelElementAssociationsReorientCommand;
 import org.unicase.ui.diagram.urml.edit.parts.GoalRealizedFeaturesEditPart;
 import org.unicase.ui.diagram.urml.edit.parts.GoalReference2EditPart;
 import org.unicase.ui.diagram.urml.edit.parts.GoalReference3EditPart;
@@ -42,6 +44,7 @@
 import org.unicase.ui.diagram.urml.edit.parts.GoalReferenceEditPart;
 import org.unicase.ui.diagram.urml.edit.parts.GoalSubGoalsEditPart;
 import org.unicase.ui.diagram.urml.edit.parts.StakeholderGoalsEditPart;
+import org.unicase.ui.diagram.urml.edit.parts.UrmlModelElementAssociationsEditPart;
 import org.unicase.ui.diagram.urml.part.UrmlVisualIDRegistry;
 import org.unicase.ui.diagram.urml.providers.UrmlElementTypes;
 
@@ -62,26 +65,31 @@
 	 */
 	protected Command getDestroyElementCommand(DestroyElementRequest req) {
 		View view = (View) getHost().getModel();
-		CompositeTransactionalCommand cmd = new CompositeTransactionalCommand(getEditingDomain(), null);
+		CompositeTransactionalCommand cmd = new CompositeTransactionalCommand(
+				getEditingDomain(), null);
 		cmd.setTransactionNestingEnabled(false);
-		for (Iterator it = view.getTargetEdges().iterator(); it.hasNext();) {
+		for (Iterator<?> it = view.getTargetEdges().iterator(); it.hasNext();) {
 			Edge incomingLink = (Edge) it.next();
 			if (UrmlVisualIDRegistry.getVisualID(incomingLink) == StakeholderGoalsEditPart.VISUAL_ID) {
-				DestroyReferenceRequest r = new DestroyReferenceRequest(incomingLink.getSource().getElement(), null,
-					incomingLink.getTarget().getElement(), false);
+				DestroyReferenceRequest r = new DestroyReferenceRequest(
+						incomingLink.getSource().getElement(), null,
+						incomingLink.getTarget().getElement(), false);
 				cmd.add(new DestroyReferenceCommand(r));
 				cmd.add(new DeleteCommand(getEditingDomain(), incomingLink));
 				continue;
 			}
 			if (UrmlVisualIDRegistry.getVisualID(incomingLink) == GoalSubGoalsEditPart.VISUAL_ID) {
-				DestroyReferenceRequest r = new DestroyReferenceRequest(incomingLink.getSource().getElement(), null,
-					incomingLink.getTarget().getElement(), false);
+				DestroyReferenceRequest r = new DestroyReferenceRequest(
+						incomingLink.getSource().getElement(), null,
+						incomingLink.getTarget().getElement(), false);
 				cmd.add(new DestroyReferenceCommand(r) {
-					protected CommandResult doExecuteWithResult(IProgressMonitor progressMonitor, IAdaptable info)
-						throws ExecutionException {
+					protected CommandResult doExecuteWithResult(
+							IProgressMonitor progressMonitor, IAdaptable info)
+							throws ExecutionException {
 						EObject referencedObject = getReferencedObject();
 						Resource resource = referencedObject.eResource();
-						CommandResult result = super.doExecuteWithResult(progressMonitor, info);
+						CommandResult result = super.doExecuteWithResult(
+								progressMonitor, info);
 						if (resource != null) {
 							resource.getContents().add(referencedObject);
 						}
@@ -92,48 +100,64 @@
 				continue;
 			}
 			if (UrmlVisualIDRegistry.getVisualID(incomingLink) == GoalReferenceEditPart.VISUAL_ID) {
-				DestroyElementRequest r = new DestroyElementRequest(incomingLink.getElement(), false);
+				DestroyElementRequest r = new DestroyElementRequest(
+						incomingLink.getElement(), false);
 				cmd.add(new DestroyElementCommand(r));
 				cmd.add(new DeleteCommand(getEditingDomain(), incomingLink));
 				continue;
 			}
 			if (UrmlVisualIDRegistry.getVisualID(incomingLink) == GoalReference2EditPart.VISUAL_ID) {
-				DestroyElementRequest r = new DestroyElementRequest(incomingLink.getElement(), false);
+				DestroyElementRequest r = new DestroyElementRequest(
+						incomingLink.getElement(), false);
 				cmd.add(new DestroyElementCommand(r));
 				cmd.add(new DeleteCommand(getEditingDomain(), incomingLink));
 				continue;
 			}
 			if (UrmlVisualIDRegistry.getVisualID(incomingLink) == GoalReference3EditPart.VISUAL_ID) {
-				DestroyElementRequest r = new DestroyElementRequest(incomingLink.getElement(), false);
+				DestroyElementRequest r = new DestroyElementRequest(
+						incomingLink.getElement(), false);
 				cmd.add(new DestroyElementCommand(r));
 				cmd.add(new DeleteCommand(getEditingDomain(), incomingLink));
 				continue;
 			}
 			if (UrmlVisualIDRegistry.getVisualID(incomingLink) == GoalReference4EditPart.VISUAL_ID) {
-				DestroyElementRequest r = new DestroyElementRequest(incomingLink.getElement(), false);
+				DestroyElementRequest r = new DestroyElementRequest(
+						incomingLink.getElement(), false);
 				cmd.add(new DestroyElementCommand(r));
 				cmd.add(new DeleteCommand(getEditingDomain(), incomingLink));
 				continue;
 			}
+			if (UrmlVisualIDRegistry.getVisualID(incomingLink) == UrmlModelElementAssociationsEditPart.VISUAL_ID) {
+				DestroyReferenceRequest r = new DestroyReferenceRequest(
+						incomingLink.getSource().getElement(), null,
+						incomingLink.getTarget().getElement(), false);
+				cmd.add(new DestroyReferenceCommand(r));
+				cmd.add(new DeleteCommand(getEditingDomain(), incomingLink));
+				continue;
+			}
 		}
-		for (Iterator it = view.getSourceEdges().iterator(); it.hasNext();) {
+		for (Iterator<?> it = view.getSourceEdges().iterator(); it.hasNext();) {
 			Edge outgoingLink = (Edge) it.next();
 			if (UrmlVisualIDRegistry.getVisualID(outgoingLink) == GoalRealizedFeaturesEditPart.VISUAL_ID) {
-				DestroyReferenceRequest r = new DestroyReferenceRequest(outgoingLink.getSource().getElement(), null,
-					outgoingLink.getTarget().getElement(), false);
+				DestroyReferenceRequest r = new DestroyReferenceRequest(
+						outgoingLink.getSource().getElement(), null,
+						outgoingLink.getTarget().getElement(), false);
 				cmd.add(new DestroyReferenceCommand(r));
 				cmd.add(new DeleteCommand(getEditingDomain(), outgoingLink));
 				continue;
 			}
 			if (UrmlVisualIDRegistry.getVisualID(outgoingLink) == GoalSubGoalsEditPart.VISUAL_ID) {
-				DestroyReferenceRequest r = new DestroyReferenceRequest(outgoingLink.getSource().getElement(), null,
-					outgoingLink.getTarget().getElement(), false);
+				DestroyReferenceRequest r = new DestroyReferenceRequest(
+						outgoingLink.getSource().getElement(), null,
+						outgoingLink.getTarget().getElement(), false);
 				cmd.add(new DestroyReferenceCommand(r) {
-					protected CommandResult doExecuteWithResult(IProgressMonitor progressMonitor, IAdaptable info)
-						throws ExecutionException {
+					protected CommandResult doExecuteWithResult(
+							IProgressMonitor progressMonitor, IAdaptable info)
+							throws ExecutionException {
 						EObject referencedObject = getReferencedObject();
 						Resource resource = referencedObject.eResource();
-						CommandResult result = super.doExecuteWithResult(progressMonitor, info);
+						CommandResult result = super.doExecuteWithResult(
+								progressMonitor, info);
 						if (resource != null) {
 							resource.getContents().add(referencedObject);
 						}
@@ -144,29 +168,41 @@
 				continue;
 			}
 			if (UrmlVisualIDRegistry.getVisualID(outgoingLink) == GoalReferenceEditPart.VISUAL_ID) {
-				DestroyElementRequest r = new DestroyElementRequest(outgoingLink.getElement(), false);
+				DestroyElementRequest r = new DestroyElementRequest(
+						outgoingLink.getElement(), false);
 				cmd.add(new DestroyElementCommand(r));
 				cmd.add(new DeleteCommand(getEditingDomain(), outgoingLink));
 				continue;
 			}
 			if (UrmlVisualIDRegistry.getVisualID(outgoingLink) == GoalReference2EditPart.VISUAL_ID) {
-				DestroyElementRequest r = new DestroyElementRequest(outgoingLink.getElement(), false);
+				DestroyElementRequest r = new DestroyElementRequest(
+						outgoingLink.getElement(), false);
 				cmd.add(new DestroyElementCommand(r));
 				cmd.add(new DeleteCommand(getEditingDomain(), outgoingLink));
 				continue;
 			}
 			if (UrmlVisualIDRegistry.getVisualID(outgoingLink) == GoalReference3EditPart.VISUAL_ID) {
-				DestroyElementRequest r = new DestroyElementRequest(outgoingLink.getElement(), false);
+				DestroyElementRequest r = new DestroyElementRequest(
+						outgoingLink.getElement(), false);
 				cmd.add(new DestroyElementCommand(r));
 				cmd.add(new DeleteCommand(getEditingDomain(), outgoingLink));
 				continue;
 			}
 			if (UrmlVisualIDRegistry.getVisualID(outgoingLink) == GoalReference4EditPart.VISUAL_ID) {
-				DestroyElementRequest r = new DestroyElementRequest(outgoingLink.getElement(), false);
+				DestroyElementRequest r = new DestroyElementRequest(
+						outgoingLink.getElement(), false);
 				cmd.add(new DestroyElementCommand(r));
 				cmd.add(new DeleteCommand(getEditingDomain(), outgoingLink));
 				continue;
 			}
+			if (UrmlVisualIDRegistry.getVisualID(outgoingLink) == UrmlModelElementAssociationsEditPart.VISUAL_ID) {
+				DestroyReferenceRequest r = new DestroyReferenceRequest(
+						outgoingLink.getSource().getElement(), null,
+						outgoingLink.getTarget().getElement(), false);
+				cmd.add(new DestroyReferenceCommand(r));
+				cmd.add(new DeleteCommand(getEditingDomain(), outgoingLink));
+				continue;
+			}
 		}
 		EAnnotation annotation = view.getEAnnotation("Shortcut"); //$NON-NLS-1$
 		if (annotation == null) {
@@ -185,45 +221,53 @@
 	 */
 	protected Command getCreateRelationshipCommand(CreateRelationshipRequest req) {
 		Command command = req.getTarget() == null ? getStartCreateRelationshipCommand(req)
-			: getCompleteCreateRelationshipCommand(req);
-		return command != null ? command : super.getCreateRelationshipCommand(req);
+				: getCompleteCreateRelationshipCommand(req);
+		return command != null ? command : super
+				.getCreateRelationshipCommand(req);
 	}
 
 	/**
 	 * @generated NOT
 	 */
-	protected Command getStartCreateRelationshipCommand(CreateRelationshipRequest req) {
+	protected Command getStartCreateRelationshipCommand(
+			CreateRelationshipRequest req) {
 		if (UrmlElementTypes.StakeholderGoals_4008 == req.getElementType()) {
 			return null;
 		}
 		if (UrmlElementTypes.GoalRealizedFeatures_4004 == req.getElementType()) {
-			return getGEFWrapper(new GoalRealizedFeaturesCreateCommand(req, req.getSource(), req.getTarget()));
+			return getGEFWrapper(new GoalRealizedFeaturesCreateCommand(req,
+					req.getSource(), req.getTarget()));
 		}
 		if (UrmlElementTypes.GoalSubGoals_4018 == req.getElementType()) {
-			return getGEFWrapper(new GoalSubGoalsCreateCommand(req, req.getSource(), req.getTarget()));
+			return getGEFWrapper(new GoalSubGoalsCreateCommand(req,
+					req.getSource(), req.getTarget()));
 		}
 		if (UrmlElementTypes.GoalReference_4016 == req.getElementType()) {
-			return getGEFWrapper(new GoalReferenceCreateCommand(req, req.getSource(), req.getTarget(),
-			/* user code */
-			(EObject) getHost().getModel()));
+			return getGEFWrapper(new GoalReferenceCreateCommand(req,
+					req.getSource(), req.getTarget(),
+					/* user code */
+					(EObject) getHost().getModel()));
 			/* user code */
 		}
 		if (UrmlElementTypes.GoalReference_4023 == req.getElementType()) {
-			return getGEFWrapper(new GoalReference2CreateCommand(req, req.getSource(), req.getTarget(),
-			/* user code */
-			(EObject) getHost().getModel()));
+			return getGEFWrapper(new GoalReference2CreateCommand(req,
+					req.getSource(), req.getTarget(),
+					/* user code */
+					(EObject) getHost().getModel()));
 			/* user code */
 		}
 		if (UrmlElementTypes.GoalReference_4024 == req.getElementType()) {
-			return getGEFWrapper(new GoalReference3CreateCommand(req, req.getSource(), req.getTarget(),
-			/* user code */
-			(EObject) getHost().getModel()));
+			return getGEFWrapper(new GoalReference3CreateCommand(req,
+					req.getSource(), req.getTarget(),
+					/* user code */
+					(EObject) getHost().getModel()));
 			/* user code */
 		}
 		if (UrmlElementTypes.GoalReference_4025 == req.getElementType()) {
-			return getGEFWrapper(new GoalReference4CreateCommand(req, req.getSource(), req.getTarget(),
-			/* user code */
-			(EObject) getHost().getModel()));
+			return getGEFWrapper(new GoalReference4CreateCommand(req,
+					req.getSource(), req.getTarget(),
+					/* user code */
+					(EObject) getHost().getModel()));
 			/* user code */
 		}
 		return null;
@@ -232,38 +276,45 @@
 	/**
 	 * @generated NOT
 	 */
-	protected Command getCompleteCreateRelationshipCommand(CreateRelationshipRequest req) {
+	protected Command getCompleteCreateRelationshipCommand(
+			CreateRelationshipRequest req) {
 		if (UrmlElementTypes.StakeholderGoals_4008 == req.getElementType()) {
-			return getGEFWrapper(new StakeholderGoalsCreateCommand(req, req.getSource(), req.getTarget()));
+			return getGEFWrapper(new StakeholderGoalsCreateCommand(req,
+					req.getSource(), req.getTarget()));
 		}
 		if (UrmlElementTypes.GoalRealizedFeatures_4004 == req.getElementType()) {
 			return null;
 		}
 		if (UrmlElementTypes.GoalSubGoals_4018 == req.getElementType()) {
-			return getGEFWrapper(new GoalSubGoalsCreateCommand(req, req.getSource(), req.getTarget()));
+			return getGEFWrapper(new GoalSubGoalsCreateCommand(req,
+					req.getSource(), req.getTarget()));
 		}
 		if (UrmlElementTypes.GoalReference_4016 == req.getElementType()) {
-			return getGEFWrapper(new GoalReferenceCreateCommand(req, req.getSource(), req.getTarget(),
-			/* user code */
-			(EObject) getHost().getModel()));
+			return getGEFWrapper(new GoalReferenceCreateCommand(req,
+					req.getSource(), req.getTarget(),
+					/* user code */
+					(EObject) getHost().getModel()));
 			/* user code */
 		}
 		if (UrmlElementTypes.GoalReference_4023 == req.getElementType()) {
-			return getGEFWrapper(new GoalReference2CreateCommand(req, req.getSource(), req.getTarget(),
-			/* user code */
-			(EObject) getHost().getModel()));
+			return getGEFWrapper(new GoalReference2CreateCommand(req,
+					req.getSource(), req.getTarget(),
+					/* user code */
+					(EObject) getHost().getModel()));
 			/* user code */
 		}
 		if (UrmlElementTypes.GoalReference_4024 == req.getElementType()) {
-			return getGEFWrapper(new GoalReference3CreateCommand(req, req.getSource(), req.getTarget(),
-			/* user code */
-			(EObject) getHost().getModel()));
+			return getGEFWrapper(new GoalReference3CreateCommand(req,
+					req.getSource(), req.getTarget(),
+					/* user code */
+					(EObject) getHost().getModel()));
 			/* user code */
 		}
 		if (UrmlElementTypes.GoalReference_4025 == req.getElementType()) {
-			return getGEFWrapper(new GoalReference4CreateCommand(req, req.getSource(), req.getTarget(),
-			/* user code */
-			(EObject) getHost().getModel()));
+			return getGEFWrapper(new GoalReference4CreateCommand(req,
+					req.getSource(), req.getTarget(),
+					/* user code */
+					(EObject) getHost().getModel()));
 			/* user code */
 		}
 		return null;
@@ -275,7 +326,8 @@
 	 * 
 	 * @generated
 	 */
-	protected Command getReorientRelationshipCommand(ReorientRelationshipRequest req) {
+	protected Command getReorientRelationshipCommand(
+			ReorientRelationshipRequest req) {
 		switch (getVisualID(req)) {
 		case GoalReferenceEditPart.VISUAL_ID:
 			return getGEFWrapper(new GoalReferenceReorientCommand(req));
@@ -295,7 +347,8 @@
 	 * 
 	 * @generated
 	 */
-	protected Command getReorientReferenceRelationshipCommand(ReorientReferenceRelationshipRequest req) {
+	protected Command getReorientReferenceRelationshipCommand(
+			ReorientReferenceRelationshipRequest req) {
 		switch (getVisualID(req)) {
 		case StakeholderGoalsEditPart.VISUAL_ID:
 			return getGEFWrapper(new StakeholderGoalsReorientCommand(req));
@@ -303,6 +356,9 @@
 			return getGEFWrapper(new GoalRealizedFeaturesReorientCommand(req));
 		case GoalSubGoalsEditPart.VISUAL_ID:
 			return getGEFWrapper(new GoalSubGoalsReorientCommand(req));
+		case UrmlModelElementAssociationsEditPart.VISUAL_ID:
+			return getGEFWrapper(new UrmlModelElementAssociationsReorientCommand(
+					req));
 		}
 		return super.getReorientReferenceRelationshipCommand(req);
 	}
Index: src/org/unicase/ui/diagram/urml/edit/policies/NonFunctionalRequirementSubNonFunctionalRequirementsItemSemanticEditPolicy.java
===================================================================
--- src/org/unicase/ui/diagram/urml/edit/policies/NonFunctionalRequirementSubNonFunctionalRequirementsItemSemanticEditPolicy.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/edit/policies/NonFunctionalRequirementSubNonFunctionalRequirementsItemSemanticEditPolicy.java	(working copy)
@@ -14,14 +14,15 @@
 /**
  * @generated
  */
-public class NonFunctionalRequirementSubNonFunctionalRequirementsItemSemanticEditPolicy extends
-	UrmlBaseItemSemanticEditPolicy {
+public class NonFunctionalRequirementSubNonFunctionalRequirementsItemSemanticEditPolicy
+		extends UrmlBaseItemSemanticEditPolicy {
 
 	/**
 	 * @generated
 	 */
 	public NonFunctionalRequirementSubNonFunctionalRequirementsItemSemanticEditPolicy() {
-		super(UrmlElementTypes.NonFunctionalRequirementSubNonFunctionalRequirements_4043);
+		super(
+				UrmlElementTypes.NonFunctionalRequirementSubNonFunctionalRequirements_4043);
 	}
 
 	/**
@@ -29,11 +30,13 @@
 	 */
 	protected Command getDestroyReferenceCommand(DestroyReferenceRequest req) {
 		return getGEFWrapper(new DestroyReferenceCommand(req) {
-			protected CommandResult doExecuteWithResult(IProgressMonitor progressMonitor, IAdaptable info)
-				throws ExecutionException {
+			protected CommandResult doExecuteWithResult(
+					IProgressMonitor progressMonitor, IAdaptable info)
+					throws ExecutionException {
 				EObject referencedObject = getReferencedObject();
 				Resource resource = referencedObject.eResource();
-				CommandResult result = super.doExecuteWithResult(progressMonitor, info);
+				CommandResult result = super.doExecuteWithResult(
+						progressMonitor, info);
 				if (resource != null) {
 					resource.getContents().add(referencedObject);
 				}
Index: src/org/unicase/ui/diagram/urml/edit/policies/GoalReference3ItemSemanticEditPolicy.java
===================================================================
--- src/org/unicase/ui/diagram/urml/edit/policies/GoalReference3ItemSemanticEditPolicy.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/edit/policies/GoalReference3ItemSemanticEditPolicy.java	(working copy)
@@ -2,13 +2,19 @@
 
 import org.eclipse.gef.commands.Command;
 import org.eclipse.gmf.runtime.emf.type.core.commands.DestroyElementCommand;
+import org.eclipse.gmf.runtime.emf.type.core.requests.CreateRelationshipRequest;
 import org.eclipse.gmf.runtime.emf.type.core.requests.DestroyElementRequest;
+import org.eclipse.gmf.runtime.emf.type.core.requests.ReorientReferenceRelationshipRequest;
+import org.unicase.ui.diagram.urml.edit.commands.UrmlModelElementAssociationsCreateCommand;
+import org.unicase.ui.diagram.urml.edit.commands.UrmlModelElementAssociationsReorientCommand;
+import org.unicase.ui.diagram.urml.edit.parts.UrmlModelElementAssociationsEditPart;
 import org.unicase.ui.diagram.urml.providers.UrmlElementTypes;
 
 /**
  * @generated
  */
-public class GoalReference3ItemSemanticEditPolicy extends UrmlBaseItemSemanticEditPolicy {
+public class GoalReference3ItemSemanticEditPolicy extends
+		UrmlBaseItemSemanticEditPolicy {
 
 	/**
 	 * @generated
@@ -24,4 +30,56 @@
 		return getGEFWrapper(new DestroyElementCommand(req));
 	}
 
+	/**
+	 * @generated
+	 */
+	protected Command getCreateRelationshipCommand(CreateRelationshipRequest req) {
+		Command command = req.getTarget() == null ? getStartCreateRelationshipCommand(req)
+				: getCompleteCreateRelationshipCommand(req);
+		return command != null ? command : super
+				.getCreateRelationshipCommand(req);
+	}
+
+	/**
+	 * @generated
+	 */
+	protected Command getStartCreateRelationshipCommand(
+			CreateRelationshipRequest req) {
+		if (UrmlElementTypes.UrmlModelElementAssociations_4048 == req
+				.getElementType()) {
+			return getGEFWrapper(new UrmlModelElementAssociationsCreateCommand(
+					req, req.getSource(), req.getTarget()));
+		}
+		return null;
+	}
+
+	/**
+	 * @generated
+	 */
+	protected Command getCompleteCreateRelationshipCommand(
+			CreateRelationshipRequest req) {
+		if (UrmlElementTypes.UrmlModelElementAssociations_4048 == req
+				.getElementType()) {
+			return getGEFWrapper(new UrmlModelElementAssociationsCreateCommand(
+					req, req.getSource(), req.getTarget()));
+		}
+		return null;
+	}
+
+	/**
+	 * Returns command to reorient EReference based link. New link target or source
+	 * should be the domain model element associated with this node.
+	 * 
+	 * @generated
+	 */
+	protected Command getReorientReferenceRelationshipCommand(
+			ReorientReferenceRelationshipRequest req) {
+		switch (getVisualID(req)) {
+		case UrmlModelElementAssociationsEditPart.VISUAL_ID:
+			return getGEFWrapper(new UrmlModelElementAssociationsReorientCommand(
+					req));
+		}
+		return super.getReorientReferenceRelationshipCommand(req);
+	}
+
 }
Index: src/org/unicase/ui/diagram/urml/edit/policies/AssetTriggeredDangersItemSemanticEditPolicy.java
===================================================================
--- src/org/unicase/ui/diagram/urml/edit/policies/AssetTriggeredDangersItemSemanticEditPolicy.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/edit/policies/AssetTriggeredDangersItemSemanticEditPolicy.java	(working copy)
@@ -8,7 +8,8 @@
 /**
  * @generated
  */
-public class AssetTriggeredDangersItemSemanticEditPolicy extends UrmlBaseItemSemanticEditPolicy {
+public class AssetTriggeredDangersItemSemanticEditPolicy extends
+		UrmlBaseItemSemanticEditPolicy {
 
 	/**
 	 * @generated
Index: src/org/unicase/ui/diagram/urml/edit/policies/ServiceSubServicesItemSemanticEditPolicy.java
===================================================================
--- src/org/unicase/ui/diagram/urml/edit/policies/ServiceSubServicesItemSemanticEditPolicy.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/edit/policies/ServiceSubServicesItemSemanticEditPolicy.java	(working copy)
@@ -14,7 +14,8 @@
 /**
  * @generated
  */
-public class ServiceSubServicesItemSemanticEditPolicy extends UrmlBaseItemSemanticEditPolicy {
+public class ServiceSubServicesItemSemanticEditPolicy extends
+		UrmlBaseItemSemanticEditPolicy {
 
 	/**
 	 * @generated
@@ -28,11 +29,13 @@
 	 */
 	protected Command getDestroyReferenceCommand(DestroyReferenceRequest req) {
 		return getGEFWrapper(new DestroyReferenceCommand(req) {
-			protected CommandResult doExecuteWithResult(IProgressMonitor progressMonitor, IAdaptable info)
-				throws ExecutionException {
+			protected CommandResult doExecuteWithResult(
+					IProgressMonitor progressMonitor, IAdaptable info)
+					throws ExecutionException {
 				EObject referencedObject = getReferencedObject();
 				Resource resource = referencedObject.eResource();
-				CommandResult result = super.doExecuteWithResult(progressMonitor, info);
+				CommandResult result = super.doExecuteWithResult(
+						progressMonitor, info);
 				if (resource != null) {
 					resource.getContents().add(referencedObject);
 				}
Index: src/org/unicase/ui/diagram/urml/edit/policies/URMLDiagramItemSemanticEditPolicy.java
===================================================================
--- src/org/unicase/ui/diagram/urml/edit/policies/URMLDiagramItemSemanticEditPolicy.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/edit/policies/URMLDiagramItemSemanticEditPolicy.java	(working copy)
@@ -23,7 +23,8 @@
 /**
  * @generated
  */
-public class URMLDiagramItemSemanticEditPolicy extends UrmlBaseItemSemanticEditPolicy {
+public class URMLDiagramItemSemanticEditPolicy extends
+		UrmlBaseItemSemanticEditPolicy {
 
 	/**
 	 * @generated
@@ -51,7 +52,8 @@
 		if (UrmlElementTypes.Service_2007 == req.getElementType()) {
 			return getGEFWrapper(new ServiceCreateCommand(req));
 		}
-		if (UrmlElementTypes.NonFunctionalRequirement_2008 == req.getElementType()) {
+		if (UrmlElementTypes.NonFunctionalRequirement_2008 == req
+				.getElementType()) {
 			return getGEFWrapper(new NonFunctionalRequirementCreateCommand(req));
 		}
 		if (UrmlElementTypes.Danger_2009 == req.getElementType()) {
@@ -66,7 +68,8 @@
 		if (UrmlElementTypes.VariationPoint_2013 == req.getElementType()) {
 			return getGEFWrapper(new VariationPointCreateCommand(req));
 		}
-		if (UrmlElementTypes.VariationPointInstance_2014 == req.getElementType()) {
+		if (UrmlElementTypes.VariationPointInstance_2014 == req
+				.getElementType()) {
 			return getGEFWrapper(new VariationPointInstanceCreateCommand(req));
 		}
 		if (UrmlElementTypes.Product_2015 == req.getElementType()) {
@@ -79,20 +82,26 @@
 	 * @generated
 	 */
 	protected Command getDuplicateCommand(DuplicateElementsRequest req) {
-		TransactionalEditingDomain editingDomain = ((IGraphicalEditPart) getHost()).getEditingDomain();
+		TransactionalEditingDomain editingDomain = ((IGraphicalEditPart) getHost())
+				.getEditingDomain();
 		return getGEFWrapper(new DuplicateAnythingCommand(editingDomain, req));
 	}
 
 	/**
 	 * @generated
 	 */
-	private static class DuplicateAnythingCommand extends DuplicateEObjectsCommand {
+	private static class DuplicateAnythingCommand extends
+			DuplicateEObjectsCommand {
 
 		/**
 		 * @generated
 		 */
-		public DuplicateAnythingCommand(TransactionalEditingDomain editingDomain, DuplicateElementsRequest req) {
-			super(editingDomain, req.getLabel(), req.getElementsToBeDuplicated(), req.getAllDuplicatedElementsMap());
+		public DuplicateAnythingCommand(
+				TransactionalEditingDomain editingDomain,
+				DuplicateElementsRequest req) {
+			super(editingDomain, req.getLabel(), req
+					.getElementsToBeDuplicated(), req
+					.getAllDuplicatedElementsMap());
 		}
 
 	}
Index: src/org/unicase/ui/diagram/urml/edit/parts/FunctionalRequirementSubFunctionalRequirementsEditPart.java
===================================================================
--- src/org/unicase/ui/diagram/urml/edit/parts/FunctionalRequirementSubFunctionalRequirementsEditPart.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/edit/parts/FunctionalRequirementSubFunctionalRequirementsEditPart.java	(working copy)
@@ -12,8 +12,8 @@
 /**
  * @generated
  */
-public class FunctionalRequirementSubFunctionalRequirementsEditPart extends ConnectionNodeEditPart implements
-	ITreeBranchEditPart {
+public class FunctionalRequirementSubFunctionalRequirementsEditPart extends
+		ConnectionNodeEditPart implements ITreeBranchEditPart {
 
 	/**
 	 * @generated
@@ -32,42 +32,9 @@
 	 */
 	protected void createDefaultEditPolicies() {
 		super.createDefaultEditPolicies();
-		installEditPolicy(EditPolicyRoles.SEMANTIC_ROLE,
-			new FunctionalRequirementSubFunctionalRequirementsItemSemanticEditPolicy());
-	}
-
-	/**
-	 * @generated
-	 */
-	protected boolean addFixedChild(EditPart childEditPart) {
-		return false;
-	}
-
-	/**
-	 * @generated
-	 */
-	protected void addChildVisual(EditPart childEditPart, int index) {
-		if (addFixedChild(childEditPart)) {
-			return;
-		}
-		super.addChildVisual(childEditPart, -1);
-	}
-
-	/**
-	 * @generated
-	 */
-	protected boolean removeFixedChild(EditPart childEditPart) {
-		return false;
-	}
-
-	/**
-	 * @generated
-	 */
-	protected void removeChildVisual(EditPart childEditPart) {
-		if (removeFixedChild(childEditPart)) {
-			return;
-		}
-		super.removeChildVisual(childEditPart);
+		installEditPolicy(
+				EditPolicyRoles.SEMANTIC_ROLE,
+				new FunctionalRequirementSubFunctionalRequirementsItemSemanticEditPolicy());
 	}
 
 	/**
Index: src/org/unicase/ui/diagram/urml/edit/parts/FeatureEditPart.java
===================================================================
--- src/org/unicase/ui/diagram/urml/edit/parts/FeatureEditPart.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/edit/parts/FeatureEditPart.java	(working copy)
@@ -1,6 +1,7 @@
 package org.unicase.ui.diagram.urml.edit.parts;
 
 import java.util.ArrayList;
+import java.util.LinkedList;
 import java.util.List;
 
 import org.eclipse.draw2d.Graphics;
@@ -20,6 +21,7 @@
 import org.eclipse.gmf.runtime.diagram.ui.editpolicies.EditPolicyRoles;
 import org.eclipse.gmf.runtime.draw2d.ui.figures.ConstrainedToolbarLayout;
 import org.eclipse.gmf.runtime.emf.type.core.IElementType;
+import org.eclipse.gmf.runtime.gef.ui.figures.DefaultSizeNodeFigure;
 import org.eclipse.gmf.runtime.gef.ui.figures.NodeFigure;
 import org.eclipse.gmf.runtime.notation.View;
 import org.eclipse.swt.SWT;
@@ -66,7 +68,8 @@
 	 */
 	protected void createDefaultEditPolicies() {
 		super.createDefaultEditPolicies();
-		installEditPolicy(EditPolicyRoles.SEMANTIC_ROLE, new FeatureItemSemanticEditPolicy());
+		installEditPolicy(EditPolicyRoles.SEMANTIC_ROLE,
+				new FeatureItemSemanticEditPolicy());
 		installEditPolicy(EditPolicy.LAYOUT_ROLE, createLayoutEditPolicy());
 		installEditPolicy(EditPolicyRoles.OPEN_ROLE, new MEEditorOpenPolicie());
 		// XXX need an SCR to runtime to have another abstract superclass that would let children add reasonable
@@ -78,10 +81,11 @@
 	 * @generated
 	 */
 	protected LayoutEditPolicy createLayoutEditPolicy() {
-		LayoutEditPolicy lep = new LayoutEditPolicy() {
+		org.eclipse.gmf.runtime.diagram.ui.editpolicies.LayoutEditPolicy lep = new org.eclipse.gmf.runtime.diagram.ui.editpolicies.LayoutEditPolicy() {
 
 			protected EditPolicy createChildEditPolicy(EditPart child) {
-				EditPolicy result = child.getEditPolicy(EditPolicy.PRIMARY_DRAG_ROLE);
+				EditPolicy result = child
+						.getEditPolicy(EditPolicy.PRIMARY_DRAG_ROLE);
 				if (result == null) {
 					result = new NonResizableEditPolicy();
 				}
@@ -103,8 +107,7 @@
 	 * @generated
 	 */
 	protected IFigure createNodeShape() {
-		FeatureFigure figure = new FeatureFigure();
-		return primaryShape = figure;
+		return primaryShape = new FeatureFigure();
 	}
 
 	/**
@@ -119,7 +122,8 @@
 	 */
 	protected boolean addFixedChild(EditPart childEditPart) {
 		if (childEditPart instanceof FeatureNameEditPart) {
-			((FeatureNameEditPart) childEditPart).setLabel(getPrimaryShape().getFigureFeatureFigure_name());
+			((FeatureNameEditPart) childEditPart).setLabel(getPrimaryShape()
+					.getFigureFeatureFigure_name());
 			return true;
 		}
 		return false;
@@ -254,34 +258,30 @@
 	 * @generated
 	 */
 	public EditPart getPrimaryChildEditPart() {
-		return getChildBySemanticHint(UrmlVisualIDRegistry.getType(FeatureNameEditPart.VISUAL_ID));
+		return getChildBySemanticHint(UrmlVisualIDRegistry
+				.getType(FeatureNameEditPart.VISUAL_ID));
 	}
 
 	/**
 	 * @generated
 	 */
-	public List/* <org.eclipse.gmf.runtime.emf.type.core.IElementType> */getMARelTypesOnSource() {
-		List/* <org.eclipse.gmf.runtime.emf.type.core.IElementType> */types = new ArrayList/*
-																							 * <org.eclipse.gmf.runtime.emf
-																							 * .type.core.IElementType>
-																							 */();
+	public List<IElementType> getMARelTypesOnSource() {
+		ArrayList<IElementType> types = new ArrayList<IElementType>(6);
 		types.add(UrmlElementTypes.AbstractFeatureSubFeatures_4034);
 		types.add(UrmlElementTypes.AbstractFeatureDetailingFunctionalRequirements_4035);
 		types.add(UrmlElementTypes.AbstractFeatureConstrainingNonFunctionalRequirements_4036);
 		types.add(UrmlElementTypes.AbstractFeatureRequiredFeatures_4045);
 		types.add(UrmlElementTypes.AbstractFeatureExcludedFeatures_4038);
+		types.add(UrmlElementTypes.UrmlModelElementAssociations_4048);
 		return types;
 	}
 
 	/**
 	 * @generated
 	 */
-	public List/* <org.eclipse.gmf.runtime.emf.type.core.IElementType> */getMARelTypesOnSourceAndTarget(
-		IGraphicalEditPart targetEditPart) {
-		List/* <org.eclipse.gmf.runtime.emf.type.core.IElementType> */types = new ArrayList/*
-																							 * <org.eclipse.gmf.runtime.emf
-																							 * .type.core.IElementType>
-																							 */();
+	public List<IElementType> getMARelTypesOnSourceAndTarget(
+			IGraphicalEditPart targetEditPart) {
+		LinkedList<IElementType> types = new LinkedList<IElementType>();
 		if (targetEditPart instanceof org.unicase.ui.diagram.urml.edit.parts.FeatureEditPart) {
 			types.add(UrmlElementTypes.AbstractFeatureSubFeatures_4034);
 		}
@@ -306,41 +306,76 @@
 		if (targetEditPart instanceof VariationPointEditPart) {
 			types.add(UrmlElementTypes.AbstractFeatureExcludedFeatures_4038);
 		}
+		if (targetEditPart instanceof StakeholderEditPart) {
+			types.add(UrmlElementTypes.UrmlModelElementAssociations_4048);
+		}
+		if (targetEditPart instanceof GoalEditPart) {
+			types.add(UrmlElementTypes.UrmlModelElementAssociations_4048);
+		}
+		if (targetEditPart instanceof FunctionalRequirementEditPart) {
+			types.add(UrmlElementTypes.UrmlModelElementAssociations_4048);
+		}
+		if (targetEditPart instanceof org.unicase.ui.diagram.urml.edit.parts.FeatureEditPart) {
+			types.add(UrmlElementTypes.UrmlModelElementAssociations_4048);
+		}
+		if (targetEditPart instanceof ServiceEditPart) {
+			types.add(UrmlElementTypes.UrmlModelElementAssociations_4048);
+		}
+		if (targetEditPart instanceof NonFunctionalRequirementEditPart) {
+			types.add(UrmlElementTypes.UrmlModelElementAssociations_4048);
+		}
+		if (targetEditPart instanceof DangerEditPart) {
+			types.add(UrmlElementTypes.UrmlModelElementAssociations_4048);
+		}
+		if (targetEditPart instanceof ActorEditPart) {
+			types.add(UrmlElementTypes.UrmlModelElementAssociations_4048);
+		}
+		if (targetEditPart instanceof ProceduralMitigationEditPart) {
+			types.add(UrmlElementTypes.UrmlModelElementAssociations_4048);
+		}
+		if (targetEditPart instanceof VariationPointEditPart) {
+			types.add(UrmlElementTypes.UrmlModelElementAssociations_4048);
+		}
+		if (targetEditPart instanceof VariationPointInstanceEditPart) {
+			types.add(UrmlElementTypes.UrmlModelElementAssociations_4048);
+		}
+		if (targetEditPart instanceof ProductEditPart) {
+			types.add(UrmlElementTypes.UrmlModelElementAssociations_4048);
+		}
 		return types;
 	}
 
 	/**
 	 * @generated
 	 */
-	public List/* <org.eclipse.gmf.runtime.emf.type.core.IElementType> */getMATypesForTarget(
-		IElementType relationshipType) {
-		List/* <org.eclipse.gmf.runtime.emf.type.core.IElementType> */types = new ArrayList/*
-																							 * <org.eclipse.gmf.runtime.emf
-																							 * .type.core.IElementType>
-																							 */();
+	public List<IElementType> getMATypesForTarget(IElementType relationshipType) {
+		LinkedList<IElementType> types = new LinkedList<IElementType>();
 		if (relationshipType == UrmlElementTypes.AbstractFeatureSubFeatures_4034) {
 			types.add(UrmlElementTypes.Feature_2012);
-		}
-		if (relationshipType == UrmlElementTypes.AbstractFeatureSubFeatures_4034) {
 			types.add(UrmlElementTypes.VariationPoint_2013);
-		}
-		if (relationshipType == UrmlElementTypes.AbstractFeatureDetailingFunctionalRequirements_4035) {
+		} else if (relationshipType == UrmlElementTypes.AbstractFeatureDetailingFunctionalRequirements_4035) {
 			types.add(UrmlElementTypes.FunctionalRequirement_2006);
-		}
-		if (relationshipType == UrmlElementTypes.AbstractFeatureConstrainingNonFunctionalRequirements_4036) {
+		} else if (relationshipType == UrmlElementTypes.AbstractFeatureConstrainingNonFunctionalRequirements_4036) {
 			types.add(UrmlElementTypes.NonFunctionalRequirement_2008);
-		}
-		if (relationshipType == UrmlElementTypes.AbstractFeatureRequiredFeatures_4045) {
+		} else if (relationshipType == UrmlElementTypes.AbstractFeatureRequiredFeatures_4045) {
 			types.add(UrmlElementTypes.Feature_2012);
-		}
-		if (relationshipType == UrmlElementTypes.AbstractFeatureRequiredFeatures_4045) {
 			types.add(UrmlElementTypes.VariationPoint_2013);
-		}
-		if (relationshipType == UrmlElementTypes.AbstractFeatureExcludedFeatures_4038) {
+		} else if (relationshipType == UrmlElementTypes.AbstractFeatureExcludedFeatures_4038) {
 			types.add(UrmlElementTypes.Feature_2012);
-		}
-		if (relationshipType == UrmlElementTypes.AbstractFeatureExcludedFeatures_4038) {
 			types.add(UrmlElementTypes.VariationPoint_2013);
+		} else if (relationshipType == UrmlElementTypes.UrmlModelElementAssociations_4048) {
+			types.add(UrmlElementTypes.Stakeholder_2002);
+			types.add(UrmlElementTypes.Goal_2001);
+			types.add(UrmlElementTypes.FunctionalRequirement_2006);
+			types.add(UrmlElementTypes.Feature_2012);
+			types.add(UrmlElementTypes.Service_2007);
+			types.add(UrmlElementTypes.NonFunctionalRequirement_2008);
+			types.add(UrmlElementTypes.Danger_2009);
+			types.add(UrmlElementTypes.Actor_2010);
+			types.add(UrmlElementTypes.ProceduralMitigation_2011);
+			types.add(UrmlElementTypes.VariationPoint_2013);
+			types.add(UrmlElementTypes.VariationPointInstance_2014);
+			types.add(UrmlElementTypes.Product_2015);
 		}
 		return types;
 	}
@@ -348,11 +383,8 @@
 	/**
 	 * @generated
 	 */
-	public List/* <org.eclipse.gmf.runtime.emf.type.core.IElementType> */getMARelTypesOnTarget() {
-		List/* <org.eclipse.gmf.runtime.emf.type.core.IElementType> */types = new ArrayList/*
-																							 * <org.eclipse.gmf.runtime.emf
-																							 * .type.core.IElementType>
-																							 */();
+	public List<IElementType> getMARelTypesOnTarget() {
+		ArrayList<IElementType> types = new ArrayList<IElementType>(8);
 		types.add(UrmlElementTypes.AbstractFeatureSubFeatures_4034);
 		types.add(UrmlElementTypes.AbstractFeatureRequiredFeatures_4045);
 		types.add(UrmlElementTypes.AbstractFeatureExcludedFeatures_4038);
@@ -360,46 +392,44 @@
 		types.add(UrmlElementTypes.VariationPointOptionalSubFeatures_4046);
 		types.add(UrmlElementTypes.VariationPointInstanceSelectedFeatures_4040);
 		types.add(UrmlElementTypes.ProductFeatures_4047);
+		types.add(UrmlElementTypes.UrmlModelElementAssociations_4048);
 		return types;
 	}
 
 	/**
 	 * @generated
 	 */
-	public List/* <org.eclipse.gmf.runtime.emf.type.core.IElementType> */getMATypesForSource(
-		IElementType relationshipType) {
-		List/* <org.eclipse.gmf.runtime.emf.type.core.IElementType> */types = new ArrayList/*
-																							 * <org.eclipse.gmf.runtime.emf
-																							 * .type.core.IElementType>
-																							 */();
+	public List<IElementType> getMATypesForSource(IElementType relationshipType) {
+		LinkedList<IElementType> types = new LinkedList<IElementType>();
 		if (relationshipType == UrmlElementTypes.AbstractFeatureSubFeatures_4034) {
 			types.add(UrmlElementTypes.Feature_2012);
-		}
-		if (relationshipType == UrmlElementTypes.AbstractFeatureSubFeatures_4034) {
 			types.add(UrmlElementTypes.VariationPoint_2013);
-		}
-		if (relationshipType == UrmlElementTypes.AbstractFeatureRequiredFeatures_4045) {
+		} else if (relationshipType == UrmlElementTypes.AbstractFeatureRequiredFeatures_4045) {
 			types.add(UrmlElementTypes.Feature_2012);
-		}
-		if (relationshipType == UrmlElementTypes.AbstractFeatureRequiredFeatures_4045) {
 			types.add(UrmlElementTypes.VariationPoint_2013);
-		}
-		if (relationshipType == UrmlElementTypes.AbstractFeatureExcludedFeatures_4038) {
+		} else if (relationshipType == UrmlElementTypes.AbstractFeatureExcludedFeatures_4038) {
 			types.add(UrmlElementTypes.Feature_2012);
-		}
-		if (relationshipType == UrmlElementTypes.AbstractFeatureExcludedFeatures_4038) {
 			types.add(UrmlElementTypes.VariationPoint_2013);
-		}
-		if (relationshipType == UrmlElementTypes.GoalRealizedFeatures_4004) {
+		} else if (relationshipType == UrmlElementTypes.GoalRealizedFeatures_4004) {
 			types.add(UrmlElementTypes.Goal_2001);
-		}
-		if (relationshipType == UrmlElementTypes.VariationPointOptionalSubFeatures_4046) {
+		} else if (relationshipType == UrmlElementTypes.VariationPointOptionalSubFeatures_4046) {
 			types.add(UrmlElementTypes.VariationPoint_2013);
-		}
-		if (relationshipType == UrmlElementTypes.VariationPointInstanceSelectedFeatures_4040) {
+		} else if (relationshipType == UrmlElementTypes.VariationPointInstanceSelectedFeatures_4040) {
 			types.add(UrmlElementTypes.VariationPointInstance_2014);
-		}
-		if (relationshipType == UrmlElementTypes.ProductFeatures_4047) {
+		} else if (relationshipType == UrmlElementTypes.ProductFeatures_4047) {
+			types.add(UrmlElementTypes.Product_2015);
+		} else if (relationshipType == UrmlElementTypes.UrmlModelElementAssociations_4048) {
+			types.add(UrmlElementTypes.Stakeholder_2002);
+			types.add(UrmlElementTypes.Goal_2001);
+			types.add(UrmlElementTypes.FunctionalRequirement_2006);
+			types.add(UrmlElementTypes.Feature_2012);
+			types.add(UrmlElementTypes.Service_2007);
+			types.add(UrmlElementTypes.NonFunctionalRequirement_2008);
+			types.add(UrmlElementTypes.Danger_2009);
+			types.add(UrmlElementTypes.Actor_2010);
+			types.add(UrmlElementTypes.ProceduralMitigation_2011);
+			types.add(UrmlElementTypes.VariationPoint_2013);
+			types.add(UrmlElementTypes.VariationPointInstance_2014);
 			types.add(UrmlElementTypes.Product_2015);
 		}
 		return types;
@@ -446,25 +476,6 @@
 		/**
 		 * @generated
 		 */
-		private boolean myUseLocalCoordinates = false;
-
-		/**
-		 * @generated
-		 */
-		protected boolean useLocalCoordinates() {
-			return myUseLocalCoordinates;
-		}
-
-		/**
-		 * @generated
-		 */
-		protected void setUseLocalCoordinates(boolean useLocalCoordinates) {
-			myUseLocalCoordinates = useLocalCoordinates;
-		}
-
-		/**
-		 * @generated
-		 */
 		public Label getFigureFeatureFigure_name() {
 			return fFigureFeatureFigure_name;
 		}
@@ -474,6 +485,7 @@
 	/**
 	 * @generated
 	 */
-	static final Font FFIGUREFEATUREFIGURE_NAME_FONT = new Font(Display.getCurrent(), "Arial", 10, SWT.BOLD);
+	static final Font FFIGUREFEATUREFIGURE_NAME_FONT = new Font(
+			Display.getCurrent(), "Arial", 10, SWT.BOLD);
 
 }
Index: src/org/unicase/ui/diagram/urml/edit/parts/IsImplementedLabelEditPart.java
===================================================================
--- src/org/unicase/ui/diagram/urml/edit/parts/IsImplementedLabelEditPart.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/edit/parts/IsImplementedLabelEditPart.java	(working copy)
@@ -50,7 +50,8 @@
 /**
  * @generated
  */
-public class IsImplementedLabelEditPart extends LabelEditPart implements ITextAwareEditPart {
+public class IsImplementedLabelEditPart extends LabelEditPart implements
+		ITextAwareEditPart {
 
 	/**
 	 * @generated
@@ -70,7 +71,7 @@
 	/**
 	 * @generated
 	 */
-	private List parserElements;
+	private List<?> parserElements;
 
 	/**
 	 * @generated
@@ -81,8 +82,10 @@
 	 * @generated
 	 */
 	static {
-		registerSnapBackPosition(UrmlVisualIDRegistry
-			.getType(org.unicase.ui.diagram.urml.edit.parts.IsImplementedLabelEditPart.VISUAL_ID), new Point(0, 20));
+		registerSnapBackPosition(
+				UrmlVisualIDRegistry
+						.getType(org.unicase.ui.diagram.urml.edit.parts.IsImplementedLabelEditPart.VISUAL_ID),
+				new Point(0, 20));
 	}
 
 	/**
@@ -97,16 +100,12 @@
 	 */
 	protected void createDefaultEditPolicies() {
 		super.createDefaultEditPolicies();
-		installEditPolicy(EditPolicy.DIRECT_EDIT_ROLE, new LabelDirectEditPolicy());
-		installEditPolicy(EditPolicy.SELECTION_FEEDBACK_ROLE, new UrmlTextSelectionEditPolicy());
-		installEditPolicy(EditPolicy.PRIMARY_DRAG_ROLE, new NonResizableLabelEditPolicy() {
-
-			protected List createSelectionHandles() {
-				MoveHandle mh = new MoveHandle((GraphicalEditPart) getHost());
-				mh.setBorder(null);
-				return Collections.singletonList(mh);
-			}
-		});
+		installEditPolicy(EditPolicy.DIRECT_EDIT_ROLE,
+				new LabelDirectEditPolicy());
+		installEditPolicy(EditPolicy.SELECTION_FEEDBACK_ROLE,
+				new UrmlTextSelectionEditPolicy());
+		installEditPolicy(EditPolicy.PRIMARY_DRAG_ROLE,
+				new URMLDiagramEditPart.LinkLabelDragPolicy());
 	}
 
 	/**
@@ -174,6 +173,7 @@
 	/**
 	 * @generated
 	 */
+	@SuppressWarnings("rawtypes")
 	protected List getModelChildren() {
 		return Collections.EMPTY_LIST;
 	}
@@ -206,7 +206,9 @@
 		String text = null;
 		EObject parserElement = getParserElement();
 		if (parserElement != null && getParser() != null) {
-			text = getParser().getPrintString(new EObjectAdapter(parserElement), getParserOptions().intValue());
+			text = getParser().getPrintString(
+					new EObjectAdapter(parserElement),
+					getParserOptions().intValue());
 		}
 		if (text == null || text.length() == 0) {
 			text = defaultText;
@@ -236,7 +238,9 @@
 		if (getParserElement() == null || getParser() == null) {
 			return ""; //$NON-NLS-1$
 		}
-		return getParser().getEditString(new EObjectAdapter(getParserElement()), getParserOptions().intValue());
+		return getParser().getEditString(
+				new EObjectAdapter(getParserElement()),
+				getParserOptions().intValue());
 	}
 
 	/**
@@ -257,14 +261,20 @@
 					final EObject element = getParserElement();
 					final IParser parser = getParser();
 					try {
-						IParserEditStatus valid = (IParserEditStatus) getEditingDomain().runExclusive(
-							new RunnableWithResult.Impl() {
+						IParserEditStatus valid = (IParserEditStatus) getEditingDomain()
+								.runExclusive(
+										new RunnableWithResult.Impl<IParserEditStatus>() {
 
-								public void run() {
-									setResult(parser.isValidEditString(new EObjectAdapter(element), (String) value));
-								}
-							});
-						return valid.getCode() == ParserEditStatus.EDITABLE ? null : valid.getMessage();
+											public void run() {
+												setResult(parser
+														.isValidEditString(
+																new EObjectAdapter(
+																		element),
+																(String) value));
+											}
+										});
+						return valid.getCode() == ParserEditStatus.EDITABLE ? null
+								: valid.getMessage();
 					} catch (InterruptedException ie) {
 						ie.printStackTrace();
 					}
@@ -283,7 +293,8 @@
 		if (getParserElement() == null || getParser() == null) {
 			return null;
 		}
-		return getParser().getCompletionProcessor(new EObjectAdapter(getParserElement()));
+		return getParser().getCompletionProcessor(
+				new EObjectAdapter(getParserElement()));
 	}
 
 	/**
@@ -298,9 +309,12 @@
 	 */
 	public IParser getParser() {
 		if (parser == null) {
-			parser = UrmlParserProvider.getParser(UrmlElementTypes.RequirementImplementingServices_4005,
-				getParserElement(), UrmlVisualIDRegistry
-					.getType(org.unicase.ui.diagram.urml.edit.parts.IsImplementedLabelEditPart.VISUAL_ID));
+			parser = UrmlParserProvider
+					.getParser(
+							UrmlElementTypes.RequirementImplementingServices_4005,
+							getParserElement(),
+							UrmlVisualIDRegistry
+									.getType(org.unicase.ui.diagram.urml.edit.parts.IsImplementedLabelEditPart.VISUAL_ID));
 		}
 		return parser;
 	}
@@ -310,8 +324,9 @@
 	 */
 	protected DirectEditManager getManager() {
 		if (manager == null) {
-			setManager(new TextDirectEditManager(this, TextDirectEditManager.getTextCellEditorClass(this),
-				UrmlEditPartFactory.getTextCellEditorLocator(this)));
+			setManager(new TextDirectEditManager(this,
+					TextDirectEditManager.getTextCellEditorClass(this),
+					UrmlEditPartFactory.getTextCellEditorLocator(this)));
 		}
 		return manager;
 	}
@@ -335,7 +350,8 @@
 	 */
 	protected void performDirectEdit(Point eventLocation) {
 		if (getManager().getClass() == TextDirectEditManager.class) {
-			((TextDirectEditManager) getManager()).show(eventLocation.getSWTPoint());
+			((TextDirectEditManager) getManager()).show(eventLocation
+					.getSWTPoint());
 		}
 	}
 
@@ -360,11 +376,15 @@
 
 				public void run() {
 					if (isActive() && isEditable()) {
-						if (theRequest.getExtendedData().get(RequestConstants.REQ_DIRECTEDIT_EXTENDEDDATA_INITIAL_CHAR) instanceof Character) {
-							Character initialChar = (Character) theRequest.getExtendedData().get(
-								RequestConstants.REQ_DIRECTEDIT_EXTENDEDDATA_INITIAL_CHAR);
+						if (theRequest
+								.getExtendedData()
+								.get(RequestConstants.REQ_DIRECTEDIT_EXTENDEDDATA_INITIAL_CHAR) instanceof Character) {
+							Character initialChar = (Character) theRequest
+									.getExtendedData()
+									.get(RequestConstants.REQ_DIRECTEDIT_EXTENDEDDATA_INITIAL_CHAR);
 							performDirectEdit(initialChar.charValue());
-						} else if ((theRequest instanceof DirectEditRequest) && (getEditText().equals(getLabelText()))) {
+						} else if ((theRequest instanceof DirectEditRequest)
+								&& (getEditText().equals(getLabelText()))) {
 							DirectEditRequest editRequest = (DirectEditRequest) theRequest;
 							performDirectEdit(editRequest.getLocation());
 						} else {
@@ -410,7 +430,8 @@
 	 * @generated
 	 */
 	protected void refreshUnderline() {
-		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(NotationPackage.eINSTANCE.getFontStyle());
+		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(
+				NotationPackage.eINSTANCE.getFontStyle());
 		if (style != null && getFigure() instanceof WrappingLabel) {
 			((WrappingLabel) getFigure()).setTextUnderline(style.isUnderline());
 		}
@@ -420,9 +441,11 @@
 	 * @generated
 	 */
 	protected void refreshStrikeThrough() {
-		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(NotationPackage.eINSTANCE.getFontStyle());
+		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(
+				NotationPackage.eINSTANCE.getFontStyle());
 		if (style != null && getFigure() instanceof WrappingLabel) {
-			((WrappingLabel) getFigure()).setTextStrikeThrough(style.isStrikeThrough());
+			((WrappingLabel) getFigure()).setTextStrikeThrough(style
+					.isStrikeThrough());
 		}
 	}
 
@@ -430,11 +453,13 @@
 	 * @generated
 	 */
 	protected void refreshFont() {
-		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(NotationPackage.eINSTANCE.getFontStyle());
+		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(
+				NotationPackage.eINSTANCE.getFontStyle());
 		if (style != null) {
-			FontData fontData = new FontData(style.getFontName(), style.getFontHeight(), (style.isBold() ? SWT.BOLD
-				: SWT.NORMAL)
-				| (style.isItalic() ? SWT.ITALIC : SWT.NORMAL));
+			FontData fontData = new FontData(style.getFontName(),
+					style.getFontHeight(), (style.isBold() ? SWT.BOLD
+							: SWT.NORMAL)
+							| (style.isItalic() ? SWT.ITALIC : SWT.NORMAL));
 			setFont(fontData);
 		}
 	}
@@ -452,9 +477,11 @@
 	protected void addSemanticListeners() {
 		if (getParser() instanceof ISemanticParser) {
 			EObject element = resolveSemanticElement();
-			parserElements = ((ISemanticParser) getParser()).getSemanticElementsBeingParsed(element);
+			parserElements = ((ISemanticParser) getParser())
+					.getSemanticElementsBeingParsed(element);
 			for (int i = 0; i < parserElements.size(); i++) {
-				addListenerFilter("SemanticModel" + i, this, (EObject) parserElements.get(i)); //$NON-NLS-1$
+				addListenerFilter(
+						"SemanticModel" + i, this, (EObject) parserElements.get(i)); //$NON-NLS-1$
 			}
 		} else {
 			super.addSemanticListeners();
@@ -504,17 +531,25 @@
 		if (NotationPackage.eINSTANCE.getFontStyle_FontColor().equals(feature)) {
 			Integer c = (Integer) event.getNewValue();
 			setFontColor(DiagramColorRegistry.getInstance().getColor(c));
-		} else if (NotationPackage.eINSTANCE.getFontStyle_Underline().equals(feature)) {
+		} else if (NotationPackage.eINSTANCE.getFontStyle_Underline().equals(
+				feature)) {
 			refreshUnderline();
-		} else if (NotationPackage.eINSTANCE.getFontStyle_StrikeThrough().equals(feature)) {
+		} else if (NotationPackage.eINSTANCE.getFontStyle_StrikeThrough()
+				.equals(feature)) {
 			refreshStrikeThrough();
-		} else if (NotationPackage.eINSTANCE.getFontStyle_FontHeight().equals(feature)
-			|| NotationPackage.eINSTANCE.getFontStyle_FontName().equals(feature)
-			|| NotationPackage.eINSTANCE.getFontStyle_Bold().equals(feature)
-			|| NotationPackage.eINSTANCE.getFontStyle_Italic().equals(feature)) {
+		} else if (NotationPackage.eINSTANCE.getFontStyle_FontHeight().equals(
+				feature)
+				|| NotationPackage.eINSTANCE.getFontStyle_FontName().equals(
+						feature)
+				|| NotationPackage.eINSTANCE.getFontStyle_Bold()
+						.equals(feature)
+				|| NotationPackage.eINSTANCE.getFontStyle_Italic().equals(
+						feature)) {
 			refreshFont();
 		} else {
-			if (getParser() != null && getParser().isAffectingEvent(event, getParserOptions().intValue())) {
+			if (getParser() != null
+					&& getParser().isAffectingEvent(event,
+							getParserOptions().intValue())) {
 				refreshLabel();
 			}
 			if (getParser() instanceof ISemanticParser) {
Index: src/org/unicase/ui/diagram/urml/edit/parts/ActorEditPart.java
===================================================================
--- src/org/unicase/ui/diagram/urml/edit/parts/ActorEditPart.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/edit/parts/ActorEditPart.java	(working copy)
@@ -1,6 +1,7 @@
 package org.unicase.ui.diagram.urml.edit.parts;
 
 import java.util.ArrayList;
+import java.util.LinkedList;
 import java.util.List;
 
 import org.eclipse.draw2d.Graphics;
@@ -20,6 +21,7 @@
 import org.eclipse.gmf.runtime.diagram.ui.editpolicies.EditPolicyRoles;
 import org.eclipse.gmf.runtime.draw2d.ui.figures.ConstrainedToolbarLayout;
 import org.eclipse.gmf.runtime.emf.type.core.IElementType;
+import org.eclipse.gmf.runtime.gef.ui.figures.DefaultSizeNodeFigure;
 import org.eclipse.gmf.runtime.gef.ui.figures.NodeFigure;
 import org.eclipse.gmf.runtime.notation.View;
 import org.eclipse.swt.SWT;
@@ -66,7 +68,8 @@
 	 */
 	protected void createDefaultEditPolicies() {
 		super.createDefaultEditPolicies();
-		installEditPolicy(EditPolicyRoles.SEMANTIC_ROLE, new ActorItemSemanticEditPolicy());
+		installEditPolicy(EditPolicyRoles.SEMANTIC_ROLE,
+				new ActorItemSemanticEditPolicy());
 		installEditPolicy(EditPolicy.LAYOUT_ROLE, createLayoutEditPolicy());
 		installEditPolicy(EditPolicyRoles.OPEN_ROLE, new MEEditorOpenPolicie());
 		// XXX need an SCR to runtime to have another abstract superclass that would let children add reasonable
@@ -78,10 +81,11 @@
 	 * @generated
 	 */
 	protected LayoutEditPolicy createLayoutEditPolicy() {
-		LayoutEditPolicy lep = new LayoutEditPolicy() {
+		org.eclipse.gmf.runtime.diagram.ui.editpolicies.LayoutEditPolicy lep = new org.eclipse.gmf.runtime.diagram.ui.editpolicies.LayoutEditPolicy() {
 
 			protected EditPolicy createChildEditPolicy(EditPart child) {
-				EditPolicy result = child.getEditPolicy(EditPolicy.PRIMARY_DRAG_ROLE);
+				EditPolicy result = child
+						.getEditPolicy(EditPolicy.PRIMARY_DRAG_ROLE);
 				if (result == null) {
 					result = new NonResizableEditPolicy();
 				}
@@ -103,8 +107,7 @@
 	 * @generated
 	 */
 	protected IFigure createNodeShape() {
-		ActorFigure figure = new ActorFigure();
-		return primaryShape = figure;
+		return primaryShape = new ActorFigure();
 	}
 
 	/**
@@ -119,7 +122,8 @@
 	 */
 	protected boolean addFixedChild(EditPart childEditPart) {
 		if (childEditPart instanceof ActorNameEditPart) {
-			((ActorNameEditPart) childEditPart).setLabel(getPrimaryShape().getFigureActorFigure_name());
+			((ActorNameEditPart) childEditPart).setLabel(getPrimaryShape()
+					.getFigureActorFigure_name());
 			return true;
 		}
 		return false;
@@ -254,47 +258,88 @@
 	 * @generated
 	 */
 	public EditPart getPrimaryChildEditPart() {
-		return getChildBySemanticHint(UrmlVisualIDRegistry.getType(ActorNameEditPart.VISUAL_ID));
+		return getChildBySemanticHint(UrmlVisualIDRegistry
+				.getType(ActorNameEditPart.VISUAL_ID));
 	}
 
 	/**
 	 * @generated
 	 */
-	public List/* <org.eclipse.gmf.runtime.emf.type.core.IElementType> */getMARelTypesOnSource() {
-		List/* <org.eclipse.gmf.runtime.emf.type.core.IElementType> */types = new ArrayList/*
-																							 * <org.eclipse.gmf.runtime.emf
-																							 * .type.core.IElementType>
-																							 */();
+	public List<IElementType> getMARelTypesOnSource() {
+		ArrayList<IElementType> types = new ArrayList<IElementType>(2);
 		types.add(UrmlElementTypes.AssetTriggeredDangers_4017);
+		types.add(UrmlElementTypes.UrmlModelElementAssociations_4048);
 		return types;
 	}
 
 	/**
 	 * @generated
 	 */
-	public List/* <org.eclipse.gmf.runtime.emf.type.core.IElementType> */getMARelTypesOnSourceAndTarget(
-		IGraphicalEditPart targetEditPart) {
-		List/* <org.eclipse.gmf.runtime.emf.type.core.IElementType> */types = new ArrayList/*
-																							 * <org.eclipse.gmf.runtime.emf
-																							 * .type.core.IElementType>
-																							 */();
+	public List<IElementType> getMARelTypesOnSourceAndTarget(
+			IGraphicalEditPart targetEditPart) {
+		LinkedList<IElementType> types = new LinkedList<IElementType>();
 		if (targetEditPart instanceof DangerEditPart) {
 			types.add(UrmlElementTypes.AssetTriggeredDangers_4017);
 		}
+		if (targetEditPart instanceof StakeholderEditPart) {
+			types.add(UrmlElementTypes.UrmlModelElementAssociations_4048);
+		}
+		if (targetEditPart instanceof GoalEditPart) {
+			types.add(UrmlElementTypes.UrmlModelElementAssociations_4048);
+		}
+		if (targetEditPart instanceof FunctionalRequirementEditPart) {
+			types.add(UrmlElementTypes.UrmlModelElementAssociations_4048);
+		}
+		if (targetEditPart instanceof FeatureEditPart) {
+			types.add(UrmlElementTypes.UrmlModelElementAssociations_4048);
+		}
+		if (targetEditPart instanceof ServiceEditPart) {
+			types.add(UrmlElementTypes.UrmlModelElementAssociations_4048);
+		}
+		if (targetEditPart instanceof NonFunctionalRequirementEditPart) {
+			types.add(UrmlElementTypes.UrmlModelElementAssociations_4048);
+		}
+		if (targetEditPart instanceof DangerEditPart) {
+			types.add(UrmlElementTypes.UrmlModelElementAssociations_4048);
+		}
+		if (targetEditPart instanceof org.unicase.ui.diagram.urml.edit.parts.ActorEditPart) {
+			types.add(UrmlElementTypes.UrmlModelElementAssociations_4048);
+		}
+		if (targetEditPart instanceof ProceduralMitigationEditPart) {
+			types.add(UrmlElementTypes.UrmlModelElementAssociations_4048);
+		}
+		if (targetEditPart instanceof VariationPointEditPart) {
+			types.add(UrmlElementTypes.UrmlModelElementAssociations_4048);
+		}
+		if (targetEditPart instanceof VariationPointInstanceEditPart) {
+			types.add(UrmlElementTypes.UrmlModelElementAssociations_4048);
+		}
+		if (targetEditPart instanceof ProductEditPart) {
+			types.add(UrmlElementTypes.UrmlModelElementAssociations_4048);
+		}
 		return types;
 	}
 
 	/**
 	 * @generated
 	 */
-	public List/* <org.eclipse.gmf.runtime.emf.type.core.IElementType> */getMATypesForTarget(
-		IElementType relationshipType) {
-		List/* <org.eclipse.gmf.runtime.emf.type.core.IElementType> */types = new ArrayList/*
-																							 * <org.eclipse.gmf.runtime.emf
-																							 * .type.core.IElementType>
-																							 */();
+	public List<IElementType> getMATypesForTarget(IElementType relationshipType) {
+		LinkedList<IElementType> types = new LinkedList<IElementType>();
 		if (relationshipType == UrmlElementTypes.AssetTriggeredDangers_4017) {
 			types.add(UrmlElementTypes.Danger_2009);
+		} else if (relationshipType == UrmlElementTypes.UrmlModelElementAssociations_4048) {
+			types.add(UrmlElementTypes.Stakeholder_2002);
+			types.add(UrmlElementTypes.Goal_2001);
+			types.add(UrmlElementTypes.FunctionalRequirement_2006);
+			types.add(UrmlElementTypes.Feature_2012);
+			types.add(UrmlElementTypes.Service_2007);
+			types.add(UrmlElementTypes.NonFunctionalRequirement_2008);
+			types.add(UrmlElementTypes.Danger_2009);
+			types.add(UrmlElementTypes.Actor_2010);
+			types.add(UrmlElementTypes.ProceduralMitigation_2011);
+			types.add(UrmlElementTypes.VariationPoint_2013);
+			types.add(UrmlElementTypes.VariationPointInstance_2014);
+			types.add(UrmlElementTypes.Product_2015);
 		}
 		return types;
 	}
@@ -302,26 +347,33 @@
 	/**
 	 * @generated
 	 */
-	public List/* <org.eclipse.gmf.runtime.emf.type.core.IElementType> */getMARelTypesOnTarget() {
-		List/* <org.eclipse.gmf.runtime.emf.type.core.IElementType> */types = new ArrayList/*
-																							 * <org.eclipse.gmf.runtime.emf
-																							 * .type.core.IElementType>
-																							 */();
+	public List<IElementType> getMARelTypesOnTarget() {
+		ArrayList<IElementType> types = new ArrayList<IElementType>(2);
 		types.add(UrmlElementTypes.DangerHarmedAssets_4013);
+		types.add(UrmlElementTypes.UrmlModelElementAssociations_4048);
 		return types;
 	}
 
 	/**
 	 * @generated
 	 */
-	public List/* <org.eclipse.gmf.runtime.emf.type.core.IElementType> */getMATypesForSource(
-		IElementType relationshipType) {
-		List/* <org.eclipse.gmf.runtime.emf.type.core.IElementType> */types = new ArrayList/*
-																							 * <org.eclipse.gmf.runtime.emf
-																							 * .type.core.IElementType>
-																							 */();
+	public List<IElementType> getMATypesForSource(IElementType relationshipType) {
+		LinkedList<IElementType> types = new LinkedList<IElementType>();
 		if (relationshipType == UrmlElementTypes.DangerHarmedAssets_4013) {
 			types.add(UrmlElementTypes.Danger_2009);
+		} else if (relationshipType == UrmlElementTypes.UrmlModelElementAssociations_4048) {
+			types.add(UrmlElementTypes.Stakeholder_2002);
+			types.add(UrmlElementTypes.Goal_2001);
+			types.add(UrmlElementTypes.FunctionalRequirement_2006);
+			types.add(UrmlElementTypes.Feature_2012);
+			types.add(UrmlElementTypes.Service_2007);
+			types.add(UrmlElementTypes.NonFunctionalRequirement_2008);
+			types.add(UrmlElementTypes.Danger_2009);
+			types.add(UrmlElementTypes.Actor_2010);
+			types.add(UrmlElementTypes.ProceduralMitigation_2011);
+			types.add(UrmlElementTypes.VariationPoint_2013);
+			types.add(UrmlElementTypes.VariationPointInstance_2014);
+			types.add(UrmlElementTypes.Product_2015);
 		}
 		return types;
 	}
@@ -367,25 +419,6 @@
 		/**
 		 * @generated
 		 */
-		private boolean myUseLocalCoordinates = false;
-
-		/**
-		 * @generated
-		 */
-		protected boolean useLocalCoordinates() {
-			return myUseLocalCoordinates;
-		}
-
-		/**
-		 * @generated
-		 */
-		protected void setUseLocalCoordinates(boolean useLocalCoordinates) {
-			myUseLocalCoordinates = useLocalCoordinates;
-		}
-
-		/**
-		 * @generated
-		 */
 		public Label getFigureActorFigure_name() {
 			return fFigureActorFigure_name;
 		}
@@ -395,6 +428,7 @@
 	/**
 	 * @generated
 	 */
-	static final Font FFIGUREACTORFIGURE_NAME_FONT = new Font(Display.getCurrent(), "Arial", 10, SWT.BOLD);
+	static final Font FFIGUREACTORFIGURE_NAME_FONT = new Font(
+			Display.getCurrent(), "Arial", 10, SWT.BOLD);
 
 }
Index: src/org/unicase/ui/diagram/urml/edit/parts/AbstractFeatureExcludedFeaturesEditPart.java
===================================================================
--- src/org/unicase/ui/diagram/urml/edit/parts/AbstractFeatureExcludedFeaturesEditPart.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/edit/parts/AbstractFeatureExcludedFeaturesEditPart.java	(working copy)
@@ -12,7 +12,8 @@
 /**
  * @generated
  */
-public class AbstractFeatureExcludedFeaturesEditPart extends ConnectionNodeEditPart implements ITreeBranchEditPart {
+public class AbstractFeatureExcludedFeaturesEditPart extends
+		ConnectionNodeEditPart implements ITreeBranchEditPart {
 
 	/**
 	 * @generated
@@ -31,41 +32,8 @@
 	 */
 	protected void createDefaultEditPolicies() {
 		super.createDefaultEditPolicies();
-		installEditPolicy(EditPolicyRoles.SEMANTIC_ROLE, new AbstractFeatureExcludedFeaturesItemSemanticEditPolicy());
-	}
-
-	/**
-	 * @generated
-	 */
-	protected boolean addFixedChild(EditPart childEditPart) {
-		return false;
-	}
-
-	/**
-	 * @generated
-	 */
-	protected void addChildVisual(EditPart childEditPart, int index) {
-		if (addFixedChild(childEditPart)) {
-			return;
-		}
-		super.addChildVisual(childEditPart, -1);
-	}
-
-	/**
-	 * @generated
-	 */
-	protected boolean removeFixedChild(EditPart childEditPart) {
-		return false;
-	}
-
-	/**
-	 * @generated
-	 */
-	protected void removeChildVisual(EditPart childEditPart) {
-		if (removeFixedChild(childEditPart)) {
-			return;
-		}
-		super.removeChildVisual(childEditPart);
+		installEditPolicy(EditPolicyRoles.SEMANTIC_ROLE,
+				new AbstractFeatureExcludedFeaturesItemSemanticEditPolicy());
 	}
 
 	/**
Index: src/org/unicase/ui/diagram/urml/edit/parts/VariationPointEditPart.java
===================================================================
--- src/org/unicase/ui/diagram/urml/edit/parts/VariationPointEditPart.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/edit/parts/VariationPointEditPart.java	(working copy)
@@ -1,6 +1,7 @@
 package org.unicase.ui.diagram.urml.edit.parts;
 
 import java.util.ArrayList;
+import java.util.LinkedList;
 import java.util.List;
 
 import org.eclipse.draw2d.Graphics;
@@ -20,6 +21,7 @@
 import org.eclipse.gmf.runtime.diagram.ui.editpolicies.EditPolicyRoles;
 import org.eclipse.gmf.runtime.draw2d.ui.figures.ConstrainedToolbarLayout;
 import org.eclipse.gmf.runtime.emf.type.core.IElementType;
+import org.eclipse.gmf.runtime.gef.ui.figures.DefaultSizeNodeFigure;
 import org.eclipse.gmf.runtime.gef.ui.figures.NodeFigure;
 import org.eclipse.gmf.runtime.notation.View;
 import org.eclipse.swt.SWT;
@@ -66,7 +68,8 @@
 	 */
 	protected void createDefaultEditPolicies() {
 		super.createDefaultEditPolicies();
-		installEditPolicy(EditPolicyRoles.SEMANTIC_ROLE, new VariationPointItemSemanticEditPolicy());
+		installEditPolicy(EditPolicyRoles.SEMANTIC_ROLE,
+				new VariationPointItemSemanticEditPolicy());
 		installEditPolicy(EditPolicy.LAYOUT_ROLE, createLayoutEditPolicy());
 		installEditPolicy(EditPolicyRoles.OPEN_ROLE, new MEEditorOpenPolicie());
 		// XXX need an SCR to runtime to have another abstract superclass that would let children add reasonable
@@ -78,10 +81,11 @@
 	 * @generated
 	 */
 	protected LayoutEditPolicy createLayoutEditPolicy() {
-		LayoutEditPolicy lep = new LayoutEditPolicy() {
+		org.eclipse.gmf.runtime.diagram.ui.editpolicies.LayoutEditPolicy lep = new org.eclipse.gmf.runtime.diagram.ui.editpolicies.LayoutEditPolicy() {
 
 			protected EditPolicy createChildEditPolicy(EditPart child) {
-				EditPolicy result = child.getEditPolicy(EditPolicy.PRIMARY_DRAG_ROLE);
+				EditPolicy result = child
+						.getEditPolicy(EditPolicy.PRIMARY_DRAG_ROLE);
 				if (result == null) {
 					result = new NonResizableEditPolicy();
 				}
@@ -103,8 +107,7 @@
 	 * @generated
 	 */
 	protected IFigure createNodeShape() {
-		VariationPointFigure figure = new VariationPointFigure();
-		return primaryShape = figure;
+		return primaryShape = new VariationPointFigure();
 	}
 
 	/**
@@ -119,8 +122,9 @@
 	 */
 	protected boolean addFixedChild(EditPart childEditPart) {
 		if (childEditPart instanceof VariationPointNameEditPart) {
-			((VariationPointNameEditPart) childEditPart).setLabel(getPrimaryShape()
-				.getFigureVariationPointFigure_name());
+			((VariationPointNameEditPart) childEditPart)
+					.setLabel(getPrimaryShape()
+							.getFigureVariationPointFigure_name());
 			return true;
 		}
 		return false;
@@ -255,35 +259,31 @@
 	 * @generated
 	 */
 	public EditPart getPrimaryChildEditPart() {
-		return getChildBySemanticHint(UrmlVisualIDRegistry.getType(VariationPointNameEditPart.VISUAL_ID));
+		return getChildBySemanticHint(UrmlVisualIDRegistry
+				.getType(VariationPointNameEditPart.VISUAL_ID));
 	}
 
 	/**
 	 * @generated
 	 */
-	public List/* <org.eclipse.gmf.runtime.emf.type.core.IElementType> */getMARelTypesOnSource() {
-		List/* <org.eclipse.gmf.runtime.emf.type.core.IElementType> */types = new ArrayList/*
-																							 * <org.eclipse.gmf.runtime.emf
-																							 * .type.core.IElementType>
-																							 */();
+	public List<IElementType> getMARelTypesOnSource() {
+		ArrayList<IElementType> types = new ArrayList<IElementType>(7);
 		types.add(UrmlElementTypes.AbstractFeatureSubFeatures_4034);
 		types.add(UrmlElementTypes.AbstractFeatureDetailingFunctionalRequirements_4035);
 		types.add(UrmlElementTypes.AbstractFeatureConstrainingNonFunctionalRequirements_4036);
 		types.add(UrmlElementTypes.AbstractFeatureRequiredFeatures_4045);
 		types.add(UrmlElementTypes.AbstractFeatureExcludedFeatures_4038);
 		types.add(UrmlElementTypes.VariationPointOptionalSubFeatures_4046);
+		types.add(UrmlElementTypes.UrmlModelElementAssociations_4048);
 		return types;
 	}
 
 	/**
 	 * @generated
 	 */
-	public List/* <org.eclipse.gmf.runtime.emf.type.core.IElementType> */getMARelTypesOnSourceAndTarget(
-		IGraphicalEditPart targetEditPart) {
-		List/* <org.eclipse.gmf.runtime.emf.type.core.IElementType> */types = new ArrayList/*
-																							 * <org.eclipse.gmf.runtime.emf
-																							 * .type.core.IElementType>
-																							 */();
+	public List<IElementType> getMARelTypesOnSourceAndTarget(
+			IGraphicalEditPart targetEditPart) {
+		LinkedList<IElementType> types = new LinkedList<IElementType>();
 		if (targetEditPart instanceof FeatureEditPart) {
 			types.add(UrmlElementTypes.AbstractFeatureSubFeatures_4034);
 		}
@@ -314,47 +314,79 @@
 		if (targetEditPart instanceof org.unicase.ui.diagram.urml.edit.parts.VariationPointEditPart) {
 			types.add(UrmlElementTypes.VariationPointOptionalSubFeatures_4046);
 		}
+		if (targetEditPart instanceof StakeholderEditPart) {
+			types.add(UrmlElementTypes.UrmlModelElementAssociations_4048);
+		}
+		if (targetEditPart instanceof GoalEditPart) {
+			types.add(UrmlElementTypes.UrmlModelElementAssociations_4048);
+		}
+		if (targetEditPart instanceof FunctionalRequirementEditPart) {
+			types.add(UrmlElementTypes.UrmlModelElementAssociations_4048);
+		}
+		if (targetEditPart instanceof FeatureEditPart) {
+			types.add(UrmlElementTypes.UrmlModelElementAssociations_4048);
+		}
+		if (targetEditPart instanceof ServiceEditPart) {
+			types.add(UrmlElementTypes.UrmlModelElementAssociations_4048);
+		}
+		if (targetEditPart instanceof NonFunctionalRequirementEditPart) {
+			types.add(UrmlElementTypes.UrmlModelElementAssociations_4048);
+		}
+		if (targetEditPart instanceof DangerEditPart) {
+			types.add(UrmlElementTypes.UrmlModelElementAssociations_4048);
+		}
+		if (targetEditPart instanceof ActorEditPart) {
+			types.add(UrmlElementTypes.UrmlModelElementAssociations_4048);
+		}
+		if (targetEditPart instanceof ProceduralMitigationEditPart) {
+			types.add(UrmlElementTypes.UrmlModelElementAssociations_4048);
+		}
+		if (targetEditPart instanceof org.unicase.ui.diagram.urml.edit.parts.VariationPointEditPart) {
+			types.add(UrmlElementTypes.UrmlModelElementAssociations_4048);
+		}
+		if (targetEditPart instanceof VariationPointInstanceEditPart) {
+			types.add(UrmlElementTypes.UrmlModelElementAssociations_4048);
+		}
+		if (targetEditPart instanceof ProductEditPart) {
+			types.add(UrmlElementTypes.UrmlModelElementAssociations_4048);
+		}
 		return types;
 	}
 
 	/**
 	 * @generated
 	 */
-	public List/* <org.eclipse.gmf.runtime.emf.type.core.IElementType> */getMATypesForTarget(
-		IElementType relationshipType) {
-		List/* <org.eclipse.gmf.runtime.emf.type.core.IElementType> */types = new ArrayList/*
-																							 * <org.eclipse.gmf.runtime.emf
-																							 * .type.core.IElementType>
-																							 */();
+	public List<IElementType> getMATypesForTarget(IElementType relationshipType) {
+		LinkedList<IElementType> types = new LinkedList<IElementType>();
 		if (relationshipType == UrmlElementTypes.AbstractFeatureSubFeatures_4034) {
 			types.add(UrmlElementTypes.Feature_2012);
-		}
-		if (relationshipType == UrmlElementTypes.AbstractFeatureSubFeatures_4034) {
 			types.add(UrmlElementTypes.VariationPoint_2013);
-		}
-		if (relationshipType == UrmlElementTypes.AbstractFeatureDetailingFunctionalRequirements_4035) {
+		} else if (relationshipType == UrmlElementTypes.AbstractFeatureDetailingFunctionalRequirements_4035) {
 			types.add(UrmlElementTypes.FunctionalRequirement_2006);
-		}
-		if (relationshipType == UrmlElementTypes.AbstractFeatureConstrainingNonFunctionalRequirements_4036) {
+		} else if (relationshipType == UrmlElementTypes.AbstractFeatureConstrainingNonFunctionalRequirements_4036) {
 			types.add(UrmlElementTypes.NonFunctionalRequirement_2008);
-		}
-		if (relationshipType == UrmlElementTypes.AbstractFeatureRequiredFeatures_4045) {
+		} else if (relationshipType == UrmlElementTypes.AbstractFeatureRequiredFeatures_4045) {
 			types.add(UrmlElementTypes.Feature_2012);
-		}
-		if (relationshipType == UrmlElementTypes.AbstractFeatureRequiredFeatures_4045) {
 			types.add(UrmlElementTypes.VariationPoint_2013);
-		}
-		if (relationshipType == UrmlElementTypes.AbstractFeatureExcludedFeatures_4038) {
+		} else if (relationshipType == UrmlElementTypes.AbstractFeatureExcludedFeatures_4038) {
 			types.add(UrmlElementTypes.Feature_2012);
-		}
-		if (relationshipType == UrmlElementTypes.AbstractFeatureExcludedFeatures_4038) {
 			types.add(UrmlElementTypes.VariationPoint_2013);
-		}
-		if (relationshipType == UrmlElementTypes.VariationPointOptionalSubFeatures_4046) {
+		} else if (relationshipType == UrmlElementTypes.VariationPointOptionalSubFeatures_4046) {
 			types.add(UrmlElementTypes.Feature_2012);
-		}
-		if (relationshipType == UrmlElementTypes.VariationPointOptionalSubFeatures_4046) {
+			types.add(UrmlElementTypes.VariationPoint_2013);
+		} else if (relationshipType == UrmlElementTypes.UrmlModelElementAssociations_4048) {
+			types.add(UrmlElementTypes.Stakeholder_2002);
+			types.add(UrmlElementTypes.Goal_2001);
+			types.add(UrmlElementTypes.FunctionalRequirement_2006);
+			types.add(UrmlElementTypes.Feature_2012);
+			types.add(UrmlElementTypes.Service_2007);
+			types.add(UrmlElementTypes.NonFunctionalRequirement_2008);
+			types.add(UrmlElementTypes.Danger_2009);
+			types.add(UrmlElementTypes.Actor_2010);
+			types.add(UrmlElementTypes.ProceduralMitigation_2011);
 			types.add(UrmlElementTypes.VariationPoint_2013);
+			types.add(UrmlElementTypes.VariationPointInstance_2014);
+			types.add(UrmlElementTypes.Product_2015);
 		}
 		return types;
 	}
@@ -362,11 +394,8 @@
 	/**
 	 * @generated
 	 */
-	public List/* <org.eclipse.gmf.runtime.emf.type.core.IElementType> */getMARelTypesOnTarget() {
-		List/* <org.eclipse.gmf.runtime.emf.type.core.IElementType> */types = new ArrayList/*
-																							 * <org.eclipse.gmf.runtime.emf
-																							 * .type.core.IElementType>
-																							 */();
+	public List<IElementType> getMARelTypesOnTarget() {
+		ArrayList<IElementType> types = new ArrayList<IElementType>(8);
 		types.add(UrmlElementTypes.AbstractFeatureSubFeatures_4034);
 		types.add(UrmlElementTypes.AbstractFeatureRequiredFeatures_4045);
 		types.add(UrmlElementTypes.AbstractFeatureExcludedFeatures_4038);
@@ -374,47 +403,45 @@
 		types.add(UrmlElementTypes.VariationPointOptionalSubFeatures_4046);
 		types.add(UrmlElementTypes.VariationPointInstanceVariationPoint_4033);
 		types.add(UrmlElementTypes.VariationPointInstanceSelectedFeatures_4040);
+		types.add(UrmlElementTypes.UrmlModelElementAssociations_4048);
 		return types;
 	}
 
 	/**
 	 * @generated
 	 */
-	public List/* <org.eclipse.gmf.runtime.emf.type.core.IElementType> */getMATypesForSource(
-		IElementType relationshipType) {
-		List/* <org.eclipse.gmf.runtime.emf.type.core.IElementType> */types = new ArrayList/*
-																							 * <org.eclipse.gmf.runtime.emf
-																							 * .type.core.IElementType>
-																							 */();
+	public List<IElementType> getMATypesForSource(IElementType relationshipType) {
+		LinkedList<IElementType> types = new LinkedList<IElementType>();
 		if (relationshipType == UrmlElementTypes.AbstractFeatureSubFeatures_4034) {
 			types.add(UrmlElementTypes.Feature_2012);
-		}
-		if (relationshipType == UrmlElementTypes.AbstractFeatureSubFeatures_4034) {
 			types.add(UrmlElementTypes.VariationPoint_2013);
-		}
-		if (relationshipType == UrmlElementTypes.AbstractFeatureRequiredFeatures_4045) {
+		} else if (relationshipType == UrmlElementTypes.AbstractFeatureRequiredFeatures_4045) {
 			types.add(UrmlElementTypes.Feature_2012);
-		}
-		if (relationshipType == UrmlElementTypes.AbstractFeatureRequiredFeatures_4045) {
 			types.add(UrmlElementTypes.VariationPoint_2013);
-		}
-		if (relationshipType == UrmlElementTypes.AbstractFeatureExcludedFeatures_4038) {
+		} else if (relationshipType == UrmlElementTypes.AbstractFeatureExcludedFeatures_4038) {
 			types.add(UrmlElementTypes.Feature_2012);
-		}
-		if (relationshipType == UrmlElementTypes.AbstractFeatureExcludedFeatures_4038) {
 			types.add(UrmlElementTypes.VariationPoint_2013);
-		}
-		if (relationshipType == UrmlElementTypes.GoalRealizedFeatures_4004) {
+		} else if (relationshipType == UrmlElementTypes.GoalRealizedFeatures_4004) {
 			types.add(UrmlElementTypes.Goal_2001);
-		}
-		if (relationshipType == UrmlElementTypes.VariationPointOptionalSubFeatures_4046) {
+		} else if (relationshipType == UrmlElementTypes.VariationPointOptionalSubFeatures_4046) {
 			types.add(UrmlElementTypes.VariationPoint_2013);
-		}
-		if (relationshipType == UrmlElementTypes.VariationPointInstanceVariationPoint_4033) {
+		} else if (relationshipType == UrmlElementTypes.VariationPointInstanceVariationPoint_4033) {
 			types.add(UrmlElementTypes.VariationPointInstance_2014);
-		}
-		if (relationshipType == UrmlElementTypes.VariationPointInstanceSelectedFeatures_4040) {
+		} else if (relationshipType == UrmlElementTypes.VariationPointInstanceSelectedFeatures_4040) {
 			types.add(UrmlElementTypes.VariationPointInstance_2014);
+		} else if (relationshipType == UrmlElementTypes.UrmlModelElementAssociations_4048) {
+			types.add(UrmlElementTypes.Stakeholder_2002);
+			types.add(UrmlElementTypes.Goal_2001);
+			types.add(UrmlElementTypes.FunctionalRequirement_2006);
+			types.add(UrmlElementTypes.Feature_2012);
+			types.add(UrmlElementTypes.Service_2007);
+			types.add(UrmlElementTypes.NonFunctionalRequirement_2008);
+			types.add(UrmlElementTypes.Danger_2009);
+			types.add(UrmlElementTypes.Actor_2010);
+			types.add(UrmlElementTypes.ProceduralMitigation_2011);
+			types.add(UrmlElementTypes.VariationPoint_2013);
+			types.add(UrmlElementTypes.VariationPointInstance_2014);
+			types.add(UrmlElementTypes.Product_2015);
 		}
 		return types;
 	}
@@ -451,7 +478,8 @@
 
 			fFigureVariationPointFigure_name = new Label();
 
-			fFigureVariationPointFigure_name.setFont(FFIGUREVARIATIONPOINTFIGURE_NAME_FONT);
+			fFigureVariationPointFigure_name
+					.setFont(FFIGUREVARIATIONPOINTFIGURE_NAME_FONT);
 
 			this.add(fFigureVariationPointFigure_name);
 
@@ -460,25 +488,6 @@
 		/**
 		 * @generated
 		 */
-		private boolean myUseLocalCoordinates = false;
-
-		/**
-		 * @generated
-		 */
-		protected boolean useLocalCoordinates() {
-			return myUseLocalCoordinates;
-		}
-
-		/**
-		 * @generated
-		 */
-		protected void setUseLocalCoordinates(boolean useLocalCoordinates) {
-			myUseLocalCoordinates = useLocalCoordinates;
-		}
-
-		/**
-		 * @generated
-		 */
 		public Label getFigureVariationPointFigure_name() {
 			return fFigureVariationPointFigure_name;
 		}
@@ -488,6 +497,7 @@
 	/**
 	 * @generated
 	 */
-	static final Font FFIGUREVARIATIONPOINTFIGURE_NAME_FONT = new Font(Display.getCurrent(), "Arial", 10, SWT.BOLD);
+	static final Font FFIGUREVARIATIONPOINTFIGURE_NAME_FONT = new Font(
+			Display.getCurrent(), "Arial", 10, SWT.BOLD);
 
 }
Index: src/org/unicase/ui/diagram/urml/edit/parts/NonFunctionalRequirementEditPart.java
===================================================================
--- src/org/unicase/ui/diagram/urml/edit/parts/NonFunctionalRequirementEditPart.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/edit/parts/NonFunctionalRequirementEditPart.java	(working copy)
@@ -1,6 +1,7 @@
 package org.unicase.ui.diagram.urml.edit.parts;
 
 import java.util.ArrayList;
+import java.util.LinkedList;
 import java.util.List;
 
 import org.eclipse.draw2d.Graphics;
@@ -20,6 +21,7 @@
 import org.eclipse.gmf.runtime.diagram.ui.editpolicies.EditPolicyRoles;
 import org.eclipse.gmf.runtime.draw2d.ui.figures.ConstrainedToolbarLayout;
 import org.eclipse.gmf.runtime.emf.type.core.IElementType;
+import org.eclipse.gmf.runtime.gef.ui.figures.DefaultSizeNodeFigure;
 import org.eclipse.gmf.runtime.gef.ui.figures.NodeFigure;
 import org.eclipse.gmf.runtime.notation.View;
 import org.eclipse.swt.SWT;
@@ -66,7 +68,8 @@
 	 */
 	protected void createDefaultEditPolicies() {
 		super.createDefaultEditPolicies();
-		installEditPolicy(EditPolicyRoles.SEMANTIC_ROLE, new NonFunctionalRequirementItemSemanticEditPolicy());
+		installEditPolicy(EditPolicyRoles.SEMANTIC_ROLE,
+				new NonFunctionalRequirementItemSemanticEditPolicy());
 		installEditPolicy(EditPolicy.LAYOUT_ROLE, createLayoutEditPolicy());
 		installEditPolicy(EditPolicyRoles.OPEN_ROLE, new MEEditorOpenPolicie());
 		// XXX need an SCR to runtime to have another abstract superclass that would let children add reasonable
@@ -78,10 +81,11 @@
 	 * @generated
 	 */
 	protected LayoutEditPolicy createLayoutEditPolicy() {
-		LayoutEditPolicy lep = new LayoutEditPolicy() {
+		org.eclipse.gmf.runtime.diagram.ui.editpolicies.LayoutEditPolicy lep = new org.eclipse.gmf.runtime.diagram.ui.editpolicies.LayoutEditPolicy() {
 
 			protected EditPolicy createChildEditPolicy(EditPart child) {
-				EditPolicy result = child.getEditPolicy(EditPolicy.PRIMARY_DRAG_ROLE);
+				EditPolicy result = child
+						.getEditPolicy(EditPolicy.PRIMARY_DRAG_ROLE);
 				if (result == null) {
 					result = new NonResizableEditPolicy();
 				}
@@ -103,8 +107,7 @@
 	 * @generated
 	 */
 	protected IFigure createNodeShape() {
-		NonFunctionalRequirementFigure figure = new NonFunctionalRequirementFigure();
-		return primaryShape = figure;
+		return primaryShape = new NonFunctionalRequirementFigure();
 	}
 
 	/**
@@ -119,8 +122,9 @@
 	 */
 	protected boolean addFixedChild(EditPart childEditPart) {
 		if (childEditPart instanceof NonFunctionalRequirementNameEditPart) {
-			((NonFunctionalRequirementNameEditPart) childEditPart).setLabel(getPrimaryShape()
-				.getFigureNonFunctionalRequirementFigure_name());
+			((NonFunctionalRequirementNameEditPart) childEditPart)
+					.setLabel(getPrimaryShape()
+							.getFigureNonFunctionalRequirementFigure_name());
 			return true;
 		}
 		return false;
@@ -255,32 +259,28 @@
 	 * @generated
 	 */
 	public EditPart getPrimaryChildEditPart() {
-		return getChildBySemanticHint(UrmlVisualIDRegistry.getType(NonFunctionalRequirementNameEditPart.VISUAL_ID));
+		return getChildBySemanticHint(UrmlVisualIDRegistry
+				.getType(NonFunctionalRequirementNameEditPart.VISUAL_ID));
 	}
 
 	/**
 	 * @generated
 	 */
-	public List/* <org.eclipse.gmf.runtime.emf.type.core.IElementType> */getMARelTypesOnSource() {
-		List/* <org.eclipse.gmf.runtime.emf.type.core.IElementType> */types = new ArrayList/*
-																							 * <org.eclipse.gmf.runtime.emf
-																							 * .type.core.IElementType>
-																							 */();
+	public List<IElementType> getMARelTypesOnSource() {
+		ArrayList<IElementType> types = new ArrayList<IElementType>(4);
 		types.add(UrmlElementTypes.RequirementImplementingServices_4005);
 		types.add(UrmlElementTypes.NonFunctionalRequirementSubNonFunctionalRequirements_4043);
 		types.add(UrmlElementTypes.MitigationMitigatedDangers_4012);
+		types.add(UrmlElementTypes.UrmlModelElementAssociations_4048);
 		return types;
 	}
 
 	/**
 	 * @generated
 	 */
-	public List/* <org.eclipse.gmf.runtime.emf.type.core.IElementType> */getMARelTypesOnSourceAndTarget(
-		IGraphicalEditPart targetEditPart) {
-		List/* <org.eclipse.gmf.runtime.emf.type.core.IElementType> */types = new ArrayList/*
-																							 * <org.eclipse.gmf.runtime.emf
-																							 * .type.core.IElementType>
-																							 */();
+	public List<IElementType> getMARelTypesOnSourceAndTarget(
+			IGraphicalEditPart targetEditPart) {
+		LinkedList<IElementType> types = new LinkedList<IElementType>();
 		if (targetEditPart instanceof ServiceEditPart) {
 			types.add(UrmlElementTypes.RequirementImplementingServices_4005);
 		}
@@ -290,26 +290,69 @@
 		if (targetEditPart instanceof DangerEditPart) {
 			types.add(UrmlElementTypes.MitigationMitigatedDangers_4012);
 		}
+		if (targetEditPart instanceof StakeholderEditPart) {
+			types.add(UrmlElementTypes.UrmlModelElementAssociations_4048);
+		}
+		if (targetEditPart instanceof GoalEditPart) {
+			types.add(UrmlElementTypes.UrmlModelElementAssociations_4048);
+		}
+		if (targetEditPart instanceof FunctionalRequirementEditPart) {
+			types.add(UrmlElementTypes.UrmlModelElementAssociations_4048);
+		}
+		if (targetEditPart instanceof FeatureEditPart) {
+			types.add(UrmlElementTypes.UrmlModelElementAssociations_4048);
+		}
+		if (targetEditPart instanceof ServiceEditPart) {
+			types.add(UrmlElementTypes.UrmlModelElementAssociations_4048);
+		}
+		if (targetEditPart instanceof org.unicase.ui.diagram.urml.edit.parts.NonFunctionalRequirementEditPart) {
+			types.add(UrmlElementTypes.UrmlModelElementAssociations_4048);
+		}
+		if (targetEditPart instanceof DangerEditPart) {
+			types.add(UrmlElementTypes.UrmlModelElementAssociations_4048);
+		}
+		if (targetEditPart instanceof ActorEditPart) {
+			types.add(UrmlElementTypes.UrmlModelElementAssociations_4048);
+		}
+		if (targetEditPart instanceof ProceduralMitigationEditPart) {
+			types.add(UrmlElementTypes.UrmlModelElementAssociations_4048);
+		}
+		if (targetEditPart instanceof VariationPointEditPart) {
+			types.add(UrmlElementTypes.UrmlModelElementAssociations_4048);
+		}
+		if (targetEditPart instanceof VariationPointInstanceEditPart) {
+			types.add(UrmlElementTypes.UrmlModelElementAssociations_4048);
+		}
+		if (targetEditPart instanceof ProductEditPart) {
+			types.add(UrmlElementTypes.UrmlModelElementAssociations_4048);
+		}
 		return types;
 	}
 
 	/**
 	 * @generated
 	 */
-	public List/* <org.eclipse.gmf.runtime.emf.type.core.IElementType> */getMATypesForTarget(
-		IElementType relationshipType) {
-		List/* <org.eclipse.gmf.runtime.emf.type.core.IElementType> */types = new ArrayList/*
-																							 * <org.eclipse.gmf.runtime.emf
-																							 * .type.core.IElementType>
-																							 */();
+	public List<IElementType> getMATypesForTarget(IElementType relationshipType) {
+		LinkedList<IElementType> types = new LinkedList<IElementType>();
 		if (relationshipType == UrmlElementTypes.RequirementImplementingServices_4005) {
 			types.add(UrmlElementTypes.Service_2007);
-		}
-		if (relationshipType == UrmlElementTypes.NonFunctionalRequirementSubNonFunctionalRequirements_4043) {
+		} else if (relationshipType == UrmlElementTypes.NonFunctionalRequirementSubNonFunctionalRequirements_4043) {
 			types.add(UrmlElementTypes.NonFunctionalRequirement_2008);
-		}
-		if (relationshipType == UrmlElementTypes.MitigationMitigatedDangers_4012) {
+		} else if (relationshipType == UrmlElementTypes.MitigationMitigatedDangers_4012) {
 			types.add(UrmlElementTypes.Danger_2009);
+		} else if (relationshipType == UrmlElementTypes.UrmlModelElementAssociations_4048) {
+			types.add(UrmlElementTypes.Stakeholder_2002);
+			types.add(UrmlElementTypes.Goal_2001);
+			types.add(UrmlElementTypes.FunctionalRequirement_2006);
+			types.add(UrmlElementTypes.Feature_2012);
+			types.add(UrmlElementTypes.Service_2007);
+			types.add(UrmlElementTypes.NonFunctionalRequirement_2008);
+			types.add(UrmlElementTypes.Danger_2009);
+			types.add(UrmlElementTypes.Actor_2010);
+			types.add(UrmlElementTypes.ProceduralMitigation_2011);
+			types.add(UrmlElementTypes.VariationPoint_2013);
+			types.add(UrmlElementTypes.VariationPointInstance_2014);
+			types.add(UrmlElementTypes.Product_2015);
 		}
 		return types;
 	}
@@ -317,33 +360,37 @@
 	/**
 	 * @generated
 	 */
-	public List/* <org.eclipse.gmf.runtime.emf.type.core.IElementType> */getMARelTypesOnTarget() {
-		List/* <org.eclipse.gmf.runtime.emf.type.core.IElementType> */types = new ArrayList/*
-																							 * <org.eclipse.gmf.runtime.emf
-																							 * .type.core.IElementType>
-																							 */();
+	public List<IElementType> getMARelTypesOnTarget() {
+		ArrayList<IElementType> types = new ArrayList<IElementType>(3);
 		types.add(UrmlElementTypes.AbstractFeatureConstrainingNonFunctionalRequirements_4036);
 		types.add(UrmlElementTypes.NonFunctionalRequirementSubNonFunctionalRequirements_4043);
+		types.add(UrmlElementTypes.UrmlModelElementAssociations_4048);
 		return types;
 	}
 
 	/**
 	 * @generated
 	 */
-	public List/* <org.eclipse.gmf.runtime.emf.type.core.IElementType> */getMATypesForSource(
-		IElementType relationshipType) {
-		List/* <org.eclipse.gmf.runtime.emf.type.core.IElementType> */types = new ArrayList/*
-																							 * <org.eclipse.gmf.runtime.emf
-																							 * .type.core.IElementType>
-																							 */();
+	public List<IElementType> getMATypesForSource(IElementType relationshipType) {
+		LinkedList<IElementType> types = new LinkedList<IElementType>();
 		if (relationshipType == UrmlElementTypes.AbstractFeatureConstrainingNonFunctionalRequirements_4036) {
 			types.add(UrmlElementTypes.Feature_2012);
-		}
-		if (relationshipType == UrmlElementTypes.AbstractFeatureConstrainingNonFunctionalRequirements_4036) {
 			types.add(UrmlElementTypes.VariationPoint_2013);
-		}
-		if (relationshipType == UrmlElementTypes.NonFunctionalRequirementSubNonFunctionalRequirements_4043) {
+		} else if (relationshipType == UrmlElementTypes.NonFunctionalRequirementSubNonFunctionalRequirements_4043) {
 			types.add(UrmlElementTypes.NonFunctionalRequirement_2008);
+		} else if (relationshipType == UrmlElementTypes.UrmlModelElementAssociations_4048) {
+			types.add(UrmlElementTypes.Stakeholder_2002);
+			types.add(UrmlElementTypes.Goal_2001);
+			types.add(UrmlElementTypes.FunctionalRequirement_2006);
+			types.add(UrmlElementTypes.Feature_2012);
+			types.add(UrmlElementTypes.Service_2007);
+			types.add(UrmlElementTypes.NonFunctionalRequirement_2008);
+			types.add(UrmlElementTypes.Danger_2009);
+			types.add(UrmlElementTypes.Actor_2010);
+			types.add(UrmlElementTypes.ProceduralMitigation_2011);
+			types.add(UrmlElementTypes.VariationPoint_2013);
+			types.add(UrmlElementTypes.VariationPointInstance_2014);
+			types.add(UrmlElementTypes.Product_2015);
 		}
 		return types;
 	}
@@ -380,7 +427,8 @@
 
 			fFigureNonFunctionalRequirementFigure_name = new Label();
 
-			fFigureNonFunctionalRequirementFigure_name.setFont(FFIGURENONFUNCTIONALREQUIREMENTFIGURE_NAME_FONT);
+			fFigureNonFunctionalRequirementFigure_name
+					.setFont(FFIGURENONFUNCTIONALREQUIREMENTFIGURE_NAME_FONT);
 
 			this.add(fFigureNonFunctionalRequirementFigure_name);
 
@@ -389,25 +437,6 @@
 		/**
 		 * @generated
 		 */
-		private boolean myUseLocalCoordinates = false;
-
-		/**
-		 * @generated
-		 */
-		protected boolean useLocalCoordinates() {
-			return myUseLocalCoordinates;
-		}
-
-		/**
-		 * @generated
-		 */
-		protected void setUseLocalCoordinates(boolean useLocalCoordinates) {
-			myUseLocalCoordinates = useLocalCoordinates;
-		}
-
-		/**
-		 * @generated
-		 */
 		public Label getFigureNonFunctionalRequirementFigure_name() {
 			return fFigureNonFunctionalRequirementFigure_name;
 		}
@@ -417,7 +446,7 @@
 	/**
 	 * @generated
 	 */
-	static final Font FFIGURENONFUNCTIONALREQUIREMENTFIGURE_NAME_FONT = new Font(Display.getCurrent(), "Arial", 10,
-		SWT.BOLD);
+	static final Font FFIGURENONFUNCTIONALREQUIREMENTFIGURE_NAME_FONT = new Font(
+			Display.getCurrent(), "Arial", 10, SWT.BOLD);
 
 }
Index: src/org/unicase/ui/diagram/urml/edit/parts/FunctionalRequirementEditPart.java
===================================================================
--- src/org/unicase/ui/diagram/urml/edit/parts/FunctionalRequirementEditPart.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/edit/parts/FunctionalRequirementEditPart.java	(working copy)
@@ -1,6 +1,7 @@
 package org.unicase.ui.diagram.urml.edit.parts;
 
 import java.util.ArrayList;
+import java.util.LinkedList;
 import java.util.List;
 
 import org.eclipse.draw2d.Graphics;
@@ -20,6 +21,7 @@
 import org.eclipse.gmf.runtime.diagram.ui.editpolicies.EditPolicyRoles;
 import org.eclipse.gmf.runtime.draw2d.ui.figures.ConstrainedToolbarLayout;
 import org.eclipse.gmf.runtime.emf.type.core.IElementType;
+import org.eclipse.gmf.runtime.gef.ui.figures.DefaultSizeNodeFigure;
 import org.eclipse.gmf.runtime.gef.ui.figures.NodeFigure;
 import org.eclipse.gmf.runtime.notation.View;
 import org.eclipse.swt.SWT;
@@ -66,7 +68,8 @@
 	 */
 	protected void createDefaultEditPolicies() {
 		super.createDefaultEditPolicies();
-		installEditPolicy(EditPolicyRoles.SEMANTIC_ROLE, new FunctionalRequirementItemSemanticEditPolicy());
+		installEditPolicy(EditPolicyRoles.SEMANTIC_ROLE,
+				new FunctionalRequirementItemSemanticEditPolicy());
 		installEditPolicy(EditPolicy.LAYOUT_ROLE, createLayoutEditPolicy());
 		installEditPolicy(EditPolicyRoles.OPEN_ROLE, new MEEditorOpenPolicie());
 		// XXX need an SCR to runtime to have another abstract superclass that would let children add reasonable
@@ -78,10 +81,11 @@
 	 * @generated
 	 */
 	protected LayoutEditPolicy createLayoutEditPolicy() {
-		LayoutEditPolicy lep = new LayoutEditPolicy() {
+		org.eclipse.gmf.runtime.diagram.ui.editpolicies.LayoutEditPolicy lep = new org.eclipse.gmf.runtime.diagram.ui.editpolicies.LayoutEditPolicy() {
 
 			protected EditPolicy createChildEditPolicy(EditPart child) {
-				EditPolicy result = child.getEditPolicy(EditPolicy.PRIMARY_DRAG_ROLE);
+				EditPolicy result = child
+						.getEditPolicy(EditPolicy.PRIMARY_DRAG_ROLE);
 				if (result == null) {
 					result = new NonResizableEditPolicy();
 				}
@@ -103,8 +107,7 @@
 	 * @generated
 	 */
 	protected IFigure createNodeShape() {
-		FunctionalRequirement figure = new FunctionalRequirement();
-		return primaryShape = figure;
+		return primaryShape = new FunctionalRequirement();
 	}
 
 	/**
@@ -119,8 +122,9 @@
 	 */
 	protected boolean addFixedChild(EditPart childEditPart) {
 		if (childEditPart instanceof FunctionalRequirementNameEditPart) {
-			((FunctionalRequirementNameEditPart) childEditPart).setLabel(getPrimaryShape()
-				.getFigureFunctionalRequirementFigure_name());
+			((FunctionalRequirementNameEditPart) childEditPart)
+					.setLabel(getPrimaryShape()
+							.getFigureFunctionalRequirementFigure_name());
 			return true;
 		}
 		return false;
@@ -255,32 +259,28 @@
 	 * @generated
 	 */
 	public EditPart getPrimaryChildEditPart() {
-		return getChildBySemanticHint(UrmlVisualIDRegistry.getType(FunctionalRequirementNameEditPart.VISUAL_ID));
+		return getChildBySemanticHint(UrmlVisualIDRegistry
+				.getType(FunctionalRequirementNameEditPart.VISUAL_ID));
 	}
 
 	/**
 	 * @generated
 	 */
-	public List/* <org.eclipse.gmf.runtime.emf.type.core.IElementType> */getMARelTypesOnSource() {
-		List/* <org.eclipse.gmf.runtime.emf.type.core.IElementType> */types = new ArrayList/*
-																							 * <org.eclipse.gmf.runtime.emf
-																							 * .type.core.IElementType>
-																							 */();
+	public List<IElementType> getMARelTypesOnSource() {
+		ArrayList<IElementType> types = new ArrayList<IElementType>(4);
 		types.add(UrmlElementTypes.RequirementImplementingServices_4005);
 		types.add(UrmlElementTypes.FunctionalRequirementSubFunctionalRequirements_4044);
 		types.add(UrmlElementTypes.MitigationMitigatedDangers_4012);
+		types.add(UrmlElementTypes.UrmlModelElementAssociations_4048);
 		return types;
 	}
 
 	/**
 	 * @generated
 	 */
-	public List/* <org.eclipse.gmf.runtime.emf.type.core.IElementType> */getMARelTypesOnSourceAndTarget(
-		IGraphicalEditPart targetEditPart) {
-		List/* <org.eclipse.gmf.runtime.emf.type.core.IElementType> */types = new ArrayList/*
-																							 * <org.eclipse.gmf.runtime.emf
-																							 * .type.core.IElementType>
-																							 */();
+	public List<IElementType> getMARelTypesOnSourceAndTarget(
+			IGraphicalEditPart targetEditPart) {
+		LinkedList<IElementType> types = new LinkedList<IElementType>();
 		if (targetEditPart instanceof ServiceEditPart) {
 			types.add(UrmlElementTypes.RequirementImplementingServices_4005);
 		}
@@ -290,26 +290,69 @@
 		if (targetEditPart instanceof DangerEditPart) {
 			types.add(UrmlElementTypes.MitigationMitigatedDangers_4012);
 		}
+		if (targetEditPart instanceof StakeholderEditPart) {
+			types.add(UrmlElementTypes.UrmlModelElementAssociations_4048);
+		}
+		if (targetEditPart instanceof GoalEditPart) {
+			types.add(UrmlElementTypes.UrmlModelElementAssociations_4048);
+		}
+		if (targetEditPart instanceof org.unicase.ui.diagram.urml.edit.parts.FunctionalRequirementEditPart) {
+			types.add(UrmlElementTypes.UrmlModelElementAssociations_4048);
+		}
+		if (targetEditPart instanceof FeatureEditPart) {
+			types.add(UrmlElementTypes.UrmlModelElementAssociations_4048);
+		}
+		if (targetEditPart instanceof ServiceEditPart) {
+			types.add(UrmlElementTypes.UrmlModelElementAssociations_4048);
+		}
+		if (targetEditPart instanceof NonFunctionalRequirementEditPart) {
+			types.add(UrmlElementTypes.UrmlModelElementAssociations_4048);
+		}
+		if (targetEditPart instanceof DangerEditPart) {
+			types.add(UrmlElementTypes.UrmlModelElementAssociations_4048);
+		}
+		if (targetEditPart instanceof ActorEditPart) {
+			types.add(UrmlElementTypes.UrmlModelElementAssociations_4048);
+		}
+		if (targetEditPart instanceof ProceduralMitigationEditPart) {
+			types.add(UrmlElementTypes.UrmlModelElementAssociations_4048);
+		}
+		if (targetEditPart instanceof VariationPointEditPart) {
+			types.add(UrmlElementTypes.UrmlModelElementAssociations_4048);
+		}
+		if (targetEditPart instanceof VariationPointInstanceEditPart) {
+			types.add(UrmlElementTypes.UrmlModelElementAssociations_4048);
+		}
+		if (targetEditPart instanceof ProductEditPart) {
+			types.add(UrmlElementTypes.UrmlModelElementAssociations_4048);
+		}
 		return types;
 	}
 
 	/**
 	 * @generated
 	 */
-	public List/* <org.eclipse.gmf.runtime.emf.type.core.IElementType> */getMATypesForTarget(
-		IElementType relationshipType) {
-		List/* <org.eclipse.gmf.runtime.emf.type.core.IElementType> */types = new ArrayList/*
-																							 * <org.eclipse.gmf.runtime.emf
-																							 * .type.core.IElementType>
-																							 */();
+	public List<IElementType> getMATypesForTarget(IElementType relationshipType) {
+		LinkedList<IElementType> types = new LinkedList<IElementType>();
 		if (relationshipType == UrmlElementTypes.RequirementImplementingServices_4005) {
 			types.add(UrmlElementTypes.Service_2007);
-		}
-		if (relationshipType == UrmlElementTypes.FunctionalRequirementSubFunctionalRequirements_4044) {
+		} else if (relationshipType == UrmlElementTypes.FunctionalRequirementSubFunctionalRequirements_4044) {
 			types.add(UrmlElementTypes.FunctionalRequirement_2006);
-		}
-		if (relationshipType == UrmlElementTypes.MitigationMitigatedDangers_4012) {
+		} else if (relationshipType == UrmlElementTypes.MitigationMitigatedDangers_4012) {
 			types.add(UrmlElementTypes.Danger_2009);
+		} else if (relationshipType == UrmlElementTypes.UrmlModelElementAssociations_4048) {
+			types.add(UrmlElementTypes.Stakeholder_2002);
+			types.add(UrmlElementTypes.Goal_2001);
+			types.add(UrmlElementTypes.FunctionalRequirement_2006);
+			types.add(UrmlElementTypes.Feature_2012);
+			types.add(UrmlElementTypes.Service_2007);
+			types.add(UrmlElementTypes.NonFunctionalRequirement_2008);
+			types.add(UrmlElementTypes.Danger_2009);
+			types.add(UrmlElementTypes.Actor_2010);
+			types.add(UrmlElementTypes.ProceduralMitigation_2011);
+			types.add(UrmlElementTypes.VariationPoint_2013);
+			types.add(UrmlElementTypes.VariationPointInstance_2014);
+			types.add(UrmlElementTypes.Product_2015);
 		}
 		return types;
 	}
@@ -317,33 +360,37 @@
 	/**
 	 * @generated
 	 */
-	public List/* <org.eclipse.gmf.runtime.emf.type.core.IElementType> */getMARelTypesOnTarget() {
-		List/* <org.eclipse.gmf.runtime.emf.type.core.IElementType> */types = new ArrayList/*
-																							 * <org.eclipse.gmf.runtime.emf
-																							 * .type.core.IElementType>
-																							 */();
+	public List<IElementType> getMARelTypesOnTarget() {
+		ArrayList<IElementType> types = new ArrayList<IElementType>(3);
 		types.add(UrmlElementTypes.AbstractFeatureDetailingFunctionalRequirements_4035);
 		types.add(UrmlElementTypes.FunctionalRequirementSubFunctionalRequirements_4044);
+		types.add(UrmlElementTypes.UrmlModelElementAssociations_4048);
 		return types;
 	}
 
 	/**
 	 * @generated
 	 */
-	public List/* <org.eclipse.gmf.runtime.emf.type.core.IElementType> */getMATypesForSource(
-		IElementType relationshipType) {
-		List/* <org.eclipse.gmf.runtime.emf.type.core.IElementType> */types = new ArrayList/*
-																							 * <org.eclipse.gmf.runtime.emf
-																							 * .type.core.IElementType>
-																							 */();
+	public List<IElementType> getMATypesForSource(IElementType relationshipType) {
+		LinkedList<IElementType> types = new LinkedList<IElementType>();
 		if (relationshipType == UrmlElementTypes.AbstractFeatureDetailingFunctionalRequirements_4035) {
 			types.add(UrmlElementTypes.Feature_2012);
-		}
-		if (relationshipType == UrmlElementTypes.AbstractFeatureDetailingFunctionalRequirements_4035) {
 			types.add(UrmlElementTypes.VariationPoint_2013);
-		}
-		if (relationshipType == UrmlElementTypes.FunctionalRequirementSubFunctionalRequirements_4044) {
+		} else if (relationshipType == UrmlElementTypes.FunctionalRequirementSubFunctionalRequirements_4044) {
+			types.add(UrmlElementTypes.FunctionalRequirement_2006);
+		} else if (relationshipType == UrmlElementTypes.UrmlModelElementAssociations_4048) {
+			types.add(UrmlElementTypes.Stakeholder_2002);
+			types.add(UrmlElementTypes.Goal_2001);
 			types.add(UrmlElementTypes.FunctionalRequirement_2006);
+			types.add(UrmlElementTypes.Feature_2012);
+			types.add(UrmlElementTypes.Service_2007);
+			types.add(UrmlElementTypes.NonFunctionalRequirement_2008);
+			types.add(UrmlElementTypes.Danger_2009);
+			types.add(UrmlElementTypes.Actor_2010);
+			types.add(UrmlElementTypes.ProceduralMitigation_2011);
+			types.add(UrmlElementTypes.VariationPoint_2013);
+			types.add(UrmlElementTypes.VariationPointInstance_2014);
+			types.add(UrmlElementTypes.Product_2015);
 		}
 		return types;
 	}
@@ -380,7 +427,8 @@
 
 			fFigureFunctionalRequirementFigure_name = new Label();
 
-			fFigureFunctionalRequirementFigure_name.setFont(FFIGUREFUNCTIONALREQUIREMENTFIGURE_NAME_FONT);
+			fFigureFunctionalRequirementFigure_name
+					.setFont(FFIGUREFUNCTIONALREQUIREMENTFIGURE_NAME_FONT);
 
 			this.add(fFigureFunctionalRequirementFigure_name);
 
@@ -389,25 +437,6 @@
 		/**
 		 * @generated
 		 */
-		private boolean myUseLocalCoordinates = false;
-
-		/**
-		 * @generated
-		 */
-		protected boolean useLocalCoordinates() {
-			return myUseLocalCoordinates;
-		}
-
-		/**
-		 * @generated
-		 */
-		protected void setUseLocalCoordinates(boolean useLocalCoordinates) {
-			myUseLocalCoordinates = useLocalCoordinates;
-		}
-
-		/**
-		 * @generated
-		 */
 		public Label getFigureFunctionalRequirementFigure_name() {
 			return fFigureFunctionalRequirementFigure_name;
 		}
@@ -417,7 +446,7 @@
 	/**
 	 * @generated
 	 */
-	static final Font FFIGUREFUNCTIONALREQUIREMENTFIGURE_NAME_FONT = new Font(Display.getCurrent(), "Arial", 10,
-		SWT.BOLD);
+	static final Font FFIGUREFUNCTIONALREQUIREMENTFIGURE_NAME_FONT = new Font(
+			Display.getCurrent(), "Arial", 10, SWT.BOLD);
 
 }
Index: src/org/unicase/ui/diagram/urml/edit/parts/InfluencesLabel4EditPart.java
===================================================================
--- src/org/unicase/ui/diagram/urml/edit/parts/InfluencesLabel4EditPart.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/edit/parts/InfluencesLabel4EditPart.java	(working copy)
@@ -50,7 +50,8 @@
 /**
  * @generated
  */
-public class InfluencesLabel4EditPart extends LabelEditPart implements ITextAwareEditPart {
+public class InfluencesLabel4EditPart extends LabelEditPart implements
+		ITextAwareEditPart {
 
 	/**
 	 * @generated
@@ -70,7 +71,7 @@
 	/**
 	 * @generated
 	 */
-	private List parserElements;
+	private List<?> parserElements;
 
 	/**
 	 * @generated
@@ -81,8 +82,10 @@
 	 * @generated
 	 */
 	static {
-		registerSnapBackPosition(UrmlVisualIDRegistry
-			.getType(org.unicase.ui.diagram.urml.edit.parts.InfluencesLabel4EditPart.VISUAL_ID), new Point(0, 20));
+		registerSnapBackPosition(
+				UrmlVisualIDRegistry
+						.getType(org.unicase.ui.diagram.urml.edit.parts.InfluencesLabel4EditPart.VISUAL_ID),
+				new Point(0, 20));
 	}
 
 	/**
@@ -97,16 +100,12 @@
 	 */
 	protected void createDefaultEditPolicies() {
 		super.createDefaultEditPolicies();
-		installEditPolicy(EditPolicy.DIRECT_EDIT_ROLE, new LabelDirectEditPolicy());
-		installEditPolicy(EditPolicy.SELECTION_FEEDBACK_ROLE, new UrmlTextSelectionEditPolicy());
-		installEditPolicy(EditPolicy.PRIMARY_DRAG_ROLE, new NonResizableLabelEditPolicy() {
-
-			protected List createSelectionHandles() {
-				MoveHandle mh = new MoveHandle((GraphicalEditPart) getHost());
-				mh.setBorder(null);
-				return Collections.singletonList(mh);
-			}
-		});
+		installEditPolicy(EditPolicy.DIRECT_EDIT_ROLE,
+				new LabelDirectEditPolicy());
+		installEditPolicy(EditPolicy.SELECTION_FEEDBACK_ROLE,
+				new UrmlTextSelectionEditPolicy());
+		installEditPolicy(EditPolicy.PRIMARY_DRAG_ROLE,
+				new URMLDiagramEditPart.LinkLabelDragPolicy());
 	}
 
 	/**
@@ -174,6 +173,7 @@
 	/**
 	 * @generated
 	 */
+	@SuppressWarnings("rawtypes")
 	protected List getModelChildren() {
 		return Collections.EMPTY_LIST;
 	}
@@ -206,7 +206,9 @@
 		String text = null;
 		EObject parserElement = getParserElement();
 		if (parserElement != null && getParser() != null) {
-			text = getParser().getPrintString(new EObjectAdapter(parserElement), getParserOptions().intValue());
+			text = getParser().getPrintString(
+					new EObjectAdapter(parserElement),
+					getParserOptions().intValue());
 		}
 		if (text == null || text.length() == 0) {
 			text = defaultText;
@@ -236,7 +238,9 @@
 		if (getParserElement() == null || getParser() == null) {
 			return ""; //$NON-NLS-1$
 		}
-		return getParser().getEditString(new EObjectAdapter(getParserElement()), getParserOptions().intValue());
+		return getParser().getEditString(
+				new EObjectAdapter(getParserElement()),
+				getParserOptions().intValue());
 	}
 
 	/**
@@ -257,14 +261,20 @@
 					final EObject element = getParserElement();
 					final IParser parser = getParser();
 					try {
-						IParserEditStatus valid = (IParserEditStatus) getEditingDomain().runExclusive(
-							new RunnableWithResult.Impl() {
+						IParserEditStatus valid = (IParserEditStatus) getEditingDomain()
+								.runExclusive(
+										new RunnableWithResult.Impl<IParserEditStatus>() {
 
-								public void run() {
-									setResult(parser.isValidEditString(new EObjectAdapter(element), (String) value));
-								}
-							});
-						return valid.getCode() == ParserEditStatus.EDITABLE ? null : valid.getMessage();
+											public void run() {
+												setResult(parser
+														.isValidEditString(
+																new EObjectAdapter(
+																		element),
+																(String) value));
+											}
+										});
+						return valid.getCode() == ParserEditStatus.EDITABLE ? null
+								: valid.getMessage();
 					} catch (InterruptedException ie) {
 						ie.printStackTrace();
 					}
@@ -283,7 +293,8 @@
 		if (getParserElement() == null || getParser() == null) {
 			return null;
 		}
-		return getParser().getCompletionProcessor(new EObjectAdapter(getParserElement()));
+		return getParser().getCompletionProcessor(
+				new EObjectAdapter(getParserElement()));
 	}
 
 	/**
@@ -299,8 +310,11 @@
 	public IParser getParser() {
 		if (parser == null) {
 			parser = UrmlParserProvider
-				.getParser(UrmlElementTypes.GoalReference_4025, getParserElement(), UrmlVisualIDRegistry
-					.getType(org.unicase.ui.diagram.urml.edit.parts.InfluencesLabel4EditPart.VISUAL_ID));
+					.getParser(
+							UrmlElementTypes.GoalReference_4025,
+							getParserElement(),
+							UrmlVisualIDRegistry
+									.getType(org.unicase.ui.diagram.urml.edit.parts.InfluencesLabel4EditPart.VISUAL_ID));
 		}
 		return parser;
 	}
@@ -310,8 +324,9 @@
 	 */
 	protected DirectEditManager getManager() {
 		if (manager == null) {
-			setManager(new TextDirectEditManager(this, TextDirectEditManager.getTextCellEditorClass(this),
-				UrmlEditPartFactory.getTextCellEditorLocator(this)));
+			setManager(new TextDirectEditManager(this,
+					TextDirectEditManager.getTextCellEditorClass(this),
+					UrmlEditPartFactory.getTextCellEditorLocator(this)));
 		}
 		return manager;
 	}
@@ -335,7 +350,8 @@
 	 */
 	protected void performDirectEdit(Point eventLocation) {
 		if (getManager().getClass() == TextDirectEditManager.class) {
-			((TextDirectEditManager) getManager()).show(eventLocation.getSWTPoint());
+			((TextDirectEditManager) getManager()).show(eventLocation
+					.getSWTPoint());
 		}
 	}
 
@@ -360,11 +376,15 @@
 
 				public void run() {
 					if (isActive() && isEditable()) {
-						if (theRequest.getExtendedData().get(RequestConstants.REQ_DIRECTEDIT_EXTENDEDDATA_INITIAL_CHAR) instanceof Character) {
-							Character initialChar = (Character) theRequest.getExtendedData().get(
-								RequestConstants.REQ_DIRECTEDIT_EXTENDEDDATA_INITIAL_CHAR);
+						if (theRequest
+								.getExtendedData()
+								.get(RequestConstants.REQ_DIRECTEDIT_EXTENDEDDATA_INITIAL_CHAR) instanceof Character) {
+							Character initialChar = (Character) theRequest
+									.getExtendedData()
+									.get(RequestConstants.REQ_DIRECTEDIT_EXTENDEDDATA_INITIAL_CHAR);
 							performDirectEdit(initialChar.charValue());
-						} else if ((theRequest instanceof DirectEditRequest) && (getEditText().equals(getLabelText()))) {
+						} else if ((theRequest instanceof DirectEditRequest)
+								&& (getEditText().equals(getLabelText()))) {
 							DirectEditRequest editRequest = (DirectEditRequest) theRequest;
 							performDirectEdit(editRequest.getLocation());
 						} else {
@@ -410,7 +430,8 @@
 	 * @generated
 	 */
 	protected void refreshUnderline() {
-		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(NotationPackage.eINSTANCE.getFontStyle());
+		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(
+				NotationPackage.eINSTANCE.getFontStyle());
 		if (style != null && getFigure() instanceof WrappingLabel) {
 			((WrappingLabel) getFigure()).setTextUnderline(style.isUnderline());
 		}
@@ -420,9 +441,11 @@
 	 * @generated
 	 */
 	protected void refreshStrikeThrough() {
-		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(NotationPackage.eINSTANCE.getFontStyle());
+		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(
+				NotationPackage.eINSTANCE.getFontStyle());
 		if (style != null && getFigure() instanceof WrappingLabel) {
-			((WrappingLabel) getFigure()).setTextStrikeThrough(style.isStrikeThrough());
+			((WrappingLabel) getFigure()).setTextStrikeThrough(style
+					.isStrikeThrough());
 		}
 	}
 
@@ -430,11 +453,13 @@
 	 * @generated
 	 */
 	protected void refreshFont() {
-		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(NotationPackage.eINSTANCE.getFontStyle());
+		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(
+				NotationPackage.eINSTANCE.getFontStyle());
 		if (style != null) {
-			FontData fontData = new FontData(style.getFontName(), style.getFontHeight(), (style.isBold() ? SWT.BOLD
-				: SWT.NORMAL)
-				| (style.isItalic() ? SWT.ITALIC : SWT.NORMAL));
+			FontData fontData = new FontData(style.getFontName(),
+					style.getFontHeight(), (style.isBold() ? SWT.BOLD
+							: SWT.NORMAL)
+							| (style.isItalic() ? SWT.ITALIC : SWT.NORMAL));
 			setFont(fontData);
 		}
 	}
@@ -452,9 +477,11 @@
 	protected void addSemanticListeners() {
 		if (getParser() instanceof ISemanticParser) {
 			EObject element = resolveSemanticElement();
-			parserElements = ((ISemanticParser) getParser()).getSemanticElementsBeingParsed(element);
+			parserElements = ((ISemanticParser) getParser())
+					.getSemanticElementsBeingParsed(element);
 			for (int i = 0; i < parserElements.size(); i++) {
-				addListenerFilter("SemanticModel" + i, this, (EObject) parserElements.get(i)); //$NON-NLS-1$
+				addListenerFilter(
+						"SemanticModel" + i, this, (EObject) parserElements.get(i)); //$NON-NLS-1$
 			}
 		} else {
 			super.addSemanticListeners();
@@ -504,17 +531,25 @@
 		if (NotationPackage.eINSTANCE.getFontStyle_FontColor().equals(feature)) {
 			Integer c = (Integer) event.getNewValue();
 			setFontColor(DiagramColorRegistry.getInstance().getColor(c));
-		} else if (NotationPackage.eINSTANCE.getFontStyle_Underline().equals(feature)) {
+		} else if (NotationPackage.eINSTANCE.getFontStyle_Underline().equals(
+				feature)) {
 			refreshUnderline();
-		} else if (NotationPackage.eINSTANCE.getFontStyle_StrikeThrough().equals(feature)) {
+		} else if (NotationPackage.eINSTANCE.getFontStyle_StrikeThrough()
+				.equals(feature)) {
 			refreshStrikeThrough();
-		} else if (NotationPackage.eINSTANCE.getFontStyle_FontHeight().equals(feature)
-			|| NotationPackage.eINSTANCE.getFontStyle_FontName().equals(feature)
-			|| NotationPackage.eINSTANCE.getFontStyle_Bold().equals(feature)
-			|| NotationPackage.eINSTANCE.getFontStyle_Italic().equals(feature)) {
+		} else if (NotationPackage.eINSTANCE.getFontStyle_FontHeight().equals(
+				feature)
+				|| NotationPackage.eINSTANCE.getFontStyle_FontName().equals(
+						feature)
+				|| NotationPackage.eINSTANCE.getFontStyle_Bold()
+						.equals(feature)
+				|| NotationPackage.eINSTANCE.getFontStyle_Italic().equals(
+						feature)) {
 			refreshFont();
 		} else {
-			if (getParser() != null && getParser().isAffectingEvent(event, getParserOptions().intValue())) {
+			if (getParser() != null
+					&& getParser().isAffectingEvent(event,
+							getParserOptions().intValue())) {
 				refreshLabel();
 			}
 			if (getParser() instanceof ISemanticParser) {
Index: src/org/unicase/ui/diagram/urml/edit/parts/DangerHarmedAssetsEditPart.java
===================================================================
--- src/org/unicase/ui/diagram/urml/edit/parts/DangerHarmedAssetsEditPart.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/edit/parts/DangerHarmedAssetsEditPart.java	(working copy)
@@ -12,7 +12,8 @@
 /**
  * @generated
  */
-public class DangerHarmedAssetsEditPart extends ConnectionNodeEditPart implements ITreeBranchEditPart {
+public class DangerHarmedAssetsEditPart extends ConnectionNodeEditPart
+		implements ITreeBranchEditPart {
 
 	/**
 	 * @generated
@@ -31,41 +32,8 @@
 	 */
 	protected void createDefaultEditPolicies() {
 		super.createDefaultEditPolicies();
-		installEditPolicy(EditPolicyRoles.SEMANTIC_ROLE, new DangerHarmedAssetsItemSemanticEditPolicy());
-	}
-
-	/**
-	 * @generated
-	 */
-	protected boolean addFixedChild(EditPart childEditPart) {
-		return false;
-	}
-
-	/**
-	 * @generated
-	 */
-	protected void addChildVisual(EditPart childEditPart, int index) {
-		if (addFixedChild(childEditPart)) {
-			return;
-		}
-		super.addChildVisual(childEditPart, -1);
-	}
-
-	/**
-	 * @generated
-	 */
-	protected boolean removeFixedChild(EditPart childEditPart) {
-		return false;
-	}
-
-	/**
-	 * @generated
-	 */
-	protected void removeChildVisual(EditPart childEditPart) {
-		if (removeFixedChild(childEditPart)) {
-			return;
-		}
-		super.removeChildVisual(childEditPart);
+		installEditPolicy(EditPolicyRoles.SEMANTIC_ROLE,
+				new DangerHarmedAssetsItemSemanticEditPolicy());
 	}
 
 	/**
Index: src/org/unicase/ui/diagram/urml/edit/parts/AbstractFeatureConstrainingNonFunctionalRequirementsEditPart.java
===================================================================
--- src/org/unicase/ui/diagram/urml/edit/parts/AbstractFeatureConstrainingNonFunctionalRequirementsEditPart.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/edit/parts/AbstractFeatureConstrainingNonFunctionalRequirementsEditPart.java	(working copy)
@@ -12,8 +12,8 @@
 /**
  * @generated
  */
-public class AbstractFeatureConstrainingNonFunctionalRequirementsEditPart extends ConnectionNodeEditPart implements
-	ITreeBranchEditPart {
+public class AbstractFeatureConstrainingNonFunctionalRequirementsEditPart
+		extends ConnectionNodeEditPart implements ITreeBranchEditPart {
 
 	/**
 	 * @generated
@@ -23,7 +23,8 @@
 	/**
 	 * @generated
 	 */
-	public AbstractFeatureConstrainingNonFunctionalRequirementsEditPart(View view) {
+	public AbstractFeatureConstrainingNonFunctionalRequirementsEditPart(
+			View view) {
 		super(view);
 	}
 
@@ -32,42 +33,9 @@
 	 */
 	protected void createDefaultEditPolicies() {
 		super.createDefaultEditPolicies();
-		installEditPolicy(EditPolicyRoles.SEMANTIC_ROLE,
-			new AbstractFeatureConstrainingNonFunctionalRequirementsItemSemanticEditPolicy());
-	}
-
-	/**
-	 * @generated
-	 */
-	protected boolean addFixedChild(EditPart childEditPart) {
-		return false;
-	}
-
-	/**
-	 * @generated
-	 */
-	protected void addChildVisual(EditPart childEditPart, int index) {
-		if (addFixedChild(childEditPart)) {
-			return;
-		}
-		super.addChildVisual(childEditPart, -1);
-	}
-
-	/**
-	 * @generated
-	 */
-	protected boolean removeFixedChild(EditPart childEditPart) {
-		return false;
-	}
-
-	/**
-	 * @generated
-	 */
-	protected void removeChildVisual(EditPart childEditPart) {
-		if (removeFixedChild(childEditPart)) {
-			return;
-		}
-		super.removeChildVisual(childEditPart);
+		installEditPolicy(
+				EditPolicyRoles.SEMANTIC_ROLE,
+				new AbstractFeatureConstrainingNonFunctionalRequirementsItemSemanticEditPolicy());
 	}
 
 	/**
Index: src/org/unicase/ui/diagram/urml/edit/parts/GoalNameEditPart.java
===================================================================
--- src/org/unicase/ui/diagram/urml/edit/parts/GoalNameEditPart.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/edit/parts/GoalNameEditPart.java	(working copy)
@@ -52,7 +52,8 @@
 /**
  * @generated
  */
-public class GoalNameEditPart extends CompartmentEditPart implements ITextAwareEditPart {
+public class GoalNameEditPart extends CompartmentEditPart implements
+		ITextAwareEditPart {
 
 	/**
 	 * @generated
@@ -72,7 +73,7 @@
 	/**
 	 * @generated
 	 */
-	private List parserElements;
+	private List<?> parserElements;
 
 	/**
 	 * @generated
@@ -91,25 +92,12 @@
 	 */
 	protected void createDefaultEditPolicies() {
 		super.createDefaultEditPolicies();
-		installEditPolicy(EditPolicy.SELECTION_FEEDBACK_ROLE, new UrmlTextSelectionEditPolicy());
-		installEditPolicy(EditPolicy.DIRECT_EDIT_ROLE, new LabelDirectEditPolicy());
-		installEditPolicy(EditPolicy.PRIMARY_DRAG_ROLE, new NonResizableEditPolicy() {
-
-			protected List createSelectionHandles() {
-				List handles = new ArrayList();
-				NonResizableHandleKit.addMoveHandle((GraphicalEditPart) getHost(), handles);
-				((MoveHandle) handles.get(0)).setBorder(null);
-				return handles;
-			}
-
-			public Command getCommand(Request request) {
-				return null;
-			}
-
-			public boolean understandsRequest(Request request) {
-				return false;
-			}
-		});
+		installEditPolicy(EditPolicy.SELECTION_FEEDBACK_ROLE,
+				new UrmlTextSelectionEditPolicy());
+		installEditPolicy(EditPolicy.DIRECT_EDIT_ROLE,
+				new LabelDirectEditPolicy());
+		installEditPolicy(EditPolicy.PRIMARY_DRAG_ROLE,
+				new URMLDiagramEditPart.NodeLabelDragPolicy());
 	}
 
 	/**
@@ -159,7 +147,8 @@
 	/**
 	 * @generated
 	 */
-	public void setLabel(org.unicase.ui.unicasecommon.diagram.figures.Label figure) {
+	public void setLabel(
+			org.unicase.ui.unicasecommon.diagram.figures.Label figure) {
 		unregisterVisuals();
 		setFigure(figure);
 		defaultText = getLabelTextHelper(figure);
@@ -170,6 +159,7 @@
 	/**
 	 * @generated
 	 */
+	@SuppressWarnings("rawtypes")
 	protected List getModelChildren() {
 		return Collections.EMPTY_LIST;
 	}
@@ -202,7 +192,9 @@
 		String text = null;
 		EObject parserElement = getParserElement();
 		if (parserElement != null && getParser() != null) {
-			text = getParser().getPrintString(new EObjectAdapter(parserElement), getParserOptions().intValue());
+			text = getParser().getPrintString(
+					new EObjectAdapter(parserElement),
+					getParserOptions().intValue());
 		}
 		if (text == null || text.length() == 0) {
 			text = defaultText;
@@ -232,7 +224,9 @@
 		if (getParserElement() == null || getParser() == null) {
 			return ""; //$NON-NLS-1$
 		}
-		return getParser().getEditString(new EObjectAdapter(getParserElement()), getParserOptions().intValue());
+		return getParser().getEditString(
+				new EObjectAdapter(getParserElement()),
+				getParserOptions().intValue());
 	}
 
 	/**
@@ -253,14 +247,20 @@
 					final EObject element = getParserElement();
 					final IParser parser = getParser();
 					try {
-						IParserEditStatus valid = (IParserEditStatus) getEditingDomain().runExclusive(
-							new RunnableWithResult.Impl() {
+						IParserEditStatus valid = (IParserEditStatus) getEditingDomain()
+								.runExclusive(
+										new RunnableWithResult.Impl<IParserEditStatus>() {
 
-								public void run() {
-									setResult(parser.isValidEditString(new EObjectAdapter(element), (String) value));
-								}
-							});
-						return valid.getCode() == ParserEditStatus.EDITABLE ? null : valid.getMessage();
+											public void run() {
+												setResult(parser
+														.isValidEditString(
+																new EObjectAdapter(
+																		element),
+																(String) value));
+											}
+										});
+						return valid.getCode() == ParserEditStatus.EDITABLE ? null
+								: valid.getMessage();
 					} catch (InterruptedException ie) {
 						ie.printStackTrace();
 					}
@@ -279,7 +279,8 @@
 		if (getParserElement() == null || getParser() == null) {
 			return null;
 		}
-		return getParser().getCompletionProcessor(new EObjectAdapter(getParserElement()));
+		return getParser().getCompletionProcessor(
+				new EObjectAdapter(getParserElement()));
 	}
 
 	/**
@@ -294,8 +295,12 @@
 	 */
 	public IParser getParser() {
 		if (parser == null) {
-			parser = UrmlParserProvider.getParser(UrmlElementTypes.Goal_2001, getParserElement(), UrmlVisualIDRegistry
-				.getType(org.unicase.ui.diagram.urml.edit.parts.GoalNameEditPart.VISUAL_ID));
+			parser = UrmlParserProvider
+					.getParser(
+							UrmlElementTypes.Goal_2001,
+							getParserElement(),
+							UrmlVisualIDRegistry
+									.getType(org.unicase.ui.diagram.urml.edit.parts.GoalNameEditPart.VISUAL_ID));
 		}
 		return parser;
 	}
@@ -305,8 +310,9 @@
 	 */
 	protected DirectEditManager getManager() {
 		if (manager == null) {
-			setManager(new TextDirectEditManager(this, TextDirectEditManager.getTextCellEditorClass(this),
-				UrmlEditPartFactory.getTextCellEditorLocator(this)));
+			setManager(new TextDirectEditManager(this,
+					TextDirectEditManager.getTextCellEditorClass(this),
+					UrmlEditPartFactory.getTextCellEditorLocator(this)));
 		}
 		return manager;
 	}
@@ -330,7 +336,8 @@
 	 */
 	protected void performDirectEdit(Point eventLocation) {
 		if (getManager().getClass() == TextDirectEditManager.class) {
-			((TextDirectEditManager) getManager()).show(eventLocation.getSWTPoint());
+			((TextDirectEditManager) getManager()).show(eventLocation
+					.getSWTPoint());
 		}
 	}
 
@@ -355,11 +362,15 @@
 
 				public void run() {
 					if (isActive() && isEditable()) {
-						if (theRequest.getExtendedData().get(RequestConstants.REQ_DIRECTEDIT_EXTENDEDDATA_INITIAL_CHAR) instanceof Character) {
-							Character initialChar = (Character) theRequest.getExtendedData().get(
-								RequestConstants.REQ_DIRECTEDIT_EXTENDEDDATA_INITIAL_CHAR);
+						if (theRequest
+								.getExtendedData()
+								.get(RequestConstants.REQ_DIRECTEDIT_EXTENDEDDATA_INITIAL_CHAR) instanceof Character) {
+							Character initialChar = (Character) theRequest
+									.getExtendedData()
+									.get(RequestConstants.REQ_DIRECTEDIT_EXTENDEDDATA_INITIAL_CHAR);
 							performDirectEdit(initialChar.charValue());
-						} else if ((theRequest instanceof DirectEditRequest) && (getEditText().equals(getLabelText()))) {
+						} else if ((theRequest instanceof DirectEditRequest)
+								&& (getEditText().equals(getLabelText()))) {
 							DirectEditRequest editRequest = (DirectEditRequest) theRequest;
 							performDirectEdit(editRequest.getLocation());
 						} else {
@@ -405,7 +416,8 @@
 	 * @generated
 	 */
 	protected void refreshUnderline() {
-		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(NotationPackage.eINSTANCE.getFontStyle());
+		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(
+				NotationPackage.eINSTANCE.getFontStyle());
 		if (style != null && getFigure() instanceof WrappingLabel) {
 			((WrappingLabel) getFigure()).setTextUnderline(style.isUnderline());
 		}
@@ -415,9 +427,11 @@
 	 * @generated
 	 */
 	protected void refreshStrikeThrough() {
-		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(NotationPackage.eINSTANCE.getFontStyle());
+		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(
+				NotationPackage.eINSTANCE.getFontStyle());
 		if (style != null && getFigure() instanceof WrappingLabel) {
-			((WrappingLabel) getFigure()).setTextStrikeThrough(style.isStrikeThrough());
+			((WrappingLabel) getFigure()).setTextStrikeThrough(style
+					.isStrikeThrough());
 		}
 	}
 
@@ -425,11 +439,13 @@
 	 * @generated
 	 */
 	protected void refreshFont() {
-		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(NotationPackage.eINSTANCE.getFontStyle());
+		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(
+				NotationPackage.eINSTANCE.getFontStyle());
 		if (style != null) {
-			FontData fontData = new FontData(style.getFontName(), style.getFontHeight(), (style.isBold() ? SWT.BOLD
-				: SWT.NORMAL)
-				| (style.isItalic() ? SWT.ITALIC : SWT.NORMAL));
+			FontData fontData = new FontData(style.getFontName(),
+					style.getFontHeight(), (style.isBold() ? SWT.BOLD
+							: SWT.NORMAL)
+							| (style.isItalic() ? SWT.ITALIC : SWT.NORMAL));
 			setFont(fontData);
 		}
 	}
@@ -447,9 +463,11 @@
 	protected void addSemanticListeners() {
 		if (getParser() instanceof ISemanticParser) {
 			EObject element = resolveSemanticElement();
-			parserElements = ((ISemanticParser) getParser()).getSemanticElementsBeingParsed(element);
+			parserElements = ((ISemanticParser) getParser())
+					.getSemanticElementsBeingParsed(element);
 			for (int i = 0; i < parserElements.size(); i++) {
-				addListenerFilter("SemanticModel" + i, this, (EObject) parserElements.get(i)); //$NON-NLS-1$
+				addListenerFilter(
+						"SemanticModel" + i, this, (EObject) parserElements.get(i)); //$NON-NLS-1$
 			}
 		} else {
 			super.addSemanticListeners();
@@ -515,17 +533,25 @@
 		if (NotationPackage.eINSTANCE.getFontStyle_FontColor().equals(feature)) {
 			Integer c = (Integer) event.getNewValue();
 			setFontColor(DiagramColorRegistry.getInstance().getColor(c));
-		} else if (NotationPackage.eINSTANCE.getFontStyle_Underline().equals(feature)) {
+		} else if (NotationPackage.eINSTANCE.getFontStyle_Underline().equals(
+				feature)) {
 			refreshUnderline();
-		} else if (NotationPackage.eINSTANCE.getFontStyle_StrikeThrough().equals(feature)) {
+		} else if (NotationPackage.eINSTANCE.getFontStyle_StrikeThrough()
+				.equals(feature)) {
 			refreshStrikeThrough();
-		} else if (NotationPackage.eINSTANCE.getFontStyle_FontHeight().equals(feature)
-			|| NotationPackage.eINSTANCE.getFontStyle_FontName().equals(feature)
-			|| NotationPackage.eINSTANCE.getFontStyle_Bold().equals(feature)
-			|| NotationPackage.eINSTANCE.getFontStyle_Italic().equals(feature)) {
+		} else if (NotationPackage.eINSTANCE.getFontStyle_FontHeight().equals(
+				feature)
+				|| NotationPackage.eINSTANCE.getFontStyle_FontName().equals(
+						feature)
+				|| NotationPackage.eINSTANCE.getFontStyle_Bold()
+						.equals(feature)
+				|| NotationPackage.eINSTANCE.getFontStyle_Italic().equals(
+						feature)) {
 			refreshFont();
 		} else {
-			if (getParser() != null && getParser().isAffectingEvent(event, getParserOptions().intValue())) {
+			if (getParser() != null
+					&& getParser().isAffectingEvent(event,
+							getParserOptions().intValue())) {
 				refreshLabel();
 			}
 			if (getParser() instanceof ISemanticParser) {
Index: src/org/unicase/ui/diagram/urml/edit/parts/ServiceNameEditPart.java
===================================================================
--- src/org/unicase/ui/diagram/urml/edit/parts/ServiceNameEditPart.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/edit/parts/ServiceNameEditPart.java	(working copy)
@@ -52,7 +52,8 @@
 /**
  * @generated
  */
-public class ServiceNameEditPart extends CompartmentEditPart implements ITextAwareEditPart {
+public class ServiceNameEditPart extends CompartmentEditPart implements
+		ITextAwareEditPart {
 
 	/**
 	 * @generated
@@ -72,7 +73,7 @@
 	/**
 	 * @generated
 	 */
-	private List parserElements;
+	private List<?> parserElements;
 
 	/**
 	 * @generated
@@ -91,25 +92,12 @@
 	 */
 	protected void createDefaultEditPolicies() {
 		super.createDefaultEditPolicies();
-		installEditPolicy(EditPolicy.SELECTION_FEEDBACK_ROLE, new UrmlTextSelectionEditPolicy());
-		installEditPolicy(EditPolicy.DIRECT_EDIT_ROLE, new LabelDirectEditPolicy());
-		installEditPolicy(EditPolicy.PRIMARY_DRAG_ROLE, new NonResizableEditPolicy() {
-
-			protected List createSelectionHandles() {
-				List handles = new ArrayList();
-				NonResizableHandleKit.addMoveHandle((GraphicalEditPart) getHost(), handles);
-				((MoveHandle) handles.get(0)).setBorder(null);
-				return handles;
-			}
-
-			public Command getCommand(Request request) {
-				return null;
-			}
-
-			public boolean understandsRequest(Request request) {
-				return false;
-			}
-		});
+		installEditPolicy(EditPolicy.SELECTION_FEEDBACK_ROLE,
+				new UrmlTextSelectionEditPolicy());
+		installEditPolicy(EditPolicy.DIRECT_EDIT_ROLE,
+				new LabelDirectEditPolicy());
+		installEditPolicy(EditPolicy.PRIMARY_DRAG_ROLE,
+				new URMLDiagramEditPart.NodeLabelDragPolicy());
 	}
 
 	/**
@@ -159,7 +147,8 @@
 	/**
 	 * @generated
 	 */
-	public void setLabel(org.unicase.ui.unicasecommon.diagram.figures.Label figure) {
+	public void setLabel(
+			org.unicase.ui.unicasecommon.diagram.figures.Label figure) {
 		unregisterVisuals();
 		setFigure(figure);
 		defaultText = getLabelTextHelper(figure);
@@ -170,6 +159,7 @@
 	/**
 	 * @generated
 	 */
+	@SuppressWarnings("rawtypes")
 	protected List getModelChildren() {
 		return Collections.EMPTY_LIST;
 	}
@@ -202,7 +192,9 @@
 		String text = null;
 		EObject parserElement = getParserElement();
 		if (parserElement != null && getParser() != null) {
-			text = getParser().getPrintString(new EObjectAdapter(parserElement), getParserOptions().intValue());
+			text = getParser().getPrintString(
+					new EObjectAdapter(parserElement),
+					getParserOptions().intValue());
 		}
 		if (text == null || text.length() == 0) {
 			text = defaultText;
@@ -232,7 +224,9 @@
 		if (getParserElement() == null || getParser() == null) {
 			return ""; //$NON-NLS-1$
 		}
-		return getParser().getEditString(new EObjectAdapter(getParserElement()), getParserOptions().intValue());
+		return getParser().getEditString(
+				new EObjectAdapter(getParserElement()),
+				getParserOptions().intValue());
 	}
 
 	/**
@@ -253,14 +247,20 @@
 					final EObject element = getParserElement();
 					final IParser parser = getParser();
 					try {
-						IParserEditStatus valid = (IParserEditStatus) getEditingDomain().runExclusive(
-							new RunnableWithResult.Impl() {
+						IParserEditStatus valid = (IParserEditStatus) getEditingDomain()
+								.runExclusive(
+										new RunnableWithResult.Impl<IParserEditStatus>() {
 
-								public void run() {
-									setResult(parser.isValidEditString(new EObjectAdapter(element), (String) value));
-								}
-							});
-						return valid.getCode() == ParserEditStatus.EDITABLE ? null : valid.getMessage();
+											public void run() {
+												setResult(parser
+														.isValidEditString(
+																new EObjectAdapter(
+																		element),
+																(String) value));
+											}
+										});
+						return valid.getCode() == ParserEditStatus.EDITABLE ? null
+								: valid.getMessage();
 					} catch (InterruptedException ie) {
 						ie.printStackTrace();
 					}
@@ -279,7 +279,8 @@
 		if (getParserElement() == null || getParser() == null) {
 			return null;
 		}
-		return getParser().getCompletionProcessor(new EObjectAdapter(getParserElement()));
+		return getParser().getCompletionProcessor(
+				new EObjectAdapter(getParserElement()));
 	}
 
 	/**
@@ -294,8 +295,12 @@
 	 */
 	public IParser getParser() {
 		if (parser == null) {
-			parser = UrmlParserProvider.getParser(UrmlElementTypes.Service_2007, getParserElement(),
-				UrmlVisualIDRegistry.getType(org.unicase.ui.diagram.urml.edit.parts.ServiceNameEditPart.VISUAL_ID));
+			parser = UrmlParserProvider
+					.getParser(
+							UrmlElementTypes.Service_2007,
+							getParserElement(),
+							UrmlVisualIDRegistry
+									.getType(org.unicase.ui.diagram.urml.edit.parts.ServiceNameEditPart.VISUAL_ID));
 		}
 		return parser;
 	}
@@ -305,8 +310,9 @@
 	 */
 	protected DirectEditManager getManager() {
 		if (manager == null) {
-			setManager(new TextDirectEditManager(this, TextDirectEditManager.getTextCellEditorClass(this),
-				UrmlEditPartFactory.getTextCellEditorLocator(this)));
+			setManager(new TextDirectEditManager(this,
+					TextDirectEditManager.getTextCellEditorClass(this),
+					UrmlEditPartFactory.getTextCellEditorLocator(this)));
 		}
 		return manager;
 	}
@@ -330,7 +336,8 @@
 	 */
 	protected void performDirectEdit(Point eventLocation) {
 		if (getManager().getClass() == TextDirectEditManager.class) {
-			((TextDirectEditManager) getManager()).show(eventLocation.getSWTPoint());
+			((TextDirectEditManager) getManager()).show(eventLocation
+					.getSWTPoint());
 		}
 	}
 
@@ -355,11 +362,15 @@
 
 				public void run() {
 					if (isActive() && isEditable()) {
-						if (theRequest.getExtendedData().get(RequestConstants.REQ_DIRECTEDIT_EXTENDEDDATA_INITIAL_CHAR) instanceof Character) {
-							Character initialChar = (Character) theRequest.getExtendedData().get(
-								RequestConstants.REQ_DIRECTEDIT_EXTENDEDDATA_INITIAL_CHAR);
+						if (theRequest
+								.getExtendedData()
+								.get(RequestConstants.REQ_DIRECTEDIT_EXTENDEDDATA_INITIAL_CHAR) instanceof Character) {
+							Character initialChar = (Character) theRequest
+									.getExtendedData()
+									.get(RequestConstants.REQ_DIRECTEDIT_EXTENDEDDATA_INITIAL_CHAR);
 							performDirectEdit(initialChar.charValue());
-						} else if ((theRequest instanceof DirectEditRequest) && (getEditText().equals(getLabelText()))) {
+						} else if ((theRequest instanceof DirectEditRequest)
+								&& (getEditText().equals(getLabelText()))) {
 							DirectEditRequest editRequest = (DirectEditRequest) theRequest;
 							performDirectEdit(editRequest.getLocation());
 						} else {
@@ -405,7 +416,8 @@
 	 * @generated
 	 */
 	protected void refreshUnderline() {
-		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(NotationPackage.eINSTANCE.getFontStyle());
+		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(
+				NotationPackage.eINSTANCE.getFontStyle());
 		if (style != null && getFigure() instanceof WrappingLabel) {
 			((WrappingLabel) getFigure()).setTextUnderline(style.isUnderline());
 		}
@@ -415,9 +427,11 @@
 	 * @generated
 	 */
 	protected void refreshStrikeThrough() {
-		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(NotationPackage.eINSTANCE.getFontStyle());
+		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(
+				NotationPackage.eINSTANCE.getFontStyle());
 		if (style != null && getFigure() instanceof WrappingLabel) {
-			((WrappingLabel) getFigure()).setTextStrikeThrough(style.isStrikeThrough());
+			((WrappingLabel) getFigure()).setTextStrikeThrough(style
+					.isStrikeThrough());
 		}
 	}
 
@@ -425,11 +439,13 @@
 	 * @generated
 	 */
 	protected void refreshFont() {
-		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(NotationPackage.eINSTANCE.getFontStyle());
+		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(
+				NotationPackage.eINSTANCE.getFontStyle());
 		if (style != null) {
-			FontData fontData = new FontData(style.getFontName(), style.getFontHeight(), (style.isBold() ? SWT.BOLD
-				: SWT.NORMAL)
-				| (style.isItalic() ? SWT.ITALIC : SWT.NORMAL));
+			FontData fontData = new FontData(style.getFontName(),
+					style.getFontHeight(), (style.isBold() ? SWT.BOLD
+							: SWT.NORMAL)
+							| (style.isItalic() ? SWT.ITALIC : SWT.NORMAL));
 			setFont(fontData);
 		}
 	}
@@ -447,9 +463,11 @@
 	protected void addSemanticListeners() {
 		if (getParser() instanceof ISemanticParser) {
 			EObject element = resolveSemanticElement();
-			parserElements = ((ISemanticParser) getParser()).getSemanticElementsBeingParsed(element);
+			parserElements = ((ISemanticParser) getParser())
+					.getSemanticElementsBeingParsed(element);
 			for (int i = 0; i < parserElements.size(); i++) {
-				addListenerFilter("SemanticModel" + i, this, (EObject) parserElements.get(i)); //$NON-NLS-1$
+				addListenerFilter(
+						"SemanticModel" + i, this, (EObject) parserElements.get(i)); //$NON-NLS-1$
 			}
 		} else {
 			super.addSemanticListeners();
@@ -515,17 +533,25 @@
 		if (NotationPackage.eINSTANCE.getFontStyle_FontColor().equals(feature)) {
 			Integer c = (Integer) event.getNewValue();
 			setFontColor(DiagramColorRegistry.getInstance().getColor(c));
-		} else if (NotationPackage.eINSTANCE.getFontStyle_Underline().equals(feature)) {
+		} else if (NotationPackage.eINSTANCE.getFontStyle_Underline().equals(
+				feature)) {
 			refreshUnderline();
-		} else if (NotationPackage.eINSTANCE.getFontStyle_StrikeThrough().equals(feature)) {
+		} else if (NotationPackage.eINSTANCE.getFontStyle_StrikeThrough()
+				.equals(feature)) {
 			refreshStrikeThrough();
-		} else if (NotationPackage.eINSTANCE.getFontStyle_FontHeight().equals(feature)
-			|| NotationPackage.eINSTANCE.getFontStyle_FontName().equals(feature)
-			|| NotationPackage.eINSTANCE.getFontStyle_Bold().equals(feature)
-			|| NotationPackage.eINSTANCE.getFontStyle_Italic().equals(feature)) {
+		} else if (NotationPackage.eINSTANCE.getFontStyle_FontHeight().equals(
+				feature)
+				|| NotationPackage.eINSTANCE.getFontStyle_FontName().equals(
+						feature)
+				|| NotationPackage.eINSTANCE.getFontStyle_Bold()
+						.equals(feature)
+				|| NotationPackage.eINSTANCE.getFontStyle_Italic().equals(
+						feature)) {
 			refreshFont();
 		} else {
-			if (getParser() != null && getParser().isAffectingEvent(event, getParserOptions().intValue())) {
+			if (getParser() != null
+					&& getParser().isAffectingEvent(event,
+							getParserOptions().intValue())) {
 				refreshLabel();
 			}
 			if (getParser() instanceof ISemanticParser) {
Index: src/org/unicase/ui/diagram/urml/edit/parts/GoalReference3EditPart.java
===================================================================
--- src/org/unicase/ui/diagram/urml/edit/parts/GoalReference3EditPart.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/edit/parts/GoalReference3EditPart.java	(working copy)
@@ -13,7 +13,8 @@
 /**
  * @generated
  */
-public class GoalReference3EditPart extends ConnectionNodeEditPart implements ITreeBranchEditPart {
+public class GoalReference3EditPart extends ConnectionNodeEditPart implements
+		ITreeBranchEditPart {
 
 	/**
 	 * @generated
@@ -32,7 +33,8 @@
 	 */
 	protected void createDefaultEditPolicies() {
 		super.createDefaultEditPolicies();
-		installEditPolicy(EditPolicyRoles.SEMANTIC_ROLE, new GoalReference3ItemSemanticEditPolicy());
+		installEditPolicy(EditPolicyRoles.SEMANTIC_ROLE,
+				new GoalReference3ItemSemanticEditPolicy());
 	}
 
 	/**
@@ -40,8 +42,9 @@
 	 */
 	protected boolean addFixedChild(EditPart childEditPart) {
 		if (childEditPart instanceof GoalReferenceWeight2EditPart) {
-			((GoalReferenceWeight2EditPart) childEditPart).setLabel(getPrimaryShape()
-				.getFigureGoalInfluenceGoalsFigure_weight());
+			((GoalReferenceWeight2EditPart) childEditPart)
+					.setLabel(getPrimaryShape()
+							.getFigureGoalInfluenceGoalsFigure_weight());
 			return true;
 		}
 		return false;
@@ -54,7 +57,7 @@
 		if (addFixedChild(childEditPart)) {
 			return;
 		}
-		super.addChildVisual(childEditPart, -1);
+		super.addChildVisual(childEditPart, index);
 	}
 
 	/**
@@ -128,25 +131,6 @@
 		/**
 		 * @generated
 		 */
-		private boolean myUseLocalCoordinates = false;
-
-		/**
-		 * @generated
-		 */
-		protected boolean useLocalCoordinates() {
-			return myUseLocalCoordinates;
-		}
-
-		/**
-		 * @generated
-		 */
-		protected void setUseLocalCoordinates(boolean useLocalCoordinates) {
-			myUseLocalCoordinates = useLocalCoordinates;
-		}
-
-		/**
-		 * @generated
-		 */
 		public WrappingLabel getFigureGoalInfluenceGoalsFigure_weight() {
 			return fFigureGoalInfluenceGoalsFigure_weight;
 		}
Index: src/org/unicase/ui/diagram/urml/edit/parts/MotivatesLabel2EditPart.java
===================================================================
--- src/org/unicase/ui/diagram/urml/edit/parts/MotivatesLabel2EditPart.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/edit/parts/MotivatesLabel2EditPart.java	(working copy)
@@ -50,7 +50,8 @@
 /**
  * @generated
  */
-public class MotivatesLabel2EditPart extends LabelEditPart implements ITextAwareEditPart {
+public class MotivatesLabel2EditPart extends LabelEditPart implements
+		ITextAwareEditPart {
 
 	/**
 	 * @generated
@@ -70,7 +71,7 @@
 	/**
 	 * @generated
 	 */
-	private List parserElements;
+	private List<?> parserElements;
 
 	/**
 	 * @generated
@@ -81,8 +82,10 @@
 	 * @generated
 	 */
 	static {
-		registerSnapBackPosition(UrmlVisualIDRegistry
-			.getType(org.unicase.ui.diagram.urml.edit.parts.MotivatesLabel2EditPart.VISUAL_ID), new Point(0, 20));
+		registerSnapBackPosition(
+				UrmlVisualIDRegistry
+						.getType(org.unicase.ui.diagram.urml.edit.parts.MotivatesLabel2EditPart.VISUAL_ID),
+				new Point(0, 20));
 	}
 
 	/**
@@ -97,16 +100,12 @@
 	 */
 	protected void createDefaultEditPolicies() {
 		super.createDefaultEditPolicies();
-		installEditPolicy(EditPolicy.DIRECT_EDIT_ROLE, new LabelDirectEditPolicy());
-		installEditPolicy(EditPolicy.SELECTION_FEEDBACK_ROLE, new UrmlTextSelectionEditPolicy());
-		installEditPolicy(EditPolicy.PRIMARY_DRAG_ROLE, new NonResizableLabelEditPolicy() {
-
-			protected List createSelectionHandles() {
-				MoveHandle mh = new MoveHandle((GraphicalEditPart) getHost());
-				mh.setBorder(null);
-				return Collections.singletonList(mh);
-			}
-		});
+		installEditPolicy(EditPolicy.DIRECT_EDIT_ROLE,
+				new LabelDirectEditPolicy());
+		installEditPolicy(EditPolicy.SELECTION_FEEDBACK_ROLE,
+				new UrmlTextSelectionEditPolicy());
+		installEditPolicy(EditPolicy.PRIMARY_DRAG_ROLE,
+				new URMLDiagramEditPart.LinkLabelDragPolicy());
 	}
 
 	/**
@@ -174,6 +173,7 @@
 	/**
 	 * @generated
 	 */
+	@SuppressWarnings("rawtypes")
 	protected List getModelChildren() {
 		return Collections.EMPTY_LIST;
 	}
@@ -206,7 +206,9 @@
 		String text = null;
 		EObject parserElement = getParserElement();
 		if (parserElement != null && getParser() != null) {
-			text = getParser().getPrintString(new EObjectAdapter(parserElement), getParserOptions().intValue());
+			text = getParser().getPrintString(
+					new EObjectAdapter(parserElement),
+					getParserOptions().intValue());
 		}
 		if (text == null || text.length() == 0) {
 			text = defaultText;
@@ -236,7 +238,9 @@
 		if (getParserElement() == null || getParser() == null) {
 			return ""; //$NON-NLS-1$
 		}
-		return getParser().getEditString(new EObjectAdapter(getParserElement()), getParserOptions().intValue());
+		return getParser().getEditString(
+				new EObjectAdapter(getParserElement()),
+				getParserOptions().intValue());
 	}
 
 	/**
@@ -257,14 +261,20 @@
 					final EObject element = getParserElement();
 					final IParser parser = getParser();
 					try {
-						IParserEditStatus valid = (IParserEditStatus) getEditingDomain().runExclusive(
-							new RunnableWithResult.Impl() {
+						IParserEditStatus valid = (IParserEditStatus) getEditingDomain()
+								.runExclusive(
+										new RunnableWithResult.Impl<IParserEditStatus>() {
 
-								public void run() {
-									setResult(parser.isValidEditString(new EObjectAdapter(element), (String) value));
-								}
-							});
-						return valid.getCode() == ParserEditStatus.EDITABLE ? null : valid.getMessage();
+											public void run() {
+												setResult(parser
+														.isValidEditString(
+																new EObjectAdapter(
+																		element),
+																(String) value));
+											}
+										});
+						return valid.getCode() == ParserEditStatus.EDITABLE ? null
+								: valid.getMessage();
 					} catch (InterruptedException ie) {
 						ie.printStackTrace();
 					}
@@ -283,7 +293,8 @@
 		if (getParserElement() == null || getParser() == null) {
 			return null;
 		}
-		return getParser().getCompletionProcessor(new EObjectAdapter(getParserElement()));
+		return getParser().getCompletionProcessor(
+				new EObjectAdapter(getParserElement()));
 	}
 
 	/**
@@ -298,8 +309,12 @@
 	 */
 	public IParser getParser() {
 		if (parser == null) {
-			parser = UrmlParserProvider.getParser(UrmlElementTypes.ServiceSubServices_4022, getParserElement(),
-				UrmlVisualIDRegistry.getType(org.unicase.ui.diagram.urml.edit.parts.MotivatesLabel2EditPart.VISUAL_ID));
+			parser = UrmlParserProvider
+					.getParser(
+							UrmlElementTypes.ServiceSubServices_4022,
+							getParserElement(),
+							UrmlVisualIDRegistry
+									.getType(org.unicase.ui.diagram.urml.edit.parts.MotivatesLabel2EditPart.VISUAL_ID));
 		}
 		return parser;
 	}
@@ -309,8 +324,9 @@
 	 */
 	protected DirectEditManager getManager() {
 		if (manager == null) {
-			setManager(new TextDirectEditManager(this, TextDirectEditManager.getTextCellEditorClass(this),
-				UrmlEditPartFactory.getTextCellEditorLocator(this)));
+			setManager(new TextDirectEditManager(this,
+					TextDirectEditManager.getTextCellEditorClass(this),
+					UrmlEditPartFactory.getTextCellEditorLocator(this)));
 		}
 		return manager;
 	}
@@ -334,7 +350,8 @@
 	 */
 	protected void performDirectEdit(Point eventLocation) {
 		if (getManager().getClass() == TextDirectEditManager.class) {
-			((TextDirectEditManager) getManager()).show(eventLocation.getSWTPoint());
+			((TextDirectEditManager) getManager()).show(eventLocation
+					.getSWTPoint());
 		}
 	}
 
@@ -359,11 +376,15 @@
 
 				public void run() {
 					if (isActive() && isEditable()) {
-						if (theRequest.getExtendedData().get(RequestConstants.REQ_DIRECTEDIT_EXTENDEDDATA_INITIAL_CHAR) instanceof Character) {
-							Character initialChar = (Character) theRequest.getExtendedData().get(
-								RequestConstants.REQ_DIRECTEDIT_EXTENDEDDATA_INITIAL_CHAR);
+						if (theRequest
+								.getExtendedData()
+								.get(RequestConstants.REQ_DIRECTEDIT_EXTENDEDDATA_INITIAL_CHAR) instanceof Character) {
+							Character initialChar = (Character) theRequest
+									.getExtendedData()
+									.get(RequestConstants.REQ_DIRECTEDIT_EXTENDEDDATA_INITIAL_CHAR);
 							performDirectEdit(initialChar.charValue());
-						} else if ((theRequest instanceof DirectEditRequest) && (getEditText().equals(getLabelText()))) {
+						} else if ((theRequest instanceof DirectEditRequest)
+								&& (getEditText().equals(getLabelText()))) {
 							DirectEditRequest editRequest = (DirectEditRequest) theRequest;
 							performDirectEdit(editRequest.getLocation());
 						} else {
@@ -409,7 +430,8 @@
 	 * @generated
 	 */
 	protected void refreshUnderline() {
-		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(NotationPackage.eINSTANCE.getFontStyle());
+		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(
+				NotationPackage.eINSTANCE.getFontStyle());
 		if (style != null && getFigure() instanceof WrappingLabel) {
 			((WrappingLabel) getFigure()).setTextUnderline(style.isUnderline());
 		}
@@ -419,9 +441,11 @@
 	 * @generated
 	 */
 	protected void refreshStrikeThrough() {
-		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(NotationPackage.eINSTANCE.getFontStyle());
+		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(
+				NotationPackage.eINSTANCE.getFontStyle());
 		if (style != null && getFigure() instanceof WrappingLabel) {
-			((WrappingLabel) getFigure()).setTextStrikeThrough(style.isStrikeThrough());
+			((WrappingLabel) getFigure()).setTextStrikeThrough(style
+					.isStrikeThrough());
 		}
 	}
 
@@ -429,11 +453,13 @@
 	 * @generated
 	 */
 	protected void refreshFont() {
-		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(NotationPackage.eINSTANCE.getFontStyle());
+		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(
+				NotationPackage.eINSTANCE.getFontStyle());
 		if (style != null) {
-			FontData fontData = new FontData(style.getFontName(), style.getFontHeight(), (style.isBold() ? SWT.BOLD
-				: SWT.NORMAL)
-				| (style.isItalic() ? SWT.ITALIC : SWT.NORMAL));
+			FontData fontData = new FontData(style.getFontName(),
+					style.getFontHeight(), (style.isBold() ? SWT.BOLD
+							: SWT.NORMAL)
+							| (style.isItalic() ? SWT.ITALIC : SWT.NORMAL));
 			setFont(fontData);
 		}
 	}
@@ -451,9 +477,11 @@
 	protected void addSemanticListeners() {
 		if (getParser() instanceof ISemanticParser) {
 			EObject element = resolveSemanticElement();
-			parserElements = ((ISemanticParser) getParser()).getSemanticElementsBeingParsed(element);
+			parserElements = ((ISemanticParser) getParser())
+					.getSemanticElementsBeingParsed(element);
 			for (int i = 0; i < parserElements.size(); i++) {
-				addListenerFilter("SemanticModel" + i, this, (EObject) parserElements.get(i)); //$NON-NLS-1$
+				addListenerFilter(
+						"SemanticModel" + i, this, (EObject) parserElements.get(i)); //$NON-NLS-1$
 			}
 		} else {
 			super.addSemanticListeners();
@@ -503,17 +531,25 @@
 		if (NotationPackage.eINSTANCE.getFontStyle_FontColor().equals(feature)) {
 			Integer c = (Integer) event.getNewValue();
 			setFontColor(DiagramColorRegistry.getInstance().getColor(c));
-		} else if (NotationPackage.eINSTANCE.getFontStyle_Underline().equals(feature)) {
+		} else if (NotationPackage.eINSTANCE.getFontStyle_Underline().equals(
+				feature)) {
 			refreshUnderline();
-		} else if (NotationPackage.eINSTANCE.getFontStyle_StrikeThrough().equals(feature)) {
+		} else if (NotationPackage.eINSTANCE.getFontStyle_StrikeThrough()
+				.equals(feature)) {
 			refreshStrikeThrough();
-		} else if (NotationPackage.eINSTANCE.getFontStyle_FontHeight().equals(feature)
-			|| NotationPackage.eINSTANCE.getFontStyle_FontName().equals(feature)
-			|| NotationPackage.eINSTANCE.getFontStyle_Bold().equals(feature)
-			|| NotationPackage.eINSTANCE.getFontStyle_Italic().equals(feature)) {
+		} else if (NotationPackage.eINSTANCE.getFontStyle_FontHeight().equals(
+				feature)
+				|| NotationPackage.eINSTANCE.getFontStyle_FontName().equals(
+						feature)
+				|| NotationPackage.eINSTANCE.getFontStyle_Bold()
+						.equals(feature)
+				|| NotationPackage.eINSTANCE.getFontStyle_Italic().equals(
+						feature)) {
 			refreshFont();
 		} else {
-			if (getParser() != null && getParser().isAffectingEvent(event, getParserOptions().intValue())) {
+			if (getParser() != null
+					&& getParser().isAffectingEvent(event,
+							getParserOptions().intValue())) {
 				refreshLabel();
 			}
 			if (getParser() instanceof ISemanticParser) {
Index: src/org/unicase/ui/diagram/urml/edit/parts/MitigatesLabelEditPart.java
===================================================================
--- src/org/unicase/ui/diagram/urml/edit/parts/MitigatesLabelEditPart.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/edit/parts/MitigatesLabelEditPart.java	(working copy)
@@ -50,7 +50,8 @@
 /**
  * @generated
  */
-public class MitigatesLabelEditPart extends LabelEditPart implements ITextAwareEditPart {
+public class MitigatesLabelEditPart extends LabelEditPart implements
+		ITextAwareEditPart {
 
 	/**
 	 * @generated
@@ -70,7 +71,7 @@
 	/**
 	 * @generated
 	 */
-	private List parserElements;
+	private List<?> parserElements;
 
 	/**
 	 * @generated
@@ -81,8 +82,10 @@
 	 * @generated
 	 */
 	static {
-		registerSnapBackPosition(UrmlVisualIDRegistry
-			.getType(org.unicase.ui.diagram.urml.edit.parts.MitigatesLabelEditPart.VISUAL_ID), new Point(0, 20));
+		registerSnapBackPosition(
+				UrmlVisualIDRegistry
+						.getType(org.unicase.ui.diagram.urml.edit.parts.MitigatesLabelEditPart.VISUAL_ID),
+				new Point(0, 20));
 	}
 
 	/**
@@ -97,16 +100,12 @@
 	 */
 	protected void createDefaultEditPolicies() {
 		super.createDefaultEditPolicies();
-		installEditPolicy(EditPolicy.DIRECT_EDIT_ROLE, new LabelDirectEditPolicy());
-		installEditPolicy(EditPolicy.SELECTION_FEEDBACK_ROLE, new UrmlTextSelectionEditPolicy());
-		installEditPolicy(EditPolicy.PRIMARY_DRAG_ROLE, new NonResizableLabelEditPolicy() {
-
-			protected List createSelectionHandles() {
-				MoveHandle mh = new MoveHandle((GraphicalEditPart) getHost());
-				mh.setBorder(null);
-				return Collections.singletonList(mh);
-			}
-		});
+		installEditPolicy(EditPolicy.DIRECT_EDIT_ROLE,
+				new LabelDirectEditPolicy());
+		installEditPolicy(EditPolicy.SELECTION_FEEDBACK_ROLE,
+				new UrmlTextSelectionEditPolicy());
+		installEditPolicy(EditPolicy.PRIMARY_DRAG_ROLE,
+				new URMLDiagramEditPart.LinkLabelDragPolicy());
 	}
 
 	/**
@@ -174,6 +173,7 @@
 	/**
 	 * @generated
 	 */
+	@SuppressWarnings("rawtypes")
 	protected List getModelChildren() {
 		return Collections.EMPTY_LIST;
 	}
@@ -206,7 +206,9 @@
 		String text = null;
 		EObject parserElement = getParserElement();
 		if (parserElement != null && getParser() != null) {
-			text = getParser().getPrintString(new EObjectAdapter(parserElement), getParserOptions().intValue());
+			text = getParser().getPrintString(
+					new EObjectAdapter(parserElement),
+					getParserOptions().intValue());
 		}
 		if (text == null || text.length() == 0) {
 			text = defaultText;
@@ -236,7 +238,9 @@
 		if (getParserElement() == null || getParser() == null) {
 			return ""; //$NON-NLS-1$
 		}
-		return getParser().getEditString(new EObjectAdapter(getParserElement()), getParserOptions().intValue());
+		return getParser().getEditString(
+				new EObjectAdapter(getParserElement()),
+				getParserOptions().intValue());
 	}
 
 	/**
@@ -257,14 +261,20 @@
 					final EObject element = getParserElement();
 					final IParser parser = getParser();
 					try {
-						IParserEditStatus valid = (IParserEditStatus) getEditingDomain().runExclusive(
-							new RunnableWithResult.Impl() {
+						IParserEditStatus valid = (IParserEditStatus) getEditingDomain()
+								.runExclusive(
+										new RunnableWithResult.Impl<IParserEditStatus>() {
 
-								public void run() {
-									setResult(parser.isValidEditString(new EObjectAdapter(element), (String) value));
-								}
-							});
-						return valid.getCode() == ParserEditStatus.EDITABLE ? null : valid.getMessage();
+											public void run() {
+												setResult(parser
+														.isValidEditString(
+																new EObjectAdapter(
+																		element),
+																(String) value));
+											}
+										});
+						return valid.getCode() == ParserEditStatus.EDITABLE ? null
+								: valid.getMessage();
 					} catch (InterruptedException ie) {
 						ie.printStackTrace();
 					}
@@ -283,7 +293,8 @@
 		if (getParserElement() == null || getParser() == null) {
 			return null;
 		}
-		return getParser().getCompletionProcessor(new EObjectAdapter(getParserElement()));
+		return getParser().getCompletionProcessor(
+				new EObjectAdapter(getParserElement()));
 	}
 
 	/**
@@ -298,8 +309,12 @@
 	 */
 	public IParser getParser() {
 		if (parser == null) {
-			parser = UrmlParserProvider.getParser(UrmlElementTypes.MitigationMitigatedDangers_4012, getParserElement(),
-				UrmlVisualIDRegistry.getType(org.unicase.ui.diagram.urml.edit.parts.MitigatesLabelEditPart.VISUAL_ID));
+			parser = UrmlParserProvider
+					.getParser(
+							UrmlElementTypes.MitigationMitigatedDangers_4012,
+							getParserElement(),
+							UrmlVisualIDRegistry
+									.getType(org.unicase.ui.diagram.urml.edit.parts.MitigatesLabelEditPart.VISUAL_ID));
 		}
 		return parser;
 	}
@@ -309,8 +324,9 @@
 	 */
 	protected DirectEditManager getManager() {
 		if (manager == null) {
-			setManager(new TextDirectEditManager(this, TextDirectEditManager.getTextCellEditorClass(this),
-				UrmlEditPartFactory.getTextCellEditorLocator(this)));
+			setManager(new TextDirectEditManager(this,
+					TextDirectEditManager.getTextCellEditorClass(this),
+					UrmlEditPartFactory.getTextCellEditorLocator(this)));
 		}
 		return manager;
 	}
@@ -334,7 +350,8 @@
 	 */
 	protected void performDirectEdit(Point eventLocation) {
 		if (getManager().getClass() == TextDirectEditManager.class) {
-			((TextDirectEditManager) getManager()).show(eventLocation.getSWTPoint());
+			((TextDirectEditManager) getManager()).show(eventLocation
+					.getSWTPoint());
 		}
 	}
 
@@ -359,11 +376,15 @@
 
 				public void run() {
 					if (isActive() && isEditable()) {
-						if (theRequest.getExtendedData().get(RequestConstants.REQ_DIRECTEDIT_EXTENDEDDATA_INITIAL_CHAR) instanceof Character) {
-							Character initialChar = (Character) theRequest.getExtendedData().get(
-								RequestConstants.REQ_DIRECTEDIT_EXTENDEDDATA_INITIAL_CHAR);
+						if (theRequest
+								.getExtendedData()
+								.get(RequestConstants.REQ_DIRECTEDIT_EXTENDEDDATA_INITIAL_CHAR) instanceof Character) {
+							Character initialChar = (Character) theRequest
+									.getExtendedData()
+									.get(RequestConstants.REQ_DIRECTEDIT_EXTENDEDDATA_INITIAL_CHAR);
 							performDirectEdit(initialChar.charValue());
-						} else if ((theRequest instanceof DirectEditRequest) && (getEditText().equals(getLabelText()))) {
+						} else if ((theRequest instanceof DirectEditRequest)
+								&& (getEditText().equals(getLabelText()))) {
 							DirectEditRequest editRequest = (DirectEditRequest) theRequest;
 							performDirectEdit(editRequest.getLocation());
 						} else {
@@ -409,7 +430,8 @@
 	 * @generated
 	 */
 	protected void refreshUnderline() {
-		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(NotationPackage.eINSTANCE.getFontStyle());
+		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(
+				NotationPackage.eINSTANCE.getFontStyle());
 		if (style != null && getFigure() instanceof WrappingLabel) {
 			((WrappingLabel) getFigure()).setTextUnderline(style.isUnderline());
 		}
@@ -419,9 +441,11 @@
 	 * @generated
 	 */
 	protected void refreshStrikeThrough() {
-		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(NotationPackage.eINSTANCE.getFontStyle());
+		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(
+				NotationPackage.eINSTANCE.getFontStyle());
 		if (style != null && getFigure() instanceof WrappingLabel) {
-			((WrappingLabel) getFigure()).setTextStrikeThrough(style.isStrikeThrough());
+			((WrappingLabel) getFigure()).setTextStrikeThrough(style
+					.isStrikeThrough());
 		}
 	}
 
@@ -429,11 +453,13 @@
 	 * @generated
 	 */
 	protected void refreshFont() {
-		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(NotationPackage.eINSTANCE.getFontStyle());
+		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(
+				NotationPackage.eINSTANCE.getFontStyle());
 		if (style != null) {
-			FontData fontData = new FontData(style.getFontName(), style.getFontHeight(), (style.isBold() ? SWT.BOLD
-				: SWT.NORMAL)
-				| (style.isItalic() ? SWT.ITALIC : SWT.NORMAL));
+			FontData fontData = new FontData(style.getFontName(),
+					style.getFontHeight(), (style.isBold() ? SWT.BOLD
+							: SWT.NORMAL)
+							| (style.isItalic() ? SWT.ITALIC : SWT.NORMAL));
 			setFont(fontData);
 		}
 	}
@@ -451,9 +477,11 @@
 	protected void addSemanticListeners() {
 		if (getParser() instanceof ISemanticParser) {
 			EObject element = resolveSemanticElement();
-			parserElements = ((ISemanticParser) getParser()).getSemanticElementsBeingParsed(element);
+			parserElements = ((ISemanticParser) getParser())
+					.getSemanticElementsBeingParsed(element);
 			for (int i = 0; i < parserElements.size(); i++) {
-				addListenerFilter("SemanticModel" + i, this, (EObject) parserElements.get(i)); //$NON-NLS-1$
+				addListenerFilter(
+						"SemanticModel" + i, this, (EObject) parserElements.get(i)); //$NON-NLS-1$
 			}
 		} else {
 			super.addSemanticListeners();
@@ -503,17 +531,25 @@
 		if (NotationPackage.eINSTANCE.getFontStyle_FontColor().equals(feature)) {
 			Integer c = (Integer) event.getNewValue();
 			setFontColor(DiagramColorRegistry.getInstance().getColor(c));
-		} else if (NotationPackage.eINSTANCE.getFontStyle_Underline().equals(feature)) {
+		} else if (NotationPackage.eINSTANCE.getFontStyle_Underline().equals(
+				feature)) {
 			refreshUnderline();
-		} else if (NotationPackage.eINSTANCE.getFontStyle_StrikeThrough().equals(feature)) {
+		} else if (NotationPackage.eINSTANCE.getFontStyle_StrikeThrough()
+				.equals(feature)) {
 			refreshStrikeThrough();
-		} else if (NotationPackage.eINSTANCE.getFontStyle_FontHeight().equals(feature)
-			|| NotationPackage.eINSTANCE.getFontStyle_FontName().equals(feature)
-			|| NotationPackage.eINSTANCE.getFontStyle_Bold().equals(feature)
-			|| NotationPackage.eINSTANCE.getFontStyle_Italic().equals(feature)) {
+		} else if (NotationPackage.eINSTANCE.getFontStyle_FontHeight().equals(
+				feature)
+				|| NotationPackage.eINSTANCE.getFontStyle_FontName().equals(
+						feature)
+				|| NotationPackage.eINSTANCE.getFontStyle_Bold()
+						.equals(feature)
+				|| NotationPackage.eINSTANCE.getFontStyle_Italic().equals(
+						feature)) {
 			refreshFont();
 		} else {
-			if (getParser() != null && getParser().isAffectingEvent(event, getParserOptions().intValue())) {
+			if (getParser() != null
+					&& getParser().isAffectingEvent(event,
+							getParserOptions().intValue())) {
 				refreshLabel();
 			}
 			if (getParser() instanceof ISemanticParser) {
Index: src/org/unicase/ui/diagram/urml/edit/parts/InfluencesLabelEditPart.java
===================================================================
--- src/org/unicase/ui/diagram/urml/edit/parts/InfluencesLabelEditPart.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/edit/parts/InfluencesLabelEditPart.java	(working copy)
@@ -50,7 +50,8 @@
 /**
  * @generated
  */
-public class InfluencesLabelEditPart extends LabelEditPart implements ITextAwareEditPart {
+public class InfluencesLabelEditPart extends LabelEditPart implements
+		ITextAwareEditPart {
 
 	/**
 	 * @generated
@@ -70,7 +71,7 @@
 	/**
 	 * @generated
 	 */
-	private List parserElements;
+	private List<?> parserElements;
 
 	/**
 	 * @generated
@@ -81,8 +82,10 @@
 	 * @generated
 	 */
 	static {
-		registerSnapBackPosition(UrmlVisualIDRegistry
-			.getType(org.unicase.ui.diagram.urml.edit.parts.InfluencesLabelEditPart.VISUAL_ID), new Point(0, 20));
+		registerSnapBackPosition(
+				UrmlVisualIDRegistry
+						.getType(org.unicase.ui.diagram.urml.edit.parts.InfluencesLabelEditPart.VISUAL_ID),
+				new Point(0, 20));
 	}
 
 	/**
@@ -97,16 +100,12 @@
 	 */
 	protected void createDefaultEditPolicies() {
 		super.createDefaultEditPolicies();
-		installEditPolicy(EditPolicy.DIRECT_EDIT_ROLE, new LabelDirectEditPolicy());
-		installEditPolicy(EditPolicy.SELECTION_FEEDBACK_ROLE, new UrmlTextSelectionEditPolicy());
-		installEditPolicy(EditPolicy.PRIMARY_DRAG_ROLE, new NonResizableLabelEditPolicy() {
-
-			protected List createSelectionHandles() {
-				MoveHandle mh = new MoveHandle((GraphicalEditPart) getHost());
-				mh.setBorder(null);
-				return Collections.singletonList(mh);
-			}
-		});
+		installEditPolicy(EditPolicy.DIRECT_EDIT_ROLE,
+				new LabelDirectEditPolicy());
+		installEditPolicy(EditPolicy.SELECTION_FEEDBACK_ROLE,
+				new UrmlTextSelectionEditPolicy());
+		installEditPolicy(EditPolicy.PRIMARY_DRAG_ROLE,
+				new URMLDiagramEditPart.LinkLabelDragPolicy());
 	}
 
 	/**
@@ -174,6 +173,7 @@
 	/**
 	 * @generated
 	 */
+	@SuppressWarnings("rawtypes")
 	protected List getModelChildren() {
 		return Collections.EMPTY_LIST;
 	}
@@ -206,7 +206,9 @@
 		String text = null;
 		EObject parserElement = getParserElement();
 		if (parserElement != null && getParser() != null) {
-			text = getParser().getPrintString(new EObjectAdapter(parserElement), getParserOptions().intValue());
+			text = getParser().getPrintString(
+					new EObjectAdapter(parserElement),
+					getParserOptions().intValue());
 		}
 		if (text == null || text.length() == 0) {
 			text = defaultText;
@@ -236,7 +238,9 @@
 		if (getParserElement() == null || getParser() == null) {
 			return ""; //$NON-NLS-1$
 		}
-		return getParser().getEditString(new EObjectAdapter(getParserElement()), getParserOptions().intValue());
+		return getParser().getEditString(
+				new EObjectAdapter(getParserElement()),
+				getParserOptions().intValue());
 	}
 
 	/**
@@ -257,14 +261,20 @@
 					final EObject element = getParserElement();
 					final IParser parser = getParser();
 					try {
-						IParserEditStatus valid = (IParserEditStatus) getEditingDomain().runExclusive(
-							new RunnableWithResult.Impl() {
+						IParserEditStatus valid = (IParserEditStatus) getEditingDomain()
+								.runExclusive(
+										new RunnableWithResult.Impl<IParserEditStatus>() {
 
-								public void run() {
-									setResult(parser.isValidEditString(new EObjectAdapter(element), (String) value));
-								}
-							});
-						return valid.getCode() == ParserEditStatus.EDITABLE ? null : valid.getMessage();
+											public void run() {
+												setResult(parser
+														.isValidEditString(
+																new EObjectAdapter(
+																		element),
+																(String) value));
+											}
+										});
+						return valid.getCode() == ParserEditStatus.EDITABLE ? null
+								: valid.getMessage();
 					} catch (InterruptedException ie) {
 						ie.printStackTrace();
 					}
@@ -283,7 +293,8 @@
 		if (getParserElement() == null || getParser() == null) {
 			return null;
 		}
-		return getParser().getCompletionProcessor(new EObjectAdapter(getParserElement()));
+		return getParser().getCompletionProcessor(
+				new EObjectAdapter(getParserElement()));
 	}
 
 	/**
@@ -298,8 +309,12 @@
 	 */
 	public IParser getParser() {
 		if (parser == null) {
-			parser = UrmlParserProvider.getParser(UrmlElementTypes.GoalReference_4016, getParserElement(),
-				UrmlVisualIDRegistry.getType(org.unicase.ui.diagram.urml.edit.parts.InfluencesLabelEditPart.VISUAL_ID));
+			parser = UrmlParserProvider
+					.getParser(
+							UrmlElementTypes.GoalReference_4016,
+							getParserElement(),
+							UrmlVisualIDRegistry
+									.getType(org.unicase.ui.diagram.urml.edit.parts.InfluencesLabelEditPart.VISUAL_ID));
 		}
 		return parser;
 	}
@@ -309,8 +324,9 @@
 	 */
 	protected DirectEditManager getManager() {
 		if (manager == null) {
-			setManager(new TextDirectEditManager(this, TextDirectEditManager.getTextCellEditorClass(this),
-				UrmlEditPartFactory.getTextCellEditorLocator(this)));
+			setManager(new TextDirectEditManager(this,
+					TextDirectEditManager.getTextCellEditorClass(this),
+					UrmlEditPartFactory.getTextCellEditorLocator(this)));
 		}
 		return manager;
 	}
@@ -334,7 +350,8 @@
 	 */
 	protected void performDirectEdit(Point eventLocation) {
 		if (getManager().getClass() == TextDirectEditManager.class) {
-			((TextDirectEditManager) getManager()).show(eventLocation.getSWTPoint());
+			((TextDirectEditManager) getManager()).show(eventLocation
+					.getSWTPoint());
 		}
 	}
 
@@ -359,11 +376,15 @@
 
 				public void run() {
 					if (isActive() && isEditable()) {
-						if (theRequest.getExtendedData().get(RequestConstants.REQ_DIRECTEDIT_EXTENDEDDATA_INITIAL_CHAR) instanceof Character) {
-							Character initialChar = (Character) theRequest.getExtendedData().get(
-								RequestConstants.REQ_DIRECTEDIT_EXTENDEDDATA_INITIAL_CHAR);
+						if (theRequest
+								.getExtendedData()
+								.get(RequestConstants.REQ_DIRECTEDIT_EXTENDEDDATA_INITIAL_CHAR) instanceof Character) {
+							Character initialChar = (Character) theRequest
+									.getExtendedData()
+									.get(RequestConstants.REQ_DIRECTEDIT_EXTENDEDDATA_INITIAL_CHAR);
 							performDirectEdit(initialChar.charValue());
-						} else if ((theRequest instanceof DirectEditRequest) && (getEditText().equals(getLabelText()))) {
+						} else if ((theRequest instanceof DirectEditRequest)
+								&& (getEditText().equals(getLabelText()))) {
 							DirectEditRequest editRequest = (DirectEditRequest) theRequest;
 							performDirectEdit(editRequest.getLocation());
 						} else {
@@ -409,7 +430,8 @@
 	 * @generated
 	 */
 	protected void refreshUnderline() {
-		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(NotationPackage.eINSTANCE.getFontStyle());
+		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(
+				NotationPackage.eINSTANCE.getFontStyle());
 		if (style != null && getFigure() instanceof WrappingLabel) {
 			((WrappingLabel) getFigure()).setTextUnderline(style.isUnderline());
 		}
@@ -419,9 +441,11 @@
 	 * @generated
 	 */
 	protected void refreshStrikeThrough() {
-		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(NotationPackage.eINSTANCE.getFontStyle());
+		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(
+				NotationPackage.eINSTANCE.getFontStyle());
 		if (style != null && getFigure() instanceof WrappingLabel) {
-			((WrappingLabel) getFigure()).setTextStrikeThrough(style.isStrikeThrough());
+			((WrappingLabel) getFigure()).setTextStrikeThrough(style
+					.isStrikeThrough());
 		}
 	}
 
@@ -429,11 +453,13 @@
 	 * @generated
 	 */
 	protected void refreshFont() {
-		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(NotationPackage.eINSTANCE.getFontStyle());
+		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(
+				NotationPackage.eINSTANCE.getFontStyle());
 		if (style != null) {
-			FontData fontData = new FontData(style.getFontName(), style.getFontHeight(), (style.isBold() ? SWT.BOLD
-				: SWT.NORMAL)
-				| (style.isItalic() ? SWT.ITALIC : SWT.NORMAL));
+			FontData fontData = new FontData(style.getFontName(),
+					style.getFontHeight(), (style.isBold() ? SWT.BOLD
+							: SWT.NORMAL)
+							| (style.isItalic() ? SWT.ITALIC : SWT.NORMAL));
 			setFont(fontData);
 		}
 	}
@@ -451,9 +477,11 @@
 	protected void addSemanticListeners() {
 		if (getParser() instanceof ISemanticParser) {
 			EObject element = resolveSemanticElement();
-			parserElements = ((ISemanticParser) getParser()).getSemanticElementsBeingParsed(element);
+			parserElements = ((ISemanticParser) getParser())
+					.getSemanticElementsBeingParsed(element);
 			for (int i = 0; i < parserElements.size(); i++) {
-				addListenerFilter("SemanticModel" + i, this, (EObject) parserElements.get(i)); //$NON-NLS-1$
+				addListenerFilter(
+						"SemanticModel" + i, this, (EObject) parserElements.get(i)); //$NON-NLS-1$
 			}
 		} else {
 			super.addSemanticListeners();
@@ -503,17 +531,25 @@
 		if (NotationPackage.eINSTANCE.getFontStyle_FontColor().equals(feature)) {
 			Integer c = (Integer) event.getNewValue();
 			setFontColor(DiagramColorRegistry.getInstance().getColor(c));
-		} else if (NotationPackage.eINSTANCE.getFontStyle_Underline().equals(feature)) {
+		} else if (NotationPackage.eINSTANCE.getFontStyle_Underline().equals(
+				feature)) {
 			refreshUnderline();
-		} else if (NotationPackage.eINSTANCE.getFontStyle_StrikeThrough().equals(feature)) {
+		} else if (NotationPackage.eINSTANCE.getFontStyle_StrikeThrough()
+				.equals(feature)) {
 			refreshStrikeThrough();
-		} else if (NotationPackage.eINSTANCE.getFontStyle_FontHeight().equals(feature)
-			|| NotationPackage.eINSTANCE.getFontStyle_FontName().equals(feature)
-			|| NotationPackage.eINSTANCE.getFontStyle_Bold().equals(feature)
-			|| NotationPackage.eINSTANCE.getFontStyle_Italic().equals(feature)) {
+		} else if (NotationPackage.eINSTANCE.getFontStyle_FontHeight().equals(
+				feature)
+				|| NotationPackage.eINSTANCE.getFontStyle_FontName().equals(
+						feature)
+				|| NotationPackage.eINSTANCE.getFontStyle_Bold()
+						.equals(feature)
+				|| NotationPackage.eINSTANCE.getFontStyle_Italic().equals(
+						feature)) {
 			refreshFont();
 		} else {
-			if (getParser() != null && getParser().isAffectingEvent(event, getParserOptions().intValue())) {
+			if (getParser() != null
+					&& getParser().isAffectingEvent(event,
+							getParserOptions().intValue())) {
 				refreshLabel();
 			}
 			if (getParser() instanceof ISemanticParser) {
Index: src/org/unicase/ui/diagram/urml/edit/parts/FunctionalRequirementNameEditPart.java
===================================================================
--- src/org/unicase/ui/diagram/urml/edit/parts/FunctionalRequirementNameEditPart.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/edit/parts/FunctionalRequirementNameEditPart.java	(working copy)
@@ -52,7 +52,8 @@
 /**
  * @generated
  */
-public class FunctionalRequirementNameEditPart extends CompartmentEditPart implements ITextAwareEditPart {
+public class FunctionalRequirementNameEditPart extends CompartmentEditPart
+		implements ITextAwareEditPart {
 
 	/**
 	 * @generated
@@ -72,7 +73,7 @@
 	/**
 	 * @generated
 	 */
-	private List parserElements;
+	private List<?> parserElements;
 
 	/**
 	 * @generated
@@ -91,25 +92,12 @@
 	 */
 	protected void createDefaultEditPolicies() {
 		super.createDefaultEditPolicies();
-		installEditPolicy(EditPolicy.SELECTION_FEEDBACK_ROLE, new UrmlTextSelectionEditPolicy());
-		installEditPolicy(EditPolicy.DIRECT_EDIT_ROLE, new LabelDirectEditPolicy());
-		installEditPolicy(EditPolicy.PRIMARY_DRAG_ROLE, new NonResizableEditPolicy() {
-
-			protected List createSelectionHandles() {
-				List handles = new ArrayList();
-				NonResizableHandleKit.addMoveHandle((GraphicalEditPart) getHost(), handles);
-				((MoveHandle) handles.get(0)).setBorder(null);
-				return handles;
-			}
-
-			public Command getCommand(Request request) {
-				return null;
-			}
-
-			public boolean understandsRequest(Request request) {
-				return false;
-			}
-		});
+		installEditPolicy(EditPolicy.SELECTION_FEEDBACK_ROLE,
+				new UrmlTextSelectionEditPolicy());
+		installEditPolicy(EditPolicy.DIRECT_EDIT_ROLE,
+				new LabelDirectEditPolicy());
+		installEditPolicy(EditPolicy.PRIMARY_DRAG_ROLE,
+				new URMLDiagramEditPart.NodeLabelDragPolicy());
 	}
 
 	/**
@@ -159,7 +147,8 @@
 	/**
 	 * @generated
 	 */
-	public void setLabel(org.unicase.ui.unicasecommon.diagram.figures.Label figure) {
+	public void setLabel(
+			org.unicase.ui.unicasecommon.diagram.figures.Label figure) {
 		unregisterVisuals();
 		setFigure(figure);
 		defaultText = getLabelTextHelper(figure);
@@ -170,6 +159,7 @@
 	/**
 	 * @generated
 	 */
+	@SuppressWarnings("rawtypes")
 	protected List getModelChildren() {
 		return Collections.EMPTY_LIST;
 	}
@@ -202,7 +192,9 @@
 		String text = null;
 		EObject parserElement = getParserElement();
 		if (parserElement != null && getParser() != null) {
-			text = getParser().getPrintString(new EObjectAdapter(parserElement), getParserOptions().intValue());
+			text = getParser().getPrintString(
+					new EObjectAdapter(parserElement),
+					getParserOptions().intValue());
 		}
 		if (text == null || text.length() == 0) {
 			text = defaultText;
@@ -232,7 +224,9 @@
 		if (getParserElement() == null || getParser() == null) {
 			return ""; //$NON-NLS-1$
 		}
-		return getParser().getEditString(new EObjectAdapter(getParserElement()), getParserOptions().intValue());
+		return getParser().getEditString(
+				new EObjectAdapter(getParserElement()),
+				getParserOptions().intValue());
 	}
 
 	/**
@@ -253,14 +247,20 @@
 					final EObject element = getParserElement();
 					final IParser parser = getParser();
 					try {
-						IParserEditStatus valid = (IParserEditStatus) getEditingDomain().runExclusive(
-							new RunnableWithResult.Impl() {
+						IParserEditStatus valid = (IParserEditStatus) getEditingDomain()
+								.runExclusive(
+										new RunnableWithResult.Impl<IParserEditStatus>() {
 
-								public void run() {
-									setResult(parser.isValidEditString(new EObjectAdapter(element), (String) value));
-								}
-							});
-						return valid.getCode() == ParserEditStatus.EDITABLE ? null : valid.getMessage();
+											public void run() {
+												setResult(parser
+														.isValidEditString(
+																new EObjectAdapter(
+																		element),
+																(String) value));
+											}
+										});
+						return valid.getCode() == ParserEditStatus.EDITABLE ? null
+								: valid.getMessage();
 					} catch (InterruptedException ie) {
 						ie.printStackTrace();
 					}
@@ -279,7 +279,8 @@
 		if (getParserElement() == null || getParser() == null) {
 			return null;
 		}
-		return getParser().getCompletionProcessor(new EObjectAdapter(getParserElement()));
+		return getParser().getCompletionProcessor(
+				new EObjectAdapter(getParserElement()));
 	}
 
 	/**
@@ -294,9 +295,12 @@
 	 */
 	public IParser getParser() {
 		if (parser == null) {
-			parser = UrmlParserProvider.getParser(UrmlElementTypes.FunctionalRequirement_2006, getParserElement(),
-				UrmlVisualIDRegistry
-					.getType(org.unicase.ui.diagram.urml.edit.parts.FunctionalRequirementNameEditPart.VISUAL_ID));
+			parser = UrmlParserProvider
+					.getParser(
+							UrmlElementTypes.FunctionalRequirement_2006,
+							getParserElement(),
+							UrmlVisualIDRegistry
+									.getType(org.unicase.ui.diagram.urml.edit.parts.FunctionalRequirementNameEditPart.VISUAL_ID));
 		}
 		return parser;
 	}
@@ -306,8 +310,9 @@
 	 */
 	protected DirectEditManager getManager() {
 		if (manager == null) {
-			setManager(new TextDirectEditManager(this, TextDirectEditManager.getTextCellEditorClass(this),
-				UrmlEditPartFactory.getTextCellEditorLocator(this)));
+			setManager(new TextDirectEditManager(this,
+					TextDirectEditManager.getTextCellEditorClass(this),
+					UrmlEditPartFactory.getTextCellEditorLocator(this)));
 		}
 		return manager;
 	}
@@ -331,7 +336,8 @@
 	 */
 	protected void performDirectEdit(Point eventLocation) {
 		if (getManager().getClass() == TextDirectEditManager.class) {
-			((TextDirectEditManager) getManager()).show(eventLocation.getSWTPoint());
+			((TextDirectEditManager) getManager()).show(eventLocation
+					.getSWTPoint());
 		}
 	}
 
@@ -356,11 +362,15 @@
 
 				public void run() {
 					if (isActive() && isEditable()) {
-						if (theRequest.getExtendedData().get(RequestConstants.REQ_DIRECTEDIT_EXTENDEDDATA_INITIAL_CHAR) instanceof Character) {
-							Character initialChar = (Character) theRequest.getExtendedData().get(
-								RequestConstants.REQ_DIRECTEDIT_EXTENDEDDATA_INITIAL_CHAR);
+						if (theRequest
+								.getExtendedData()
+								.get(RequestConstants.REQ_DIRECTEDIT_EXTENDEDDATA_INITIAL_CHAR) instanceof Character) {
+							Character initialChar = (Character) theRequest
+									.getExtendedData()
+									.get(RequestConstants.REQ_DIRECTEDIT_EXTENDEDDATA_INITIAL_CHAR);
 							performDirectEdit(initialChar.charValue());
-						} else if ((theRequest instanceof DirectEditRequest) && (getEditText().equals(getLabelText()))) {
+						} else if ((theRequest instanceof DirectEditRequest)
+								&& (getEditText().equals(getLabelText()))) {
 							DirectEditRequest editRequest = (DirectEditRequest) theRequest;
 							performDirectEdit(editRequest.getLocation());
 						} else {
@@ -406,7 +416,8 @@
 	 * @generated
 	 */
 	protected void refreshUnderline() {
-		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(NotationPackage.eINSTANCE.getFontStyle());
+		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(
+				NotationPackage.eINSTANCE.getFontStyle());
 		if (style != null && getFigure() instanceof WrappingLabel) {
 			((WrappingLabel) getFigure()).setTextUnderline(style.isUnderline());
 		}
@@ -416,9 +427,11 @@
 	 * @generated
 	 */
 	protected void refreshStrikeThrough() {
-		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(NotationPackage.eINSTANCE.getFontStyle());
+		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(
+				NotationPackage.eINSTANCE.getFontStyle());
 		if (style != null && getFigure() instanceof WrappingLabel) {
-			((WrappingLabel) getFigure()).setTextStrikeThrough(style.isStrikeThrough());
+			((WrappingLabel) getFigure()).setTextStrikeThrough(style
+					.isStrikeThrough());
 		}
 	}
 
@@ -426,11 +439,13 @@
 	 * @generated
 	 */
 	protected void refreshFont() {
-		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(NotationPackage.eINSTANCE.getFontStyle());
+		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(
+				NotationPackage.eINSTANCE.getFontStyle());
 		if (style != null) {
-			FontData fontData = new FontData(style.getFontName(), style.getFontHeight(), (style.isBold() ? SWT.BOLD
-				: SWT.NORMAL)
-				| (style.isItalic() ? SWT.ITALIC : SWT.NORMAL));
+			FontData fontData = new FontData(style.getFontName(),
+					style.getFontHeight(), (style.isBold() ? SWT.BOLD
+							: SWT.NORMAL)
+							| (style.isItalic() ? SWT.ITALIC : SWT.NORMAL));
 			setFont(fontData);
 		}
 	}
@@ -448,9 +463,11 @@
 	protected void addSemanticListeners() {
 		if (getParser() instanceof ISemanticParser) {
 			EObject element = resolveSemanticElement();
-			parserElements = ((ISemanticParser) getParser()).getSemanticElementsBeingParsed(element);
+			parserElements = ((ISemanticParser) getParser())
+					.getSemanticElementsBeingParsed(element);
 			for (int i = 0; i < parserElements.size(); i++) {
-				addListenerFilter("SemanticModel" + i, this, (EObject) parserElements.get(i)); //$NON-NLS-1$
+				addListenerFilter(
+						"SemanticModel" + i, this, (EObject) parserElements.get(i)); //$NON-NLS-1$
 			}
 		} else {
 			super.addSemanticListeners();
@@ -516,17 +533,25 @@
 		if (NotationPackage.eINSTANCE.getFontStyle_FontColor().equals(feature)) {
 			Integer c = (Integer) event.getNewValue();
 			setFontColor(DiagramColorRegistry.getInstance().getColor(c));
-		} else if (NotationPackage.eINSTANCE.getFontStyle_Underline().equals(feature)) {
+		} else if (NotationPackage.eINSTANCE.getFontStyle_Underline().equals(
+				feature)) {
 			refreshUnderline();
-		} else if (NotationPackage.eINSTANCE.getFontStyle_StrikeThrough().equals(feature)) {
+		} else if (NotationPackage.eINSTANCE.getFontStyle_StrikeThrough()
+				.equals(feature)) {
 			refreshStrikeThrough();
-		} else if (NotationPackage.eINSTANCE.getFontStyle_FontHeight().equals(feature)
-			|| NotationPackage.eINSTANCE.getFontStyle_FontName().equals(feature)
-			|| NotationPackage.eINSTANCE.getFontStyle_Bold().equals(feature)
-			|| NotationPackage.eINSTANCE.getFontStyle_Italic().equals(feature)) {
+		} else if (NotationPackage.eINSTANCE.getFontStyle_FontHeight().equals(
+				feature)
+				|| NotationPackage.eINSTANCE.getFontStyle_FontName().equals(
+						feature)
+				|| NotationPackage.eINSTANCE.getFontStyle_Bold()
+						.equals(feature)
+				|| NotationPackage.eINSTANCE.getFontStyle_Italic().equals(
+						feature)) {
 			refreshFont();
 		} else {
-			if (getParser() != null && getParser().isAffectingEvent(event, getParserOptions().intValue())) {
+			if (getParser() != null
+					&& getParser().isAffectingEvent(event,
+							getParserOptions().intValue())) {
 				refreshLabel();
 			}
 			if (getParser() instanceof ISemanticParser) {
Index: src/org/unicase/ui/diagram/urml/edit/parts/DangerEditPart.java
===================================================================
--- src/org/unicase/ui/diagram/urml/edit/parts/DangerEditPart.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/edit/parts/DangerEditPart.java	(working copy)
@@ -1,6 +1,7 @@
 package org.unicase.ui.diagram.urml.edit.parts;
 
 import java.util.ArrayList;
+import java.util.LinkedList;
 import java.util.List;
 
 import org.eclipse.draw2d.Graphics;
@@ -20,6 +21,7 @@
 import org.eclipse.gmf.runtime.diagram.ui.editpolicies.EditPolicyRoles;
 import org.eclipse.gmf.runtime.draw2d.ui.figures.ConstrainedToolbarLayout;
 import org.eclipse.gmf.runtime.emf.type.core.IElementType;
+import org.eclipse.gmf.runtime.gef.ui.figures.DefaultSizeNodeFigure;
 import org.eclipse.gmf.runtime.gef.ui.figures.NodeFigure;
 import org.eclipse.gmf.runtime.notation.View;
 import org.eclipse.swt.SWT;
@@ -66,7 +68,8 @@
 	 */
 	protected void createDefaultEditPolicies() {
 		super.createDefaultEditPolicies();
-		installEditPolicy(EditPolicyRoles.SEMANTIC_ROLE, new DangerItemSemanticEditPolicy());
+		installEditPolicy(EditPolicyRoles.SEMANTIC_ROLE,
+				new DangerItemSemanticEditPolicy());
 		installEditPolicy(EditPolicy.LAYOUT_ROLE, createLayoutEditPolicy());
 		installEditPolicy(EditPolicyRoles.OPEN_ROLE, new MEEditorOpenPolicie());
 		// XXX need an SCR to runtime to have another abstract superclass that would let children add reasonable
@@ -78,10 +81,11 @@
 	 * @generated
 	 */
 	protected LayoutEditPolicy createLayoutEditPolicy() {
-		LayoutEditPolicy lep = new LayoutEditPolicy() {
+		org.eclipse.gmf.runtime.diagram.ui.editpolicies.LayoutEditPolicy lep = new org.eclipse.gmf.runtime.diagram.ui.editpolicies.LayoutEditPolicy() {
 
 			protected EditPolicy createChildEditPolicy(EditPart child) {
-				EditPolicy result = child.getEditPolicy(EditPolicy.PRIMARY_DRAG_ROLE);
+				EditPolicy result = child
+						.getEditPolicy(EditPolicy.PRIMARY_DRAG_ROLE);
 				if (result == null) {
 					result = new NonResizableEditPolicy();
 				}
@@ -103,8 +107,7 @@
 	 * @generated
 	 */
 	protected IFigure createNodeShape() {
-		DangerFigure figure = new DangerFigure();
-		return primaryShape = figure;
+		return primaryShape = new DangerFigure();
 	}
 
 	/**
@@ -119,7 +122,8 @@
 	 */
 	protected boolean addFixedChild(EditPart childEditPart) {
 		if (childEditPart instanceof DangerNameEditPart) {
-			((DangerNameEditPart) childEditPart).setLabel(getPrimaryShape().getFigureDangerFigure_name());
+			((DangerNameEditPart) childEditPart).setLabel(getPrimaryShape()
+					.getFigureDangerFigure_name());
 			return true;
 		}
 		return false;
@@ -254,53 +258,92 @@
 	 * @generated
 	 */
 	public EditPart getPrimaryChildEditPart() {
-		return getChildBySemanticHint(UrmlVisualIDRegistry.getType(DangerNameEditPart.VISUAL_ID));
+		return getChildBySemanticHint(UrmlVisualIDRegistry
+				.getType(DangerNameEditPart.VISUAL_ID));
 	}
 
 	/**
 	 * @generated
 	 */
-	public List/* <org.eclipse.gmf.runtime.emf.type.core.IElementType> */getMARelTypesOnSource() {
-		List/* <org.eclipse.gmf.runtime.emf.type.core.IElementType> */types = new ArrayList/*
-																							 * <org.eclipse.gmf.runtime.emf
-																							 * .type.core.IElementType>
-																							 */();
+	public List<IElementType> getMARelTypesOnSource() {
+		ArrayList<IElementType> types = new ArrayList<IElementType>(2);
 		types.add(UrmlElementTypes.DangerHarmedAssets_4013);
+		types.add(UrmlElementTypes.UrmlModelElementAssociations_4048);
 		return types;
 	}
 
 	/**
 	 * @generated
 	 */
-	public List/* <org.eclipse.gmf.runtime.emf.type.core.IElementType> */getMARelTypesOnSourceAndTarget(
-		IGraphicalEditPart targetEditPart) {
-		List/* <org.eclipse.gmf.runtime.emf.type.core.IElementType> */types = new ArrayList/*
-																							 * <org.eclipse.gmf.runtime.emf
-																							 * .type.core.IElementType>
-																							 */();
+	public List<IElementType> getMARelTypesOnSourceAndTarget(
+			IGraphicalEditPart targetEditPart) {
+		LinkedList<IElementType> types = new LinkedList<IElementType>();
 		if (targetEditPart instanceof ServiceEditPart) {
 			types.add(UrmlElementTypes.DangerHarmedAssets_4013);
 		}
 		if (targetEditPart instanceof ActorEditPart) {
 			types.add(UrmlElementTypes.DangerHarmedAssets_4013);
 		}
+		if (targetEditPart instanceof StakeholderEditPart) {
+			types.add(UrmlElementTypes.UrmlModelElementAssociations_4048);
+		}
+		if (targetEditPart instanceof GoalEditPart) {
+			types.add(UrmlElementTypes.UrmlModelElementAssociations_4048);
+		}
+		if (targetEditPart instanceof FunctionalRequirementEditPart) {
+			types.add(UrmlElementTypes.UrmlModelElementAssociations_4048);
+		}
+		if (targetEditPart instanceof FeatureEditPart) {
+			types.add(UrmlElementTypes.UrmlModelElementAssociations_4048);
+		}
+		if (targetEditPart instanceof ServiceEditPart) {
+			types.add(UrmlElementTypes.UrmlModelElementAssociations_4048);
+		}
+		if (targetEditPart instanceof NonFunctionalRequirementEditPart) {
+			types.add(UrmlElementTypes.UrmlModelElementAssociations_4048);
+		}
+		if (targetEditPart instanceof org.unicase.ui.diagram.urml.edit.parts.DangerEditPart) {
+			types.add(UrmlElementTypes.UrmlModelElementAssociations_4048);
+		}
+		if (targetEditPart instanceof ActorEditPart) {
+			types.add(UrmlElementTypes.UrmlModelElementAssociations_4048);
+		}
+		if (targetEditPart instanceof ProceduralMitigationEditPart) {
+			types.add(UrmlElementTypes.UrmlModelElementAssociations_4048);
+		}
+		if (targetEditPart instanceof VariationPointEditPart) {
+			types.add(UrmlElementTypes.UrmlModelElementAssociations_4048);
+		}
+		if (targetEditPart instanceof VariationPointInstanceEditPart) {
+			types.add(UrmlElementTypes.UrmlModelElementAssociations_4048);
+		}
+		if (targetEditPart instanceof ProductEditPart) {
+			types.add(UrmlElementTypes.UrmlModelElementAssociations_4048);
+		}
 		return types;
 	}
 
 	/**
 	 * @generated
 	 */
-	public List/* <org.eclipse.gmf.runtime.emf.type.core.IElementType> */getMATypesForTarget(
-		IElementType relationshipType) {
-		List/* <org.eclipse.gmf.runtime.emf.type.core.IElementType> */types = new ArrayList/*
-																							 * <org.eclipse.gmf.runtime.emf
-																							 * .type.core.IElementType>
-																							 */();
+	public List<IElementType> getMATypesForTarget(IElementType relationshipType) {
+		LinkedList<IElementType> types = new LinkedList<IElementType>();
 		if (relationshipType == UrmlElementTypes.DangerHarmedAssets_4013) {
 			types.add(UrmlElementTypes.Service_2007);
-		}
-		if (relationshipType == UrmlElementTypes.DangerHarmedAssets_4013) {
 			types.add(UrmlElementTypes.Actor_2010);
+		} else if (relationshipType == UrmlElementTypes.UrmlModelElementAssociations_4048) {
+			types.add(UrmlElementTypes.Stakeholder_2002);
+			types.add(UrmlElementTypes.Goal_2001);
+			types.add(UrmlElementTypes.FunctionalRequirement_2006);
+			types.add(UrmlElementTypes.Feature_2012);
+			types.add(UrmlElementTypes.Service_2007);
+			types.add(UrmlElementTypes.NonFunctionalRequirement_2008);
+			types.add(UrmlElementTypes.Danger_2009);
+			types.add(UrmlElementTypes.Actor_2010);
+			types.add(UrmlElementTypes.ProceduralMitigation_2011);
+			types.add(UrmlElementTypes.VariationPoint_2013);
+			types.add(UrmlElementTypes.VariationPointInstance_2014);
+			types.add(UrmlElementTypes.Product_2015);
 		}
 		return types;
 	}
@@ -308,39 +351,39 @@
 	/**
 	 * @generated
 	 */
-	public List/* <org.eclipse.gmf.runtime.emf.type.core.IElementType> */getMARelTypesOnTarget() {
-		List/* <org.eclipse.gmf.runtime.emf.type.core.IElementType> */types = new ArrayList/*
-																							 * <org.eclipse.gmf.runtime.emf
-																							 * .type.core.IElementType>
-																							 */();
+	public List<IElementType> getMARelTypesOnTarget() {
+		ArrayList<IElementType> types = new ArrayList<IElementType>(3);
 		types.add(UrmlElementTypes.MitigationMitigatedDangers_4012);
 		types.add(UrmlElementTypes.AssetTriggeredDangers_4017);
+		types.add(UrmlElementTypes.UrmlModelElementAssociations_4048);
 		return types;
 	}
 
 	/**
 	 * @generated
 	 */
-	public List/* <org.eclipse.gmf.runtime.emf.type.core.IElementType> */getMATypesForSource(
-		IElementType relationshipType) {
-		List/* <org.eclipse.gmf.runtime.emf.type.core.IElementType> */types = new ArrayList/*
-																							 * <org.eclipse.gmf.runtime.emf
-																							 * .type.core.IElementType>
-																							 */();
+	public List<IElementType> getMATypesForSource(IElementType relationshipType) {
+		LinkedList<IElementType> types = new LinkedList<IElementType>();
 		if (relationshipType == UrmlElementTypes.MitigationMitigatedDangers_4012) {
 			types.add(UrmlElementTypes.FunctionalRequirement_2006);
-		}
-		if (relationshipType == UrmlElementTypes.MitigationMitigatedDangers_4012) {
 			types.add(UrmlElementTypes.NonFunctionalRequirement_2008);
-		}
-		if (relationshipType == UrmlElementTypes.MitigationMitigatedDangers_4012) {
 			types.add(UrmlElementTypes.ProceduralMitigation_2011);
-		}
-		if (relationshipType == UrmlElementTypes.AssetTriggeredDangers_4017) {
+		} else if (relationshipType == UrmlElementTypes.AssetTriggeredDangers_4017) {
 			types.add(UrmlElementTypes.Service_2007);
-		}
-		if (relationshipType == UrmlElementTypes.AssetTriggeredDangers_4017) {
+			types.add(UrmlElementTypes.Actor_2010);
+		} else if (relationshipType == UrmlElementTypes.UrmlModelElementAssociations_4048) {
+			types.add(UrmlElementTypes.Stakeholder_2002);
+			types.add(UrmlElementTypes.Goal_2001);
+			types.add(UrmlElementTypes.FunctionalRequirement_2006);
+			types.add(UrmlElementTypes.Feature_2012);
+			types.add(UrmlElementTypes.Service_2007);
+			types.add(UrmlElementTypes.NonFunctionalRequirement_2008);
+			types.add(UrmlElementTypes.Danger_2009);
 			types.add(UrmlElementTypes.Actor_2010);
+			types.add(UrmlElementTypes.ProceduralMitigation_2011);
+			types.add(UrmlElementTypes.VariationPoint_2013);
+			types.add(UrmlElementTypes.VariationPointInstance_2014);
+			types.add(UrmlElementTypes.Product_2015);
 		}
 		return types;
 	}
@@ -386,25 +429,6 @@
 		/**
 		 * @generated
 		 */
-		private boolean myUseLocalCoordinates = false;
-
-		/**
-		 * @generated
-		 */
-		protected boolean useLocalCoordinates() {
-			return myUseLocalCoordinates;
-		}
-
-		/**
-		 * @generated
-		 */
-		protected void setUseLocalCoordinates(boolean useLocalCoordinates) {
-			myUseLocalCoordinates = useLocalCoordinates;
-		}
-
-		/**
-		 * @generated
-		 */
 		public Label getFigureDangerFigure_name() {
 			return fFigureDangerFigure_name;
 		}
@@ -414,6 +438,7 @@
 	/**
 	 * @generated
 	 */
-	static final Font FFIGUREDANGERFIGURE_NAME_FONT = new Font(Display.getCurrent(), "Arial", 10, SWT.BOLD);
+	static final Font FFIGUREDANGERFIGURE_NAME_FONT = new Font(
+			Display.getCurrent(), "Arial", 10, SWT.BOLD);
 
 }
Index: src/org/unicase/ui/diagram/urml/edit/parts/IsDetailedLabel2EditPart.java
===================================================================
--- src/org/unicase/ui/diagram/urml/edit/parts/IsDetailedLabel2EditPart.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/edit/parts/IsDetailedLabel2EditPart.java	(working copy)
@@ -50,7 +50,8 @@
 /**
  * @generated
  */
-public class IsDetailedLabel2EditPart extends LabelEditPart implements ITextAwareEditPart {
+public class IsDetailedLabel2EditPart extends LabelEditPart implements
+		ITextAwareEditPart {
 
 	/**
 	 * @generated
@@ -70,7 +71,7 @@
 	/**
 	 * @generated
 	 */
-	private List parserElements;
+	private List<?> parserElements;
 
 	/**
 	 * @generated
@@ -81,8 +82,10 @@
 	 * @generated
 	 */
 	static {
-		registerSnapBackPosition(UrmlVisualIDRegistry
-			.getType(org.unicase.ui.diagram.urml.edit.parts.IsDetailedLabel2EditPart.VISUAL_ID), new Point(0, 0));
+		registerSnapBackPosition(
+				UrmlVisualIDRegistry
+						.getType(org.unicase.ui.diagram.urml.edit.parts.IsDetailedLabel2EditPart.VISUAL_ID),
+				new Point(0, 0));
 	}
 
 	/**
@@ -97,16 +100,12 @@
 	 */
 	protected void createDefaultEditPolicies() {
 		super.createDefaultEditPolicies();
-		installEditPolicy(EditPolicy.DIRECT_EDIT_ROLE, new LabelDirectEditPolicy());
-		installEditPolicy(EditPolicy.SELECTION_FEEDBACK_ROLE, new UrmlTextSelectionEditPolicy());
-		installEditPolicy(EditPolicy.PRIMARY_DRAG_ROLE, new NonResizableLabelEditPolicy() {
-
-			protected List createSelectionHandles() {
-				MoveHandle mh = new MoveHandle((GraphicalEditPart) getHost());
-				mh.setBorder(null);
-				return Collections.singletonList(mh);
-			}
-		});
+		installEditPolicy(EditPolicy.DIRECT_EDIT_ROLE,
+				new LabelDirectEditPolicy());
+		installEditPolicy(EditPolicy.SELECTION_FEEDBACK_ROLE,
+				new UrmlTextSelectionEditPolicy());
+		installEditPolicy(EditPolicy.PRIMARY_DRAG_ROLE,
+				new URMLDiagramEditPart.LinkLabelDragPolicy());
 	}
 
 	/**
@@ -174,6 +173,7 @@
 	/**
 	 * @generated
 	 */
+	@SuppressWarnings("rawtypes")
 	protected List getModelChildren() {
 		return Collections.EMPTY_LIST;
 	}
@@ -206,7 +206,9 @@
 		String text = null;
 		EObject parserElement = getParserElement();
 		if (parserElement != null && getParser() != null) {
-			text = getParser().getPrintString(new EObjectAdapter(parserElement), getParserOptions().intValue());
+			text = getParser().getPrintString(
+					new EObjectAdapter(parserElement),
+					getParserOptions().intValue());
 		}
 		if (text == null || text.length() == 0) {
 			text = defaultText;
@@ -236,7 +238,9 @@
 		if (getParserElement() == null || getParser() == null) {
 			return ""; //$NON-NLS-1$
 		}
-		return getParser().getEditString(new EObjectAdapter(getParserElement()), getParserOptions().intValue());
+		return getParser().getEditString(
+				new EObjectAdapter(getParserElement()),
+				getParserOptions().intValue());
 	}
 
 	/**
@@ -257,14 +261,20 @@
 					final EObject element = getParserElement();
 					final IParser parser = getParser();
 					try {
-						IParserEditStatus valid = (IParserEditStatus) getEditingDomain().runExclusive(
-							new RunnableWithResult.Impl() {
+						IParserEditStatus valid = (IParserEditStatus) getEditingDomain()
+								.runExclusive(
+										new RunnableWithResult.Impl<IParserEditStatus>() {
 
-								public void run() {
-									setResult(parser.isValidEditString(new EObjectAdapter(element), (String) value));
-								}
-							});
-						return valid.getCode() == ParserEditStatus.EDITABLE ? null : valid.getMessage();
+											public void run() {
+												setResult(parser
+														.isValidEditString(
+																new EObjectAdapter(
+																		element),
+																(String) value));
+											}
+										});
+						return valid.getCode() == ParserEditStatus.EDITABLE ? null
+								: valid.getMessage();
 					} catch (InterruptedException ie) {
 						ie.printStackTrace();
 					}
@@ -283,7 +293,8 @@
 		if (getParserElement() == null || getParser() == null) {
 			return null;
 		}
-		return getParser().getCompletionProcessor(new EObjectAdapter(getParserElement()));
+		return getParser().getCompletionProcessor(
+				new EObjectAdapter(getParserElement()));
 	}
 
 	/**
@@ -299,8 +310,11 @@
 	public IParser getParser() {
 		if (parser == null) {
 			parser = UrmlParserProvider
-				.getParser(UrmlElementTypes.GoalReference_4016, getParserElement(), UrmlVisualIDRegistry
-					.getType(org.unicase.ui.diagram.urml.edit.parts.IsDetailedLabel2EditPart.VISUAL_ID));
+					.getParser(
+							UrmlElementTypes.GoalReference_4016,
+							getParserElement(),
+							UrmlVisualIDRegistry
+									.getType(org.unicase.ui.diagram.urml.edit.parts.IsDetailedLabel2EditPart.VISUAL_ID));
 		}
 		return parser;
 	}
@@ -310,8 +324,9 @@
 	 */
 	protected DirectEditManager getManager() {
 		if (manager == null) {
-			setManager(new TextDirectEditManager(this, TextDirectEditManager.getTextCellEditorClass(this),
-				UrmlEditPartFactory.getTextCellEditorLocator(this)));
+			setManager(new TextDirectEditManager(this,
+					TextDirectEditManager.getTextCellEditorClass(this),
+					UrmlEditPartFactory.getTextCellEditorLocator(this)));
 		}
 		return manager;
 	}
@@ -335,7 +350,8 @@
 	 */
 	protected void performDirectEdit(Point eventLocation) {
 		if (getManager().getClass() == TextDirectEditManager.class) {
-			((TextDirectEditManager) getManager()).show(eventLocation.getSWTPoint());
+			((TextDirectEditManager) getManager()).show(eventLocation
+					.getSWTPoint());
 		}
 	}
 
@@ -360,11 +376,15 @@
 
 				public void run() {
 					if (isActive() && isEditable()) {
-						if (theRequest.getExtendedData().get(RequestConstants.REQ_DIRECTEDIT_EXTENDEDDATA_INITIAL_CHAR) instanceof Character) {
-							Character initialChar = (Character) theRequest.getExtendedData().get(
-								RequestConstants.REQ_DIRECTEDIT_EXTENDEDDATA_INITIAL_CHAR);
+						if (theRequest
+								.getExtendedData()
+								.get(RequestConstants.REQ_DIRECTEDIT_EXTENDEDDATA_INITIAL_CHAR) instanceof Character) {
+							Character initialChar = (Character) theRequest
+									.getExtendedData()
+									.get(RequestConstants.REQ_DIRECTEDIT_EXTENDEDDATA_INITIAL_CHAR);
 							performDirectEdit(initialChar.charValue());
-						} else if ((theRequest instanceof DirectEditRequest) && (getEditText().equals(getLabelText()))) {
+						} else if ((theRequest instanceof DirectEditRequest)
+								&& (getEditText().equals(getLabelText()))) {
 							DirectEditRequest editRequest = (DirectEditRequest) theRequest;
 							performDirectEdit(editRequest.getLocation());
 						} else {
@@ -410,7 +430,8 @@
 	 * @generated
 	 */
 	protected void refreshUnderline() {
-		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(NotationPackage.eINSTANCE.getFontStyle());
+		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(
+				NotationPackage.eINSTANCE.getFontStyle());
 		if (style != null && getFigure() instanceof WrappingLabel) {
 			((WrappingLabel) getFigure()).setTextUnderline(style.isUnderline());
 		}
@@ -420,9 +441,11 @@
 	 * @generated
 	 */
 	protected void refreshStrikeThrough() {
-		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(NotationPackage.eINSTANCE.getFontStyle());
+		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(
+				NotationPackage.eINSTANCE.getFontStyle());
 		if (style != null && getFigure() instanceof WrappingLabel) {
-			((WrappingLabel) getFigure()).setTextStrikeThrough(style.isStrikeThrough());
+			((WrappingLabel) getFigure()).setTextStrikeThrough(style
+					.isStrikeThrough());
 		}
 	}
 
@@ -430,11 +453,13 @@
 	 * @generated
 	 */
 	protected void refreshFont() {
-		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(NotationPackage.eINSTANCE.getFontStyle());
+		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(
+				NotationPackage.eINSTANCE.getFontStyle());
 		if (style != null) {
-			FontData fontData = new FontData(style.getFontName(), style.getFontHeight(), (style.isBold() ? SWT.BOLD
-				: SWT.NORMAL)
-				| (style.isItalic() ? SWT.ITALIC : SWT.NORMAL));
+			FontData fontData = new FontData(style.getFontName(),
+					style.getFontHeight(), (style.isBold() ? SWT.BOLD
+							: SWT.NORMAL)
+							| (style.isItalic() ? SWT.ITALIC : SWT.NORMAL));
 			setFont(fontData);
 		}
 	}
@@ -452,9 +477,11 @@
 	protected void addSemanticListeners() {
 		if (getParser() instanceof ISemanticParser) {
 			EObject element = resolveSemanticElement();
-			parserElements = ((ISemanticParser) getParser()).getSemanticElementsBeingParsed(element);
+			parserElements = ((ISemanticParser) getParser())
+					.getSemanticElementsBeingParsed(element);
 			for (int i = 0; i < parserElements.size(); i++) {
-				addListenerFilter("SemanticModel" + i, this, (EObject) parserElements.get(i)); //$NON-NLS-1$
+				addListenerFilter(
+						"SemanticModel" + i, this, (EObject) parserElements.get(i)); //$NON-NLS-1$
 			}
 		} else {
 			super.addSemanticListeners();
@@ -504,17 +531,25 @@
 		if (NotationPackage.eINSTANCE.getFontStyle_FontColor().equals(feature)) {
 			Integer c = (Integer) event.getNewValue();
 			setFontColor(DiagramColorRegistry.getInstance().getColor(c));
-		} else if (NotationPackage.eINSTANCE.getFontStyle_Underline().equals(feature)) {
+		} else if (NotationPackage.eINSTANCE.getFontStyle_Underline().equals(
+				feature)) {
 			refreshUnderline();
-		} else if (NotationPackage.eINSTANCE.getFontStyle_StrikeThrough().equals(feature)) {
+		} else if (NotationPackage.eINSTANCE.getFontStyle_StrikeThrough()
+				.equals(feature)) {
 			refreshStrikeThrough();
-		} else if (NotationPackage.eINSTANCE.getFontStyle_FontHeight().equals(feature)
-			|| NotationPackage.eINSTANCE.getFontStyle_FontName().equals(feature)
-			|| NotationPackage.eINSTANCE.getFontStyle_Bold().equals(feature)
-			|| NotationPackage.eINSTANCE.getFontStyle_Italic().equals(feature)) {
+		} else if (NotationPackage.eINSTANCE.getFontStyle_FontHeight().equals(
+				feature)
+				|| NotationPackage.eINSTANCE.getFontStyle_FontName().equals(
+						feature)
+				|| NotationPackage.eINSTANCE.getFontStyle_Bold()
+						.equals(feature)
+				|| NotationPackage.eINSTANCE.getFontStyle_Italic().equals(
+						feature)) {
 			refreshFont();
 		} else {
-			if (getParser() != null && getParser().isAffectingEvent(event, getParserOptions().intValue())) {
+			if (getParser() != null
+					&& getParser().isAffectingEvent(event,
+							getParserOptions().intValue())) {
 				refreshLabel();
 			}
 			if (getParser() instanceof ISemanticParser) {
Index: src/org/unicase/ui/diagram/urml/edit/parts/GoalReference4EditPart.java
===================================================================
--- src/org/unicase/ui/diagram/urml/edit/parts/GoalReference4EditPart.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/edit/parts/GoalReference4EditPart.java	(working copy)
@@ -13,7 +13,8 @@
 /**
  * @generated
  */
-public class GoalReference4EditPart extends ConnectionNodeEditPart implements ITreeBranchEditPart {
+public class GoalReference4EditPart extends ConnectionNodeEditPart implements
+		ITreeBranchEditPart {
 
 	/**
 	 * @generated
@@ -32,7 +33,8 @@
 	 */
 	protected void createDefaultEditPolicies() {
 		super.createDefaultEditPolicies();
-		installEditPolicy(EditPolicyRoles.SEMANTIC_ROLE, new GoalReference4ItemSemanticEditPolicy());
+		installEditPolicy(EditPolicyRoles.SEMANTIC_ROLE,
+				new GoalReference4ItemSemanticEditPolicy());
 	}
 
 	/**
@@ -40,8 +42,9 @@
 	 */
 	protected boolean addFixedChild(EditPart childEditPart) {
 		if (childEditPart instanceof GoalReferenceWeight3EditPart) {
-			((GoalReferenceWeight3EditPart) childEditPart).setLabel(getPrimaryShape()
-				.getFigureGoalInfluenceGoalsFigure_weight());
+			((GoalReferenceWeight3EditPart) childEditPart)
+					.setLabel(getPrimaryShape()
+							.getFigureGoalInfluenceGoalsFigure_weight());
 			return true;
 		}
 		return false;
@@ -54,7 +57,7 @@
 		if (addFixedChild(childEditPart)) {
 			return;
 		}
-		super.addChildVisual(childEditPart, -1);
+		super.addChildVisual(childEditPart, index);
 	}
 
 	/**
@@ -128,25 +131,6 @@
 		/**
 		 * @generated
 		 */
-		private boolean myUseLocalCoordinates = false;
-
-		/**
-		 * @generated
-		 */
-		protected boolean useLocalCoordinates() {
-			return myUseLocalCoordinates;
-		}
-
-		/**
-		 * @generated
-		 */
-		protected void setUseLocalCoordinates(boolean useLocalCoordinates) {
-			myUseLocalCoordinates = useLocalCoordinates;
-		}
-
-		/**
-		 * @generated
-		 */
 		public WrappingLabel getFigureGoalInfluenceGoalsFigure_weight() {
 			return fFigureGoalInfluenceGoalsFigure_weight;
 		}
Index: src/org/unicase/ui/diagram/urml/edit/parts/CombineLabelEditPart.java
===================================================================
--- src/org/unicase/ui/diagram/urml/edit/parts/CombineLabelEditPart.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/edit/parts/CombineLabelEditPart.java	(working copy)
@@ -50,7 +50,8 @@
 /**
  * @generated
  */
-public class CombineLabelEditPart extends LabelEditPart implements ITextAwareEditPart {
+public class CombineLabelEditPart extends LabelEditPart implements
+		ITextAwareEditPart {
 
 	/**
 	 * @generated
@@ -70,7 +71,7 @@
 	/**
 	 * @generated
 	 */
-	private List parserElements;
+	private List<?> parserElements;
 
 	/**
 	 * @generated
@@ -81,8 +82,10 @@
 	 * @generated
 	 */
 	static {
-		registerSnapBackPosition(UrmlVisualIDRegistry
-			.getType(org.unicase.ui.diagram.urml.edit.parts.CombineLabelEditPart.VISUAL_ID), new Point(0, 20));
+		registerSnapBackPosition(
+				UrmlVisualIDRegistry
+						.getType(org.unicase.ui.diagram.urml.edit.parts.CombineLabelEditPart.VISUAL_ID),
+				new Point(0, 20));
 	}
 
 	/**
@@ -97,16 +100,12 @@
 	 */
 	protected void createDefaultEditPolicies() {
 		super.createDefaultEditPolicies();
-		installEditPolicy(EditPolicy.DIRECT_EDIT_ROLE, new LabelDirectEditPolicy());
-		installEditPolicy(EditPolicy.SELECTION_FEEDBACK_ROLE, new UrmlTextSelectionEditPolicy());
-		installEditPolicy(EditPolicy.PRIMARY_DRAG_ROLE, new NonResizableLabelEditPolicy() {
-
-			protected List createSelectionHandles() {
-				MoveHandle mh = new MoveHandle((GraphicalEditPart) getHost());
-				mh.setBorder(null);
-				return Collections.singletonList(mh);
-			}
-		});
+		installEditPolicy(EditPolicy.DIRECT_EDIT_ROLE,
+				new LabelDirectEditPolicy());
+		installEditPolicy(EditPolicy.SELECTION_FEEDBACK_ROLE,
+				new UrmlTextSelectionEditPolicy());
+		installEditPolicy(EditPolicy.PRIMARY_DRAG_ROLE,
+				new URMLDiagramEditPart.LinkLabelDragPolicy());
 	}
 
 	/**
@@ -174,6 +173,7 @@
 	/**
 	 * @generated
 	 */
+	@SuppressWarnings("rawtypes")
 	protected List getModelChildren() {
 		return Collections.EMPTY_LIST;
 	}
@@ -206,7 +206,9 @@
 		String text = null;
 		EObject parserElement = getParserElement();
 		if (parserElement != null && getParser() != null) {
-			text = getParser().getPrintString(new EObjectAdapter(parserElement), getParserOptions().intValue());
+			text = getParser().getPrintString(
+					new EObjectAdapter(parserElement),
+					getParserOptions().intValue());
 		}
 		if (text == null || text.length() == 0) {
 			text = defaultText;
@@ -236,7 +238,9 @@
 		if (getParserElement() == null || getParser() == null) {
 			return ""; //$NON-NLS-1$
 		}
-		return getParser().getEditString(new EObjectAdapter(getParserElement()), getParserOptions().intValue());
+		return getParser().getEditString(
+				new EObjectAdapter(getParserElement()),
+				getParserOptions().intValue());
 	}
 
 	/**
@@ -257,14 +261,20 @@
 					final EObject element = getParserElement();
 					final IParser parser = getParser();
 					try {
-						IParserEditStatus valid = (IParserEditStatus) getEditingDomain().runExclusive(
-							new RunnableWithResult.Impl() {
+						IParserEditStatus valid = (IParserEditStatus) getEditingDomain()
+								.runExclusive(
+										new RunnableWithResult.Impl<IParserEditStatus>() {
 
-								public void run() {
-									setResult(parser.isValidEditString(new EObjectAdapter(element), (String) value));
-								}
-							});
-						return valid.getCode() == ParserEditStatus.EDITABLE ? null : valid.getMessage();
+											public void run() {
+												setResult(parser
+														.isValidEditString(
+																new EObjectAdapter(
+																		element),
+																(String) value));
+											}
+										});
+						return valid.getCode() == ParserEditStatus.EDITABLE ? null
+								: valid.getMessage();
 					} catch (InterruptedException ie) {
 						ie.printStackTrace();
 					}
@@ -283,7 +293,8 @@
 		if (getParserElement() == null || getParser() == null) {
 			return null;
 		}
-		return getParser().getCompletionProcessor(new EObjectAdapter(getParserElement()));
+		return getParser().getCompletionProcessor(
+				new EObjectAdapter(getParserElement()));
 	}
 
 	/**
@@ -298,9 +309,12 @@
 	 */
 	public IParser getParser() {
 		if (parser == null) {
-			parser = UrmlParserProvider.getParser(UrmlElementTypes.ProductVariationPointInstances_4032,
-				getParserElement(), UrmlVisualIDRegistry
-					.getType(org.unicase.ui.diagram.urml.edit.parts.CombineLabelEditPart.VISUAL_ID));
+			parser = UrmlParserProvider
+					.getParser(
+							UrmlElementTypes.ProductVariationPointInstances_4032,
+							getParserElement(),
+							UrmlVisualIDRegistry
+									.getType(org.unicase.ui.diagram.urml.edit.parts.CombineLabelEditPart.VISUAL_ID));
 		}
 		return parser;
 	}
@@ -310,8 +324,9 @@
 	 */
 	protected DirectEditManager getManager() {
 		if (manager == null) {
-			setManager(new TextDirectEditManager(this, TextDirectEditManager.getTextCellEditorClass(this),
-				UrmlEditPartFactory.getTextCellEditorLocator(this)));
+			setManager(new TextDirectEditManager(this,
+					TextDirectEditManager.getTextCellEditorClass(this),
+					UrmlEditPartFactory.getTextCellEditorLocator(this)));
 		}
 		return manager;
 	}
@@ -335,7 +350,8 @@
 	 */
 	protected void performDirectEdit(Point eventLocation) {
 		if (getManager().getClass() == TextDirectEditManager.class) {
-			((TextDirectEditManager) getManager()).show(eventLocation.getSWTPoint());
+			((TextDirectEditManager) getManager()).show(eventLocation
+					.getSWTPoint());
 		}
 	}
 
@@ -360,11 +376,15 @@
 
 				public void run() {
 					if (isActive() && isEditable()) {
-						if (theRequest.getExtendedData().get(RequestConstants.REQ_DIRECTEDIT_EXTENDEDDATA_INITIAL_CHAR) instanceof Character) {
-							Character initialChar = (Character) theRequest.getExtendedData().get(
-								RequestConstants.REQ_DIRECTEDIT_EXTENDEDDATA_INITIAL_CHAR);
+						if (theRequest
+								.getExtendedData()
+								.get(RequestConstants.REQ_DIRECTEDIT_EXTENDEDDATA_INITIAL_CHAR) instanceof Character) {
+							Character initialChar = (Character) theRequest
+									.getExtendedData()
+									.get(RequestConstants.REQ_DIRECTEDIT_EXTENDEDDATA_INITIAL_CHAR);
 							performDirectEdit(initialChar.charValue());
-						} else if ((theRequest instanceof DirectEditRequest) && (getEditText().equals(getLabelText()))) {
+						} else if ((theRequest instanceof DirectEditRequest)
+								&& (getEditText().equals(getLabelText()))) {
 							DirectEditRequest editRequest = (DirectEditRequest) theRequest;
 							performDirectEdit(editRequest.getLocation());
 						} else {
@@ -410,7 +430,8 @@
 	 * @generated
 	 */
 	protected void refreshUnderline() {
-		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(NotationPackage.eINSTANCE.getFontStyle());
+		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(
+				NotationPackage.eINSTANCE.getFontStyle());
 		if (style != null && getFigure() instanceof WrappingLabel) {
 			((WrappingLabel) getFigure()).setTextUnderline(style.isUnderline());
 		}
@@ -420,9 +441,11 @@
 	 * @generated
 	 */
 	protected void refreshStrikeThrough() {
-		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(NotationPackage.eINSTANCE.getFontStyle());
+		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(
+				NotationPackage.eINSTANCE.getFontStyle());
 		if (style != null && getFigure() instanceof WrappingLabel) {
-			((WrappingLabel) getFigure()).setTextStrikeThrough(style.isStrikeThrough());
+			((WrappingLabel) getFigure()).setTextStrikeThrough(style
+					.isStrikeThrough());
 		}
 	}
 
@@ -430,11 +453,13 @@
 	 * @generated
 	 */
 	protected void refreshFont() {
-		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(NotationPackage.eINSTANCE.getFontStyle());
+		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(
+				NotationPackage.eINSTANCE.getFontStyle());
 		if (style != null) {
-			FontData fontData = new FontData(style.getFontName(), style.getFontHeight(), (style.isBold() ? SWT.BOLD
-				: SWT.NORMAL)
-				| (style.isItalic() ? SWT.ITALIC : SWT.NORMAL));
+			FontData fontData = new FontData(style.getFontName(),
+					style.getFontHeight(), (style.isBold() ? SWT.BOLD
+							: SWT.NORMAL)
+							| (style.isItalic() ? SWT.ITALIC : SWT.NORMAL));
 			setFont(fontData);
 		}
 	}
@@ -452,9 +477,11 @@
 	protected void addSemanticListeners() {
 		if (getParser() instanceof ISemanticParser) {
 			EObject element = resolveSemanticElement();
-			parserElements = ((ISemanticParser) getParser()).getSemanticElementsBeingParsed(element);
+			parserElements = ((ISemanticParser) getParser())
+					.getSemanticElementsBeingParsed(element);
 			for (int i = 0; i < parserElements.size(); i++) {
-				addListenerFilter("SemanticModel" + i, this, (EObject) parserElements.get(i)); //$NON-NLS-1$
+				addListenerFilter(
+						"SemanticModel" + i, this, (EObject) parserElements.get(i)); //$NON-NLS-1$
 			}
 		} else {
 			super.addSemanticListeners();
@@ -504,17 +531,25 @@
 		if (NotationPackage.eINSTANCE.getFontStyle_FontColor().equals(feature)) {
 			Integer c = (Integer) event.getNewValue();
 			setFontColor(DiagramColorRegistry.getInstance().getColor(c));
-		} else if (NotationPackage.eINSTANCE.getFontStyle_Underline().equals(feature)) {
+		} else if (NotationPackage.eINSTANCE.getFontStyle_Underline().equals(
+				feature)) {
 			refreshUnderline();
-		} else if (NotationPackage.eINSTANCE.getFontStyle_StrikeThrough().equals(feature)) {
+		} else if (NotationPackage.eINSTANCE.getFontStyle_StrikeThrough()
+				.equals(feature)) {
 			refreshStrikeThrough();
-		} else if (NotationPackage.eINSTANCE.getFontStyle_FontHeight().equals(feature)
-			|| NotationPackage.eINSTANCE.getFontStyle_FontName().equals(feature)
-			|| NotationPackage.eINSTANCE.getFontStyle_Bold().equals(feature)
-			|| NotationPackage.eINSTANCE.getFontStyle_Italic().equals(feature)) {
+		} else if (NotationPackage.eINSTANCE.getFontStyle_FontHeight().equals(
+				feature)
+				|| NotationPackage.eINSTANCE.getFontStyle_FontName().equals(
+						feature)
+				|| NotationPackage.eINSTANCE.getFontStyle_Bold()
+						.equals(feature)
+				|| NotationPackage.eINSTANCE.getFontStyle_Italic().equals(
+						feature)) {
 			refreshFont();
 		} else {
-			if (getParser() != null && getParser().isAffectingEvent(event, getParserOptions().intValue())) {
+			if (getParser() != null
+					&& getParser().isAffectingEvent(event,
+							getParserOptions().intValue())) {
 				refreshLabel();
 			}
 			if (getParser() instanceof ISemanticParser) {
Index: src/org/unicase/ui/diagram/urml/edit/parts/VariationPointInstanceSelectedFeaturesEditPart.java
===================================================================
--- src/org/unicase/ui/diagram/urml/edit/parts/VariationPointInstanceSelectedFeaturesEditPart.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/edit/parts/VariationPointInstanceSelectedFeaturesEditPart.java	(working copy)
@@ -12,8 +12,8 @@
 /**
  * @generated
  */
-public class VariationPointInstanceSelectedFeaturesEditPart extends ConnectionNodeEditPart implements
-	ITreeBranchEditPart {
+public class VariationPointInstanceSelectedFeaturesEditPart extends
+		ConnectionNodeEditPart implements ITreeBranchEditPart {
 
 	/**
 	 * @generated
@@ -32,42 +32,9 @@
 	 */
 	protected void createDefaultEditPolicies() {
 		super.createDefaultEditPolicies();
-		installEditPolicy(EditPolicyRoles.SEMANTIC_ROLE,
-			new VariationPointInstanceSelectedFeaturesItemSemanticEditPolicy());
-	}
-
-	/**
-	 * @generated
-	 */
-	protected boolean addFixedChild(EditPart childEditPart) {
-		return false;
-	}
-
-	/**
-	 * @generated
-	 */
-	protected void addChildVisual(EditPart childEditPart, int index) {
-		if (addFixedChild(childEditPart)) {
-			return;
-		}
-		super.addChildVisual(childEditPart, -1);
-	}
-
-	/**
-	 * @generated
-	 */
-	protected boolean removeFixedChild(EditPart childEditPart) {
-		return false;
-	}
-
-	/**
-	 * @generated
-	 */
-	protected void removeChildVisual(EditPart childEditPart) {
-		if (removeFixedChild(childEditPart)) {
-			return;
-		}
-		super.removeChildVisual(childEditPart);
+		installEditPolicy(
+				EditPolicyRoles.SEMANTIC_ROLE,
+				new VariationPointInstanceSelectedFeaturesItemSemanticEditPolicy());
 	}
 
 	/**
Index: src/org/unicase/ui/diagram/urml/edit/parts/IsRefinedLabel3EditPart.java
===================================================================
--- src/org/unicase/ui/diagram/urml/edit/parts/IsRefinedLabel3EditPart.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/edit/parts/IsRefinedLabel3EditPart.java	(working copy)
@@ -50,7 +50,8 @@
 /**
  * @generated
  */
-public class IsRefinedLabel3EditPart extends LabelEditPart implements ITextAwareEditPart {
+public class IsRefinedLabel3EditPart extends LabelEditPart implements
+		ITextAwareEditPart {
 
 	/**
 	 * @generated
@@ -70,7 +71,7 @@
 	/**
 	 * @generated
 	 */
-	private List parserElements;
+	private List<?> parserElements;
 
 	/**
 	 * @generated
@@ -81,8 +82,10 @@
 	 * @generated
 	 */
 	static {
-		registerSnapBackPosition(UrmlVisualIDRegistry
-			.getType(org.unicase.ui.diagram.urml.edit.parts.IsRefinedLabel3EditPart.VISUAL_ID), new Point(0, 20));
+		registerSnapBackPosition(
+				UrmlVisualIDRegistry
+						.getType(org.unicase.ui.diagram.urml.edit.parts.IsRefinedLabel3EditPart.VISUAL_ID),
+				new Point(0, 20));
 	}
 
 	/**
@@ -97,16 +100,12 @@
 	 */
 	protected void createDefaultEditPolicies() {
 		super.createDefaultEditPolicies();
-		installEditPolicy(EditPolicy.DIRECT_EDIT_ROLE, new LabelDirectEditPolicy());
-		installEditPolicy(EditPolicy.SELECTION_FEEDBACK_ROLE, new UrmlTextSelectionEditPolicy());
-		installEditPolicy(EditPolicy.PRIMARY_DRAG_ROLE, new NonResizableLabelEditPolicy() {
-
-			protected List createSelectionHandles() {
-				MoveHandle mh = new MoveHandle((GraphicalEditPart) getHost());
-				mh.setBorder(null);
-				return Collections.singletonList(mh);
-			}
-		});
+		installEditPolicy(EditPolicy.DIRECT_EDIT_ROLE,
+				new LabelDirectEditPolicy());
+		installEditPolicy(EditPolicy.SELECTION_FEEDBACK_ROLE,
+				new UrmlTextSelectionEditPolicy());
+		installEditPolicy(EditPolicy.PRIMARY_DRAG_ROLE,
+				new URMLDiagramEditPart.LinkLabelDragPolicy());
 	}
 
 	/**
@@ -174,6 +173,7 @@
 	/**
 	 * @generated
 	 */
+	@SuppressWarnings("rawtypes")
 	protected List getModelChildren() {
 		return Collections.EMPTY_LIST;
 	}
@@ -206,7 +206,9 @@
 		String text = null;
 		EObject parserElement = getParserElement();
 		if (parserElement != null && getParser() != null) {
-			text = getParser().getPrintString(new EObjectAdapter(parserElement), getParserOptions().intValue());
+			text = getParser().getPrintString(
+					new EObjectAdapter(parserElement),
+					getParserOptions().intValue());
 		}
 		if (text == null || text.length() == 0) {
 			text = defaultText;
@@ -236,7 +238,9 @@
 		if (getParserElement() == null || getParser() == null) {
 			return ""; //$NON-NLS-1$
 		}
-		return getParser().getEditString(new EObjectAdapter(getParserElement()), getParserOptions().intValue());
+		return getParser().getEditString(
+				new EObjectAdapter(getParserElement()),
+				getParserOptions().intValue());
 	}
 
 	/**
@@ -257,14 +261,20 @@
 					final EObject element = getParserElement();
 					final IParser parser = getParser();
 					try {
-						IParserEditStatus valid = (IParserEditStatus) getEditingDomain().runExclusive(
-							new RunnableWithResult.Impl() {
+						IParserEditStatus valid = (IParserEditStatus) getEditingDomain()
+								.runExclusive(
+										new RunnableWithResult.Impl<IParserEditStatus>() {
 
-								public void run() {
-									setResult(parser.isValidEditString(new EObjectAdapter(element), (String) value));
-								}
-							});
-						return valid.getCode() == ParserEditStatus.EDITABLE ? null : valid.getMessage();
+											public void run() {
+												setResult(parser
+														.isValidEditString(
+																new EObjectAdapter(
+																		element),
+																(String) value));
+											}
+										});
+						return valid.getCode() == ParserEditStatus.EDITABLE ? null
+								: valid.getMessage();
 					} catch (InterruptedException ie) {
 						ie.printStackTrace();
 					}
@@ -283,7 +293,8 @@
 		if (getParserElement() == null || getParser() == null) {
 			return null;
 		}
-		return getParser().getCompletionProcessor(new EObjectAdapter(getParserElement()));
+		return getParser().getCompletionProcessor(
+				new EObjectAdapter(getParserElement()));
 	}
 
 	/**
@@ -298,9 +309,12 @@
 	 */
 	public IParser getParser() {
 		if (parser == null) {
-			parser = UrmlParserProvider.getParser(
-				UrmlElementTypes.NonFunctionalRequirementSubNonFunctionalRequirements_4043, getParserElement(),
-				UrmlVisualIDRegistry.getType(org.unicase.ui.diagram.urml.edit.parts.IsRefinedLabel3EditPart.VISUAL_ID));
+			parser = UrmlParserProvider
+					.getParser(
+							UrmlElementTypes.NonFunctionalRequirementSubNonFunctionalRequirements_4043,
+							getParserElement(),
+							UrmlVisualIDRegistry
+									.getType(org.unicase.ui.diagram.urml.edit.parts.IsRefinedLabel3EditPart.VISUAL_ID));
 		}
 		return parser;
 	}
@@ -310,8 +324,9 @@
 	 */
 	protected DirectEditManager getManager() {
 		if (manager == null) {
-			setManager(new TextDirectEditManager(this, TextDirectEditManager.getTextCellEditorClass(this),
-				UrmlEditPartFactory.getTextCellEditorLocator(this)));
+			setManager(new TextDirectEditManager(this,
+					TextDirectEditManager.getTextCellEditorClass(this),
+					UrmlEditPartFactory.getTextCellEditorLocator(this)));
 		}
 		return manager;
 	}
@@ -335,7 +350,8 @@
 	 */
 	protected void performDirectEdit(Point eventLocation) {
 		if (getManager().getClass() == TextDirectEditManager.class) {
-			((TextDirectEditManager) getManager()).show(eventLocation.getSWTPoint());
+			((TextDirectEditManager) getManager()).show(eventLocation
+					.getSWTPoint());
 		}
 	}
 
@@ -360,11 +376,15 @@
 
 				public void run() {
 					if (isActive() && isEditable()) {
-						if (theRequest.getExtendedData().get(RequestConstants.REQ_DIRECTEDIT_EXTENDEDDATA_INITIAL_CHAR) instanceof Character) {
-							Character initialChar = (Character) theRequest.getExtendedData().get(
-								RequestConstants.REQ_DIRECTEDIT_EXTENDEDDATA_INITIAL_CHAR);
+						if (theRequest
+								.getExtendedData()
+								.get(RequestConstants.REQ_DIRECTEDIT_EXTENDEDDATA_INITIAL_CHAR) instanceof Character) {
+							Character initialChar = (Character) theRequest
+									.getExtendedData()
+									.get(RequestConstants.REQ_DIRECTEDIT_EXTENDEDDATA_INITIAL_CHAR);
 							performDirectEdit(initialChar.charValue());
-						} else if ((theRequest instanceof DirectEditRequest) && (getEditText().equals(getLabelText()))) {
+						} else if ((theRequest instanceof DirectEditRequest)
+								&& (getEditText().equals(getLabelText()))) {
 							DirectEditRequest editRequest = (DirectEditRequest) theRequest;
 							performDirectEdit(editRequest.getLocation());
 						} else {
@@ -410,7 +430,8 @@
 	 * @generated
 	 */
 	protected void refreshUnderline() {
-		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(NotationPackage.eINSTANCE.getFontStyle());
+		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(
+				NotationPackage.eINSTANCE.getFontStyle());
 		if (style != null && getFigure() instanceof WrappingLabel) {
 			((WrappingLabel) getFigure()).setTextUnderline(style.isUnderline());
 		}
@@ -420,9 +441,11 @@
 	 * @generated
 	 */
 	protected void refreshStrikeThrough() {
-		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(NotationPackage.eINSTANCE.getFontStyle());
+		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(
+				NotationPackage.eINSTANCE.getFontStyle());
 		if (style != null && getFigure() instanceof WrappingLabel) {
-			((WrappingLabel) getFigure()).setTextStrikeThrough(style.isStrikeThrough());
+			((WrappingLabel) getFigure()).setTextStrikeThrough(style
+					.isStrikeThrough());
 		}
 	}
 
@@ -430,11 +453,13 @@
 	 * @generated
 	 */
 	protected void refreshFont() {
-		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(NotationPackage.eINSTANCE.getFontStyle());
+		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(
+				NotationPackage.eINSTANCE.getFontStyle());
 		if (style != null) {
-			FontData fontData = new FontData(style.getFontName(), style.getFontHeight(), (style.isBold() ? SWT.BOLD
-				: SWT.NORMAL)
-				| (style.isItalic() ? SWT.ITALIC : SWT.NORMAL));
+			FontData fontData = new FontData(style.getFontName(),
+					style.getFontHeight(), (style.isBold() ? SWT.BOLD
+							: SWT.NORMAL)
+							| (style.isItalic() ? SWT.ITALIC : SWT.NORMAL));
 			setFont(fontData);
 		}
 	}
@@ -452,9 +477,11 @@
 	protected void addSemanticListeners() {
 		if (getParser() instanceof ISemanticParser) {
 			EObject element = resolveSemanticElement();
-			parserElements = ((ISemanticParser) getParser()).getSemanticElementsBeingParsed(element);
+			parserElements = ((ISemanticParser) getParser())
+					.getSemanticElementsBeingParsed(element);
 			for (int i = 0; i < parserElements.size(); i++) {
-				addListenerFilter("SemanticModel" + i, this, (EObject) parserElements.get(i)); //$NON-NLS-1$
+				addListenerFilter(
+						"SemanticModel" + i, this, (EObject) parserElements.get(i)); //$NON-NLS-1$
 			}
 		} else {
 			super.addSemanticListeners();
@@ -504,17 +531,25 @@
 		if (NotationPackage.eINSTANCE.getFontStyle_FontColor().equals(feature)) {
 			Integer c = (Integer) event.getNewValue();
 			setFontColor(DiagramColorRegistry.getInstance().getColor(c));
-		} else if (NotationPackage.eINSTANCE.getFontStyle_Underline().equals(feature)) {
+		} else if (NotationPackage.eINSTANCE.getFontStyle_Underline().equals(
+				feature)) {
 			refreshUnderline();
-		} else if (NotationPackage.eINSTANCE.getFontStyle_StrikeThrough().equals(feature)) {
+		} else if (NotationPackage.eINSTANCE.getFontStyle_StrikeThrough()
+				.equals(feature)) {
 			refreshStrikeThrough();
-		} else if (NotationPackage.eINSTANCE.getFontStyle_FontHeight().equals(feature)
-			|| NotationPackage.eINSTANCE.getFontStyle_FontName().equals(feature)
-			|| NotationPackage.eINSTANCE.getFontStyle_Bold().equals(feature)
-			|| NotationPackage.eINSTANCE.getFontStyle_Italic().equals(feature)) {
+		} else if (NotationPackage.eINSTANCE.getFontStyle_FontHeight().equals(
+				feature)
+				|| NotationPackage.eINSTANCE.getFontStyle_FontName().equals(
+						feature)
+				|| NotationPackage.eINSTANCE.getFontStyle_Bold()
+						.equals(feature)
+				|| NotationPackage.eINSTANCE.getFontStyle_Italic().equals(
+						feature)) {
 			refreshFont();
 		} else {
-			if (getParser() != null && getParser().isAffectingEvent(event, getParserOptions().intValue())) {
+			if (getParser() != null
+					&& getParser().isAffectingEvent(event,
+							getParserOptions().intValue())) {
 				refreshLabel();
 			}
 			if (getParser() instanceof ISemanticParser) {
Index: src/org/unicase/ui/diagram/urml/edit/parts/ExcludesLabelEditPart.java
===================================================================
--- src/org/unicase/ui/diagram/urml/edit/parts/ExcludesLabelEditPart.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/edit/parts/ExcludesLabelEditPart.java	(working copy)
@@ -50,7 +50,8 @@
 /**
  * @generated
  */
-public class ExcludesLabelEditPart extends LabelEditPart implements ITextAwareEditPart {
+public class ExcludesLabelEditPart extends LabelEditPart implements
+		ITextAwareEditPart {
 
 	/**
 	 * @generated
@@ -70,7 +71,7 @@
 	/**
 	 * @generated
 	 */
-	private List parserElements;
+	private List<?> parserElements;
 
 	/**
 	 * @generated
@@ -81,8 +82,10 @@
 	 * @generated
 	 */
 	static {
-		registerSnapBackPosition(UrmlVisualIDRegistry
-			.getType(org.unicase.ui.diagram.urml.edit.parts.ExcludesLabelEditPart.VISUAL_ID), new Point(0, 20));
+		registerSnapBackPosition(
+				UrmlVisualIDRegistry
+						.getType(org.unicase.ui.diagram.urml.edit.parts.ExcludesLabelEditPart.VISUAL_ID),
+				new Point(0, 20));
 	}
 
 	/**
@@ -97,16 +100,12 @@
 	 */
 	protected void createDefaultEditPolicies() {
 		super.createDefaultEditPolicies();
-		installEditPolicy(EditPolicy.DIRECT_EDIT_ROLE, new LabelDirectEditPolicy());
-		installEditPolicy(EditPolicy.SELECTION_FEEDBACK_ROLE, new UrmlTextSelectionEditPolicy());
-		installEditPolicy(EditPolicy.PRIMARY_DRAG_ROLE, new NonResizableLabelEditPolicy() {
-
-			protected List createSelectionHandles() {
-				MoveHandle mh = new MoveHandle((GraphicalEditPart) getHost());
-				mh.setBorder(null);
-				return Collections.singletonList(mh);
-			}
-		});
+		installEditPolicy(EditPolicy.DIRECT_EDIT_ROLE,
+				new LabelDirectEditPolicy());
+		installEditPolicy(EditPolicy.SELECTION_FEEDBACK_ROLE,
+				new UrmlTextSelectionEditPolicy());
+		installEditPolicy(EditPolicy.PRIMARY_DRAG_ROLE,
+				new URMLDiagramEditPart.LinkLabelDragPolicy());
 	}
 
 	/**
@@ -174,6 +173,7 @@
 	/**
 	 * @generated
 	 */
+	@SuppressWarnings("rawtypes")
 	protected List getModelChildren() {
 		return Collections.EMPTY_LIST;
 	}
@@ -206,7 +206,9 @@
 		String text = null;
 		EObject parserElement = getParserElement();
 		if (parserElement != null && getParser() != null) {
-			text = getParser().getPrintString(new EObjectAdapter(parserElement), getParserOptions().intValue());
+			text = getParser().getPrintString(
+					new EObjectAdapter(parserElement),
+					getParserOptions().intValue());
 		}
 		if (text == null || text.length() == 0) {
 			text = defaultText;
@@ -236,7 +238,9 @@
 		if (getParserElement() == null || getParser() == null) {
 			return ""; //$NON-NLS-1$
 		}
-		return getParser().getEditString(new EObjectAdapter(getParserElement()), getParserOptions().intValue());
+		return getParser().getEditString(
+				new EObjectAdapter(getParserElement()),
+				getParserOptions().intValue());
 	}
 
 	/**
@@ -257,14 +261,20 @@
 					final EObject element = getParserElement();
 					final IParser parser = getParser();
 					try {
-						IParserEditStatus valid = (IParserEditStatus) getEditingDomain().runExclusive(
-							new RunnableWithResult.Impl() {
+						IParserEditStatus valid = (IParserEditStatus) getEditingDomain()
+								.runExclusive(
+										new RunnableWithResult.Impl<IParserEditStatus>() {
 
-								public void run() {
-									setResult(parser.isValidEditString(new EObjectAdapter(element), (String) value));
-								}
-							});
-						return valid.getCode() == ParserEditStatus.EDITABLE ? null : valid.getMessage();
+											public void run() {
+												setResult(parser
+														.isValidEditString(
+																new EObjectAdapter(
+																		element),
+																(String) value));
+											}
+										});
+						return valid.getCode() == ParserEditStatus.EDITABLE ? null
+								: valid.getMessage();
 					} catch (InterruptedException ie) {
 						ie.printStackTrace();
 					}
@@ -283,7 +293,8 @@
 		if (getParserElement() == null || getParser() == null) {
 			return null;
 		}
-		return getParser().getCompletionProcessor(new EObjectAdapter(getParserElement()));
+		return getParser().getCompletionProcessor(
+				new EObjectAdapter(getParserElement()));
 	}
 
 	/**
@@ -298,9 +309,12 @@
 	 */
 	public IParser getParser() {
 		if (parser == null) {
-			parser = UrmlParserProvider.getParser(UrmlElementTypes.AbstractFeatureExcludedFeatures_4038,
-				getParserElement(), UrmlVisualIDRegistry
-					.getType(org.unicase.ui.diagram.urml.edit.parts.ExcludesLabelEditPart.VISUAL_ID));
+			parser = UrmlParserProvider
+					.getParser(
+							UrmlElementTypes.AbstractFeatureExcludedFeatures_4038,
+							getParserElement(),
+							UrmlVisualIDRegistry
+									.getType(org.unicase.ui.diagram.urml.edit.parts.ExcludesLabelEditPart.VISUAL_ID));
 		}
 		return parser;
 	}
@@ -310,8 +324,9 @@
 	 */
 	protected DirectEditManager getManager() {
 		if (manager == null) {
-			setManager(new TextDirectEditManager(this, TextDirectEditManager.getTextCellEditorClass(this),
-				UrmlEditPartFactory.getTextCellEditorLocator(this)));
+			setManager(new TextDirectEditManager(this,
+					TextDirectEditManager.getTextCellEditorClass(this),
+					UrmlEditPartFactory.getTextCellEditorLocator(this)));
 		}
 		return manager;
 	}
@@ -335,7 +350,8 @@
 	 */
 	protected void performDirectEdit(Point eventLocation) {
 		if (getManager().getClass() == TextDirectEditManager.class) {
-			((TextDirectEditManager) getManager()).show(eventLocation.getSWTPoint());
+			((TextDirectEditManager) getManager()).show(eventLocation
+					.getSWTPoint());
 		}
 	}
 
@@ -360,11 +376,15 @@
 
 				public void run() {
 					if (isActive() && isEditable()) {
-						if (theRequest.getExtendedData().get(RequestConstants.REQ_DIRECTEDIT_EXTENDEDDATA_INITIAL_CHAR) instanceof Character) {
-							Character initialChar = (Character) theRequest.getExtendedData().get(
-								RequestConstants.REQ_DIRECTEDIT_EXTENDEDDATA_INITIAL_CHAR);
+						if (theRequest
+								.getExtendedData()
+								.get(RequestConstants.REQ_DIRECTEDIT_EXTENDEDDATA_INITIAL_CHAR) instanceof Character) {
+							Character initialChar = (Character) theRequest
+									.getExtendedData()
+									.get(RequestConstants.REQ_DIRECTEDIT_EXTENDEDDATA_INITIAL_CHAR);
 							performDirectEdit(initialChar.charValue());
-						} else if ((theRequest instanceof DirectEditRequest) && (getEditText().equals(getLabelText()))) {
+						} else if ((theRequest instanceof DirectEditRequest)
+								&& (getEditText().equals(getLabelText()))) {
 							DirectEditRequest editRequest = (DirectEditRequest) theRequest;
 							performDirectEdit(editRequest.getLocation());
 						} else {
@@ -410,7 +430,8 @@
 	 * @generated
 	 */
 	protected void refreshUnderline() {
-		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(NotationPackage.eINSTANCE.getFontStyle());
+		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(
+				NotationPackage.eINSTANCE.getFontStyle());
 		if (style != null && getFigure() instanceof WrappingLabel) {
 			((WrappingLabel) getFigure()).setTextUnderline(style.isUnderline());
 		}
@@ -420,9 +441,11 @@
 	 * @generated
 	 */
 	protected void refreshStrikeThrough() {
-		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(NotationPackage.eINSTANCE.getFontStyle());
+		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(
+				NotationPackage.eINSTANCE.getFontStyle());
 		if (style != null && getFigure() instanceof WrappingLabel) {
-			((WrappingLabel) getFigure()).setTextStrikeThrough(style.isStrikeThrough());
+			((WrappingLabel) getFigure()).setTextStrikeThrough(style
+					.isStrikeThrough());
 		}
 	}
 
@@ -430,11 +453,13 @@
 	 * @generated
 	 */
 	protected void refreshFont() {
-		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(NotationPackage.eINSTANCE.getFontStyle());
+		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(
+				NotationPackage.eINSTANCE.getFontStyle());
 		if (style != null) {
-			FontData fontData = new FontData(style.getFontName(), style.getFontHeight(), (style.isBold() ? SWT.BOLD
-				: SWT.NORMAL)
-				| (style.isItalic() ? SWT.ITALIC : SWT.NORMAL));
+			FontData fontData = new FontData(style.getFontName(),
+					style.getFontHeight(), (style.isBold() ? SWT.BOLD
+							: SWT.NORMAL)
+							| (style.isItalic() ? SWT.ITALIC : SWT.NORMAL));
 			setFont(fontData);
 		}
 	}
@@ -452,9 +477,11 @@
 	protected void addSemanticListeners() {
 		if (getParser() instanceof ISemanticParser) {
 			EObject element = resolveSemanticElement();
-			parserElements = ((ISemanticParser) getParser()).getSemanticElementsBeingParsed(element);
+			parserElements = ((ISemanticParser) getParser())
+					.getSemanticElementsBeingParsed(element);
 			for (int i = 0; i < parserElements.size(); i++) {
-				addListenerFilter("SemanticModel" + i, this, (EObject) parserElements.get(i)); //$NON-NLS-1$
+				addListenerFilter(
+						"SemanticModel" + i, this, (EObject) parserElements.get(i)); //$NON-NLS-1$
 			}
 		} else {
 			super.addSemanticListeners();
@@ -504,17 +531,25 @@
 		if (NotationPackage.eINSTANCE.getFontStyle_FontColor().equals(feature)) {
 			Integer c = (Integer) event.getNewValue();
 			setFontColor(DiagramColorRegistry.getInstance().getColor(c));
-		} else if (NotationPackage.eINSTANCE.getFontStyle_Underline().equals(feature)) {
+		} else if (NotationPackage.eINSTANCE.getFontStyle_Underline().equals(
+				feature)) {
 			refreshUnderline();
-		} else if (NotationPackage.eINSTANCE.getFontStyle_StrikeThrough().equals(feature)) {
+		} else if (NotationPackage.eINSTANCE.getFontStyle_StrikeThrough()
+				.equals(feature)) {
 			refreshStrikeThrough();
-		} else if (NotationPackage.eINSTANCE.getFontStyle_FontHeight().equals(feature)
-			|| NotationPackage.eINSTANCE.getFontStyle_FontName().equals(feature)
-			|| NotationPackage.eINSTANCE.getFontStyle_Bold().equals(feature)
-			|| NotationPackage.eINSTANCE.getFontStyle_Italic().equals(feature)) {
+		} else if (NotationPackage.eINSTANCE.getFontStyle_FontHeight().equals(
+				feature)
+				|| NotationPackage.eINSTANCE.getFontStyle_FontName().equals(
+						feature)
+				|| NotationPackage.eINSTANCE.getFontStyle_Bold()
+						.equals(feature)
+				|| NotationPackage.eINSTANCE.getFontStyle_Italic().equals(
+						feature)) {
 			refreshFont();
 		} else {
-			if (getParser() != null && getParser().isAffectingEvent(event, getParserOptions().intValue())) {
+			if (getParser() != null
+					&& getParser().isAffectingEvent(event,
+							getParserOptions().intValue())) {
 				refreshLabel();
 			}
 			if (getParser() instanceof ISemanticParser) {
Index: src/org/unicase/ui/diagram/urml/edit/parts/ServiceSubServicesEditPart.java
===================================================================
--- src/org/unicase/ui/diagram/urml/edit/parts/ServiceSubServicesEditPart.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/edit/parts/ServiceSubServicesEditPart.java	(working copy)
@@ -12,7 +12,8 @@
 /**
  * @generated
  */
-public class ServiceSubServicesEditPart extends ConnectionNodeEditPart implements ITreeBranchEditPart {
+public class ServiceSubServicesEditPart extends ConnectionNodeEditPart
+		implements ITreeBranchEditPart {
 
 	/**
 	 * @generated
@@ -31,41 +32,8 @@
 	 */
 	protected void createDefaultEditPolicies() {
 		super.createDefaultEditPolicies();
-		installEditPolicy(EditPolicyRoles.SEMANTIC_ROLE, new ServiceSubServicesItemSemanticEditPolicy());
-	}
-
-	/**
-	 * @generated
-	 */
-	protected boolean addFixedChild(EditPart childEditPart) {
-		return false;
-	}
-
-	/**
-	 * @generated
-	 */
-	protected void addChildVisual(EditPart childEditPart, int index) {
-		if (addFixedChild(childEditPart)) {
-			return;
-		}
-		super.addChildVisual(childEditPart, -1);
-	}
-
-	/**
-	 * @generated
-	 */
-	protected boolean removeFixedChild(EditPart childEditPart) {
-		return false;
-	}
-
-	/**
-	 * @generated
-	 */
-	protected void removeChildVisual(EditPart childEditPart) {
-		if (removeFixedChild(childEditPart)) {
-			return;
-		}
-		super.removeChildVisual(childEditPart);
+		installEditPolicy(EditPolicyRoles.SEMANTIC_ROLE,
+				new ServiceSubServicesItemSemanticEditPolicy());
 	}
 
 	/**
Index: src/org/unicase/ui/diagram/urml/edit/parts/NonFunctionalRequirementSubNonFunctionalRequirementsEditPart.java
===================================================================
--- src/org/unicase/ui/diagram/urml/edit/parts/NonFunctionalRequirementSubNonFunctionalRequirementsEditPart.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/edit/parts/NonFunctionalRequirementSubNonFunctionalRequirementsEditPart.java	(working copy)
@@ -12,8 +12,8 @@
 /**
  * @generated
  */
-public class NonFunctionalRequirementSubNonFunctionalRequirementsEditPart extends ConnectionNodeEditPart implements
-	ITreeBranchEditPart {
+public class NonFunctionalRequirementSubNonFunctionalRequirementsEditPart
+		extends ConnectionNodeEditPart implements ITreeBranchEditPart {
 
 	/**
 	 * @generated
@@ -23,7 +23,8 @@
 	/**
 	 * @generated
 	 */
-	public NonFunctionalRequirementSubNonFunctionalRequirementsEditPart(View view) {
+	public NonFunctionalRequirementSubNonFunctionalRequirementsEditPart(
+			View view) {
 		super(view);
 	}
 
@@ -32,42 +33,9 @@
 	 */
 	protected void createDefaultEditPolicies() {
 		super.createDefaultEditPolicies();
-		installEditPolicy(EditPolicyRoles.SEMANTIC_ROLE,
-			new NonFunctionalRequirementSubNonFunctionalRequirementsItemSemanticEditPolicy());
-	}
-
-	/**
-	 * @generated
-	 */
-	protected boolean addFixedChild(EditPart childEditPart) {
-		return false;
-	}
-
-	/**
-	 * @generated
-	 */
-	protected void addChildVisual(EditPart childEditPart, int index) {
-		if (addFixedChild(childEditPart)) {
-			return;
-		}
-		super.addChildVisual(childEditPart, -1);
-	}
-
-	/**
-	 * @generated
-	 */
-	protected boolean removeFixedChild(EditPart childEditPart) {
-		return false;
-	}
-
-	/**
-	 * @generated
-	 */
-	protected void removeChildVisual(EditPart childEditPart) {
-		if (removeFixedChild(childEditPart)) {
-			return;
-		}
-		super.removeChildVisual(childEditPart);
+		installEditPolicy(
+				EditPolicyRoles.SEMANTIC_ROLE,
+				new NonFunctionalRequirementSubNonFunctionalRequirementsItemSemanticEditPolicy());
 	}
 
 	/**
Index: src/org/unicase/ui/diagram/urml/edit/parts/UrmlEditPartFactory.java
===================================================================
--- src/org/unicase/ui/diagram/urml/edit/parts/UrmlEditPartFactory.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/edit/parts/UrmlEditPartFactory.java	(working copy)
@@ -116,13 +116,15 @@
 				return new IsRefinedLabel2EditPart(view);
 
 			case AbstractFeatureDetailingFunctionalRequirementsEditPart.VISUAL_ID:
-				return new AbstractFeatureDetailingFunctionalRequirementsEditPart(view);
+				return new AbstractFeatureDetailingFunctionalRequirementsEditPart(
+						view);
 
 			case IsDetailedLabelEditPart.VISUAL_ID:
 				return new IsDetailedLabelEditPart(view);
 
 			case AbstractFeatureConstrainingNonFunctionalRequirementsEditPart.VISUAL_ID:
-				return new AbstractFeatureConstrainingNonFunctionalRequirementsEditPart(view);
+				return new AbstractFeatureConstrainingNonFunctionalRequirementsEditPart(
+						view);
 
 			case IsConstraintLabelEditPart.VISUAL_ID:
 				return new IsConstraintLabelEditPart(view);
@@ -194,13 +196,15 @@
 				return new IsImplementedLabelEditPart(view);
 
 			case NonFunctionalRequirementSubNonFunctionalRequirementsEditPart.VISUAL_ID:
-				return new NonFunctionalRequirementSubNonFunctionalRequirementsEditPart(view);
+				return new NonFunctionalRequirementSubNonFunctionalRequirementsEditPart(
+						view);
 
 			case IsRefinedLabel3EditPart.VISUAL_ID:
 				return new IsRefinedLabel3EditPart(view);
 
 			case FunctionalRequirementSubFunctionalRequirementsEditPart.VISUAL_ID:
-				return new FunctionalRequirementSubFunctionalRequirementsEditPart(view);
+				return new FunctionalRequirementSubFunctionalRequirementsEditPart(
+						view);
 
 			case IsRefinedLabel4EditPart.VISUAL_ID:
 				return new IsRefinedLabel4EditPart(view);
@@ -259,6 +263,12 @@
 			case ConsistsOfLabelEditPart.VISUAL_ID:
 				return new ConsistsOfLabelEditPart(view);
 
+			case UrmlModelElementAssociationsEditPart.VISUAL_ID:
+				return new UrmlModelElementAssociationsEditPart(view);
+
+			case TriggersLabel2EditPart.VISUAL_ID:
+				return new TriggersLabel2EditPart(view);
+
 			}
 		}
 		return createUnrecognizedEditPart(context, model);
@@ -275,7 +285,8 @@
 	/**
 	 * @generated
 	 */
-	public static CellEditorLocator getTextCellEditorLocator(ITextAwareEditPart source) {
+	public static CellEditorLocator getTextCellEditorLocator(
+			ITextAwareEditPart source) {
 		if (source.getFigure() instanceof WrappingLabel)
 			return new TextCellEditorLocator((WrappingLabel) source.getFigure());
 		else {
@@ -314,11 +325,17 @@
 			Text text = (Text) celleditor.getControl();
 			Rectangle rect = getWrapLabel().getTextBounds().getCopy();
 			getWrapLabel().translateToAbsolute(rect);
-			if (getWrapLabel().isTextWrapOn() && getWrapLabel().getText().length() > 0) {
-				rect.setSize(new Dimension(text.computeSize(rect.width, SWT.DEFAULT)));
-			} else {
-				int avr = FigureUtilities.getFontMetrics(text.getFont()).getAverageCharWidth();
-				rect.setSize(new Dimension(text.computeSize(SWT.DEFAULT, SWT.DEFAULT)).expand(avr * 2, 0));
+			if (!text.getFont().isDisposed()) {
+				if (getWrapLabel().isTextWrapOn()
+						&& getWrapLabel().getText().length() > 0) {
+					rect.setSize(new Dimension(text.computeSize(rect.width,
+							SWT.DEFAULT)));
+				} else {
+					int avr = FigureUtilities.getFontMetrics(text.getFont())
+							.getAverageCharWidth();
+					rect.setSize(new Dimension(text.computeSize(SWT.DEFAULT,
+							SWT.DEFAULT)).expand(avr * 2, 0));
+				}
 			}
 			if (!rect.equals(new Rectangle(text.getBounds()))) {
 				text.setBounds(rect.x, rect.y, rect.width, rect.height);
@@ -357,8 +374,12 @@
 			Text text = (Text) celleditor.getControl();
 			Rectangle rect = getLabel().getTextBounds().getCopy();
 			getLabel().translateToAbsolute(rect);
-			int avr = FigureUtilities.getFontMetrics(text.getFont()).getAverageCharWidth();
-			rect.setSize(new Dimension(text.computeSize(SWT.DEFAULT, SWT.DEFAULT)).expand(avr * 2, 0));
+			if (!text.getFont().isDisposed()) {
+				int avr = FigureUtilities.getFontMetrics(text.getFont())
+						.getAverageCharWidth();
+				rect.setSize(new Dimension(text.computeSize(SWT.DEFAULT,
+						SWT.DEFAULT)).expand(avr * 2, 0));
+			}
 			if (!rect.equals(new Rectangle(text.getBounds()))) {
 				text.setBounds(rect.x, rect.y, rect.width, rect.height);
 			}
Index: src/org/unicase/ui/diagram/urml/edit/parts/VariationPointInstanceVariationPointEditPart.java
===================================================================
--- src/org/unicase/ui/diagram/urml/edit/parts/VariationPointInstanceVariationPointEditPart.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/edit/parts/VariationPointInstanceVariationPointEditPart.java	(working copy)
@@ -12,7 +12,8 @@
 /**
  * @generated
  */
-public class VariationPointInstanceVariationPointEditPart extends ConnectionNodeEditPart implements ITreeBranchEditPart {
+public class VariationPointInstanceVariationPointEditPart extends
+		ConnectionNodeEditPart implements ITreeBranchEditPart {
 
 	/**
 	 * @generated
@@ -31,42 +32,9 @@
 	 */
 	protected void createDefaultEditPolicies() {
 		super.createDefaultEditPolicies();
-		installEditPolicy(EditPolicyRoles.SEMANTIC_ROLE,
-			new VariationPointInstanceVariationPointItemSemanticEditPolicy());
-	}
-
-	/**
-	 * @generated
-	 */
-	protected boolean addFixedChild(EditPart childEditPart) {
-		return false;
-	}
-
-	/**
-	 * @generated
-	 */
-	protected void addChildVisual(EditPart childEditPart, int index) {
-		if (addFixedChild(childEditPart)) {
-			return;
-		}
-		super.addChildVisual(childEditPart, -1);
-	}
-
-	/**
-	 * @generated
-	 */
-	protected boolean removeFixedChild(EditPart childEditPart) {
-		return false;
-	}
-
-	/**
-	 * @generated
-	 */
-	protected void removeChildVisual(EditPart childEditPart) {
-		if (removeFixedChild(childEditPart)) {
-			return;
-		}
-		super.removeChildVisual(childEditPart);
+		installEditPolicy(
+				EditPolicyRoles.SEMANTIC_ROLE,
+				new VariationPointInstanceVariationPointItemSemanticEditPolicy());
 	}
 
 	/**
Index: src/org/unicase/ui/diagram/urml/edit/parts/StakeholderEditPart.java
===================================================================
--- src/org/unicase/ui/diagram/urml/edit/parts/StakeholderEditPart.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/edit/parts/StakeholderEditPart.java	(working copy)
@@ -1,6 +1,7 @@
 package org.unicase.ui.diagram.urml.edit.parts;
 
 import java.util.ArrayList;
+import java.util.LinkedList;
 import java.util.List;
 
 import org.eclipse.draw2d.Graphics;
@@ -20,6 +21,7 @@
 import org.eclipse.gmf.runtime.diagram.ui.editpolicies.EditPolicyRoles;
 import org.eclipse.gmf.runtime.draw2d.ui.figures.ConstrainedToolbarLayout;
 import org.eclipse.gmf.runtime.emf.type.core.IElementType;
+import org.eclipse.gmf.runtime.gef.ui.figures.DefaultSizeNodeFigure;
 import org.eclipse.gmf.runtime.gef.ui.figures.NodeFigure;
 import org.eclipse.gmf.runtime.notation.View;
 import org.eclipse.swt.SWT;
@@ -66,7 +68,8 @@
 	 */
 	protected void createDefaultEditPolicies() {
 		super.createDefaultEditPolicies();
-		installEditPolicy(EditPolicyRoles.SEMANTIC_ROLE, new StakeholderItemSemanticEditPolicy());
+		installEditPolicy(EditPolicyRoles.SEMANTIC_ROLE,
+				new StakeholderItemSemanticEditPolicy());
 		installEditPolicy(EditPolicy.LAYOUT_ROLE, createLayoutEditPolicy());
 		installEditPolicy(EditPolicyRoles.OPEN_ROLE, new MEEditorOpenPolicie());
 		// XXX need an SCR to runtime to have another abstract superclass that would let children add reasonable
@@ -78,10 +81,11 @@
 	 * @generated
 	 */
 	protected LayoutEditPolicy createLayoutEditPolicy() {
-		LayoutEditPolicy lep = new LayoutEditPolicy() {
+		org.eclipse.gmf.runtime.diagram.ui.editpolicies.LayoutEditPolicy lep = new org.eclipse.gmf.runtime.diagram.ui.editpolicies.LayoutEditPolicy() {
 
 			protected EditPolicy createChildEditPolicy(EditPart child) {
-				EditPolicy result = child.getEditPolicy(EditPolicy.PRIMARY_DRAG_ROLE);
+				EditPolicy result = child
+						.getEditPolicy(EditPolicy.PRIMARY_DRAG_ROLE);
 				if (result == null) {
 					result = new NonResizableEditPolicy();
 				}
@@ -103,8 +107,7 @@
 	 * @generated
 	 */
 	protected IFigure createNodeShape() {
-		StakeholderFigure figure = new StakeholderFigure();
-		return primaryShape = figure;
+		return primaryShape = new StakeholderFigure();
 	}
 
 	/**
@@ -119,7 +122,9 @@
 	 */
 	protected boolean addFixedChild(EditPart childEditPart) {
 		if (childEditPart instanceof StakeholderNameEditPart) {
-			((StakeholderNameEditPart) childEditPart).setLabel(getPrimaryShape().getFigureStakeholderFigure_name());
+			((StakeholderNameEditPart) childEditPart)
+					.setLabel(getPrimaryShape()
+							.getFigureStakeholderFigure_name());
 			return true;
 		}
 		return false;
@@ -254,47 +259,119 @@
 	 * @generated
 	 */
 	public EditPart getPrimaryChildEditPart() {
-		return getChildBySemanticHint(UrmlVisualIDRegistry.getType(StakeholderNameEditPart.VISUAL_ID));
+		return getChildBySemanticHint(UrmlVisualIDRegistry
+				.getType(StakeholderNameEditPart.VISUAL_ID));
 	}
 
 	/**
 	 * @generated
 	 */
-	public List/* <org.eclipse.gmf.runtime.emf.type.core.IElementType> */getMARelTypesOnSource() {
-		List/* <org.eclipse.gmf.runtime.emf.type.core.IElementType> */types = new ArrayList/*
-																							 * <org.eclipse.gmf.runtime.emf
-																							 * .type.core.IElementType>
-																							 */();
+	public List<IElementType> getMARelTypesOnSource() {
+		ArrayList<IElementType> types = new ArrayList<IElementType>(2);
 		types.add(UrmlElementTypes.StakeholderGoals_4008);
+		types.add(UrmlElementTypes.UrmlModelElementAssociations_4048);
 		return types;
 	}
 
 	/**
 	 * @generated
 	 */
-	public List/* <org.eclipse.gmf.runtime.emf.type.core.IElementType> */getMARelTypesOnSourceAndTarget(
-		IGraphicalEditPart targetEditPart) {
-		List/* <org.eclipse.gmf.runtime.emf.type.core.IElementType> */types = new ArrayList/*
-																							 * <org.eclipse.gmf.runtime.emf
-																							 * .type.core.IElementType>
-																							 */();
+	public List<IElementType> getMARelTypesOnSourceAndTarget(
+			IGraphicalEditPart targetEditPart) {
+		LinkedList<IElementType> types = new LinkedList<IElementType>();
 		if (targetEditPart instanceof GoalEditPart) {
 			types.add(UrmlElementTypes.StakeholderGoals_4008);
 		}
+		if (targetEditPart instanceof org.unicase.ui.diagram.urml.edit.parts.StakeholderEditPart) {
+			types.add(UrmlElementTypes.UrmlModelElementAssociations_4048);
+		}
+		if (targetEditPart instanceof GoalEditPart) {
+			types.add(UrmlElementTypes.UrmlModelElementAssociations_4048);
+		}
+		if (targetEditPart instanceof FunctionalRequirementEditPart) {
+			types.add(UrmlElementTypes.UrmlModelElementAssociations_4048);
+		}
+		if (targetEditPart instanceof FeatureEditPart) {
+			types.add(UrmlElementTypes.UrmlModelElementAssociations_4048);
+		}
+		if (targetEditPart instanceof ServiceEditPart) {
+			types.add(UrmlElementTypes.UrmlModelElementAssociations_4048);
+		}
+		if (targetEditPart instanceof NonFunctionalRequirementEditPart) {
+			types.add(UrmlElementTypes.UrmlModelElementAssociations_4048);
+		}
+		if (targetEditPart instanceof DangerEditPart) {
+			types.add(UrmlElementTypes.UrmlModelElementAssociations_4048);
+		}
+		if (targetEditPart instanceof ActorEditPart) {
+			types.add(UrmlElementTypes.UrmlModelElementAssociations_4048);
+		}
+		if (targetEditPart instanceof ProceduralMitigationEditPart) {
+			types.add(UrmlElementTypes.UrmlModelElementAssociations_4048);
+		}
+		if (targetEditPart instanceof VariationPointEditPart) {
+			types.add(UrmlElementTypes.UrmlModelElementAssociations_4048);
+		}
+		if (targetEditPart instanceof VariationPointInstanceEditPart) {
+			types.add(UrmlElementTypes.UrmlModelElementAssociations_4048);
+		}
+		if (targetEditPart instanceof ProductEditPart) {
+			types.add(UrmlElementTypes.UrmlModelElementAssociations_4048);
+		}
 		return types;
 	}
 
 	/**
 	 * @generated
 	 */
-	public List/* <org.eclipse.gmf.runtime.emf.type.core.IElementType> */getMATypesForTarget(
-		IElementType relationshipType) {
-		List/* <org.eclipse.gmf.runtime.emf.type.core.IElementType> */types = new ArrayList/*
-																							 * <org.eclipse.gmf.runtime.emf
-																							 * .type.core.IElementType>
-																							 */();
+	public List<IElementType> getMATypesForTarget(IElementType relationshipType) {
+		LinkedList<IElementType> types = new LinkedList<IElementType>();
 		if (relationshipType == UrmlElementTypes.StakeholderGoals_4008) {
 			types.add(UrmlElementTypes.Goal_2001);
+		} else if (relationshipType == UrmlElementTypes.UrmlModelElementAssociations_4048) {
+			types.add(UrmlElementTypes.Stakeholder_2002);
+			types.add(UrmlElementTypes.Goal_2001);
+			types.add(UrmlElementTypes.FunctionalRequirement_2006);
+			types.add(UrmlElementTypes.Feature_2012);
+			types.add(UrmlElementTypes.Service_2007);
+			types.add(UrmlElementTypes.NonFunctionalRequirement_2008);
+			types.add(UrmlElementTypes.Danger_2009);
+			types.add(UrmlElementTypes.Actor_2010);
+			types.add(UrmlElementTypes.ProceduralMitigation_2011);
+			types.add(UrmlElementTypes.VariationPoint_2013);
+			types.add(UrmlElementTypes.VariationPointInstance_2014);
+			types.add(UrmlElementTypes.Product_2015);
+		}
+		return types;
+	}
+
+	/**
+	 * @generated
+	 */
+	public List<IElementType> getMARelTypesOnTarget() {
+		ArrayList<IElementType> types = new ArrayList<IElementType>(1);
+		types.add(UrmlElementTypes.UrmlModelElementAssociations_4048);
+		return types;
+	}
+
+	/**
+	 * @generated
+	 */
+	public List<IElementType> getMATypesForSource(IElementType relationshipType) {
+		LinkedList<IElementType> types = new LinkedList<IElementType>();
+		if (relationshipType == UrmlElementTypes.UrmlModelElementAssociations_4048) {
+			types.add(UrmlElementTypes.Stakeholder_2002);
+			types.add(UrmlElementTypes.Goal_2001);
+			types.add(UrmlElementTypes.FunctionalRequirement_2006);
+			types.add(UrmlElementTypes.Feature_2012);
+			types.add(UrmlElementTypes.Service_2007);
+			types.add(UrmlElementTypes.NonFunctionalRequirement_2008);
+			types.add(UrmlElementTypes.Danger_2009);
+			types.add(UrmlElementTypes.Actor_2010);
+			types.add(UrmlElementTypes.ProceduralMitigation_2011);
+			types.add(UrmlElementTypes.VariationPoint_2013);
+			types.add(UrmlElementTypes.VariationPointInstance_2014);
+			types.add(UrmlElementTypes.Product_2015);
 		}
 		return types;
 	}
@@ -331,7 +408,8 @@
 
 			fFigureStakeholderFigure_name = new Label();
 
-			fFigureStakeholderFigure_name.setFont(FFIGURESTAKEHOLDERFIGURE_NAME_FONT);
+			fFigureStakeholderFigure_name
+					.setFont(FFIGURESTAKEHOLDERFIGURE_NAME_FONT);
 
 			this.add(fFigureStakeholderFigure_name);
 
@@ -340,25 +418,6 @@
 		/**
 		 * @generated
 		 */
-		private boolean myUseLocalCoordinates = false;
-
-		/**
-		 * @generated
-		 */
-		protected boolean useLocalCoordinates() {
-			return myUseLocalCoordinates;
-		}
-
-		/**
-		 * @generated
-		 */
-		protected void setUseLocalCoordinates(boolean useLocalCoordinates) {
-			myUseLocalCoordinates = useLocalCoordinates;
-		}
-
-		/**
-		 * @generated
-		 */
 		public Label getFigureStakeholderFigure_name() {
 			return fFigureStakeholderFigure_name;
 		}
@@ -368,6 +427,7 @@
 	/**
 	 * @generated
 	 */
-	static final Font FFIGURESTAKEHOLDERFIGURE_NAME_FONT = new Font(Display.getCurrent(), "Arial", 10, SWT.BOLD);
+	static final Font FFIGURESTAKEHOLDERFIGURE_NAME_FONT = new Font(
+			Display.getCurrent(), "Arial", 10, SWT.BOLD);
 
 }
Index: src/org/unicase/ui/diagram/urml/edit/parts/SuggestsLabelEditPart.java
===================================================================
--- src/org/unicase/ui/diagram/urml/edit/parts/SuggestsLabelEditPart.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/edit/parts/SuggestsLabelEditPart.java	(working copy)
@@ -50,7 +50,8 @@
 /**
  * @generated
  */
-public class SuggestsLabelEditPart extends LabelEditPart implements ITextAwareEditPart {
+public class SuggestsLabelEditPart extends LabelEditPart implements
+		ITextAwareEditPart {
 
 	/**
 	 * @generated
@@ -70,7 +71,7 @@
 	/**
 	 * @generated
 	 */
-	private List parserElements;
+	private List<?> parserElements;
 
 	/**
 	 * @generated
@@ -81,8 +82,10 @@
 	 * @generated
 	 */
 	static {
-		registerSnapBackPosition(UrmlVisualIDRegistry
-			.getType(org.unicase.ui.diagram.urml.edit.parts.SuggestsLabelEditPart.VISUAL_ID), new Point(0, 20));
+		registerSnapBackPosition(
+				UrmlVisualIDRegistry
+						.getType(org.unicase.ui.diagram.urml.edit.parts.SuggestsLabelEditPart.VISUAL_ID),
+				new Point(0, 20));
 	}
 
 	/**
@@ -97,16 +100,12 @@
 	 */
 	protected void createDefaultEditPolicies() {
 		super.createDefaultEditPolicies();
-		installEditPolicy(EditPolicy.DIRECT_EDIT_ROLE, new LabelDirectEditPolicy());
-		installEditPolicy(EditPolicy.SELECTION_FEEDBACK_ROLE, new UrmlTextSelectionEditPolicy());
-		installEditPolicy(EditPolicy.PRIMARY_DRAG_ROLE, new NonResizableLabelEditPolicy() {
-
-			protected List createSelectionHandles() {
-				MoveHandle mh = new MoveHandle((GraphicalEditPart) getHost());
-				mh.setBorder(null);
-				return Collections.singletonList(mh);
-			}
-		});
+		installEditPolicy(EditPolicy.DIRECT_EDIT_ROLE,
+				new LabelDirectEditPolicy());
+		installEditPolicy(EditPolicy.SELECTION_FEEDBACK_ROLE,
+				new UrmlTextSelectionEditPolicy());
+		installEditPolicy(EditPolicy.PRIMARY_DRAG_ROLE,
+				new URMLDiagramEditPart.LinkLabelDragPolicy());
 	}
 
 	/**
@@ -174,6 +173,7 @@
 	/**
 	 * @generated
 	 */
+	@SuppressWarnings("rawtypes")
 	protected List getModelChildren() {
 		return Collections.EMPTY_LIST;
 	}
@@ -206,7 +206,9 @@
 		String text = null;
 		EObject parserElement = getParserElement();
 		if (parserElement != null && getParser() != null) {
-			text = getParser().getPrintString(new EObjectAdapter(parserElement), getParserOptions().intValue());
+			text = getParser().getPrintString(
+					new EObjectAdapter(parserElement),
+					getParserOptions().intValue());
 		}
 		if (text == null || text.length() == 0) {
 			text = defaultText;
@@ -236,7 +238,9 @@
 		if (getParserElement() == null || getParser() == null) {
 			return ""; //$NON-NLS-1$
 		}
-		return getParser().getEditString(new EObjectAdapter(getParserElement()), getParserOptions().intValue());
+		return getParser().getEditString(
+				new EObjectAdapter(getParserElement()),
+				getParserOptions().intValue());
 	}
 
 	/**
@@ -257,14 +261,20 @@
 					final EObject element = getParserElement();
 					final IParser parser = getParser();
 					try {
-						IParserEditStatus valid = (IParserEditStatus) getEditingDomain().runExclusive(
-							new RunnableWithResult.Impl() {
+						IParserEditStatus valid = (IParserEditStatus) getEditingDomain()
+								.runExclusive(
+										new RunnableWithResult.Impl<IParserEditStatus>() {
 
-								public void run() {
-									setResult(parser.isValidEditString(new EObjectAdapter(element), (String) value));
-								}
-							});
-						return valid.getCode() == ParserEditStatus.EDITABLE ? null : valid.getMessage();
+											public void run() {
+												setResult(parser
+														.isValidEditString(
+																new EObjectAdapter(
+																		element),
+																(String) value));
+											}
+										});
+						return valid.getCode() == ParserEditStatus.EDITABLE ? null
+								: valid.getMessage();
 					} catch (InterruptedException ie) {
 						ie.printStackTrace();
 					}
@@ -283,7 +293,8 @@
 		if (getParserElement() == null || getParser() == null) {
 			return null;
 		}
-		return getParser().getCompletionProcessor(new EObjectAdapter(getParserElement()));
+		return getParser().getCompletionProcessor(
+				new EObjectAdapter(getParserElement()));
 	}
 
 	/**
@@ -298,9 +309,12 @@
 	 */
 	public IParser getParser() {
 		if (parser == null) {
-			parser = UrmlParserProvider.getParser(UrmlElementTypes.VariationPointOptionalSubFeatures_4046,
-				getParserElement(), UrmlVisualIDRegistry
-					.getType(org.unicase.ui.diagram.urml.edit.parts.SuggestsLabelEditPart.VISUAL_ID));
+			parser = UrmlParserProvider
+					.getParser(
+							UrmlElementTypes.VariationPointOptionalSubFeatures_4046,
+							getParserElement(),
+							UrmlVisualIDRegistry
+									.getType(org.unicase.ui.diagram.urml.edit.parts.SuggestsLabelEditPart.VISUAL_ID));
 		}
 		return parser;
 	}
@@ -310,8 +324,9 @@
 	 */
 	protected DirectEditManager getManager() {
 		if (manager == null) {
-			setManager(new TextDirectEditManager(this, TextDirectEditManager.getTextCellEditorClass(this),
-				UrmlEditPartFactory.getTextCellEditorLocator(this)));
+			setManager(new TextDirectEditManager(this,
+					TextDirectEditManager.getTextCellEditorClass(this),
+					UrmlEditPartFactory.getTextCellEditorLocator(this)));
 		}
 		return manager;
 	}
@@ -335,7 +350,8 @@
 	 */
 	protected void performDirectEdit(Point eventLocation) {
 		if (getManager().getClass() == TextDirectEditManager.class) {
-			((TextDirectEditManager) getManager()).show(eventLocation.getSWTPoint());
+			((TextDirectEditManager) getManager()).show(eventLocation
+					.getSWTPoint());
 		}
 	}
 
@@ -360,11 +376,15 @@
 
 				public void run() {
 					if (isActive() && isEditable()) {
-						if (theRequest.getExtendedData().get(RequestConstants.REQ_DIRECTEDIT_EXTENDEDDATA_INITIAL_CHAR) instanceof Character) {
-							Character initialChar = (Character) theRequest.getExtendedData().get(
-								RequestConstants.REQ_DIRECTEDIT_EXTENDEDDATA_INITIAL_CHAR);
+						if (theRequest
+								.getExtendedData()
+								.get(RequestConstants.REQ_DIRECTEDIT_EXTENDEDDATA_INITIAL_CHAR) instanceof Character) {
+							Character initialChar = (Character) theRequest
+									.getExtendedData()
+									.get(RequestConstants.REQ_DIRECTEDIT_EXTENDEDDATA_INITIAL_CHAR);
 							performDirectEdit(initialChar.charValue());
-						} else if ((theRequest instanceof DirectEditRequest) && (getEditText().equals(getLabelText()))) {
+						} else if ((theRequest instanceof DirectEditRequest)
+								&& (getEditText().equals(getLabelText()))) {
 							DirectEditRequest editRequest = (DirectEditRequest) theRequest;
 							performDirectEdit(editRequest.getLocation());
 						} else {
@@ -410,7 +430,8 @@
 	 * @generated
 	 */
 	protected void refreshUnderline() {
-		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(NotationPackage.eINSTANCE.getFontStyle());
+		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(
+				NotationPackage.eINSTANCE.getFontStyle());
 		if (style != null && getFigure() instanceof WrappingLabel) {
 			((WrappingLabel) getFigure()).setTextUnderline(style.isUnderline());
 		}
@@ -420,9 +441,11 @@
 	 * @generated
 	 */
 	protected void refreshStrikeThrough() {
-		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(NotationPackage.eINSTANCE.getFontStyle());
+		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(
+				NotationPackage.eINSTANCE.getFontStyle());
 		if (style != null && getFigure() instanceof WrappingLabel) {
-			((WrappingLabel) getFigure()).setTextStrikeThrough(style.isStrikeThrough());
+			((WrappingLabel) getFigure()).setTextStrikeThrough(style
+					.isStrikeThrough());
 		}
 	}
 
@@ -430,11 +453,13 @@
 	 * @generated
 	 */
 	protected void refreshFont() {
-		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(NotationPackage.eINSTANCE.getFontStyle());
+		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(
+				NotationPackage.eINSTANCE.getFontStyle());
 		if (style != null) {
-			FontData fontData = new FontData(style.getFontName(), style.getFontHeight(), (style.isBold() ? SWT.BOLD
-				: SWT.NORMAL)
-				| (style.isItalic() ? SWT.ITALIC : SWT.NORMAL));
+			FontData fontData = new FontData(style.getFontName(),
+					style.getFontHeight(), (style.isBold() ? SWT.BOLD
+							: SWT.NORMAL)
+							| (style.isItalic() ? SWT.ITALIC : SWT.NORMAL));
 			setFont(fontData);
 		}
 	}
@@ -452,9 +477,11 @@
 	protected void addSemanticListeners() {
 		if (getParser() instanceof ISemanticParser) {
 			EObject element = resolveSemanticElement();
-			parserElements = ((ISemanticParser) getParser()).getSemanticElementsBeingParsed(element);
+			parserElements = ((ISemanticParser) getParser())
+					.getSemanticElementsBeingParsed(element);
 			for (int i = 0; i < parserElements.size(); i++) {
-				addListenerFilter("SemanticModel" + i, this, (EObject) parserElements.get(i)); //$NON-NLS-1$
+				addListenerFilter(
+						"SemanticModel" + i, this, (EObject) parserElements.get(i)); //$NON-NLS-1$
 			}
 		} else {
 			super.addSemanticListeners();
@@ -504,17 +531,25 @@
 		if (NotationPackage.eINSTANCE.getFontStyle_FontColor().equals(feature)) {
 			Integer c = (Integer) event.getNewValue();
 			setFontColor(DiagramColorRegistry.getInstance().getColor(c));
-		} else if (NotationPackage.eINSTANCE.getFontStyle_Underline().equals(feature)) {
+		} else if (NotationPackage.eINSTANCE.getFontStyle_Underline().equals(
+				feature)) {
 			refreshUnderline();
-		} else if (NotationPackage.eINSTANCE.getFontStyle_StrikeThrough().equals(feature)) {
+		} else if (NotationPackage.eINSTANCE.getFontStyle_StrikeThrough()
+				.equals(feature)) {
 			refreshStrikeThrough();
-		} else if (NotationPackage.eINSTANCE.getFontStyle_FontHeight().equals(feature)
-			|| NotationPackage.eINSTANCE.getFontStyle_FontName().equals(feature)
-			|| NotationPackage.eINSTANCE.getFontStyle_Bold().equals(feature)
-			|| NotationPackage.eINSTANCE.getFontStyle_Italic().equals(feature)) {
+		} else if (NotationPackage.eINSTANCE.getFontStyle_FontHeight().equals(
+				feature)
+				|| NotationPackage.eINSTANCE.getFontStyle_FontName().equals(
+						feature)
+				|| NotationPackage.eINSTANCE.getFontStyle_Bold()
+						.equals(feature)
+				|| NotationPackage.eINSTANCE.getFontStyle_Italic().equals(
+						feature)) {
 			refreshFont();
 		} else {
-			if (getParser() != null && getParser().isAffectingEvent(event, getParserOptions().intValue())) {
+			if (getParser() != null
+					&& getParser().isAffectingEvent(event,
+							getParserOptions().intValue())) {
 				refreshLabel();
 			}
 			if (getParser() instanceof ISemanticParser) {
Index: src/org/unicase/ui/diagram/urml/edit/parts/VariationPointNameEditPart.java
===================================================================
--- src/org/unicase/ui/diagram/urml/edit/parts/VariationPointNameEditPart.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/edit/parts/VariationPointNameEditPart.java	(working copy)
@@ -52,7 +52,8 @@
 /**
  * @generated
  */
-public class VariationPointNameEditPart extends CompartmentEditPart implements ITextAwareEditPart {
+public class VariationPointNameEditPart extends CompartmentEditPart implements
+		ITextAwareEditPart {
 
 	/**
 	 * @generated
@@ -72,7 +73,7 @@
 	/**
 	 * @generated
 	 */
-	private List parserElements;
+	private List<?> parserElements;
 
 	/**
 	 * @generated
@@ -91,25 +92,12 @@
 	 */
 	protected void createDefaultEditPolicies() {
 		super.createDefaultEditPolicies();
-		installEditPolicy(EditPolicy.SELECTION_FEEDBACK_ROLE, new UrmlTextSelectionEditPolicy());
-		installEditPolicy(EditPolicy.DIRECT_EDIT_ROLE, new LabelDirectEditPolicy());
-		installEditPolicy(EditPolicy.PRIMARY_DRAG_ROLE, new NonResizableEditPolicy() {
-
-			protected List createSelectionHandles() {
-				List handles = new ArrayList();
-				NonResizableHandleKit.addMoveHandle((GraphicalEditPart) getHost(), handles);
-				((MoveHandle) handles.get(0)).setBorder(null);
-				return handles;
-			}
-
-			public Command getCommand(Request request) {
-				return null;
-			}
-
-			public boolean understandsRequest(Request request) {
-				return false;
-			}
-		});
+		installEditPolicy(EditPolicy.SELECTION_FEEDBACK_ROLE,
+				new UrmlTextSelectionEditPolicy());
+		installEditPolicy(EditPolicy.DIRECT_EDIT_ROLE,
+				new LabelDirectEditPolicy());
+		installEditPolicy(EditPolicy.PRIMARY_DRAG_ROLE,
+				new URMLDiagramEditPart.NodeLabelDragPolicy());
 	}
 
 	/**
@@ -159,7 +147,8 @@
 	/**
 	 * @generated
 	 */
-	public void setLabel(org.unicase.ui.unicasecommon.diagram.figures.Label figure) {
+	public void setLabel(
+			org.unicase.ui.unicasecommon.diagram.figures.Label figure) {
 		unregisterVisuals();
 		setFigure(figure);
 		defaultText = getLabelTextHelper(figure);
@@ -170,6 +159,7 @@
 	/**
 	 * @generated
 	 */
+	@SuppressWarnings("rawtypes")
 	protected List getModelChildren() {
 		return Collections.EMPTY_LIST;
 	}
@@ -202,7 +192,9 @@
 		String text = null;
 		EObject parserElement = getParserElement();
 		if (parserElement != null && getParser() != null) {
-			text = getParser().getPrintString(new EObjectAdapter(parserElement), getParserOptions().intValue());
+			text = getParser().getPrintString(
+					new EObjectAdapter(parserElement),
+					getParserOptions().intValue());
 		}
 		if (text == null || text.length() == 0) {
 			text = defaultText;
@@ -232,7 +224,9 @@
 		if (getParserElement() == null || getParser() == null) {
 			return ""; //$NON-NLS-1$
 		}
-		return getParser().getEditString(new EObjectAdapter(getParserElement()), getParserOptions().intValue());
+		return getParser().getEditString(
+				new EObjectAdapter(getParserElement()),
+				getParserOptions().intValue());
 	}
 
 	/**
@@ -253,14 +247,20 @@
 					final EObject element = getParserElement();
 					final IParser parser = getParser();
 					try {
-						IParserEditStatus valid = (IParserEditStatus) getEditingDomain().runExclusive(
-							new RunnableWithResult.Impl() {
+						IParserEditStatus valid = (IParserEditStatus) getEditingDomain()
+								.runExclusive(
+										new RunnableWithResult.Impl<IParserEditStatus>() {
 
-								public void run() {
-									setResult(parser.isValidEditString(new EObjectAdapter(element), (String) value));
-								}
-							});
-						return valid.getCode() == ParserEditStatus.EDITABLE ? null : valid.getMessage();
+											public void run() {
+												setResult(parser
+														.isValidEditString(
+																new EObjectAdapter(
+																		element),
+																(String) value));
+											}
+										});
+						return valid.getCode() == ParserEditStatus.EDITABLE ? null
+								: valid.getMessage();
 					} catch (InterruptedException ie) {
 						ie.printStackTrace();
 					}
@@ -279,7 +279,8 @@
 		if (getParserElement() == null || getParser() == null) {
 			return null;
 		}
-		return getParser().getCompletionProcessor(new EObjectAdapter(getParserElement()));
+		return getParser().getCompletionProcessor(
+				new EObjectAdapter(getParserElement()));
 	}
 
 	/**
@@ -294,9 +295,12 @@
 	 */
 	public IParser getParser() {
 		if (parser == null) {
-			parser = UrmlParserProvider.getParser(UrmlElementTypes.VariationPoint_2013, getParserElement(),
-				UrmlVisualIDRegistry
-					.getType(org.unicase.ui.diagram.urml.edit.parts.VariationPointNameEditPart.VISUAL_ID));
+			parser = UrmlParserProvider
+					.getParser(
+							UrmlElementTypes.VariationPoint_2013,
+							getParserElement(),
+							UrmlVisualIDRegistry
+									.getType(org.unicase.ui.diagram.urml.edit.parts.VariationPointNameEditPart.VISUAL_ID));
 		}
 		return parser;
 	}
@@ -306,8 +310,9 @@
 	 */
 	protected DirectEditManager getManager() {
 		if (manager == null) {
-			setManager(new TextDirectEditManager(this, TextDirectEditManager.getTextCellEditorClass(this),
-				UrmlEditPartFactory.getTextCellEditorLocator(this)));
+			setManager(new TextDirectEditManager(this,
+					TextDirectEditManager.getTextCellEditorClass(this),
+					UrmlEditPartFactory.getTextCellEditorLocator(this)));
 		}
 		return manager;
 	}
@@ -331,7 +336,8 @@
 	 */
 	protected void performDirectEdit(Point eventLocation) {
 		if (getManager().getClass() == TextDirectEditManager.class) {
-			((TextDirectEditManager) getManager()).show(eventLocation.getSWTPoint());
+			((TextDirectEditManager) getManager()).show(eventLocation
+					.getSWTPoint());
 		}
 	}
 
@@ -356,11 +362,15 @@
 
 				public void run() {
 					if (isActive() && isEditable()) {
-						if (theRequest.getExtendedData().get(RequestConstants.REQ_DIRECTEDIT_EXTENDEDDATA_INITIAL_CHAR) instanceof Character) {
-							Character initialChar = (Character) theRequest.getExtendedData().get(
-								RequestConstants.REQ_DIRECTEDIT_EXTENDEDDATA_INITIAL_CHAR);
+						if (theRequest
+								.getExtendedData()
+								.get(RequestConstants.REQ_DIRECTEDIT_EXTENDEDDATA_INITIAL_CHAR) instanceof Character) {
+							Character initialChar = (Character) theRequest
+									.getExtendedData()
+									.get(RequestConstants.REQ_DIRECTEDIT_EXTENDEDDATA_INITIAL_CHAR);
 							performDirectEdit(initialChar.charValue());
-						} else if ((theRequest instanceof DirectEditRequest) && (getEditText().equals(getLabelText()))) {
+						} else if ((theRequest instanceof DirectEditRequest)
+								&& (getEditText().equals(getLabelText()))) {
 							DirectEditRequest editRequest = (DirectEditRequest) theRequest;
 							performDirectEdit(editRequest.getLocation());
 						} else {
@@ -406,7 +416,8 @@
 	 * @generated
 	 */
 	protected void refreshUnderline() {
-		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(NotationPackage.eINSTANCE.getFontStyle());
+		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(
+				NotationPackage.eINSTANCE.getFontStyle());
 		if (style != null && getFigure() instanceof WrappingLabel) {
 			((WrappingLabel) getFigure()).setTextUnderline(style.isUnderline());
 		}
@@ -416,9 +427,11 @@
 	 * @generated
 	 */
 	protected void refreshStrikeThrough() {
-		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(NotationPackage.eINSTANCE.getFontStyle());
+		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(
+				NotationPackage.eINSTANCE.getFontStyle());
 		if (style != null && getFigure() instanceof WrappingLabel) {
-			((WrappingLabel) getFigure()).setTextStrikeThrough(style.isStrikeThrough());
+			((WrappingLabel) getFigure()).setTextStrikeThrough(style
+					.isStrikeThrough());
 		}
 	}
 
@@ -426,11 +439,13 @@
 	 * @generated
 	 */
 	protected void refreshFont() {
-		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(NotationPackage.eINSTANCE.getFontStyle());
+		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(
+				NotationPackage.eINSTANCE.getFontStyle());
 		if (style != null) {
-			FontData fontData = new FontData(style.getFontName(), style.getFontHeight(), (style.isBold() ? SWT.BOLD
-				: SWT.NORMAL)
-				| (style.isItalic() ? SWT.ITALIC : SWT.NORMAL));
+			FontData fontData = new FontData(style.getFontName(),
+					style.getFontHeight(), (style.isBold() ? SWT.BOLD
+							: SWT.NORMAL)
+							| (style.isItalic() ? SWT.ITALIC : SWT.NORMAL));
 			setFont(fontData);
 		}
 	}
@@ -448,9 +463,11 @@
 	protected void addSemanticListeners() {
 		if (getParser() instanceof ISemanticParser) {
 			EObject element = resolveSemanticElement();
-			parserElements = ((ISemanticParser) getParser()).getSemanticElementsBeingParsed(element);
+			parserElements = ((ISemanticParser) getParser())
+					.getSemanticElementsBeingParsed(element);
 			for (int i = 0; i < parserElements.size(); i++) {
-				addListenerFilter("SemanticModel" + i, this, (EObject) parserElements.get(i)); //$NON-NLS-1$
+				addListenerFilter(
+						"SemanticModel" + i, this, (EObject) parserElements.get(i)); //$NON-NLS-1$
 			}
 		} else {
 			super.addSemanticListeners();
@@ -516,17 +533,25 @@
 		if (NotationPackage.eINSTANCE.getFontStyle_FontColor().equals(feature)) {
 			Integer c = (Integer) event.getNewValue();
 			setFontColor(DiagramColorRegistry.getInstance().getColor(c));
-		} else if (NotationPackage.eINSTANCE.getFontStyle_Underline().equals(feature)) {
+		} else if (NotationPackage.eINSTANCE.getFontStyle_Underline().equals(
+				feature)) {
 			refreshUnderline();
-		} else if (NotationPackage.eINSTANCE.getFontStyle_StrikeThrough().equals(feature)) {
+		} else if (NotationPackage.eINSTANCE.getFontStyle_StrikeThrough()
+				.equals(feature)) {
 			refreshStrikeThrough();
-		} else if (NotationPackage.eINSTANCE.getFontStyle_FontHeight().equals(feature)
-			|| NotationPackage.eINSTANCE.getFontStyle_FontName().equals(feature)
-			|| NotationPackage.eINSTANCE.getFontStyle_Bold().equals(feature)
-			|| NotationPackage.eINSTANCE.getFontStyle_Italic().equals(feature)) {
+		} else if (NotationPackage.eINSTANCE.getFontStyle_FontHeight().equals(
+				feature)
+				|| NotationPackage.eINSTANCE.getFontStyle_FontName().equals(
+						feature)
+				|| NotationPackage.eINSTANCE.getFontStyle_Bold()
+						.equals(feature)
+				|| NotationPackage.eINSTANCE.getFontStyle_Italic().equals(
+						feature)) {
 			refreshFont();
 		} else {
-			if (getParser() != null && getParser().isAffectingEvent(event, getParserOptions().intValue())) {
+			if (getParser() != null
+					&& getParser().isAffectingEvent(event,
+							getParserOptions().intValue())) {
 				refreshLabel();
 			}
 			if (getParser() instanceof ISemanticParser) {
Index: src/org/unicase/ui/diagram/urml/edit/parts/VariationPointInstanceNameEditPart.java
===================================================================
--- src/org/unicase/ui/diagram/urml/edit/parts/VariationPointInstanceNameEditPart.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/edit/parts/VariationPointInstanceNameEditPart.java	(working copy)
@@ -52,7 +52,8 @@
 /**
  * @generated
  */
-public class VariationPointInstanceNameEditPart extends CompartmentEditPart implements ITextAwareEditPart {
+public class VariationPointInstanceNameEditPart extends CompartmentEditPart
+		implements ITextAwareEditPart {
 
 	/**
 	 * @generated
@@ -72,7 +73,7 @@
 	/**
 	 * @generated
 	 */
-	private List parserElements;
+	private List<?> parserElements;
 
 	/**
 	 * @generated
@@ -91,25 +92,12 @@
 	 */
 	protected void createDefaultEditPolicies() {
 		super.createDefaultEditPolicies();
-		installEditPolicy(EditPolicy.SELECTION_FEEDBACK_ROLE, new UrmlTextSelectionEditPolicy());
-		installEditPolicy(EditPolicy.DIRECT_EDIT_ROLE, new LabelDirectEditPolicy());
-		installEditPolicy(EditPolicy.PRIMARY_DRAG_ROLE, new NonResizableEditPolicy() {
-
-			protected List createSelectionHandles() {
-				List handles = new ArrayList();
-				NonResizableHandleKit.addMoveHandle((GraphicalEditPart) getHost(), handles);
-				((MoveHandle) handles.get(0)).setBorder(null);
-				return handles;
-			}
-
-			public Command getCommand(Request request) {
-				return null;
-			}
-
-			public boolean understandsRequest(Request request) {
-				return false;
-			}
-		});
+		installEditPolicy(EditPolicy.SELECTION_FEEDBACK_ROLE,
+				new UrmlTextSelectionEditPolicy());
+		installEditPolicy(EditPolicy.DIRECT_EDIT_ROLE,
+				new LabelDirectEditPolicy());
+		installEditPolicy(EditPolicy.PRIMARY_DRAG_ROLE,
+				new URMLDiagramEditPart.NodeLabelDragPolicy());
 	}
 
 	/**
@@ -159,7 +147,8 @@
 	/**
 	 * @generated
 	 */
-	public void setLabel(org.unicase.ui.unicasecommon.diagram.figures.Label figure) {
+	public void setLabel(
+			org.unicase.ui.unicasecommon.diagram.figures.Label figure) {
 		unregisterVisuals();
 		setFigure(figure);
 		defaultText = getLabelTextHelper(figure);
@@ -170,6 +159,7 @@
 	/**
 	 * @generated
 	 */
+	@SuppressWarnings("rawtypes")
 	protected List getModelChildren() {
 		return Collections.EMPTY_LIST;
 	}
@@ -202,7 +192,9 @@
 		String text = null;
 		EObject parserElement = getParserElement();
 		if (parserElement != null && getParser() != null) {
-			text = getParser().getPrintString(new EObjectAdapter(parserElement), getParserOptions().intValue());
+			text = getParser().getPrintString(
+					new EObjectAdapter(parserElement),
+					getParserOptions().intValue());
 		}
 		if (text == null || text.length() == 0) {
 			text = defaultText;
@@ -232,7 +224,9 @@
 		if (getParserElement() == null || getParser() == null) {
 			return ""; //$NON-NLS-1$
 		}
-		return getParser().getEditString(new EObjectAdapter(getParserElement()), getParserOptions().intValue());
+		return getParser().getEditString(
+				new EObjectAdapter(getParserElement()),
+				getParserOptions().intValue());
 	}
 
 	/**
@@ -253,14 +247,20 @@
 					final EObject element = getParserElement();
 					final IParser parser = getParser();
 					try {
-						IParserEditStatus valid = (IParserEditStatus) getEditingDomain().runExclusive(
-							new RunnableWithResult.Impl() {
+						IParserEditStatus valid = (IParserEditStatus) getEditingDomain()
+								.runExclusive(
+										new RunnableWithResult.Impl<IParserEditStatus>() {
 
-								public void run() {
-									setResult(parser.isValidEditString(new EObjectAdapter(element), (String) value));
-								}
-							});
-						return valid.getCode() == ParserEditStatus.EDITABLE ? null : valid.getMessage();
+											public void run() {
+												setResult(parser
+														.isValidEditString(
+																new EObjectAdapter(
+																		element),
+																(String) value));
+											}
+										});
+						return valid.getCode() == ParserEditStatus.EDITABLE ? null
+								: valid.getMessage();
 					} catch (InterruptedException ie) {
 						ie.printStackTrace();
 					}
@@ -279,7 +279,8 @@
 		if (getParserElement() == null || getParser() == null) {
 			return null;
 		}
-		return getParser().getCompletionProcessor(new EObjectAdapter(getParserElement()));
+		return getParser().getCompletionProcessor(
+				new EObjectAdapter(getParserElement()));
 	}
 
 	/**
@@ -294,9 +295,12 @@
 	 */
 	public IParser getParser() {
 		if (parser == null) {
-			parser = UrmlParserProvider.getParser(UrmlElementTypes.VariationPointInstance_2014, getParserElement(),
-				UrmlVisualIDRegistry
-					.getType(org.unicase.ui.diagram.urml.edit.parts.VariationPointInstanceNameEditPart.VISUAL_ID));
+			parser = UrmlParserProvider
+					.getParser(
+							UrmlElementTypes.VariationPointInstance_2014,
+							getParserElement(),
+							UrmlVisualIDRegistry
+									.getType(org.unicase.ui.diagram.urml.edit.parts.VariationPointInstanceNameEditPart.VISUAL_ID));
 		}
 		return parser;
 	}
@@ -306,8 +310,9 @@
 	 */
 	protected DirectEditManager getManager() {
 		if (manager == null) {
-			setManager(new TextDirectEditManager(this, TextDirectEditManager.getTextCellEditorClass(this),
-				UrmlEditPartFactory.getTextCellEditorLocator(this)));
+			setManager(new TextDirectEditManager(this,
+					TextDirectEditManager.getTextCellEditorClass(this),
+					UrmlEditPartFactory.getTextCellEditorLocator(this)));
 		}
 		return manager;
 	}
@@ -331,7 +336,8 @@
 	 */
 	protected void performDirectEdit(Point eventLocation) {
 		if (getManager().getClass() == TextDirectEditManager.class) {
-			((TextDirectEditManager) getManager()).show(eventLocation.getSWTPoint());
+			((TextDirectEditManager) getManager()).show(eventLocation
+					.getSWTPoint());
 		}
 	}
 
@@ -356,11 +362,15 @@
 
 				public void run() {
 					if (isActive() && isEditable()) {
-						if (theRequest.getExtendedData().get(RequestConstants.REQ_DIRECTEDIT_EXTENDEDDATA_INITIAL_CHAR) instanceof Character) {
-							Character initialChar = (Character) theRequest.getExtendedData().get(
-								RequestConstants.REQ_DIRECTEDIT_EXTENDEDDATA_INITIAL_CHAR);
+						if (theRequest
+								.getExtendedData()
+								.get(RequestConstants.REQ_DIRECTEDIT_EXTENDEDDATA_INITIAL_CHAR) instanceof Character) {
+							Character initialChar = (Character) theRequest
+									.getExtendedData()
+									.get(RequestConstants.REQ_DIRECTEDIT_EXTENDEDDATA_INITIAL_CHAR);
 							performDirectEdit(initialChar.charValue());
-						} else if ((theRequest instanceof DirectEditRequest) && (getEditText().equals(getLabelText()))) {
+						} else if ((theRequest instanceof DirectEditRequest)
+								&& (getEditText().equals(getLabelText()))) {
 							DirectEditRequest editRequest = (DirectEditRequest) theRequest;
 							performDirectEdit(editRequest.getLocation());
 						} else {
@@ -406,7 +416,8 @@
 	 * @generated
 	 */
 	protected void refreshUnderline() {
-		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(NotationPackage.eINSTANCE.getFontStyle());
+		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(
+				NotationPackage.eINSTANCE.getFontStyle());
 		if (style != null && getFigure() instanceof WrappingLabel) {
 			((WrappingLabel) getFigure()).setTextUnderline(style.isUnderline());
 		}
@@ -416,9 +427,11 @@
 	 * @generated
 	 */
 	protected void refreshStrikeThrough() {
-		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(NotationPackage.eINSTANCE.getFontStyle());
+		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(
+				NotationPackage.eINSTANCE.getFontStyle());
 		if (style != null && getFigure() instanceof WrappingLabel) {
-			((WrappingLabel) getFigure()).setTextStrikeThrough(style.isStrikeThrough());
+			((WrappingLabel) getFigure()).setTextStrikeThrough(style
+					.isStrikeThrough());
 		}
 	}
 
@@ -426,11 +439,13 @@
 	 * @generated
 	 */
 	protected void refreshFont() {
-		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(NotationPackage.eINSTANCE.getFontStyle());
+		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(
+				NotationPackage.eINSTANCE.getFontStyle());
 		if (style != null) {
-			FontData fontData = new FontData(style.getFontName(), style.getFontHeight(), (style.isBold() ? SWT.BOLD
-				: SWT.NORMAL)
-				| (style.isItalic() ? SWT.ITALIC : SWT.NORMAL));
+			FontData fontData = new FontData(style.getFontName(),
+					style.getFontHeight(), (style.isBold() ? SWT.BOLD
+							: SWT.NORMAL)
+							| (style.isItalic() ? SWT.ITALIC : SWT.NORMAL));
 			setFont(fontData);
 		}
 	}
@@ -448,9 +463,11 @@
 	protected void addSemanticListeners() {
 		if (getParser() instanceof ISemanticParser) {
 			EObject element = resolveSemanticElement();
-			parserElements = ((ISemanticParser) getParser()).getSemanticElementsBeingParsed(element);
+			parserElements = ((ISemanticParser) getParser())
+					.getSemanticElementsBeingParsed(element);
 			for (int i = 0; i < parserElements.size(); i++) {
-				addListenerFilter("SemanticModel" + i, this, (EObject) parserElements.get(i)); //$NON-NLS-1$
+				addListenerFilter(
+						"SemanticModel" + i, this, (EObject) parserElements.get(i)); //$NON-NLS-1$
 			}
 		} else {
 			super.addSemanticListeners();
@@ -516,17 +533,25 @@
 		if (NotationPackage.eINSTANCE.getFontStyle_FontColor().equals(feature)) {
 			Integer c = (Integer) event.getNewValue();
 			setFontColor(DiagramColorRegistry.getInstance().getColor(c));
-		} else if (NotationPackage.eINSTANCE.getFontStyle_Underline().equals(feature)) {
+		} else if (NotationPackage.eINSTANCE.getFontStyle_Underline().equals(
+				feature)) {
 			refreshUnderline();
-		} else if (NotationPackage.eINSTANCE.getFontStyle_StrikeThrough().equals(feature)) {
+		} else if (NotationPackage.eINSTANCE.getFontStyle_StrikeThrough()
+				.equals(feature)) {
 			refreshStrikeThrough();
-		} else if (NotationPackage.eINSTANCE.getFontStyle_FontHeight().equals(feature)
-			|| NotationPackage.eINSTANCE.getFontStyle_FontName().equals(feature)
-			|| NotationPackage.eINSTANCE.getFontStyle_Bold().equals(feature)
-			|| NotationPackage.eINSTANCE.getFontStyle_Italic().equals(feature)) {
+		} else if (NotationPackage.eINSTANCE.getFontStyle_FontHeight().equals(
+				feature)
+				|| NotationPackage.eINSTANCE.getFontStyle_FontName().equals(
+						feature)
+				|| NotationPackage.eINSTANCE.getFontStyle_Bold()
+						.equals(feature)
+				|| NotationPackage.eINSTANCE.getFontStyle_Italic().equals(
+						feature)) {
 			refreshFont();
 		} else {
-			if (getParser() != null && getParser().isAffectingEvent(event, getParserOptions().intValue())) {
+			if (getParser() != null
+					&& getParser().isAffectingEvent(event,
+							getParserOptions().intValue())) {
 				refreshLabel();
 			}
 			if (getParser() instanceof ISemanticParser) {
Index: src/org/unicase/ui/diagram/urml/edit/parts/AbstractFeatureRequiredFeaturesEditPart.java
===================================================================
--- src/org/unicase/ui/diagram/urml/edit/parts/AbstractFeatureRequiredFeaturesEditPart.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/edit/parts/AbstractFeatureRequiredFeaturesEditPart.java	(working copy)
@@ -12,7 +12,8 @@
 /**
  * @generated
  */
-public class AbstractFeatureRequiredFeaturesEditPart extends ConnectionNodeEditPart implements ITreeBranchEditPart {
+public class AbstractFeatureRequiredFeaturesEditPart extends
+		ConnectionNodeEditPart implements ITreeBranchEditPart {
 
 	/**
 	 * @generated
@@ -31,41 +32,8 @@
 	 */
 	protected void createDefaultEditPolicies() {
 		super.createDefaultEditPolicies();
-		installEditPolicy(EditPolicyRoles.SEMANTIC_ROLE, new AbstractFeatureRequiredFeaturesItemSemanticEditPolicy());
-	}
-
-	/**
-	 * @generated
-	 */
-	protected boolean addFixedChild(EditPart childEditPart) {
-		return false;
-	}
-
-	/**
-	 * @generated
-	 */
-	protected void addChildVisual(EditPart childEditPart, int index) {
-		if (addFixedChild(childEditPart)) {
-			return;
-		}
-		super.addChildVisual(childEditPart, -1);
-	}
-
-	/**
-	 * @generated
-	 */
-	protected boolean removeFixedChild(EditPart childEditPart) {
-		return false;
-	}
-
-	/**
-	 * @generated
-	 */
-	protected void removeChildVisual(EditPart childEditPart) {
-		if (removeFixedChild(childEditPart)) {
-			return;
-		}
-		super.removeChildVisual(childEditPart);
+		installEditPolicy(EditPolicyRoles.SEMANTIC_ROLE,
+				new AbstractFeatureRequiredFeaturesItemSemanticEditPolicy());
 	}
 
 	/**
Index: src/org/unicase/ui/diagram/urml/edit/parts/NonFunctionalRequirementNameEditPart.java
===================================================================
--- src/org/unicase/ui/diagram/urml/edit/parts/NonFunctionalRequirementNameEditPart.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/edit/parts/NonFunctionalRequirementNameEditPart.java	(working copy)
@@ -52,7 +52,8 @@
 /**
  * @generated
  */
-public class NonFunctionalRequirementNameEditPart extends CompartmentEditPart implements ITextAwareEditPart {
+public class NonFunctionalRequirementNameEditPart extends CompartmentEditPart
+		implements ITextAwareEditPart {
 
 	/**
 	 * @generated
@@ -72,7 +73,7 @@
 	/**
 	 * @generated
 	 */
-	private List parserElements;
+	private List<?> parserElements;
 
 	/**
 	 * @generated
@@ -91,25 +92,12 @@
 	 */
 	protected void createDefaultEditPolicies() {
 		super.createDefaultEditPolicies();
-		installEditPolicy(EditPolicy.SELECTION_FEEDBACK_ROLE, new UrmlTextSelectionEditPolicy());
-		installEditPolicy(EditPolicy.DIRECT_EDIT_ROLE, new LabelDirectEditPolicy());
-		installEditPolicy(EditPolicy.PRIMARY_DRAG_ROLE, new NonResizableEditPolicy() {
-
-			protected List createSelectionHandles() {
-				List handles = new ArrayList();
-				NonResizableHandleKit.addMoveHandle((GraphicalEditPart) getHost(), handles);
-				((MoveHandle) handles.get(0)).setBorder(null);
-				return handles;
-			}
-
-			public Command getCommand(Request request) {
-				return null;
-			}
-
-			public boolean understandsRequest(Request request) {
-				return false;
-			}
-		});
+		installEditPolicy(EditPolicy.SELECTION_FEEDBACK_ROLE,
+				new UrmlTextSelectionEditPolicy());
+		installEditPolicy(EditPolicy.DIRECT_EDIT_ROLE,
+				new LabelDirectEditPolicy());
+		installEditPolicy(EditPolicy.PRIMARY_DRAG_ROLE,
+				new URMLDiagramEditPart.NodeLabelDragPolicy());
 	}
 
 	/**
@@ -159,7 +147,8 @@
 	/**
 	 * @generated
 	 */
-	public void setLabel(org.unicase.ui.unicasecommon.diagram.figures.Label figure) {
+	public void setLabel(
+			org.unicase.ui.unicasecommon.diagram.figures.Label figure) {
 		unregisterVisuals();
 		setFigure(figure);
 		defaultText = getLabelTextHelper(figure);
@@ -170,6 +159,7 @@
 	/**
 	 * @generated
 	 */
+	@SuppressWarnings("rawtypes")
 	protected List getModelChildren() {
 		return Collections.EMPTY_LIST;
 	}
@@ -202,7 +192,9 @@
 		String text = null;
 		EObject parserElement = getParserElement();
 		if (parserElement != null && getParser() != null) {
-			text = getParser().getPrintString(new EObjectAdapter(parserElement), getParserOptions().intValue());
+			text = getParser().getPrintString(
+					new EObjectAdapter(parserElement),
+					getParserOptions().intValue());
 		}
 		if (text == null || text.length() == 0) {
 			text = defaultText;
@@ -232,7 +224,9 @@
 		if (getParserElement() == null || getParser() == null) {
 			return ""; //$NON-NLS-1$
 		}
-		return getParser().getEditString(new EObjectAdapter(getParserElement()), getParserOptions().intValue());
+		return getParser().getEditString(
+				new EObjectAdapter(getParserElement()),
+				getParserOptions().intValue());
 	}
 
 	/**
@@ -253,14 +247,20 @@
 					final EObject element = getParserElement();
 					final IParser parser = getParser();
 					try {
-						IParserEditStatus valid = (IParserEditStatus) getEditingDomain().runExclusive(
-							new RunnableWithResult.Impl() {
+						IParserEditStatus valid = (IParserEditStatus) getEditingDomain()
+								.runExclusive(
+										new RunnableWithResult.Impl<IParserEditStatus>() {
 
-								public void run() {
-									setResult(parser.isValidEditString(new EObjectAdapter(element), (String) value));
-								}
-							});
-						return valid.getCode() == ParserEditStatus.EDITABLE ? null : valid.getMessage();
+											public void run() {
+												setResult(parser
+														.isValidEditString(
+																new EObjectAdapter(
+																		element),
+																(String) value));
+											}
+										});
+						return valid.getCode() == ParserEditStatus.EDITABLE ? null
+								: valid.getMessage();
 					} catch (InterruptedException ie) {
 						ie.printStackTrace();
 					}
@@ -279,7 +279,8 @@
 		if (getParserElement() == null || getParser() == null) {
 			return null;
 		}
-		return getParser().getCompletionProcessor(new EObjectAdapter(getParserElement()));
+		return getParser().getCompletionProcessor(
+				new EObjectAdapter(getParserElement()));
 	}
 
 	/**
@@ -294,9 +295,12 @@
 	 */
 	public IParser getParser() {
 		if (parser == null) {
-			parser = UrmlParserProvider.getParser(UrmlElementTypes.NonFunctionalRequirement_2008, getParserElement(),
-				UrmlVisualIDRegistry
-					.getType(org.unicase.ui.diagram.urml.edit.parts.NonFunctionalRequirementNameEditPart.VISUAL_ID));
+			parser = UrmlParserProvider
+					.getParser(
+							UrmlElementTypes.NonFunctionalRequirement_2008,
+							getParserElement(),
+							UrmlVisualIDRegistry
+									.getType(org.unicase.ui.diagram.urml.edit.parts.NonFunctionalRequirementNameEditPart.VISUAL_ID));
 		}
 		return parser;
 	}
@@ -306,8 +310,9 @@
 	 */
 	protected DirectEditManager getManager() {
 		if (manager == null) {
-			setManager(new TextDirectEditManager(this, TextDirectEditManager.getTextCellEditorClass(this),
-				UrmlEditPartFactory.getTextCellEditorLocator(this)));
+			setManager(new TextDirectEditManager(this,
+					TextDirectEditManager.getTextCellEditorClass(this),
+					UrmlEditPartFactory.getTextCellEditorLocator(this)));
 		}
 		return manager;
 	}
@@ -331,7 +336,8 @@
 	 */
 	protected void performDirectEdit(Point eventLocation) {
 		if (getManager().getClass() == TextDirectEditManager.class) {
-			((TextDirectEditManager) getManager()).show(eventLocation.getSWTPoint());
+			((TextDirectEditManager) getManager()).show(eventLocation
+					.getSWTPoint());
 		}
 	}
 
@@ -356,11 +362,15 @@
 
 				public void run() {
 					if (isActive() && isEditable()) {
-						if (theRequest.getExtendedData().get(RequestConstants.REQ_DIRECTEDIT_EXTENDEDDATA_INITIAL_CHAR) instanceof Character) {
-							Character initialChar = (Character) theRequest.getExtendedData().get(
-								RequestConstants.REQ_DIRECTEDIT_EXTENDEDDATA_INITIAL_CHAR);
+						if (theRequest
+								.getExtendedData()
+								.get(RequestConstants.REQ_DIRECTEDIT_EXTENDEDDATA_INITIAL_CHAR) instanceof Character) {
+							Character initialChar = (Character) theRequest
+									.getExtendedData()
+									.get(RequestConstants.REQ_DIRECTEDIT_EXTENDEDDATA_INITIAL_CHAR);
 							performDirectEdit(initialChar.charValue());
-						} else if ((theRequest instanceof DirectEditRequest) && (getEditText().equals(getLabelText()))) {
+						} else if ((theRequest instanceof DirectEditRequest)
+								&& (getEditText().equals(getLabelText()))) {
 							DirectEditRequest editRequest = (DirectEditRequest) theRequest;
 							performDirectEdit(editRequest.getLocation());
 						} else {
@@ -406,7 +416,8 @@
 	 * @generated
 	 */
 	protected void refreshUnderline() {
-		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(NotationPackage.eINSTANCE.getFontStyle());
+		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(
+				NotationPackage.eINSTANCE.getFontStyle());
 		if (style != null && getFigure() instanceof WrappingLabel) {
 			((WrappingLabel) getFigure()).setTextUnderline(style.isUnderline());
 		}
@@ -416,9 +427,11 @@
 	 * @generated
 	 */
 	protected void refreshStrikeThrough() {
-		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(NotationPackage.eINSTANCE.getFontStyle());
+		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(
+				NotationPackage.eINSTANCE.getFontStyle());
 		if (style != null && getFigure() instanceof WrappingLabel) {
-			((WrappingLabel) getFigure()).setTextStrikeThrough(style.isStrikeThrough());
+			((WrappingLabel) getFigure()).setTextStrikeThrough(style
+					.isStrikeThrough());
 		}
 	}
 
@@ -426,11 +439,13 @@
 	 * @generated
 	 */
 	protected void refreshFont() {
-		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(NotationPackage.eINSTANCE.getFontStyle());
+		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(
+				NotationPackage.eINSTANCE.getFontStyle());
 		if (style != null) {
-			FontData fontData = new FontData(style.getFontName(), style.getFontHeight(), (style.isBold() ? SWT.BOLD
-				: SWT.NORMAL)
-				| (style.isItalic() ? SWT.ITALIC : SWT.NORMAL));
+			FontData fontData = new FontData(style.getFontName(),
+					style.getFontHeight(), (style.isBold() ? SWT.BOLD
+							: SWT.NORMAL)
+							| (style.isItalic() ? SWT.ITALIC : SWT.NORMAL));
 			setFont(fontData);
 		}
 	}
@@ -448,9 +463,11 @@
 	protected void addSemanticListeners() {
 		if (getParser() instanceof ISemanticParser) {
 			EObject element = resolveSemanticElement();
-			parserElements = ((ISemanticParser) getParser()).getSemanticElementsBeingParsed(element);
+			parserElements = ((ISemanticParser) getParser())
+					.getSemanticElementsBeingParsed(element);
 			for (int i = 0; i < parserElements.size(); i++) {
-				addListenerFilter("SemanticModel" + i, this, (EObject) parserElements.get(i)); //$NON-NLS-1$
+				addListenerFilter(
+						"SemanticModel" + i, this, (EObject) parserElements.get(i)); //$NON-NLS-1$
 			}
 		} else {
 			super.addSemanticListeners();
@@ -516,17 +533,25 @@
 		if (NotationPackage.eINSTANCE.getFontStyle_FontColor().equals(feature)) {
 			Integer c = (Integer) event.getNewValue();
 			setFontColor(DiagramColorRegistry.getInstance().getColor(c));
-		} else if (NotationPackage.eINSTANCE.getFontStyle_Underline().equals(feature)) {
+		} else if (NotationPackage.eINSTANCE.getFontStyle_Underline().equals(
+				feature)) {
 			refreshUnderline();
-		} else if (NotationPackage.eINSTANCE.getFontStyle_StrikeThrough().equals(feature)) {
+		} else if (NotationPackage.eINSTANCE.getFontStyle_StrikeThrough()
+				.equals(feature)) {
 			refreshStrikeThrough();
-		} else if (NotationPackage.eINSTANCE.getFontStyle_FontHeight().equals(feature)
-			|| NotationPackage.eINSTANCE.getFontStyle_FontName().equals(feature)
-			|| NotationPackage.eINSTANCE.getFontStyle_Bold().equals(feature)
-			|| NotationPackage.eINSTANCE.getFontStyle_Italic().equals(feature)) {
+		} else if (NotationPackage.eINSTANCE.getFontStyle_FontHeight().equals(
+				feature)
+				|| NotationPackage.eINSTANCE.getFontStyle_FontName().equals(
+						feature)
+				|| NotationPackage.eINSTANCE.getFontStyle_Bold()
+						.equals(feature)
+				|| NotationPackage.eINSTANCE.getFontStyle_Italic().equals(
+						feature)) {
 			refreshFont();
 		} else {
-			if (getParser() != null && getParser().isAffectingEvent(event, getParserOptions().intValue())) {
+			if (getParser() != null
+					&& getParser().isAffectingEvent(event,
+							getParserOptions().intValue())) {
 				refreshLabel();
 			}
 			if (getParser() instanceof ISemanticParser) {
Index: src/org/unicase/ui/diagram/urml/edit/parts/TriggersLabel2EditPart.java
===================================================================
--- src/org/unicase/ui/diagram/urml/edit/parts/TriggersLabel2EditPart.java	(revision 0)
+++ src/org/unicase/ui/diagram/urml/edit/parts/TriggersLabel2EditPart.java	(revision 0)
@@ -0,0 +1,596 @@
+package org.unicase.ui.diagram.urml.edit.parts;
+
+import java.util.Collections;
+import java.util.List;
+
+import org.eclipse.draw2d.ConnectionLocator;
+import org.eclipse.draw2d.IFigure;
+import org.eclipse.draw2d.Label;
+import org.eclipse.draw2d.geometry.Point;
+import org.eclipse.emf.common.notify.Notification;
+import org.eclipse.emf.ecore.EObject;
+import org.eclipse.emf.transaction.RunnableWithResult;
+import org.eclipse.gef.AccessibleEditPart;
+import org.eclipse.gef.EditPolicy;
+import org.eclipse.gef.Request;
+import org.eclipse.gef.requests.DirectEditRequest;
+import org.eclipse.gef.tools.DirectEditManager;
+import org.eclipse.gmf.runtime.common.ui.services.parser.IParser;
+import org.eclipse.gmf.runtime.common.ui.services.parser.IParserEditStatus;
+import org.eclipse.gmf.runtime.common.ui.services.parser.ParserEditStatus;
+import org.eclipse.gmf.runtime.common.ui.services.parser.ParserOptions;
+import org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart;
+import org.eclipse.gmf.runtime.diagram.ui.editparts.ITextAwareEditPart;
+import org.eclipse.gmf.runtime.diagram.ui.editparts.LabelEditPart;
+import org.eclipse.gmf.runtime.diagram.ui.editpolicies.LabelDirectEditPolicy;
+import org.eclipse.gmf.runtime.diagram.ui.l10n.DiagramColorRegistry;
+import org.eclipse.gmf.runtime.diagram.ui.requests.RequestConstants;
+import org.eclipse.gmf.runtime.diagram.ui.tools.TextDirectEditManager;
+import org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel;
+import org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter;
+import org.eclipse.gmf.runtime.emf.ui.services.parser.ISemanticParser;
+import org.eclipse.gmf.runtime.notation.FontStyle;
+import org.eclipse.gmf.runtime.notation.NotationPackage;
+import org.eclipse.gmf.runtime.notation.View;
+import org.eclipse.jface.text.contentassist.IContentAssistProcessor;
+import org.eclipse.jface.viewers.ICellEditorValidator;
+import org.eclipse.swt.SWT;
+import org.eclipse.swt.accessibility.AccessibleEvent;
+import org.eclipse.swt.graphics.Color;
+import org.eclipse.swt.graphics.FontData;
+import org.eclipse.swt.graphics.Image;
+import org.unicase.ui.diagram.urml.edit.policies.UrmlTextSelectionEditPolicy;
+import org.unicase.ui.diagram.urml.part.UrmlVisualIDRegistry;
+import org.unicase.ui.diagram.urml.providers.UrmlElementTypes;
+import org.unicase.ui.diagram.urml.providers.UrmlParserProvider;
+
+/**
+ * @generated
+ */
+public class TriggersLabel2EditPart extends LabelEditPart implements
+		ITextAwareEditPart {
+
+	/**
+	 * @generated
+	 */
+	public static final int VISUAL_ID = 6048;
+
+	/**
+	 * @generated
+	 */
+	private DirectEditManager manager;
+
+	/**
+	 * @generated
+	 */
+	private IParser parser;
+
+	/**
+	 * @generated
+	 */
+	private List<?> parserElements;
+
+	/**
+	 * @generated
+	 */
+	private String defaultText;
+
+	/**
+	 * @generated
+	 */
+	static {
+		registerSnapBackPosition(
+				UrmlVisualIDRegistry
+						.getType(org.unicase.ui.diagram.urml.edit.parts.TriggersLabel2EditPart.VISUAL_ID),
+				new Point(0, 20));
+	}
+
+	/**
+	 * @generated
+	 */
+	public TriggersLabel2EditPart(View view) {
+		super(view);
+	}
+
+	/**
+	 * @generated
+	 */
+	protected void createDefaultEditPolicies() {
+		super.createDefaultEditPolicies();
+		installEditPolicy(EditPolicy.DIRECT_EDIT_ROLE,
+				new LabelDirectEditPolicy());
+		installEditPolicy(EditPolicy.SELECTION_FEEDBACK_ROLE,
+				new UrmlTextSelectionEditPolicy());
+		installEditPolicy(EditPolicy.PRIMARY_DRAG_ROLE,
+				new URMLDiagramEditPart.LinkLabelDragPolicy());
+	}
+
+	/**
+	 * @generated
+	 */
+	public int getKeyPoint() {
+		return ConnectionLocator.MIDDLE;
+	}
+
+	/**
+	 * @generated
+	 */
+	protected String getLabelTextHelper(IFigure figure) {
+		if (figure instanceof WrappingLabel) {
+			return ((WrappingLabel) figure).getText();
+		} else {
+			return ((Label) figure).getText();
+		}
+	}
+
+	/**
+	 * @generated
+	 */
+	protected void setLabelTextHelper(IFigure figure, String text) {
+		if (figure instanceof WrappingLabel) {
+			((WrappingLabel) figure).setText(text);
+		} else {
+			((Label) figure).setText(text);
+		}
+	}
+
+	/**
+	 * @generated
+	 */
+	protected Image getLabelIconHelper(IFigure figure) {
+		if (figure instanceof WrappingLabel) {
+			return ((WrappingLabel) figure).getIcon();
+		} else {
+			return ((Label) figure).getIcon();
+		}
+	}
+
+	/**
+	 * @generated
+	 */
+	protected void setLabelIconHelper(IFigure figure, Image icon) {
+		if (figure instanceof WrappingLabel) {
+			((WrappingLabel) figure).setIcon(icon);
+		} else {
+			((Label) figure).setIcon(icon);
+		}
+	}
+
+	/**
+	 * @generated
+	 */
+	public void setLabel(IFigure figure) {
+		unregisterVisuals();
+		setFigure(figure);
+		defaultText = getLabelTextHelper(figure);
+		registerVisuals();
+		refreshVisuals();
+	}
+
+	/**
+	 * @generated
+	 */
+	@SuppressWarnings("rawtypes")
+	protected List getModelChildren() {
+		return Collections.EMPTY_LIST;
+	}
+
+	/**
+	 * @generated
+	 */
+	public IGraphicalEditPart getChildBySemanticHint(String semanticHint) {
+		return null;
+	}
+
+	/**
+	 * @generated
+	 */
+	protected EObject getParserElement() {
+		return resolveSemanticElement();
+	}
+
+	/**
+	 * @generated
+	 */
+	protected Image getLabelIcon() {
+		return null;
+	}
+
+	/**
+	 * @generated
+	 */
+	protected String getLabelText() {
+		String text = null;
+		EObject parserElement = getParserElement();
+		if (parserElement != null && getParser() != null) {
+			text = getParser().getPrintString(
+					new EObjectAdapter(parserElement),
+					getParserOptions().intValue());
+		}
+		if (text == null || text.length() == 0) {
+			text = defaultText;
+		}
+		return text;
+	}
+
+	/**
+	 * @generated
+	 */
+	public void setLabelText(String text) {
+		setLabelTextHelper(getFigure(), text);
+		Object pdEditPolicy = getEditPolicy(EditPolicy.PRIMARY_DRAG_ROLE);
+		if (pdEditPolicy instanceof UrmlTextSelectionEditPolicy) {
+			((UrmlTextSelectionEditPolicy) pdEditPolicy).refreshFeedback();
+		}
+		Object sfEditPolicy = getEditPolicy(EditPolicy.SELECTION_FEEDBACK_ROLE);
+		if (sfEditPolicy instanceof UrmlTextSelectionEditPolicy) {
+			((UrmlTextSelectionEditPolicy) sfEditPolicy).refreshFeedback();
+		}
+	}
+
+	/**
+	 * @generated
+	 */
+	public String getEditText() {
+		if (getParserElement() == null || getParser() == null) {
+			return ""; //$NON-NLS-1$
+		}
+		return getParser().getEditString(
+				new EObjectAdapter(getParserElement()),
+				getParserOptions().intValue());
+	}
+
+	/**
+	 * @generated
+	 */
+	protected boolean isEditable() {
+		return false;
+	}
+
+	/**
+	 * @generated
+	 */
+	public ICellEditorValidator getEditTextValidator() {
+		return new ICellEditorValidator() {
+
+			public String isValid(final Object value) {
+				if (value instanceof String) {
+					final EObject element = getParserElement();
+					final IParser parser = getParser();
+					try {
+						IParserEditStatus valid = (IParserEditStatus) getEditingDomain()
+								.runExclusive(
+										new RunnableWithResult.Impl<IParserEditStatus>() {
+
+											public void run() {
+												setResult(parser
+														.isValidEditString(
+																new EObjectAdapter(
+																		element),
+																(String) value));
+											}
+										});
+						return valid.getCode() == ParserEditStatus.EDITABLE ? null
+								: valid.getMessage();
+					} catch (InterruptedException ie) {
+						ie.printStackTrace();
+					}
+				}
+
+				// shouldn't get here
+				return null;
+			}
+		};
+	}
+
+	/**
+	 * @generated
+	 */
+	public IContentAssistProcessor getCompletionProcessor() {
+		if (getParserElement() == null || getParser() == null) {
+			return null;
+		}
+		return getParser().getCompletionProcessor(
+				new EObjectAdapter(getParserElement()));
+	}
+
+	/**
+	 * @generated
+	 */
+	public ParserOptions getParserOptions() {
+		return ParserOptions.NONE;
+	}
+
+	/**
+	 * @generated
+	 */
+	public IParser getParser() {
+		if (parser == null) {
+			parser = UrmlParserProvider
+					.getParser(
+							UrmlElementTypes.UrmlModelElementAssociations_4048,
+							getParserElement(),
+							UrmlVisualIDRegistry
+									.getType(org.unicase.ui.diagram.urml.edit.parts.TriggersLabel2EditPart.VISUAL_ID));
+		}
+		return parser;
+	}
+
+	/**
+	 * @generated
+	 */
+	protected DirectEditManager getManager() {
+		if (manager == null) {
+			setManager(new TextDirectEditManager(this,
+					TextDirectEditManager.getTextCellEditorClass(this),
+					UrmlEditPartFactory.getTextCellEditorLocator(this)));
+		}
+		return manager;
+	}
+
+	/**
+	 * @generated
+	 */
+	protected void setManager(DirectEditManager manager) {
+		this.manager = manager;
+	}
+
+	/**
+	 * @generated
+	 */
+	protected void performDirectEdit() {
+		getManager().show();
+	}
+
+	/**
+	 * @generated
+	 */
+	protected void performDirectEdit(Point eventLocation) {
+		if (getManager().getClass() == TextDirectEditManager.class) {
+			((TextDirectEditManager) getManager()).show(eventLocation
+					.getSWTPoint());
+		}
+	}
+
+	/**
+	 * @generated
+	 */
+	private void performDirectEdit(char initialCharacter) {
+		if (getManager() instanceof TextDirectEditManager) {
+			((TextDirectEditManager) getManager()).show(initialCharacter);
+		} else {
+			performDirectEdit();
+		}
+	}
+
+	/**
+	 * @generated
+	 */
+	protected void performDirectEditRequest(Request request) {
+		final Request theRequest = request;
+		try {
+			getEditingDomain().runExclusive(new Runnable() {
+
+				public void run() {
+					if (isActive() && isEditable()) {
+						if (theRequest
+								.getExtendedData()
+								.get(RequestConstants.REQ_DIRECTEDIT_EXTENDEDDATA_INITIAL_CHAR) instanceof Character) {
+							Character initialChar = (Character) theRequest
+									.getExtendedData()
+									.get(RequestConstants.REQ_DIRECTEDIT_EXTENDEDDATA_INITIAL_CHAR);
+							performDirectEdit(initialChar.charValue());
+						} else if ((theRequest instanceof DirectEditRequest)
+								&& (getEditText().equals(getLabelText()))) {
+							DirectEditRequest editRequest = (DirectEditRequest) theRequest;
+							performDirectEdit(editRequest.getLocation());
+						} else {
+							performDirectEdit();
+						}
+					}
+				}
+			});
+		} catch (InterruptedException e) {
+			e.printStackTrace();
+		}
+	}
+
+	/**
+	 * @generated
+	 */
+	protected void refreshVisuals() {
+		super.refreshVisuals();
+		refreshLabel();
+		refreshFont();
+		refreshFontColor();
+		refreshUnderline();
+		refreshStrikeThrough();
+	}
+
+	/**
+	 * @generated
+	 */
+	protected void refreshLabel() {
+		setLabelTextHelper(getFigure(), getLabelText());
+		setLabelIconHelper(getFigure(), getLabelIcon());
+		Object pdEditPolicy = getEditPolicy(EditPolicy.PRIMARY_DRAG_ROLE);
+		if (pdEditPolicy instanceof UrmlTextSelectionEditPolicy) {
+			((UrmlTextSelectionEditPolicy) pdEditPolicy).refreshFeedback();
+		}
+		Object sfEditPolicy = getEditPolicy(EditPolicy.SELECTION_FEEDBACK_ROLE);
+		if (sfEditPolicy instanceof UrmlTextSelectionEditPolicy) {
+			((UrmlTextSelectionEditPolicy) sfEditPolicy).refreshFeedback();
+		}
+	}
+
+	/**
+	 * @generated
+	 */
+	protected void refreshUnderline() {
+		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(
+				NotationPackage.eINSTANCE.getFontStyle());
+		if (style != null && getFigure() instanceof WrappingLabel) {
+			((WrappingLabel) getFigure()).setTextUnderline(style.isUnderline());
+		}
+	}
+
+	/**
+	 * @generated
+	 */
+	protected void refreshStrikeThrough() {
+		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(
+				NotationPackage.eINSTANCE.getFontStyle());
+		if (style != null && getFigure() instanceof WrappingLabel) {
+			((WrappingLabel) getFigure()).setTextStrikeThrough(style
+					.isStrikeThrough());
+		}
+	}
+
+	/**
+	 * @generated
+	 */
+	protected void refreshFont() {
+		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(
+				NotationPackage.eINSTANCE.getFontStyle());
+		if (style != null) {
+			FontData fontData = new FontData(style.getFontName(),
+					style.getFontHeight(), (style.isBold() ? SWT.BOLD
+							: SWT.NORMAL)
+							| (style.isItalic() ? SWT.ITALIC : SWT.NORMAL));
+			setFont(fontData);
+		}
+	}
+
+	/**
+	 * @generated
+	 */
+	protected void setFontColor(Color color) {
+		getFigure().setForegroundColor(color);
+	}
+
+	/**
+	 * @generated
+	 */
+	protected void addSemanticListeners() {
+		if (getParser() instanceof ISemanticParser) {
+			EObject element = resolveSemanticElement();
+			parserElements = ((ISemanticParser) getParser())
+					.getSemanticElementsBeingParsed(element);
+			for (int i = 0; i < parserElements.size(); i++) {
+				addListenerFilter(
+						"SemanticModel" + i, this, (EObject) parserElements.get(i)); //$NON-NLS-1$
+			}
+		} else {
+			super.addSemanticListeners();
+		}
+	}
+
+	/**
+	 * @generated
+	 */
+	protected void removeSemanticListeners() {
+		if (parserElements != null) {
+			for (int i = 0; i < parserElements.size(); i++) {
+				removeListenerFilter("SemanticModel" + i); //$NON-NLS-1$
+			}
+		} else {
+			super.removeSemanticListeners();
+		}
+	}
+
+	/**
+	 * @generated
+	 */
+	protected AccessibleEditPart getAccessibleEditPart() {
+		if (accessibleEP == null) {
+			accessibleEP = new AccessibleGraphicalEditPart() {
+
+				public void getName(AccessibleEvent e) {
+					e.result = getLabelTextHelper(getFigure());
+				}
+			};
+		}
+		return accessibleEP;
+	}
+
+	/**
+	 * @generated
+	 */
+	private View getFontStyleOwnerView() {
+		return getPrimaryView();
+	}
+
+	/**
+	 * @generated
+	 */
+	protected void handleNotificationEvent(Notification event) {
+		Object feature = event.getFeature();
+		if (NotationPackage.eINSTANCE.getFontStyle_FontColor().equals(feature)) {
+			Integer c = (Integer) event.getNewValue();
+			setFontColor(DiagramColorRegistry.getInstance().getColor(c));
+		} else if (NotationPackage.eINSTANCE.getFontStyle_Underline().equals(
+				feature)) {
+			refreshUnderline();
+		} else if (NotationPackage.eINSTANCE.getFontStyle_StrikeThrough()
+				.equals(feature)) {
+			refreshStrikeThrough();
+		} else if (NotationPackage.eINSTANCE.getFontStyle_FontHeight().equals(
+				feature)
+				|| NotationPackage.eINSTANCE.getFontStyle_FontName().equals(
+						feature)
+				|| NotationPackage.eINSTANCE.getFontStyle_Bold()
+						.equals(feature)
+				|| NotationPackage.eINSTANCE.getFontStyle_Italic().equals(
+						feature)) {
+			refreshFont();
+		} else {
+			if (getParser() != null
+					&& getParser().isAffectingEvent(event,
+							getParserOptions().intValue())) {
+				refreshLabel();
+			}
+			if (getParser() instanceof ISemanticParser) {
+				ISemanticParser modelParser = (ISemanticParser) getParser();
+				if (modelParser.areSemanticElementsAffected(null, event)) {
+					removeSemanticListeners();
+					if (resolveSemanticElement() != null) {
+						addSemanticListeners();
+					}
+					refreshLabel();
+				}
+			}
+		}
+		super.handleNotificationEvent(event);
+	}
+
+	/**
+	 * @generated
+	 */
+	protected IFigure createFigure() {
+		IFigure label = createFigurePrim();
+		defaultText = getLabelTextHelper(label);
+		return label;
+	}
+
+	/**
+	 * @generated
+	 */
+	protected IFigure createFigurePrim() {
+		return new URMLAssociationLabelFigure();
+	}
+
+	/**
+	 * @generated
+	 */
+	public class URMLAssociationLabelFigure extends WrappingLabel {
+
+		/**
+		 * @generated
+		 */
+		public URMLAssociationLabelFigure() {
+			this.setText("associated to");
+		}
+
+	}
+
+}
Index: src/org/unicase/ui/diagram/urml/edit/parts/AssetTriggeredDangersEditPart.java
===================================================================
--- src/org/unicase/ui/diagram/urml/edit/parts/AssetTriggeredDangersEditPart.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/edit/parts/AssetTriggeredDangersEditPart.java	(working copy)
@@ -12,7 +12,8 @@
 /**
  * @generated
  */
-public class AssetTriggeredDangersEditPart extends ConnectionNodeEditPart implements ITreeBranchEditPart {
+public class AssetTriggeredDangersEditPart extends ConnectionNodeEditPart
+		implements ITreeBranchEditPart {
 
 	/**
 	 * @generated
@@ -31,41 +32,8 @@
 	 */
 	protected void createDefaultEditPolicies() {
 		super.createDefaultEditPolicies();
-		installEditPolicy(EditPolicyRoles.SEMANTIC_ROLE, new AssetTriggeredDangersItemSemanticEditPolicy());
-	}
-
-	/**
-	 * @generated
-	 */
-	protected boolean addFixedChild(EditPart childEditPart) {
-		return false;
-	}
-
-	/**
-	 * @generated
-	 */
-	protected void addChildVisual(EditPart childEditPart, int index) {
-		if (addFixedChild(childEditPart)) {
-			return;
-		}
-		super.addChildVisual(childEditPart, -1);
-	}
-
-	/**
-	 * @generated
-	 */
-	protected boolean removeFixedChild(EditPart childEditPart) {
-		return false;
-	}
-
-	/**
-	 * @generated
-	 */
-	protected void removeChildVisual(EditPart childEditPart) {
-		if (removeFixedChild(childEditPart)) {
-			return;
-		}
-		super.removeChildVisual(childEditPart);
+		installEditPolicy(EditPolicyRoles.SEMANTIC_ROLE,
+				new AssetTriggeredDangersItemSemanticEditPolicy());
 	}
 
 	/**
Index: src/org/unicase/ui/diagram/urml/edit/parts/GoalEditPart.java
===================================================================
--- src/org/unicase/ui/diagram/urml/edit/parts/GoalEditPart.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/edit/parts/GoalEditPart.java	(working copy)
@@ -1,6 +1,7 @@
 package org.unicase.ui.diagram.urml.edit.parts;
 
 import java.util.ArrayList;
+import java.util.LinkedList;
 import java.util.List;
 
 import org.eclipse.draw2d.Graphics;
@@ -20,6 +21,7 @@
 import org.eclipse.gmf.runtime.diagram.ui.editpolicies.EditPolicyRoles;
 import org.eclipse.gmf.runtime.draw2d.ui.figures.ConstrainedToolbarLayout;
 import org.eclipse.gmf.runtime.emf.type.core.IElementType;
+import org.eclipse.gmf.runtime.gef.ui.figures.DefaultSizeNodeFigure;
 import org.eclipse.gmf.runtime.gef.ui.figures.NodeFigure;
 import org.eclipse.gmf.runtime.notation.View;
 import org.eclipse.swt.SWT;
@@ -66,7 +68,8 @@
 	 */
 	protected void createDefaultEditPolicies() {
 		super.createDefaultEditPolicies();
-		installEditPolicy(EditPolicyRoles.SEMANTIC_ROLE, new GoalItemSemanticEditPolicy());
+		installEditPolicy(EditPolicyRoles.SEMANTIC_ROLE,
+				new GoalItemSemanticEditPolicy());
 		installEditPolicy(EditPolicy.LAYOUT_ROLE, createLayoutEditPolicy());
 		installEditPolicy(EditPolicyRoles.OPEN_ROLE, new MEEditorOpenPolicie());
 		// XXX need an SCR to runtime to have another abstract superclass that would let children add reasonable
@@ -78,10 +81,11 @@
 	 * @generated
 	 */
 	protected LayoutEditPolicy createLayoutEditPolicy() {
-		LayoutEditPolicy lep = new LayoutEditPolicy() {
+		org.eclipse.gmf.runtime.diagram.ui.editpolicies.LayoutEditPolicy lep = new org.eclipse.gmf.runtime.diagram.ui.editpolicies.LayoutEditPolicy() {
 
 			protected EditPolicy createChildEditPolicy(EditPart child) {
-				EditPolicy result = child.getEditPolicy(EditPolicy.PRIMARY_DRAG_ROLE);
+				EditPolicy result = child
+						.getEditPolicy(EditPolicy.PRIMARY_DRAG_ROLE);
 				if (result == null) {
 					result = new NonResizableEditPolicy();
 				}
@@ -103,8 +107,7 @@
 	 * @generated
 	 */
 	protected IFigure createNodeShape() {
-		GoalFigure figure = new GoalFigure();
-		return primaryShape = figure;
+		return primaryShape = new GoalFigure();
 	}
 
 	/**
@@ -119,7 +122,8 @@
 	 */
 	protected boolean addFixedChild(EditPart childEditPart) {
 		if (childEditPart instanceof GoalNameEditPart) {
-			((GoalNameEditPart) childEditPart).setLabel(getPrimaryShape().getFigureGoalFigure_name());
+			((GoalNameEditPart) childEditPart).setLabel(getPrimaryShape()
+					.getFigureGoalFigure_name());
 			return true;
 		}
 		return false;
@@ -254,35 +258,31 @@
 	 * @generated
 	 */
 	public EditPart getPrimaryChildEditPart() {
-		return getChildBySemanticHint(UrmlVisualIDRegistry.getType(GoalNameEditPart.VISUAL_ID));
+		return getChildBySemanticHint(UrmlVisualIDRegistry
+				.getType(GoalNameEditPart.VISUAL_ID));
 	}
 
 	/**
 	 * @generated
 	 */
-	public List/* <org.eclipse.gmf.runtime.emf.type.core.IElementType> */getMARelTypesOnSource() {
-		List/* <org.eclipse.gmf.runtime.emf.type.core.IElementType> */types = new ArrayList/*
-																							 * <org.eclipse.gmf.runtime.emf
-																							 * .type.core.IElementType>
-																							 */();
+	public List<IElementType> getMARelTypesOnSource() {
+		ArrayList<IElementType> types = new ArrayList<IElementType>(7);
 		types.add(UrmlElementTypes.GoalRealizedFeatures_4004);
 		types.add(UrmlElementTypes.GoalSubGoals_4018);
 		types.add(UrmlElementTypes.GoalReference_4016);
 		types.add(UrmlElementTypes.GoalReference_4023);
 		types.add(UrmlElementTypes.GoalReference_4024);
 		types.add(UrmlElementTypes.GoalReference_4025);
+		types.add(UrmlElementTypes.UrmlModelElementAssociations_4048);
 		return types;
 	}
 
 	/**
 	 * @generated
 	 */
-	public List/* <org.eclipse.gmf.runtime.emf.type.core.IElementType> */getMARelTypesOnSourceAndTarget(
-		IGraphicalEditPart targetEditPart) {
-		List/* <org.eclipse.gmf.runtime.emf.type.core.IElementType> */types = new ArrayList/*
-																							 * <org.eclipse.gmf.runtime.emf
-																							 * .type.core.IElementType>
-																							 */();
+	public List<IElementType> getMARelTypesOnSourceAndTarget(
+			IGraphicalEditPart targetEditPart) {
+		LinkedList<IElementType> types = new LinkedList<IElementType>();
 		if (targetEditPart instanceof FeatureEditPart) {
 			types.add(UrmlElementTypes.GoalRealizedFeatures_4004);
 		}
@@ -304,38 +304,76 @@
 		if (targetEditPart instanceof org.unicase.ui.diagram.urml.edit.parts.GoalEditPart) {
 			types.add(UrmlElementTypes.GoalReference_4025);
 		}
+		if (targetEditPart instanceof StakeholderEditPart) {
+			types.add(UrmlElementTypes.UrmlModelElementAssociations_4048);
+		}
+		if (targetEditPart instanceof org.unicase.ui.diagram.urml.edit.parts.GoalEditPart) {
+			types.add(UrmlElementTypes.UrmlModelElementAssociations_4048);
+		}
+		if (targetEditPart instanceof FunctionalRequirementEditPart) {
+			types.add(UrmlElementTypes.UrmlModelElementAssociations_4048);
+		}
+		if (targetEditPart instanceof FeatureEditPart) {
+			types.add(UrmlElementTypes.UrmlModelElementAssociations_4048);
+		}
+		if (targetEditPart instanceof ServiceEditPart) {
+			types.add(UrmlElementTypes.UrmlModelElementAssociations_4048);
+		}
+		if (targetEditPart instanceof NonFunctionalRequirementEditPart) {
+			types.add(UrmlElementTypes.UrmlModelElementAssociations_4048);
+		}
+		if (targetEditPart instanceof DangerEditPart) {
+			types.add(UrmlElementTypes.UrmlModelElementAssociations_4048);
+		}
+		if (targetEditPart instanceof ActorEditPart) {
+			types.add(UrmlElementTypes.UrmlModelElementAssociations_4048);
+		}
+		if (targetEditPart instanceof ProceduralMitigationEditPart) {
+			types.add(UrmlElementTypes.UrmlModelElementAssociations_4048);
+		}
+		if (targetEditPart instanceof VariationPointEditPart) {
+			types.add(UrmlElementTypes.UrmlModelElementAssociations_4048);
+		}
+		if (targetEditPart instanceof VariationPointInstanceEditPart) {
+			types.add(UrmlElementTypes.UrmlModelElementAssociations_4048);
+		}
+		if (targetEditPart instanceof ProductEditPart) {
+			types.add(UrmlElementTypes.UrmlModelElementAssociations_4048);
+		}
 		return types;
 	}
 
 	/**
 	 * @generated
 	 */
-	public List/* <org.eclipse.gmf.runtime.emf.type.core.IElementType> */getMATypesForTarget(
-		IElementType relationshipType) {
-		List/* <org.eclipse.gmf.runtime.emf.type.core.IElementType> */types = new ArrayList/*
-																							 * <org.eclipse.gmf.runtime.emf
-																							 * .type.core.IElementType>
-																							 */();
+	public List<IElementType> getMATypesForTarget(IElementType relationshipType) {
+		LinkedList<IElementType> types = new LinkedList<IElementType>();
 		if (relationshipType == UrmlElementTypes.GoalRealizedFeatures_4004) {
 			types.add(UrmlElementTypes.Feature_2012);
-		}
-		if (relationshipType == UrmlElementTypes.GoalRealizedFeatures_4004) {
 			types.add(UrmlElementTypes.VariationPoint_2013);
-		}
-		if (relationshipType == UrmlElementTypes.GoalSubGoals_4018) {
+		} else if (relationshipType == UrmlElementTypes.GoalSubGoals_4018) {
 			types.add(UrmlElementTypes.Goal_2001);
-		}
-		if (relationshipType == UrmlElementTypes.GoalReference_4016) {
+		} else if (relationshipType == UrmlElementTypes.GoalReference_4016) {
 			types.add(UrmlElementTypes.Goal_2001);
-		}
-		if (relationshipType == UrmlElementTypes.GoalReference_4023) {
+		} else if (relationshipType == UrmlElementTypes.GoalReference_4023) {
 			types.add(UrmlElementTypes.Goal_2001);
-		}
-		if (relationshipType == UrmlElementTypes.GoalReference_4024) {
+		} else if (relationshipType == UrmlElementTypes.GoalReference_4024) {
 			types.add(UrmlElementTypes.Goal_2001);
-		}
-		if (relationshipType == UrmlElementTypes.GoalReference_4025) {
+		} else if (relationshipType == UrmlElementTypes.GoalReference_4025) {
+			types.add(UrmlElementTypes.Goal_2001);
+		} else if (relationshipType == UrmlElementTypes.UrmlModelElementAssociations_4048) {
+			types.add(UrmlElementTypes.Stakeholder_2002);
 			types.add(UrmlElementTypes.Goal_2001);
+			types.add(UrmlElementTypes.FunctionalRequirement_2006);
+			types.add(UrmlElementTypes.Feature_2012);
+			types.add(UrmlElementTypes.Service_2007);
+			types.add(UrmlElementTypes.NonFunctionalRequirement_2008);
+			types.add(UrmlElementTypes.Danger_2009);
+			types.add(UrmlElementTypes.Actor_2010);
+			types.add(UrmlElementTypes.ProceduralMitigation_2011);
+			types.add(UrmlElementTypes.VariationPoint_2013);
+			types.add(UrmlElementTypes.VariationPointInstance_2014);
+			types.add(UrmlElementTypes.Product_2015);
 		}
 		return types;
 	}
@@ -343,46 +381,48 @@
 	/**
 	 * @generated
 	 */
-	public List/* <org.eclipse.gmf.runtime.emf.type.core.IElementType> */getMARelTypesOnTarget() {
-		List/* <org.eclipse.gmf.runtime.emf.type.core.IElementType> */types = new ArrayList/*
-																							 * <org.eclipse.gmf.runtime.emf
-																							 * .type.core.IElementType>
-																							 */();
+	public List<IElementType> getMARelTypesOnTarget() {
+		ArrayList<IElementType> types = new ArrayList<IElementType>(7);
 		types.add(UrmlElementTypes.StakeholderGoals_4008);
 		types.add(UrmlElementTypes.GoalSubGoals_4018);
 		types.add(UrmlElementTypes.GoalReference_4016);
 		types.add(UrmlElementTypes.GoalReference_4023);
 		types.add(UrmlElementTypes.GoalReference_4024);
 		types.add(UrmlElementTypes.GoalReference_4025);
+		types.add(UrmlElementTypes.UrmlModelElementAssociations_4048);
 		return types;
 	}
 
 	/**
 	 * @generated
 	 */
-	public List/* <org.eclipse.gmf.runtime.emf.type.core.IElementType> */getMATypesForSource(
-		IElementType relationshipType) {
-		List/* <org.eclipse.gmf.runtime.emf.type.core.IElementType> */types = new ArrayList/*
-																							 * <org.eclipse.gmf.runtime.emf
-																							 * .type.core.IElementType>
-																							 */();
+	public List<IElementType> getMATypesForSource(IElementType relationshipType) {
+		LinkedList<IElementType> types = new LinkedList<IElementType>();
 		if (relationshipType == UrmlElementTypes.StakeholderGoals_4008) {
 			types.add(UrmlElementTypes.Stakeholder_2002);
-		}
-		if (relationshipType == UrmlElementTypes.GoalSubGoals_4018) {
+		} else if (relationshipType == UrmlElementTypes.GoalSubGoals_4018) {
 			types.add(UrmlElementTypes.Goal_2001);
-		}
-		if (relationshipType == UrmlElementTypes.GoalReference_4016) {
+		} else if (relationshipType == UrmlElementTypes.GoalReference_4016) {
 			types.add(UrmlElementTypes.Goal_2001);
-		}
-		if (relationshipType == UrmlElementTypes.GoalReference_4023) {
+		} else if (relationshipType == UrmlElementTypes.GoalReference_4023) {
 			types.add(UrmlElementTypes.Goal_2001);
-		}
-		if (relationshipType == UrmlElementTypes.GoalReference_4024) {
+		} else if (relationshipType == UrmlElementTypes.GoalReference_4024) {
 			types.add(UrmlElementTypes.Goal_2001);
-		}
-		if (relationshipType == UrmlElementTypes.GoalReference_4025) {
+		} else if (relationshipType == UrmlElementTypes.GoalReference_4025) {
+			types.add(UrmlElementTypes.Goal_2001);
+		} else if (relationshipType == UrmlElementTypes.UrmlModelElementAssociations_4048) {
+			types.add(UrmlElementTypes.Stakeholder_2002);
 			types.add(UrmlElementTypes.Goal_2001);
+			types.add(UrmlElementTypes.FunctionalRequirement_2006);
+			types.add(UrmlElementTypes.Feature_2012);
+			types.add(UrmlElementTypes.Service_2007);
+			types.add(UrmlElementTypes.NonFunctionalRequirement_2008);
+			types.add(UrmlElementTypes.Danger_2009);
+			types.add(UrmlElementTypes.Actor_2010);
+			types.add(UrmlElementTypes.ProceduralMitigation_2011);
+			types.add(UrmlElementTypes.VariationPoint_2013);
+			types.add(UrmlElementTypes.VariationPointInstance_2014);
+			types.add(UrmlElementTypes.Product_2015);
 		}
 		return types;
 	}
@@ -428,25 +468,6 @@
 		/**
 		 * @generated
 		 */
-		private boolean myUseLocalCoordinates = false;
-
-		/**
-		 * @generated
-		 */
-		protected boolean useLocalCoordinates() {
-			return myUseLocalCoordinates;
-		}
-
-		/**
-		 * @generated
-		 */
-		protected void setUseLocalCoordinates(boolean useLocalCoordinates) {
-			myUseLocalCoordinates = useLocalCoordinates;
-		}
-
-		/**
-		 * @generated
-		 */
 		public Label getFigureGoalFigure_name() {
 			return fFigureGoalFigure_name;
 		}
@@ -456,6 +477,7 @@
 	/**
 	 * @generated
 	 */
-	static final Font FFIGUREGOALFIGURE_NAME_FONT = new Font(Display.getCurrent(), "Arial", 10, SWT.BOLD);
+	static final Font FFIGUREGOALFIGURE_NAME_FONT = new Font(
+			Display.getCurrent(), "Arial", 10, SWT.BOLD);
 
 }
Index: src/org/unicase/ui/diagram/urml/edit/parts/HarmsLabelEditPart.java
===================================================================
--- src/org/unicase/ui/diagram/urml/edit/parts/HarmsLabelEditPart.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/edit/parts/HarmsLabelEditPart.java	(working copy)
@@ -50,7 +50,8 @@
 /**
  * @generated
  */
-public class HarmsLabelEditPart extends LabelEditPart implements ITextAwareEditPart {
+public class HarmsLabelEditPart extends LabelEditPart implements
+		ITextAwareEditPart {
 
 	/**
 	 * @generated
@@ -70,7 +71,7 @@
 	/**
 	 * @generated
 	 */
-	private List parserElements;
+	private List<?> parserElements;
 
 	/**
 	 * @generated
@@ -81,8 +82,10 @@
 	 * @generated
 	 */
 	static {
-		registerSnapBackPosition(UrmlVisualIDRegistry
-			.getType(org.unicase.ui.diagram.urml.edit.parts.HarmsLabelEditPart.VISUAL_ID), new Point(0, 20));
+		registerSnapBackPosition(
+				UrmlVisualIDRegistry
+						.getType(org.unicase.ui.diagram.urml.edit.parts.HarmsLabelEditPart.VISUAL_ID),
+				new Point(0, 20));
 	}
 
 	/**
@@ -97,16 +100,12 @@
 	 */
 	protected void createDefaultEditPolicies() {
 		super.createDefaultEditPolicies();
-		installEditPolicy(EditPolicy.DIRECT_EDIT_ROLE, new LabelDirectEditPolicy());
-		installEditPolicy(EditPolicy.SELECTION_FEEDBACK_ROLE, new UrmlTextSelectionEditPolicy());
-		installEditPolicy(EditPolicy.PRIMARY_DRAG_ROLE, new NonResizableLabelEditPolicy() {
-
-			protected List createSelectionHandles() {
-				MoveHandle mh = new MoveHandle((GraphicalEditPart) getHost());
-				mh.setBorder(null);
-				return Collections.singletonList(mh);
-			}
-		});
+		installEditPolicy(EditPolicy.DIRECT_EDIT_ROLE,
+				new LabelDirectEditPolicy());
+		installEditPolicy(EditPolicy.SELECTION_FEEDBACK_ROLE,
+				new UrmlTextSelectionEditPolicy());
+		installEditPolicy(EditPolicy.PRIMARY_DRAG_ROLE,
+				new URMLDiagramEditPart.LinkLabelDragPolicy());
 	}
 
 	/**
@@ -174,6 +173,7 @@
 	/**
 	 * @generated
 	 */
+	@SuppressWarnings("rawtypes")
 	protected List getModelChildren() {
 		return Collections.EMPTY_LIST;
 	}
@@ -206,7 +206,9 @@
 		String text = null;
 		EObject parserElement = getParserElement();
 		if (parserElement != null && getParser() != null) {
-			text = getParser().getPrintString(new EObjectAdapter(parserElement), getParserOptions().intValue());
+			text = getParser().getPrintString(
+					new EObjectAdapter(parserElement),
+					getParserOptions().intValue());
 		}
 		if (text == null || text.length() == 0) {
 			text = defaultText;
@@ -236,7 +238,9 @@
 		if (getParserElement() == null || getParser() == null) {
 			return ""; //$NON-NLS-1$
 		}
-		return getParser().getEditString(new EObjectAdapter(getParserElement()), getParserOptions().intValue());
+		return getParser().getEditString(
+				new EObjectAdapter(getParserElement()),
+				getParserOptions().intValue());
 	}
 
 	/**
@@ -257,14 +261,20 @@
 					final EObject element = getParserElement();
 					final IParser parser = getParser();
 					try {
-						IParserEditStatus valid = (IParserEditStatus) getEditingDomain().runExclusive(
-							new RunnableWithResult.Impl() {
+						IParserEditStatus valid = (IParserEditStatus) getEditingDomain()
+								.runExclusive(
+										new RunnableWithResult.Impl<IParserEditStatus>() {
 
-								public void run() {
-									setResult(parser.isValidEditString(new EObjectAdapter(element), (String) value));
-								}
-							});
-						return valid.getCode() == ParserEditStatus.EDITABLE ? null : valid.getMessage();
+											public void run() {
+												setResult(parser
+														.isValidEditString(
+																new EObjectAdapter(
+																		element),
+																(String) value));
+											}
+										});
+						return valid.getCode() == ParserEditStatus.EDITABLE ? null
+								: valid.getMessage();
 					} catch (InterruptedException ie) {
 						ie.printStackTrace();
 					}
@@ -283,7 +293,8 @@
 		if (getParserElement() == null || getParser() == null) {
 			return null;
 		}
-		return getParser().getCompletionProcessor(new EObjectAdapter(getParserElement()));
+		return getParser().getCompletionProcessor(
+				new EObjectAdapter(getParserElement()));
 	}
 
 	/**
@@ -298,8 +309,12 @@
 	 */
 	public IParser getParser() {
 		if (parser == null) {
-			parser = UrmlParserProvider.getParser(UrmlElementTypes.DangerHarmedAssets_4013, getParserElement(),
-				UrmlVisualIDRegistry.getType(org.unicase.ui.diagram.urml.edit.parts.HarmsLabelEditPart.VISUAL_ID));
+			parser = UrmlParserProvider
+					.getParser(
+							UrmlElementTypes.DangerHarmedAssets_4013,
+							getParserElement(),
+							UrmlVisualIDRegistry
+									.getType(org.unicase.ui.diagram.urml.edit.parts.HarmsLabelEditPart.VISUAL_ID));
 		}
 		return parser;
 	}
@@ -309,8 +324,9 @@
 	 */
 	protected DirectEditManager getManager() {
 		if (manager == null) {
-			setManager(new TextDirectEditManager(this, TextDirectEditManager.getTextCellEditorClass(this),
-				UrmlEditPartFactory.getTextCellEditorLocator(this)));
+			setManager(new TextDirectEditManager(this,
+					TextDirectEditManager.getTextCellEditorClass(this),
+					UrmlEditPartFactory.getTextCellEditorLocator(this)));
 		}
 		return manager;
 	}
@@ -334,7 +350,8 @@
 	 */
 	protected void performDirectEdit(Point eventLocation) {
 		if (getManager().getClass() == TextDirectEditManager.class) {
-			((TextDirectEditManager) getManager()).show(eventLocation.getSWTPoint());
+			((TextDirectEditManager) getManager()).show(eventLocation
+					.getSWTPoint());
 		}
 	}
 
@@ -359,11 +376,15 @@
 
 				public void run() {
 					if (isActive() && isEditable()) {
-						if (theRequest.getExtendedData().get(RequestConstants.REQ_DIRECTEDIT_EXTENDEDDATA_INITIAL_CHAR) instanceof Character) {
-							Character initialChar = (Character) theRequest.getExtendedData().get(
-								RequestConstants.REQ_DIRECTEDIT_EXTENDEDDATA_INITIAL_CHAR);
+						if (theRequest
+								.getExtendedData()
+								.get(RequestConstants.REQ_DIRECTEDIT_EXTENDEDDATA_INITIAL_CHAR) instanceof Character) {
+							Character initialChar = (Character) theRequest
+									.getExtendedData()
+									.get(RequestConstants.REQ_DIRECTEDIT_EXTENDEDDATA_INITIAL_CHAR);
 							performDirectEdit(initialChar.charValue());
-						} else if ((theRequest instanceof DirectEditRequest) && (getEditText().equals(getLabelText()))) {
+						} else if ((theRequest instanceof DirectEditRequest)
+								&& (getEditText().equals(getLabelText()))) {
 							DirectEditRequest editRequest = (DirectEditRequest) theRequest;
 							performDirectEdit(editRequest.getLocation());
 						} else {
@@ -409,7 +430,8 @@
 	 * @generated
 	 */
 	protected void refreshUnderline() {
-		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(NotationPackage.eINSTANCE.getFontStyle());
+		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(
+				NotationPackage.eINSTANCE.getFontStyle());
 		if (style != null && getFigure() instanceof WrappingLabel) {
 			((WrappingLabel) getFigure()).setTextUnderline(style.isUnderline());
 		}
@@ -419,9 +441,11 @@
 	 * @generated
 	 */
 	protected void refreshStrikeThrough() {
-		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(NotationPackage.eINSTANCE.getFontStyle());
+		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(
+				NotationPackage.eINSTANCE.getFontStyle());
 		if (style != null && getFigure() instanceof WrappingLabel) {
-			((WrappingLabel) getFigure()).setTextStrikeThrough(style.isStrikeThrough());
+			((WrappingLabel) getFigure()).setTextStrikeThrough(style
+					.isStrikeThrough());
 		}
 	}
 
@@ -429,11 +453,13 @@
 	 * @generated
 	 */
 	protected void refreshFont() {
-		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(NotationPackage.eINSTANCE.getFontStyle());
+		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(
+				NotationPackage.eINSTANCE.getFontStyle());
 		if (style != null) {
-			FontData fontData = new FontData(style.getFontName(), style.getFontHeight(), (style.isBold() ? SWT.BOLD
-				: SWT.NORMAL)
-				| (style.isItalic() ? SWT.ITALIC : SWT.NORMAL));
+			FontData fontData = new FontData(style.getFontName(),
+					style.getFontHeight(), (style.isBold() ? SWT.BOLD
+							: SWT.NORMAL)
+							| (style.isItalic() ? SWT.ITALIC : SWT.NORMAL));
 			setFont(fontData);
 		}
 	}
@@ -451,9 +477,11 @@
 	protected void addSemanticListeners() {
 		if (getParser() instanceof ISemanticParser) {
 			EObject element = resolveSemanticElement();
-			parserElements = ((ISemanticParser) getParser()).getSemanticElementsBeingParsed(element);
+			parserElements = ((ISemanticParser) getParser())
+					.getSemanticElementsBeingParsed(element);
 			for (int i = 0; i < parserElements.size(); i++) {
-				addListenerFilter("SemanticModel" + i, this, (EObject) parserElements.get(i)); //$NON-NLS-1$
+				addListenerFilter(
+						"SemanticModel" + i, this, (EObject) parserElements.get(i)); //$NON-NLS-1$
 			}
 		} else {
 			super.addSemanticListeners();
@@ -503,17 +531,25 @@
 		if (NotationPackage.eINSTANCE.getFontStyle_FontColor().equals(feature)) {
 			Integer c = (Integer) event.getNewValue();
 			setFontColor(DiagramColorRegistry.getInstance().getColor(c));
-		} else if (NotationPackage.eINSTANCE.getFontStyle_Underline().equals(feature)) {
+		} else if (NotationPackage.eINSTANCE.getFontStyle_Underline().equals(
+				feature)) {
 			refreshUnderline();
-		} else if (NotationPackage.eINSTANCE.getFontStyle_StrikeThrough().equals(feature)) {
+		} else if (NotationPackage.eINSTANCE.getFontStyle_StrikeThrough()
+				.equals(feature)) {
 			refreshStrikeThrough();
-		} else if (NotationPackage.eINSTANCE.getFontStyle_FontHeight().equals(feature)
-			|| NotationPackage.eINSTANCE.getFontStyle_FontName().equals(feature)
-			|| NotationPackage.eINSTANCE.getFontStyle_Bold().equals(feature)
-			|| NotationPackage.eINSTANCE.getFontStyle_Italic().equals(feature)) {
+		} else if (NotationPackage.eINSTANCE.getFontStyle_FontHeight().equals(
+				feature)
+				|| NotationPackage.eINSTANCE.getFontStyle_FontName().equals(
+						feature)
+				|| NotationPackage.eINSTANCE.getFontStyle_Bold()
+						.equals(feature)
+				|| NotationPackage.eINSTANCE.getFontStyle_Italic().equals(
+						feature)) {
 			refreshFont();
 		} else {
-			if (getParser() != null && getParser().isAffectingEvent(event, getParserOptions().intValue())) {
+			if (getParser() != null
+					&& getParser().isAffectingEvent(event,
+							getParserOptions().intValue())) {
 				refreshLabel();
 			}
 			if (getParser() instanceof ISemanticParser) {
Index: src/org/unicase/ui/diagram/urml/edit/parts/ProductVariationPointInstancesEditPart.java
===================================================================
--- src/org/unicase/ui/diagram/urml/edit/parts/ProductVariationPointInstancesEditPart.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/edit/parts/ProductVariationPointInstancesEditPart.java	(working copy)
@@ -12,7 +12,8 @@
 /**
  * @generated
  */
-public class ProductVariationPointInstancesEditPart extends ConnectionNodeEditPart implements ITreeBranchEditPart {
+public class ProductVariationPointInstancesEditPart extends
+		ConnectionNodeEditPart implements ITreeBranchEditPart {
 
 	/**
 	 * @generated
@@ -31,41 +32,8 @@
 	 */
 	protected void createDefaultEditPolicies() {
 		super.createDefaultEditPolicies();
-		installEditPolicy(EditPolicyRoles.SEMANTIC_ROLE, new ProductVariationPointInstancesItemSemanticEditPolicy());
-	}
-
-	/**
-	 * @generated
-	 */
-	protected boolean addFixedChild(EditPart childEditPart) {
-		return false;
-	}
-
-	/**
-	 * @generated
-	 */
-	protected void addChildVisual(EditPart childEditPart, int index) {
-		if (addFixedChild(childEditPart)) {
-			return;
-		}
-		super.addChildVisual(childEditPart, -1);
-	}
-
-	/**
-	 * @generated
-	 */
-	protected boolean removeFixedChild(EditPart childEditPart) {
-		return false;
-	}
-
-	/**
-	 * @generated
-	 */
-	protected void removeChildVisual(EditPart childEditPart) {
-		if (removeFixedChild(childEditPart)) {
-			return;
-		}
-		super.removeChildVisual(childEditPart);
+		installEditPolicy(EditPolicyRoles.SEMANTIC_ROLE,
+				new ProductVariationPointInstancesItemSemanticEditPolicy());
 	}
 
 	/**
Index: src/org/unicase/ui/diagram/urml/edit/parts/GoalReferenceEditPart.java
===================================================================
--- src/org/unicase/ui/diagram/urml/edit/parts/GoalReferenceEditPart.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/edit/parts/GoalReferenceEditPart.java	(working copy)
@@ -13,7 +13,8 @@
 /**
  * @generated
  */
-public class GoalReferenceEditPart extends ConnectionNodeEditPart implements ITreeBranchEditPart {
+public class GoalReferenceEditPart extends ConnectionNodeEditPart implements
+		ITreeBranchEditPart {
 
 	/**
 	 * @generated
@@ -32,7 +33,8 @@
 	 */
 	protected void createDefaultEditPolicies() {
 		super.createDefaultEditPolicies();
-		installEditPolicy(EditPolicyRoles.SEMANTIC_ROLE, new GoalReferenceItemSemanticEditPolicy());
+		installEditPolicy(EditPolicyRoles.SEMANTIC_ROLE,
+				new GoalReferenceItemSemanticEditPolicy());
 	}
 
 	/**
@@ -40,8 +42,9 @@
 	 */
 	protected boolean addFixedChild(EditPart childEditPart) {
 		if (childEditPart instanceof IsDetailedLabel2EditPart) {
-			((IsDetailedLabel2EditPart) childEditPart).setLabel(getPrimaryShape()
-				.getFigureGoalInfluenceGoalsFigure_weight());
+			((IsDetailedLabel2EditPart) childEditPart)
+					.setLabel(getPrimaryShape()
+							.getFigureGoalInfluenceGoalsFigure_weight());
 			return true;
 		}
 		return false;
@@ -54,7 +57,7 @@
 		if (addFixedChild(childEditPart)) {
 			return;
 		}
-		super.addChildVisual(childEditPart, -1);
+		super.addChildVisual(childEditPart, index);
 	}
 
 	/**
@@ -128,25 +131,6 @@
 		/**
 		 * @generated
 		 */
-		private boolean myUseLocalCoordinates = false;
-
-		/**
-		 * @generated
-		 */
-		protected boolean useLocalCoordinates() {
-			return myUseLocalCoordinates;
-		}
-
-		/**
-		 * @generated
-		 */
-		protected void setUseLocalCoordinates(boolean useLocalCoordinates) {
-			myUseLocalCoordinates = useLocalCoordinates;
-		}
-
-		/**
-		 * @generated
-		 */
 		public WrappingLabel getFigureGoalInfluenceGoalsFigure_weight() {
 			return fFigureGoalInfluenceGoalsFigure_weight;
 		}
Index: src/org/unicase/ui/diagram/urml/edit/parts/GoalReference2EditPart.java
===================================================================
--- src/org/unicase/ui/diagram/urml/edit/parts/GoalReference2EditPart.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/edit/parts/GoalReference2EditPart.java	(working copy)
@@ -13,7 +13,8 @@
 /**
  * @generated
  */
-public class GoalReference2EditPart extends ConnectionNodeEditPart implements ITreeBranchEditPart {
+public class GoalReference2EditPart extends ConnectionNodeEditPart implements
+		ITreeBranchEditPart {
 
 	/**
 	 * @generated
@@ -32,7 +33,8 @@
 	 */
 	protected void createDefaultEditPolicies() {
 		super.createDefaultEditPolicies();
-		installEditPolicy(EditPolicyRoles.SEMANTIC_ROLE, new GoalReference2ItemSemanticEditPolicy());
+		installEditPolicy(EditPolicyRoles.SEMANTIC_ROLE,
+				new GoalReference2ItemSemanticEditPolicy());
 	}
 
 	/**
@@ -40,8 +42,9 @@
 	 */
 	protected boolean addFixedChild(EditPart childEditPart) {
 		if (childEditPart instanceof GoalReferenceWeightEditPart) {
-			((GoalReferenceWeightEditPart) childEditPart).setLabel(getPrimaryShape()
-				.getFigureGoalInfluenceGoalsFigure_weight());
+			((GoalReferenceWeightEditPart) childEditPart)
+					.setLabel(getPrimaryShape()
+							.getFigureGoalInfluenceGoalsFigure_weight());
 			return true;
 		}
 		return false;
@@ -54,7 +57,7 @@
 		if (addFixedChild(childEditPart)) {
 			return;
 		}
-		super.addChildVisual(childEditPart, -1);
+		super.addChildVisual(childEditPart, index);
 	}
 
 	/**
@@ -128,25 +131,6 @@
 		/**
 		 * @generated
 		 */
-		private boolean myUseLocalCoordinates = false;
-
-		/**
-		 * @generated
-		 */
-		protected boolean useLocalCoordinates() {
-			return myUseLocalCoordinates;
-		}
-
-		/**
-		 * @generated
-		 */
-		protected void setUseLocalCoordinates(boolean useLocalCoordinates) {
-			myUseLocalCoordinates = useLocalCoordinates;
-		}
-
-		/**
-		 * @generated
-		 */
 		public WrappingLabel getFigureGoalInfluenceGoalsFigure_weight() {
 			return fFigureGoalInfluenceGoalsFigure_weight;
 		}
Index: src/org/unicase/ui/diagram/urml/edit/parts/MotivatesLabelEditPart.java
===================================================================
--- src/org/unicase/ui/diagram/urml/edit/parts/MotivatesLabelEditPart.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/edit/parts/MotivatesLabelEditPart.java	(working copy)
@@ -50,7 +50,8 @@
 /**
  * @generated
  */
-public class MotivatesLabelEditPart extends LabelEditPart implements ITextAwareEditPart {
+public class MotivatesLabelEditPart extends LabelEditPart implements
+		ITextAwareEditPart {
 
 	/**
 	 * @generated
@@ -70,7 +71,7 @@
 	/**
 	 * @generated
 	 */
-	private List parserElements;
+	private List<?> parserElements;
 
 	/**
 	 * @generated
@@ -81,8 +82,10 @@
 	 * @generated
 	 */
 	static {
-		registerSnapBackPosition(UrmlVisualIDRegistry
-			.getType(org.unicase.ui.diagram.urml.edit.parts.MotivatesLabelEditPart.VISUAL_ID), new Point(0, 20));
+		registerSnapBackPosition(
+				UrmlVisualIDRegistry
+						.getType(org.unicase.ui.diagram.urml.edit.parts.MotivatesLabelEditPart.VISUAL_ID),
+				new Point(0, 20));
 	}
 
 	/**
@@ -97,16 +100,12 @@
 	 */
 	protected void createDefaultEditPolicies() {
 		super.createDefaultEditPolicies();
-		installEditPolicy(EditPolicy.DIRECT_EDIT_ROLE, new LabelDirectEditPolicy());
-		installEditPolicy(EditPolicy.SELECTION_FEEDBACK_ROLE, new UrmlTextSelectionEditPolicy());
-		installEditPolicy(EditPolicy.PRIMARY_DRAG_ROLE, new NonResizableLabelEditPolicy() {
-
-			protected List createSelectionHandles() {
-				MoveHandle mh = new MoveHandle((GraphicalEditPart) getHost());
-				mh.setBorder(null);
-				return Collections.singletonList(mh);
-			}
-		});
+		installEditPolicy(EditPolicy.DIRECT_EDIT_ROLE,
+				new LabelDirectEditPolicy());
+		installEditPolicy(EditPolicy.SELECTION_FEEDBACK_ROLE,
+				new UrmlTextSelectionEditPolicy());
+		installEditPolicy(EditPolicy.PRIMARY_DRAG_ROLE,
+				new URMLDiagramEditPart.LinkLabelDragPolicy());
 	}
 
 	/**
@@ -174,6 +173,7 @@
 	/**
 	 * @generated
 	 */
+	@SuppressWarnings("rawtypes")
 	protected List getModelChildren() {
 		return Collections.EMPTY_LIST;
 	}
@@ -206,7 +206,9 @@
 		String text = null;
 		EObject parserElement = getParserElement();
 		if (parserElement != null && getParser() != null) {
-			text = getParser().getPrintString(new EObjectAdapter(parserElement), getParserOptions().intValue());
+			text = getParser().getPrintString(
+					new EObjectAdapter(parserElement),
+					getParserOptions().intValue());
 		}
 		if (text == null || text.length() == 0) {
 			text = defaultText;
@@ -236,7 +238,9 @@
 		if (getParserElement() == null || getParser() == null) {
 			return ""; //$NON-NLS-1$
 		}
-		return getParser().getEditString(new EObjectAdapter(getParserElement()), getParserOptions().intValue());
+		return getParser().getEditString(
+				new EObjectAdapter(getParserElement()),
+				getParserOptions().intValue());
 	}
 
 	/**
@@ -257,14 +261,20 @@
 					final EObject element = getParserElement();
 					final IParser parser = getParser();
 					try {
-						IParserEditStatus valid = (IParserEditStatus) getEditingDomain().runExclusive(
-							new RunnableWithResult.Impl() {
+						IParserEditStatus valid = (IParserEditStatus) getEditingDomain()
+								.runExclusive(
+										new RunnableWithResult.Impl<IParserEditStatus>() {
 
-								public void run() {
-									setResult(parser.isValidEditString(new EObjectAdapter(element), (String) value));
-								}
-							});
-						return valid.getCode() == ParserEditStatus.EDITABLE ? null : valid.getMessage();
+											public void run() {
+												setResult(parser
+														.isValidEditString(
+																new EObjectAdapter(
+																		element),
+																(String) value));
+											}
+										});
+						return valid.getCode() == ParserEditStatus.EDITABLE ? null
+								: valid.getMessage();
 					} catch (InterruptedException ie) {
 						ie.printStackTrace();
 					}
@@ -283,7 +293,8 @@
 		if (getParserElement() == null || getParser() == null) {
 			return null;
 		}
-		return getParser().getCompletionProcessor(new EObjectAdapter(getParserElement()));
+		return getParser().getCompletionProcessor(
+				new EObjectAdapter(getParserElement()));
 	}
 
 	/**
@@ -298,8 +309,12 @@
 	 */
 	public IParser getParser() {
 		if (parser == null) {
-			parser = UrmlParserProvider.getParser(UrmlElementTypes.GoalRealizedFeatures_4004, getParserElement(),
-				UrmlVisualIDRegistry.getType(org.unicase.ui.diagram.urml.edit.parts.MotivatesLabelEditPart.VISUAL_ID));
+			parser = UrmlParserProvider
+					.getParser(
+							UrmlElementTypes.GoalRealizedFeatures_4004,
+							getParserElement(),
+							UrmlVisualIDRegistry
+									.getType(org.unicase.ui.diagram.urml.edit.parts.MotivatesLabelEditPart.VISUAL_ID));
 		}
 		return parser;
 	}
@@ -309,8 +324,9 @@
 	 */
 	protected DirectEditManager getManager() {
 		if (manager == null) {
-			setManager(new TextDirectEditManager(this, TextDirectEditManager.getTextCellEditorClass(this),
-				UrmlEditPartFactory.getTextCellEditorLocator(this)));
+			setManager(new TextDirectEditManager(this,
+					TextDirectEditManager.getTextCellEditorClass(this),
+					UrmlEditPartFactory.getTextCellEditorLocator(this)));
 		}
 		return manager;
 	}
@@ -334,7 +350,8 @@
 	 */
 	protected void performDirectEdit(Point eventLocation) {
 		if (getManager().getClass() == TextDirectEditManager.class) {
-			((TextDirectEditManager) getManager()).show(eventLocation.getSWTPoint());
+			((TextDirectEditManager) getManager()).show(eventLocation
+					.getSWTPoint());
 		}
 	}
 
@@ -359,11 +376,15 @@
 
 				public void run() {
 					if (isActive() && isEditable()) {
-						if (theRequest.getExtendedData().get(RequestConstants.REQ_DIRECTEDIT_EXTENDEDDATA_INITIAL_CHAR) instanceof Character) {
-							Character initialChar = (Character) theRequest.getExtendedData().get(
-								RequestConstants.REQ_DIRECTEDIT_EXTENDEDDATA_INITIAL_CHAR);
+						if (theRequest
+								.getExtendedData()
+								.get(RequestConstants.REQ_DIRECTEDIT_EXTENDEDDATA_INITIAL_CHAR) instanceof Character) {
+							Character initialChar = (Character) theRequest
+									.getExtendedData()
+									.get(RequestConstants.REQ_DIRECTEDIT_EXTENDEDDATA_INITIAL_CHAR);
 							performDirectEdit(initialChar.charValue());
-						} else if ((theRequest instanceof DirectEditRequest) && (getEditText().equals(getLabelText()))) {
+						} else if ((theRequest instanceof DirectEditRequest)
+								&& (getEditText().equals(getLabelText()))) {
 							DirectEditRequest editRequest = (DirectEditRequest) theRequest;
 							performDirectEdit(editRequest.getLocation());
 						} else {
@@ -409,7 +430,8 @@
 	 * @generated
 	 */
 	protected void refreshUnderline() {
-		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(NotationPackage.eINSTANCE.getFontStyle());
+		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(
+				NotationPackage.eINSTANCE.getFontStyle());
 		if (style != null && getFigure() instanceof WrappingLabel) {
 			((WrappingLabel) getFigure()).setTextUnderline(style.isUnderline());
 		}
@@ -419,9 +441,11 @@
 	 * @generated
 	 */
 	protected void refreshStrikeThrough() {
-		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(NotationPackage.eINSTANCE.getFontStyle());
+		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(
+				NotationPackage.eINSTANCE.getFontStyle());
 		if (style != null && getFigure() instanceof WrappingLabel) {
-			((WrappingLabel) getFigure()).setTextStrikeThrough(style.isStrikeThrough());
+			((WrappingLabel) getFigure()).setTextStrikeThrough(style
+					.isStrikeThrough());
 		}
 	}
 
@@ -429,11 +453,13 @@
 	 * @generated
 	 */
 	protected void refreshFont() {
-		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(NotationPackage.eINSTANCE.getFontStyle());
+		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(
+				NotationPackage.eINSTANCE.getFontStyle());
 		if (style != null) {
-			FontData fontData = new FontData(style.getFontName(), style.getFontHeight(), (style.isBold() ? SWT.BOLD
-				: SWT.NORMAL)
-				| (style.isItalic() ? SWT.ITALIC : SWT.NORMAL));
+			FontData fontData = new FontData(style.getFontName(),
+					style.getFontHeight(), (style.isBold() ? SWT.BOLD
+							: SWT.NORMAL)
+							| (style.isItalic() ? SWT.ITALIC : SWT.NORMAL));
 			setFont(fontData);
 		}
 	}
@@ -451,9 +477,11 @@
 	protected void addSemanticListeners() {
 		if (getParser() instanceof ISemanticParser) {
 			EObject element = resolveSemanticElement();
-			parserElements = ((ISemanticParser) getParser()).getSemanticElementsBeingParsed(element);
+			parserElements = ((ISemanticParser) getParser())
+					.getSemanticElementsBeingParsed(element);
 			for (int i = 0; i < parserElements.size(); i++) {
-				addListenerFilter("SemanticModel" + i, this, (EObject) parserElements.get(i)); //$NON-NLS-1$
+				addListenerFilter(
+						"SemanticModel" + i, this, (EObject) parserElements.get(i)); //$NON-NLS-1$
 			}
 		} else {
 			super.addSemanticListeners();
@@ -503,17 +531,25 @@
 		if (NotationPackage.eINSTANCE.getFontStyle_FontColor().equals(feature)) {
 			Integer c = (Integer) event.getNewValue();
 			setFontColor(DiagramColorRegistry.getInstance().getColor(c));
-		} else if (NotationPackage.eINSTANCE.getFontStyle_Underline().equals(feature)) {
+		} else if (NotationPackage.eINSTANCE.getFontStyle_Underline().equals(
+				feature)) {
 			refreshUnderline();
-		} else if (NotationPackage.eINSTANCE.getFontStyle_StrikeThrough().equals(feature)) {
+		} else if (NotationPackage.eINSTANCE.getFontStyle_StrikeThrough()
+				.equals(feature)) {
 			refreshStrikeThrough();
-		} else if (NotationPackage.eINSTANCE.getFontStyle_FontHeight().equals(feature)
-			|| NotationPackage.eINSTANCE.getFontStyle_FontName().equals(feature)
-			|| NotationPackage.eINSTANCE.getFontStyle_Bold().equals(feature)
-			|| NotationPackage.eINSTANCE.getFontStyle_Italic().equals(feature)) {
+		} else if (NotationPackage.eINSTANCE.getFontStyle_FontHeight().equals(
+				feature)
+				|| NotationPackage.eINSTANCE.getFontStyle_FontName().equals(
+						feature)
+				|| NotationPackage.eINSTANCE.getFontStyle_Bold()
+						.equals(feature)
+				|| NotationPackage.eINSTANCE.getFontStyle_Italic().equals(
+						feature)) {
 			refreshFont();
 		} else {
-			if (getParser() != null && getParser().isAffectingEvent(event, getParserOptions().intValue())) {
+			if (getParser() != null
+					&& getParser().isAffectingEvent(event,
+							getParserOptions().intValue())) {
 				refreshLabel();
 			}
 			if (getParser() instanceof ISemanticParser) {
Index: src/org/unicase/ui/diagram/urml/edit/parts/GoalRealizedFeaturesEditPart.java
===================================================================
--- src/org/unicase/ui/diagram/urml/edit/parts/GoalRealizedFeaturesEditPart.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/edit/parts/GoalRealizedFeaturesEditPart.java	(working copy)
@@ -12,7 +12,8 @@
 /**
  * @generated
  */
-public class GoalRealizedFeaturesEditPart extends ConnectionNodeEditPart implements ITreeBranchEditPart {
+public class GoalRealizedFeaturesEditPart extends ConnectionNodeEditPart
+		implements ITreeBranchEditPart {
 
 	/**
 	 * @generated
@@ -31,41 +32,8 @@
 	 */
 	protected void createDefaultEditPolicies() {
 		super.createDefaultEditPolicies();
-		installEditPolicy(EditPolicyRoles.SEMANTIC_ROLE, new GoalRealizedFeaturesItemSemanticEditPolicy());
-	}
-
-	/**
-	 * @generated
-	 */
-	protected boolean addFixedChild(EditPart childEditPart) {
-		return false;
-	}
-
-	/**
-	 * @generated
-	 */
-	protected void addChildVisual(EditPart childEditPart, int index) {
-		if (addFixedChild(childEditPart)) {
-			return;
-		}
-		super.addChildVisual(childEditPart, -1);
-	}
-
-	/**
-	 * @generated
-	 */
-	protected boolean removeFixedChild(EditPart childEditPart) {
-		return false;
-	}
-
-	/**
-	 * @generated
-	 */
-	protected void removeChildVisual(EditPart childEditPart) {
-		if (removeFixedChild(childEditPart)) {
-			return;
-		}
-		super.removeChildVisual(childEditPart);
+		installEditPolicy(EditPolicyRoles.SEMANTIC_ROLE,
+				new GoalRealizedFeaturesItemSemanticEditPolicy());
 	}
 
 	/**
Index: src/org/unicase/ui/diagram/urml/edit/parts/IsRefinedLabel2EditPart.java
===================================================================
--- src/org/unicase/ui/diagram/urml/edit/parts/IsRefinedLabel2EditPart.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/edit/parts/IsRefinedLabel2EditPart.java	(working copy)
@@ -50,7 +50,8 @@
 /**
  * @generated
  */
-public class IsRefinedLabel2EditPart extends LabelEditPart implements ITextAwareEditPart {
+public class IsRefinedLabel2EditPart extends LabelEditPart implements
+		ITextAwareEditPart {
 
 	/**
 	 * @generated
@@ -70,7 +71,7 @@
 	/**
 	 * @generated
 	 */
-	private List parserElements;
+	private List<?> parserElements;
 
 	/**
 	 * @generated
@@ -81,8 +82,10 @@
 	 * @generated
 	 */
 	static {
-		registerSnapBackPosition(UrmlVisualIDRegistry
-			.getType(org.unicase.ui.diagram.urml.edit.parts.IsRefinedLabel2EditPart.VISUAL_ID), new Point(0, 20));
+		registerSnapBackPosition(
+				UrmlVisualIDRegistry
+						.getType(org.unicase.ui.diagram.urml.edit.parts.IsRefinedLabel2EditPart.VISUAL_ID),
+				new Point(0, 20));
 	}
 
 	/**
@@ -97,16 +100,12 @@
 	 */
 	protected void createDefaultEditPolicies() {
 		super.createDefaultEditPolicies();
-		installEditPolicy(EditPolicy.DIRECT_EDIT_ROLE, new LabelDirectEditPolicy());
-		installEditPolicy(EditPolicy.SELECTION_FEEDBACK_ROLE, new UrmlTextSelectionEditPolicy());
-		installEditPolicy(EditPolicy.PRIMARY_DRAG_ROLE, new NonResizableLabelEditPolicy() {
-
-			protected List createSelectionHandles() {
-				MoveHandle mh = new MoveHandle((GraphicalEditPart) getHost());
-				mh.setBorder(null);
-				return Collections.singletonList(mh);
-			}
-		});
+		installEditPolicy(EditPolicy.DIRECT_EDIT_ROLE,
+				new LabelDirectEditPolicy());
+		installEditPolicy(EditPolicy.SELECTION_FEEDBACK_ROLE,
+				new UrmlTextSelectionEditPolicy());
+		installEditPolicy(EditPolicy.PRIMARY_DRAG_ROLE,
+				new URMLDiagramEditPart.LinkLabelDragPolicy());
 	}
 
 	/**
@@ -174,6 +173,7 @@
 	/**
 	 * @generated
 	 */
+	@SuppressWarnings("rawtypes")
 	protected List getModelChildren() {
 		return Collections.EMPTY_LIST;
 	}
@@ -206,7 +206,9 @@
 		String text = null;
 		EObject parserElement = getParserElement();
 		if (parserElement != null && getParser() != null) {
-			text = getParser().getPrintString(new EObjectAdapter(parserElement), getParserOptions().intValue());
+			text = getParser().getPrintString(
+					new EObjectAdapter(parserElement),
+					getParserOptions().intValue());
 		}
 		if (text == null || text.length() == 0) {
 			text = defaultText;
@@ -236,7 +238,9 @@
 		if (getParserElement() == null || getParser() == null) {
 			return ""; //$NON-NLS-1$
 		}
-		return getParser().getEditString(new EObjectAdapter(getParserElement()), getParserOptions().intValue());
+		return getParser().getEditString(
+				new EObjectAdapter(getParserElement()),
+				getParserOptions().intValue());
 	}
 
 	/**
@@ -257,14 +261,20 @@
 					final EObject element = getParserElement();
 					final IParser parser = getParser();
 					try {
-						IParserEditStatus valid = (IParserEditStatus) getEditingDomain().runExclusive(
-							new RunnableWithResult.Impl() {
+						IParserEditStatus valid = (IParserEditStatus) getEditingDomain()
+								.runExclusive(
+										new RunnableWithResult.Impl<IParserEditStatus>() {
 
-								public void run() {
-									setResult(parser.isValidEditString(new EObjectAdapter(element), (String) value));
-								}
-							});
-						return valid.getCode() == ParserEditStatus.EDITABLE ? null : valid.getMessage();
+											public void run() {
+												setResult(parser
+														.isValidEditString(
+																new EObjectAdapter(
+																		element),
+																(String) value));
+											}
+										});
+						return valid.getCode() == ParserEditStatus.EDITABLE ? null
+								: valid.getMessage();
 					} catch (InterruptedException ie) {
 						ie.printStackTrace();
 					}
@@ -283,7 +293,8 @@
 		if (getParserElement() == null || getParser() == null) {
 			return null;
 		}
-		return getParser().getCompletionProcessor(new EObjectAdapter(getParserElement()));
+		return getParser().getCompletionProcessor(
+				new EObjectAdapter(getParserElement()));
 	}
 
 	/**
@@ -298,8 +309,12 @@
 	 */
 	public IParser getParser() {
 		if (parser == null) {
-			parser = UrmlParserProvider.getParser(UrmlElementTypes.AbstractFeatureSubFeatures_4034, getParserElement(),
-				UrmlVisualIDRegistry.getType(org.unicase.ui.diagram.urml.edit.parts.IsRefinedLabel2EditPart.VISUAL_ID));
+			parser = UrmlParserProvider
+					.getParser(
+							UrmlElementTypes.AbstractFeatureSubFeatures_4034,
+							getParserElement(),
+							UrmlVisualIDRegistry
+									.getType(org.unicase.ui.diagram.urml.edit.parts.IsRefinedLabel2EditPart.VISUAL_ID));
 		}
 		return parser;
 	}
@@ -309,8 +324,9 @@
 	 */
 	protected DirectEditManager getManager() {
 		if (manager == null) {
-			setManager(new TextDirectEditManager(this, TextDirectEditManager.getTextCellEditorClass(this),
-				UrmlEditPartFactory.getTextCellEditorLocator(this)));
+			setManager(new TextDirectEditManager(this,
+					TextDirectEditManager.getTextCellEditorClass(this),
+					UrmlEditPartFactory.getTextCellEditorLocator(this)));
 		}
 		return manager;
 	}
@@ -334,7 +350,8 @@
 	 */
 	protected void performDirectEdit(Point eventLocation) {
 		if (getManager().getClass() == TextDirectEditManager.class) {
-			((TextDirectEditManager) getManager()).show(eventLocation.getSWTPoint());
+			((TextDirectEditManager) getManager()).show(eventLocation
+					.getSWTPoint());
 		}
 	}
 
@@ -359,11 +376,15 @@
 
 				public void run() {
 					if (isActive() && isEditable()) {
-						if (theRequest.getExtendedData().get(RequestConstants.REQ_DIRECTEDIT_EXTENDEDDATA_INITIAL_CHAR) instanceof Character) {
-							Character initialChar = (Character) theRequest.getExtendedData().get(
-								RequestConstants.REQ_DIRECTEDIT_EXTENDEDDATA_INITIAL_CHAR);
+						if (theRequest
+								.getExtendedData()
+								.get(RequestConstants.REQ_DIRECTEDIT_EXTENDEDDATA_INITIAL_CHAR) instanceof Character) {
+							Character initialChar = (Character) theRequest
+									.getExtendedData()
+									.get(RequestConstants.REQ_DIRECTEDIT_EXTENDEDDATA_INITIAL_CHAR);
 							performDirectEdit(initialChar.charValue());
-						} else if ((theRequest instanceof DirectEditRequest) && (getEditText().equals(getLabelText()))) {
+						} else if ((theRequest instanceof DirectEditRequest)
+								&& (getEditText().equals(getLabelText()))) {
 							DirectEditRequest editRequest = (DirectEditRequest) theRequest;
 							performDirectEdit(editRequest.getLocation());
 						} else {
@@ -409,7 +430,8 @@
 	 * @generated
 	 */
 	protected void refreshUnderline() {
-		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(NotationPackage.eINSTANCE.getFontStyle());
+		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(
+				NotationPackage.eINSTANCE.getFontStyle());
 		if (style != null && getFigure() instanceof WrappingLabel) {
 			((WrappingLabel) getFigure()).setTextUnderline(style.isUnderline());
 		}
@@ -419,9 +441,11 @@
 	 * @generated
 	 */
 	protected void refreshStrikeThrough() {
-		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(NotationPackage.eINSTANCE.getFontStyle());
+		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(
+				NotationPackage.eINSTANCE.getFontStyle());
 		if (style != null && getFigure() instanceof WrappingLabel) {
-			((WrappingLabel) getFigure()).setTextStrikeThrough(style.isStrikeThrough());
+			((WrappingLabel) getFigure()).setTextStrikeThrough(style
+					.isStrikeThrough());
 		}
 	}
 
@@ -429,11 +453,13 @@
 	 * @generated
 	 */
 	protected void refreshFont() {
-		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(NotationPackage.eINSTANCE.getFontStyle());
+		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(
+				NotationPackage.eINSTANCE.getFontStyle());
 		if (style != null) {
-			FontData fontData = new FontData(style.getFontName(), style.getFontHeight(), (style.isBold() ? SWT.BOLD
-				: SWT.NORMAL)
-				| (style.isItalic() ? SWT.ITALIC : SWT.NORMAL));
+			FontData fontData = new FontData(style.getFontName(),
+					style.getFontHeight(), (style.isBold() ? SWT.BOLD
+							: SWT.NORMAL)
+							| (style.isItalic() ? SWT.ITALIC : SWT.NORMAL));
 			setFont(fontData);
 		}
 	}
@@ -451,9 +477,11 @@
 	protected void addSemanticListeners() {
 		if (getParser() instanceof ISemanticParser) {
 			EObject element = resolveSemanticElement();
-			parserElements = ((ISemanticParser) getParser()).getSemanticElementsBeingParsed(element);
+			parserElements = ((ISemanticParser) getParser())
+					.getSemanticElementsBeingParsed(element);
 			for (int i = 0; i < parserElements.size(); i++) {
-				addListenerFilter("SemanticModel" + i, this, (EObject) parserElements.get(i)); //$NON-NLS-1$
+				addListenerFilter(
+						"SemanticModel" + i, this, (EObject) parserElements.get(i)); //$NON-NLS-1$
 			}
 		} else {
 			super.addSemanticListeners();
@@ -503,17 +531,25 @@
 		if (NotationPackage.eINSTANCE.getFontStyle_FontColor().equals(feature)) {
 			Integer c = (Integer) event.getNewValue();
 			setFontColor(DiagramColorRegistry.getInstance().getColor(c));
-		} else if (NotationPackage.eINSTANCE.getFontStyle_Underline().equals(feature)) {
+		} else if (NotationPackage.eINSTANCE.getFontStyle_Underline().equals(
+				feature)) {
 			refreshUnderline();
-		} else if (NotationPackage.eINSTANCE.getFontStyle_StrikeThrough().equals(feature)) {
+		} else if (NotationPackage.eINSTANCE.getFontStyle_StrikeThrough()
+				.equals(feature)) {
 			refreshStrikeThrough();
-		} else if (NotationPackage.eINSTANCE.getFontStyle_FontHeight().equals(feature)
-			|| NotationPackage.eINSTANCE.getFontStyle_FontName().equals(feature)
-			|| NotationPackage.eINSTANCE.getFontStyle_Bold().equals(feature)
-			|| NotationPackage.eINSTANCE.getFontStyle_Italic().equals(feature)) {
+		} else if (NotationPackage.eINSTANCE.getFontStyle_FontHeight().equals(
+				feature)
+				|| NotationPackage.eINSTANCE.getFontStyle_FontName().equals(
+						feature)
+				|| NotationPackage.eINSTANCE.getFontStyle_Bold()
+						.equals(feature)
+				|| NotationPackage.eINSTANCE.getFontStyle_Italic().equals(
+						feature)) {
 			refreshFont();
 		} else {
-			if (getParser() != null && getParser().isAffectingEvent(event, getParserOptions().intValue())) {
+			if (getParser() != null
+					&& getParser().isAffectingEvent(event,
+							getParserOptions().intValue())) {
 				refreshLabel();
 			}
 			if (getParser() instanceof ISemanticParser) {
Index: src/org/unicase/ui/diagram/urml/edit/parts/MitigationMitigatedDangersEditPart.java
===================================================================
--- src/org/unicase/ui/diagram/urml/edit/parts/MitigationMitigatedDangersEditPart.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/edit/parts/MitigationMitigatedDangersEditPart.java	(working copy)
@@ -12,7 +12,8 @@
 /**
  * @generated
  */
-public class MitigationMitigatedDangersEditPart extends ConnectionNodeEditPart implements ITreeBranchEditPart {
+public class MitigationMitigatedDangersEditPart extends ConnectionNodeEditPart
+		implements ITreeBranchEditPart {
 
 	/**
 	 * @generated
@@ -31,41 +32,8 @@
 	 */
 	protected void createDefaultEditPolicies() {
 		super.createDefaultEditPolicies();
-		installEditPolicy(EditPolicyRoles.SEMANTIC_ROLE, new MitigationMitigatedDangersItemSemanticEditPolicy());
-	}
-
-	/**
-	 * @generated
-	 */
-	protected boolean addFixedChild(EditPart childEditPart) {
-		return false;
-	}
-
-	/**
-	 * @generated
-	 */
-	protected void addChildVisual(EditPart childEditPart, int index) {
-		if (addFixedChild(childEditPart)) {
-			return;
-		}
-		super.addChildVisual(childEditPart, -1);
-	}
-
-	/**
-	 * @generated
-	 */
-	protected boolean removeFixedChild(EditPart childEditPart) {
-		return false;
-	}
-
-	/**
-	 * @generated
-	 */
-	protected void removeChildVisual(EditPart childEditPart) {
-		if (removeFixedChild(childEditPart)) {
-			return;
-		}
-		super.removeChildVisual(childEditPart);
+		installEditPolicy(EditPolicyRoles.SEMANTIC_ROLE,
+				new MitigationMitigatedDangersItemSemanticEditPolicy());
 	}
 
 	/**
Index: src/org/unicase/ui/diagram/urml/edit/parts/IsConstraintLabelEditPart.java
===================================================================
--- src/org/unicase/ui/diagram/urml/edit/parts/IsConstraintLabelEditPart.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/edit/parts/IsConstraintLabelEditPart.java	(working copy)
@@ -50,7 +50,8 @@
 /**
  * @generated
  */
-public class IsConstraintLabelEditPart extends LabelEditPart implements ITextAwareEditPart {
+public class IsConstraintLabelEditPart extends LabelEditPart implements
+		ITextAwareEditPart {
 
 	/**
 	 * @generated
@@ -70,7 +71,7 @@
 	/**
 	 * @generated
 	 */
-	private List parserElements;
+	private List<?> parserElements;
 
 	/**
 	 * @generated
@@ -81,8 +82,10 @@
 	 * @generated
 	 */
 	static {
-		registerSnapBackPosition(UrmlVisualIDRegistry
-			.getType(org.unicase.ui.diagram.urml.edit.parts.IsConstraintLabelEditPart.VISUAL_ID), new Point(0, 20));
+		registerSnapBackPosition(
+				UrmlVisualIDRegistry
+						.getType(org.unicase.ui.diagram.urml.edit.parts.IsConstraintLabelEditPart.VISUAL_ID),
+				new Point(0, 20));
 	}
 
 	/**
@@ -97,16 +100,12 @@
 	 */
 	protected void createDefaultEditPolicies() {
 		super.createDefaultEditPolicies();
-		installEditPolicy(EditPolicy.DIRECT_EDIT_ROLE, new LabelDirectEditPolicy());
-		installEditPolicy(EditPolicy.SELECTION_FEEDBACK_ROLE, new UrmlTextSelectionEditPolicy());
-		installEditPolicy(EditPolicy.PRIMARY_DRAG_ROLE, new NonResizableLabelEditPolicy() {
-
-			protected List createSelectionHandles() {
-				MoveHandle mh = new MoveHandle((GraphicalEditPart) getHost());
-				mh.setBorder(null);
-				return Collections.singletonList(mh);
-			}
-		});
+		installEditPolicy(EditPolicy.DIRECT_EDIT_ROLE,
+				new LabelDirectEditPolicy());
+		installEditPolicy(EditPolicy.SELECTION_FEEDBACK_ROLE,
+				new UrmlTextSelectionEditPolicy());
+		installEditPolicy(EditPolicy.PRIMARY_DRAG_ROLE,
+				new URMLDiagramEditPart.LinkLabelDragPolicy());
 	}
 
 	/**
@@ -174,6 +173,7 @@
 	/**
 	 * @generated
 	 */
+	@SuppressWarnings("rawtypes")
 	protected List getModelChildren() {
 		return Collections.EMPTY_LIST;
 	}
@@ -206,7 +206,9 @@
 		String text = null;
 		EObject parserElement = getParserElement();
 		if (parserElement != null && getParser() != null) {
-			text = getParser().getPrintString(new EObjectAdapter(parserElement), getParserOptions().intValue());
+			text = getParser().getPrintString(
+					new EObjectAdapter(parserElement),
+					getParserOptions().intValue());
 		}
 		if (text == null || text.length() == 0) {
 			text = defaultText;
@@ -236,7 +238,9 @@
 		if (getParserElement() == null || getParser() == null) {
 			return ""; //$NON-NLS-1$
 		}
-		return getParser().getEditString(new EObjectAdapter(getParserElement()), getParserOptions().intValue());
+		return getParser().getEditString(
+				new EObjectAdapter(getParserElement()),
+				getParserOptions().intValue());
 	}
 
 	/**
@@ -257,14 +261,20 @@
 					final EObject element = getParserElement();
 					final IParser parser = getParser();
 					try {
-						IParserEditStatus valid = (IParserEditStatus) getEditingDomain().runExclusive(
-							new RunnableWithResult.Impl() {
+						IParserEditStatus valid = (IParserEditStatus) getEditingDomain()
+								.runExclusive(
+										new RunnableWithResult.Impl<IParserEditStatus>() {
 
-								public void run() {
-									setResult(parser.isValidEditString(new EObjectAdapter(element), (String) value));
-								}
-							});
-						return valid.getCode() == ParserEditStatus.EDITABLE ? null : valid.getMessage();
+											public void run() {
+												setResult(parser
+														.isValidEditString(
+																new EObjectAdapter(
+																		element),
+																(String) value));
+											}
+										});
+						return valid.getCode() == ParserEditStatus.EDITABLE ? null
+								: valid.getMessage();
 					} catch (InterruptedException ie) {
 						ie.printStackTrace();
 					}
@@ -283,7 +293,8 @@
 		if (getParserElement() == null || getParser() == null) {
 			return null;
 		}
-		return getParser().getCompletionProcessor(new EObjectAdapter(getParserElement()));
+		return getParser().getCompletionProcessor(
+				new EObjectAdapter(getParserElement()));
 	}
 
 	/**
@@ -298,10 +309,12 @@
 	 */
 	public IParser getParser() {
 		if (parser == null) {
-			parser = UrmlParserProvider.getParser(
-				UrmlElementTypes.AbstractFeatureConstrainingNonFunctionalRequirements_4036, getParserElement(),
-				UrmlVisualIDRegistry
-					.getType(org.unicase.ui.diagram.urml.edit.parts.IsConstraintLabelEditPart.VISUAL_ID));
+			parser = UrmlParserProvider
+					.getParser(
+							UrmlElementTypes.AbstractFeatureConstrainingNonFunctionalRequirements_4036,
+							getParserElement(),
+							UrmlVisualIDRegistry
+									.getType(org.unicase.ui.diagram.urml.edit.parts.IsConstraintLabelEditPart.VISUAL_ID));
 		}
 		return parser;
 	}
@@ -311,8 +324,9 @@
 	 */
 	protected DirectEditManager getManager() {
 		if (manager == null) {
-			setManager(new TextDirectEditManager(this, TextDirectEditManager.getTextCellEditorClass(this),
-				UrmlEditPartFactory.getTextCellEditorLocator(this)));
+			setManager(new TextDirectEditManager(this,
+					TextDirectEditManager.getTextCellEditorClass(this),
+					UrmlEditPartFactory.getTextCellEditorLocator(this)));
 		}
 		return manager;
 	}
@@ -336,7 +350,8 @@
 	 */
 	protected void performDirectEdit(Point eventLocation) {
 		if (getManager().getClass() == TextDirectEditManager.class) {
-			((TextDirectEditManager) getManager()).show(eventLocation.getSWTPoint());
+			((TextDirectEditManager) getManager()).show(eventLocation
+					.getSWTPoint());
 		}
 	}
 
@@ -361,11 +376,15 @@
 
 				public void run() {
 					if (isActive() && isEditable()) {
-						if (theRequest.getExtendedData().get(RequestConstants.REQ_DIRECTEDIT_EXTENDEDDATA_INITIAL_CHAR) instanceof Character) {
-							Character initialChar = (Character) theRequest.getExtendedData().get(
-								RequestConstants.REQ_DIRECTEDIT_EXTENDEDDATA_INITIAL_CHAR);
+						if (theRequest
+								.getExtendedData()
+								.get(RequestConstants.REQ_DIRECTEDIT_EXTENDEDDATA_INITIAL_CHAR) instanceof Character) {
+							Character initialChar = (Character) theRequest
+									.getExtendedData()
+									.get(RequestConstants.REQ_DIRECTEDIT_EXTENDEDDATA_INITIAL_CHAR);
 							performDirectEdit(initialChar.charValue());
-						} else if ((theRequest instanceof DirectEditRequest) && (getEditText().equals(getLabelText()))) {
+						} else if ((theRequest instanceof DirectEditRequest)
+								&& (getEditText().equals(getLabelText()))) {
 							DirectEditRequest editRequest = (DirectEditRequest) theRequest;
 							performDirectEdit(editRequest.getLocation());
 						} else {
@@ -411,7 +430,8 @@
 	 * @generated
 	 */
 	protected void refreshUnderline() {
-		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(NotationPackage.eINSTANCE.getFontStyle());
+		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(
+				NotationPackage.eINSTANCE.getFontStyle());
 		if (style != null && getFigure() instanceof WrappingLabel) {
 			((WrappingLabel) getFigure()).setTextUnderline(style.isUnderline());
 		}
@@ -421,9 +441,11 @@
 	 * @generated
 	 */
 	protected void refreshStrikeThrough() {
-		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(NotationPackage.eINSTANCE.getFontStyle());
+		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(
+				NotationPackage.eINSTANCE.getFontStyle());
 		if (style != null && getFigure() instanceof WrappingLabel) {
-			((WrappingLabel) getFigure()).setTextStrikeThrough(style.isStrikeThrough());
+			((WrappingLabel) getFigure()).setTextStrikeThrough(style
+					.isStrikeThrough());
 		}
 	}
 
@@ -431,11 +453,13 @@
 	 * @generated
 	 */
 	protected void refreshFont() {
-		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(NotationPackage.eINSTANCE.getFontStyle());
+		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(
+				NotationPackage.eINSTANCE.getFontStyle());
 		if (style != null) {
-			FontData fontData = new FontData(style.getFontName(), style.getFontHeight(), (style.isBold() ? SWT.BOLD
-				: SWT.NORMAL)
-				| (style.isItalic() ? SWT.ITALIC : SWT.NORMAL));
+			FontData fontData = new FontData(style.getFontName(),
+					style.getFontHeight(), (style.isBold() ? SWT.BOLD
+							: SWT.NORMAL)
+							| (style.isItalic() ? SWT.ITALIC : SWT.NORMAL));
 			setFont(fontData);
 		}
 	}
@@ -453,9 +477,11 @@
 	protected void addSemanticListeners() {
 		if (getParser() instanceof ISemanticParser) {
 			EObject element = resolveSemanticElement();
-			parserElements = ((ISemanticParser) getParser()).getSemanticElementsBeingParsed(element);
+			parserElements = ((ISemanticParser) getParser())
+					.getSemanticElementsBeingParsed(element);
 			for (int i = 0; i < parserElements.size(); i++) {
-				addListenerFilter("SemanticModel" + i, this, (EObject) parserElements.get(i)); //$NON-NLS-1$
+				addListenerFilter(
+						"SemanticModel" + i, this, (EObject) parserElements.get(i)); //$NON-NLS-1$
 			}
 		} else {
 			super.addSemanticListeners();
@@ -505,17 +531,25 @@
 		if (NotationPackage.eINSTANCE.getFontStyle_FontColor().equals(feature)) {
 			Integer c = (Integer) event.getNewValue();
 			setFontColor(DiagramColorRegistry.getInstance().getColor(c));
-		} else if (NotationPackage.eINSTANCE.getFontStyle_Underline().equals(feature)) {
+		} else if (NotationPackage.eINSTANCE.getFontStyle_Underline().equals(
+				feature)) {
 			refreshUnderline();
-		} else if (NotationPackage.eINSTANCE.getFontStyle_StrikeThrough().equals(feature)) {
+		} else if (NotationPackage.eINSTANCE.getFontStyle_StrikeThrough()
+				.equals(feature)) {
 			refreshStrikeThrough();
-		} else if (NotationPackage.eINSTANCE.getFontStyle_FontHeight().equals(feature)
-			|| NotationPackage.eINSTANCE.getFontStyle_FontName().equals(feature)
-			|| NotationPackage.eINSTANCE.getFontStyle_Bold().equals(feature)
-			|| NotationPackage.eINSTANCE.getFontStyle_Italic().equals(feature)) {
+		} else if (NotationPackage.eINSTANCE.getFontStyle_FontHeight().equals(
+				feature)
+				|| NotationPackage.eINSTANCE.getFontStyle_FontName().equals(
+						feature)
+				|| NotationPackage.eINSTANCE.getFontStyle_Bold()
+						.equals(feature)
+				|| NotationPackage.eINSTANCE.getFontStyle_Italic().equals(
+						feature)) {
 			refreshFont();
 		} else {
-			if (getParser() != null && getParser().isAffectingEvent(event, getParserOptions().intValue())) {
+			if (getParser() != null
+					&& getParser().isAffectingEvent(event,
+							getParserOptions().intValue())) {
 				refreshLabel();
 			}
 			if (getParser() instanceof ISemanticParser) {
Index: src/org/unicase/ui/diagram/urml/edit/parts/ProductNameEditPart.java
===================================================================
--- src/org/unicase/ui/diagram/urml/edit/parts/ProductNameEditPart.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/edit/parts/ProductNameEditPart.java	(working copy)
@@ -52,7 +52,8 @@
 /**
  * @generated
  */
-public class ProductNameEditPart extends CompartmentEditPart implements ITextAwareEditPart {
+public class ProductNameEditPart extends CompartmentEditPart implements
+		ITextAwareEditPart {
 
 	/**
 	 * @generated
@@ -72,7 +73,7 @@
 	/**
 	 * @generated
 	 */
-	private List parserElements;
+	private List<?> parserElements;
 
 	/**
 	 * @generated
@@ -91,25 +92,12 @@
 	 */
 	protected void createDefaultEditPolicies() {
 		super.createDefaultEditPolicies();
-		installEditPolicy(EditPolicy.SELECTION_FEEDBACK_ROLE, new UrmlTextSelectionEditPolicy());
-		installEditPolicy(EditPolicy.DIRECT_EDIT_ROLE, new LabelDirectEditPolicy());
-		installEditPolicy(EditPolicy.PRIMARY_DRAG_ROLE, new NonResizableEditPolicy() {
-
-			protected List createSelectionHandles() {
-				List handles = new ArrayList();
-				NonResizableHandleKit.addMoveHandle((GraphicalEditPart) getHost(), handles);
-				((MoveHandle) handles.get(0)).setBorder(null);
-				return handles;
-			}
-
-			public Command getCommand(Request request) {
-				return null;
-			}
-
-			public boolean understandsRequest(Request request) {
-				return false;
-			}
-		});
+		installEditPolicy(EditPolicy.SELECTION_FEEDBACK_ROLE,
+				new UrmlTextSelectionEditPolicy());
+		installEditPolicy(EditPolicy.DIRECT_EDIT_ROLE,
+				new LabelDirectEditPolicy());
+		installEditPolicy(EditPolicy.PRIMARY_DRAG_ROLE,
+				new URMLDiagramEditPart.NodeLabelDragPolicy());
 	}
 
 	/**
@@ -159,7 +147,8 @@
 	/**
 	 * @generated
 	 */
-	public void setLabel(org.unicase.ui.unicasecommon.diagram.figures.Label figure) {
+	public void setLabel(
+			org.unicase.ui.unicasecommon.diagram.figures.Label figure) {
 		unregisterVisuals();
 		setFigure(figure);
 		defaultText = getLabelTextHelper(figure);
@@ -170,6 +159,7 @@
 	/**
 	 * @generated
 	 */
+	@SuppressWarnings("rawtypes")
 	protected List getModelChildren() {
 		return Collections.EMPTY_LIST;
 	}
@@ -202,7 +192,9 @@
 		String text = null;
 		EObject parserElement = getParserElement();
 		if (parserElement != null && getParser() != null) {
-			text = getParser().getPrintString(new EObjectAdapter(parserElement), getParserOptions().intValue());
+			text = getParser().getPrintString(
+					new EObjectAdapter(parserElement),
+					getParserOptions().intValue());
 		}
 		if (text == null || text.length() == 0) {
 			text = defaultText;
@@ -232,7 +224,9 @@
 		if (getParserElement() == null || getParser() == null) {
 			return ""; //$NON-NLS-1$
 		}
-		return getParser().getEditString(new EObjectAdapter(getParserElement()), getParserOptions().intValue());
+		return getParser().getEditString(
+				new EObjectAdapter(getParserElement()),
+				getParserOptions().intValue());
 	}
 
 	/**
@@ -253,14 +247,20 @@
 					final EObject element = getParserElement();
 					final IParser parser = getParser();
 					try {
-						IParserEditStatus valid = (IParserEditStatus) getEditingDomain().runExclusive(
-							new RunnableWithResult.Impl() {
+						IParserEditStatus valid = (IParserEditStatus) getEditingDomain()
+								.runExclusive(
+										new RunnableWithResult.Impl<IParserEditStatus>() {
 
-								public void run() {
-									setResult(parser.isValidEditString(new EObjectAdapter(element), (String) value));
-								}
-							});
-						return valid.getCode() == ParserEditStatus.EDITABLE ? null : valid.getMessage();
+											public void run() {
+												setResult(parser
+														.isValidEditString(
+																new EObjectAdapter(
+																		element),
+																(String) value));
+											}
+										});
+						return valid.getCode() == ParserEditStatus.EDITABLE ? null
+								: valid.getMessage();
 					} catch (InterruptedException ie) {
 						ie.printStackTrace();
 					}
@@ -279,7 +279,8 @@
 		if (getParserElement() == null || getParser() == null) {
 			return null;
 		}
-		return getParser().getCompletionProcessor(new EObjectAdapter(getParserElement()));
+		return getParser().getCompletionProcessor(
+				new EObjectAdapter(getParserElement()));
 	}
 
 	/**
@@ -294,8 +295,12 @@
 	 */
 	public IParser getParser() {
 		if (parser == null) {
-			parser = UrmlParserProvider.getParser(UrmlElementTypes.Product_2015, getParserElement(),
-				UrmlVisualIDRegistry.getType(org.unicase.ui.diagram.urml.edit.parts.ProductNameEditPart.VISUAL_ID));
+			parser = UrmlParserProvider
+					.getParser(
+							UrmlElementTypes.Product_2015,
+							getParserElement(),
+							UrmlVisualIDRegistry
+									.getType(org.unicase.ui.diagram.urml.edit.parts.ProductNameEditPart.VISUAL_ID));
 		}
 		return parser;
 	}
@@ -305,8 +310,9 @@
 	 */
 	protected DirectEditManager getManager() {
 		if (manager == null) {
-			setManager(new TextDirectEditManager(this, TextDirectEditManager.getTextCellEditorClass(this),
-				UrmlEditPartFactory.getTextCellEditorLocator(this)));
+			setManager(new TextDirectEditManager(this,
+					TextDirectEditManager.getTextCellEditorClass(this),
+					UrmlEditPartFactory.getTextCellEditorLocator(this)));
 		}
 		return manager;
 	}
@@ -330,7 +336,8 @@
 	 */
 	protected void performDirectEdit(Point eventLocation) {
 		if (getManager().getClass() == TextDirectEditManager.class) {
-			((TextDirectEditManager) getManager()).show(eventLocation.getSWTPoint());
+			((TextDirectEditManager) getManager()).show(eventLocation
+					.getSWTPoint());
 		}
 	}
 
@@ -355,11 +362,15 @@
 
 				public void run() {
 					if (isActive() && isEditable()) {
-						if (theRequest.getExtendedData().get(RequestConstants.REQ_DIRECTEDIT_EXTENDEDDATA_INITIAL_CHAR) instanceof Character) {
-							Character initialChar = (Character) theRequest.getExtendedData().get(
-								RequestConstants.REQ_DIRECTEDIT_EXTENDEDDATA_INITIAL_CHAR);
+						if (theRequest
+								.getExtendedData()
+								.get(RequestConstants.REQ_DIRECTEDIT_EXTENDEDDATA_INITIAL_CHAR) instanceof Character) {
+							Character initialChar = (Character) theRequest
+									.getExtendedData()
+									.get(RequestConstants.REQ_DIRECTEDIT_EXTENDEDDATA_INITIAL_CHAR);
 							performDirectEdit(initialChar.charValue());
-						} else if ((theRequest instanceof DirectEditRequest) && (getEditText().equals(getLabelText()))) {
+						} else if ((theRequest instanceof DirectEditRequest)
+								&& (getEditText().equals(getLabelText()))) {
 							DirectEditRequest editRequest = (DirectEditRequest) theRequest;
 							performDirectEdit(editRequest.getLocation());
 						} else {
@@ -405,7 +416,8 @@
 	 * @generated
 	 */
 	protected void refreshUnderline() {
-		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(NotationPackage.eINSTANCE.getFontStyle());
+		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(
+				NotationPackage.eINSTANCE.getFontStyle());
 		if (style != null && getFigure() instanceof WrappingLabel) {
 			((WrappingLabel) getFigure()).setTextUnderline(style.isUnderline());
 		}
@@ -415,9 +427,11 @@
 	 * @generated
 	 */
 	protected void refreshStrikeThrough() {
-		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(NotationPackage.eINSTANCE.getFontStyle());
+		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(
+				NotationPackage.eINSTANCE.getFontStyle());
 		if (style != null && getFigure() instanceof WrappingLabel) {
-			((WrappingLabel) getFigure()).setTextStrikeThrough(style.isStrikeThrough());
+			((WrappingLabel) getFigure()).setTextStrikeThrough(style
+					.isStrikeThrough());
 		}
 	}
 
@@ -425,11 +439,13 @@
 	 * @generated
 	 */
 	protected void refreshFont() {
-		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(NotationPackage.eINSTANCE.getFontStyle());
+		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(
+				NotationPackage.eINSTANCE.getFontStyle());
 		if (style != null) {
-			FontData fontData = new FontData(style.getFontName(), style.getFontHeight(), (style.isBold() ? SWT.BOLD
-				: SWT.NORMAL)
-				| (style.isItalic() ? SWT.ITALIC : SWT.NORMAL));
+			FontData fontData = new FontData(style.getFontName(),
+					style.getFontHeight(), (style.isBold() ? SWT.BOLD
+							: SWT.NORMAL)
+							| (style.isItalic() ? SWT.ITALIC : SWT.NORMAL));
 			setFont(fontData);
 		}
 	}
@@ -447,9 +463,11 @@
 	protected void addSemanticListeners() {
 		if (getParser() instanceof ISemanticParser) {
 			EObject element = resolveSemanticElement();
-			parserElements = ((ISemanticParser) getParser()).getSemanticElementsBeingParsed(element);
+			parserElements = ((ISemanticParser) getParser())
+					.getSemanticElementsBeingParsed(element);
 			for (int i = 0; i < parserElements.size(); i++) {
-				addListenerFilter("SemanticModel" + i, this, (EObject) parserElements.get(i)); //$NON-NLS-1$
+				addListenerFilter(
+						"SemanticModel" + i, this, (EObject) parserElements.get(i)); //$NON-NLS-1$
 			}
 		} else {
 			super.addSemanticListeners();
@@ -515,17 +533,25 @@
 		if (NotationPackage.eINSTANCE.getFontStyle_FontColor().equals(feature)) {
 			Integer c = (Integer) event.getNewValue();
 			setFontColor(DiagramColorRegistry.getInstance().getColor(c));
-		} else if (NotationPackage.eINSTANCE.getFontStyle_Underline().equals(feature)) {
+		} else if (NotationPackage.eINSTANCE.getFontStyle_Underline().equals(
+				feature)) {
 			refreshUnderline();
-		} else if (NotationPackage.eINSTANCE.getFontStyle_StrikeThrough().equals(feature)) {
+		} else if (NotationPackage.eINSTANCE.getFontStyle_StrikeThrough()
+				.equals(feature)) {
 			refreshStrikeThrough();
-		} else if (NotationPackage.eINSTANCE.getFontStyle_FontHeight().equals(feature)
-			|| NotationPackage.eINSTANCE.getFontStyle_FontName().equals(feature)
-			|| NotationPackage.eINSTANCE.getFontStyle_Bold().equals(feature)
-			|| NotationPackage.eINSTANCE.getFontStyle_Italic().equals(feature)) {
+		} else if (NotationPackage.eINSTANCE.getFontStyle_FontHeight().equals(
+				feature)
+				|| NotationPackage.eINSTANCE.getFontStyle_FontName().equals(
+						feature)
+				|| NotationPackage.eINSTANCE.getFontStyle_Bold()
+						.equals(feature)
+				|| NotationPackage.eINSTANCE.getFontStyle_Italic().equals(
+						feature)) {
 			refreshFont();
 		} else {
-			if (getParser() != null && getParser().isAffectingEvent(event, getParserOptions().intValue())) {
+			if (getParser() != null
+					&& getParser().isAffectingEvent(event,
+							getParserOptions().intValue())) {
 				refreshLabel();
 			}
 			if (getParser() instanceof ISemanticParser) {
Index: src/org/unicase/ui/diagram/urml/edit/parts/ActorNameEditPart.java
===================================================================
--- src/org/unicase/ui/diagram/urml/edit/parts/ActorNameEditPart.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/edit/parts/ActorNameEditPart.java	(working copy)
@@ -52,7 +52,8 @@
 /**
  * @generated
  */
-public class ActorNameEditPart extends CompartmentEditPart implements ITextAwareEditPart {
+public class ActorNameEditPart extends CompartmentEditPart implements
+		ITextAwareEditPart {
 
 	/**
 	 * @generated
@@ -72,7 +73,7 @@
 	/**
 	 * @generated
 	 */
-	private List parserElements;
+	private List<?> parserElements;
 
 	/**
 	 * @generated
@@ -91,25 +92,12 @@
 	 */
 	protected void createDefaultEditPolicies() {
 		super.createDefaultEditPolicies();
-		installEditPolicy(EditPolicy.SELECTION_FEEDBACK_ROLE, new UrmlTextSelectionEditPolicy());
-		installEditPolicy(EditPolicy.DIRECT_EDIT_ROLE, new LabelDirectEditPolicy());
-		installEditPolicy(EditPolicy.PRIMARY_DRAG_ROLE, new NonResizableEditPolicy() {
-
-			protected List createSelectionHandles() {
-				List handles = new ArrayList();
-				NonResizableHandleKit.addMoveHandle((GraphicalEditPart) getHost(), handles);
-				((MoveHandle) handles.get(0)).setBorder(null);
-				return handles;
-			}
-
-			public Command getCommand(Request request) {
-				return null;
-			}
-
-			public boolean understandsRequest(Request request) {
-				return false;
-			}
-		});
+		installEditPolicy(EditPolicy.SELECTION_FEEDBACK_ROLE,
+				new UrmlTextSelectionEditPolicy());
+		installEditPolicy(EditPolicy.DIRECT_EDIT_ROLE,
+				new LabelDirectEditPolicy());
+		installEditPolicy(EditPolicy.PRIMARY_DRAG_ROLE,
+				new URMLDiagramEditPart.NodeLabelDragPolicy());
 	}
 
 	/**
@@ -159,7 +147,8 @@
 	/**
 	 * @generated
 	 */
-	public void setLabel(org.unicase.ui.unicasecommon.diagram.figures.Label figure) {
+	public void setLabel(
+			org.unicase.ui.unicasecommon.diagram.figures.Label figure) {
 		unregisterVisuals();
 		setFigure(figure);
 		defaultText = getLabelTextHelper(figure);
@@ -170,6 +159,7 @@
 	/**
 	 * @generated
 	 */
+	@SuppressWarnings("rawtypes")
 	protected List getModelChildren() {
 		return Collections.EMPTY_LIST;
 	}
@@ -202,7 +192,9 @@
 		String text = null;
 		EObject parserElement = getParserElement();
 		if (parserElement != null && getParser() != null) {
-			text = getParser().getPrintString(new EObjectAdapter(parserElement), getParserOptions().intValue());
+			text = getParser().getPrintString(
+					new EObjectAdapter(parserElement),
+					getParserOptions().intValue());
 		}
 		if (text == null || text.length() == 0) {
 			text = defaultText;
@@ -232,7 +224,9 @@
 		if (getParserElement() == null || getParser() == null) {
 			return ""; //$NON-NLS-1$
 		}
-		return getParser().getEditString(new EObjectAdapter(getParserElement()), getParserOptions().intValue());
+		return getParser().getEditString(
+				new EObjectAdapter(getParserElement()),
+				getParserOptions().intValue());
 	}
 
 	/**
@@ -253,14 +247,20 @@
 					final EObject element = getParserElement();
 					final IParser parser = getParser();
 					try {
-						IParserEditStatus valid = (IParserEditStatus) getEditingDomain().runExclusive(
-							new RunnableWithResult.Impl() {
+						IParserEditStatus valid = (IParserEditStatus) getEditingDomain()
+								.runExclusive(
+										new RunnableWithResult.Impl<IParserEditStatus>() {
 
-								public void run() {
-									setResult(parser.isValidEditString(new EObjectAdapter(element), (String) value));
-								}
-							});
-						return valid.getCode() == ParserEditStatus.EDITABLE ? null : valid.getMessage();
+											public void run() {
+												setResult(parser
+														.isValidEditString(
+																new EObjectAdapter(
+																		element),
+																(String) value));
+											}
+										});
+						return valid.getCode() == ParserEditStatus.EDITABLE ? null
+								: valid.getMessage();
 					} catch (InterruptedException ie) {
 						ie.printStackTrace();
 					}
@@ -279,7 +279,8 @@
 		if (getParserElement() == null || getParser() == null) {
 			return null;
 		}
-		return getParser().getCompletionProcessor(new EObjectAdapter(getParserElement()));
+		return getParser().getCompletionProcessor(
+				new EObjectAdapter(getParserElement()));
 	}
 
 	/**
@@ -294,8 +295,12 @@
 	 */
 	public IParser getParser() {
 		if (parser == null) {
-			parser = UrmlParserProvider.getParser(UrmlElementTypes.Actor_2010, getParserElement(), UrmlVisualIDRegistry
-				.getType(org.unicase.ui.diagram.urml.edit.parts.ActorNameEditPart.VISUAL_ID));
+			parser = UrmlParserProvider
+					.getParser(
+							UrmlElementTypes.Actor_2010,
+							getParserElement(),
+							UrmlVisualIDRegistry
+									.getType(org.unicase.ui.diagram.urml.edit.parts.ActorNameEditPart.VISUAL_ID));
 		}
 		return parser;
 	}
@@ -305,8 +310,9 @@
 	 */
 	protected DirectEditManager getManager() {
 		if (manager == null) {
-			setManager(new TextDirectEditManager(this, TextDirectEditManager.getTextCellEditorClass(this),
-				UrmlEditPartFactory.getTextCellEditorLocator(this)));
+			setManager(new TextDirectEditManager(this,
+					TextDirectEditManager.getTextCellEditorClass(this),
+					UrmlEditPartFactory.getTextCellEditorLocator(this)));
 		}
 		return manager;
 	}
@@ -330,7 +336,8 @@
 	 */
 	protected void performDirectEdit(Point eventLocation) {
 		if (getManager().getClass() == TextDirectEditManager.class) {
-			((TextDirectEditManager) getManager()).show(eventLocation.getSWTPoint());
+			((TextDirectEditManager) getManager()).show(eventLocation
+					.getSWTPoint());
 		}
 	}
 
@@ -355,11 +362,15 @@
 
 				public void run() {
 					if (isActive() && isEditable()) {
-						if (theRequest.getExtendedData().get(RequestConstants.REQ_DIRECTEDIT_EXTENDEDDATA_INITIAL_CHAR) instanceof Character) {
-							Character initialChar = (Character) theRequest.getExtendedData().get(
-								RequestConstants.REQ_DIRECTEDIT_EXTENDEDDATA_INITIAL_CHAR);
+						if (theRequest
+								.getExtendedData()
+								.get(RequestConstants.REQ_DIRECTEDIT_EXTENDEDDATA_INITIAL_CHAR) instanceof Character) {
+							Character initialChar = (Character) theRequest
+									.getExtendedData()
+									.get(RequestConstants.REQ_DIRECTEDIT_EXTENDEDDATA_INITIAL_CHAR);
 							performDirectEdit(initialChar.charValue());
-						} else if ((theRequest instanceof DirectEditRequest) && (getEditText().equals(getLabelText()))) {
+						} else if ((theRequest instanceof DirectEditRequest)
+								&& (getEditText().equals(getLabelText()))) {
 							DirectEditRequest editRequest = (DirectEditRequest) theRequest;
 							performDirectEdit(editRequest.getLocation());
 						} else {
@@ -405,7 +416,8 @@
 	 * @generated
 	 */
 	protected void refreshUnderline() {
-		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(NotationPackage.eINSTANCE.getFontStyle());
+		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(
+				NotationPackage.eINSTANCE.getFontStyle());
 		if (style != null && getFigure() instanceof WrappingLabel) {
 			((WrappingLabel) getFigure()).setTextUnderline(style.isUnderline());
 		}
@@ -415,9 +427,11 @@
 	 * @generated
 	 */
 	protected void refreshStrikeThrough() {
-		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(NotationPackage.eINSTANCE.getFontStyle());
+		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(
+				NotationPackage.eINSTANCE.getFontStyle());
 		if (style != null && getFigure() instanceof WrappingLabel) {
-			((WrappingLabel) getFigure()).setTextStrikeThrough(style.isStrikeThrough());
+			((WrappingLabel) getFigure()).setTextStrikeThrough(style
+					.isStrikeThrough());
 		}
 	}
 
@@ -425,11 +439,13 @@
 	 * @generated
 	 */
 	protected void refreshFont() {
-		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(NotationPackage.eINSTANCE.getFontStyle());
+		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(
+				NotationPackage.eINSTANCE.getFontStyle());
 		if (style != null) {
-			FontData fontData = new FontData(style.getFontName(), style.getFontHeight(), (style.isBold() ? SWT.BOLD
-				: SWT.NORMAL)
-				| (style.isItalic() ? SWT.ITALIC : SWT.NORMAL));
+			FontData fontData = new FontData(style.getFontName(),
+					style.getFontHeight(), (style.isBold() ? SWT.BOLD
+							: SWT.NORMAL)
+							| (style.isItalic() ? SWT.ITALIC : SWT.NORMAL));
 			setFont(fontData);
 		}
 	}
@@ -447,9 +463,11 @@
 	protected void addSemanticListeners() {
 		if (getParser() instanceof ISemanticParser) {
 			EObject element = resolveSemanticElement();
-			parserElements = ((ISemanticParser) getParser()).getSemanticElementsBeingParsed(element);
+			parserElements = ((ISemanticParser) getParser())
+					.getSemanticElementsBeingParsed(element);
 			for (int i = 0; i < parserElements.size(); i++) {
-				addListenerFilter("SemanticModel" + i, this, (EObject) parserElements.get(i)); //$NON-NLS-1$
+				addListenerFilter(
+						"SemanticModel" + i, this, (EObject) parserElements.get(i)); //$NON-NLS-1$
 			}
 		} else {
 			super.addSemanticListeners();
@@ -515,17 +533,25 @@
 		if (NotationPackage.eINSTANCE.getFontStyle_FontColor().equals(feature)) {
 			Integer c = (Integer) event.getNewValue();
 			setFontColor(DiagramColorRegistry.getInstance().getColor(c));
-		} else if (NotationPackage.eINSTANCE.getFontStyle_Underline().equals(feature)) {
+		} else if (NotationPackage.eINSTANCE.getFontStyle_Underline().equals(
+				feature)) {
 			refreshUnderline();
-		} else if (NotationPackage.eINSTANCE.getFontStyle_StrikeThrough().equals(feature)) {
+		} else if (NotationPackage.eINSTANCE.getFontStyle_StrikeThrough()
+				.equals(feature)) {
 			refreshStrikeThrough();
-		} else if (NotationPackage.eINSTANCE.getFontStyle_FontHeight().equals(feature)
-			|| NotationPackage.eINSTANCE.getFontStyle_FontName().equals(feature)
-			|| NotationPackage.eINSTANCE.getFontStyle_Bold().equals(feature)
-			|| NotationPackage.eINSTANCE.getFontStyle_Italic().equals(feature)) {
+		} else if (NotationPackage.eINSTANCE.getFontStyle_FontHeight().equals(
+				feature)
+				|| NotationPackage.eINSTANCE.getFontStyle_FontName().equals(
+						feature)
+				|| NotationPackage.eINSTANCE.getFontStyle_Bold()
+						.equals(feature)
+				|| NotationPackage.eINSTANCE.getFontStyle_Italic().equals(
+						feature)) {
 			refreshFont();
 		} else {
-			if (getParser() != null && getParser().isAffectingEvent(event, getParserOptions().intValue())) {
+			if (getParser() != null
+					&& getParser().isAffectingEvent(event,
+							getParserOptions().intValue())) {
 				refreshLabel();
 			}
 			if (getParser() instanceof ISemanticParser) {
Index: src/org/unicase/ui/diagram/urml/edit/parts/AbstractFeatureDetailingFunctionalRequirementsEditPart.java
===================================================================
--- src/org/unicase/ui/diagram/urml/edit/parts/AbstractFeatureDetailingFunctionalRequirementsEditPart.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/edit/parts/AbstractFeatureDetailingFunctionalRequirementsEditPart.java	(working copy)
@@ -12,8 +12,8 @@
 /**
  * @generated
  */
-public class AbstractFeatureDetailingFunctionalRequirementsEditPart extends ConnectionNodeEditPart implements
-	ITreeBranchEditPart {
+public class AbstractFeatureDetailingFunctionalRequirementsEditPart extends
+		ConnectionNodeEditPart implements ITreeBranchEditPart {
 
 	/**
 	 * @generated
@@ -32,42 +32,9 @@
 	 */
 	protected void createDefaultEditPolicies() {
 		super.createDefaultEditPolicies();
-		installEditPolicy(EditPolicyRoles.SEMANTIC_ROLE,
-			new AbstractFeatureDetailingFunctionalRequirementsItemSemanticEditPolicy());
-	}
-
-	/**
-	 * @generated
-	 */
-	protected boolean addFixedChild(EditPart childEditPart) {
-		return false;
-	}
-
-	/**
-	 * @generated
-	 */
-	protected void addChildVisual(EditPart childEditPart, int index) {
-		if (addFixedChild(childEditPart)) {
-			return;
-		}
-		super.addChildVisual(childEditPart, -1);
-	}
-
-	/**
-	 * @generated
-	 */
-	protected boolean removeFixedChild(EditPart childEditPart) {
-		return false;
-	}
-
-	/**
-	 * @generated
-	 */
-	protected void removeChildVisual(EditPart childEditPart) {
-		if (removeFixedChild(childEditPart)) {
-			return;
-		}
-		super.removeChildVisual(childEditPart);
+		installEditPolicy(
+				EditPolicyRoles.SEMANTIC_ROLE,
+				new AbstractFeatureDetailingFunctionalRequirementsItemSemanticEditPolicy());
 	}
 
 	/**
Index: src/org/unicase/ui/diagram/urml/edit/parts/IsDetailedLabelEditPart.java
===================================================================
--- src/org/unicase/ui/diagram/urml/edit/parts/IsDetailedLabelEditPart.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/edit/parts/IsDetailedLabelEditPart.java	(working copy)
@@ -50,7 +50,8 @@
 /**
  * @generated
  */
-public class IsDetailedLabelEditPart extends LabelEditPart implements ITextAwareEditPart {
+public class IsDetailedLabelEditPart extends LabelEditPart implements
+		ITextAwareEditPart {
 
 	/**
 	 * @generated
@@ -70,7 +71,7 @@
 	/**
 	 * @generated
 	 */
-	private List parserElements;
+	private List<?> parserElements;
 
 	/**
 	 * @generated
@@ -81,8 +82,10 @@
 	 * @generated
 	 */
 	static {
-		registerSnapBackPosition(UrmlVisualIDRegistry
-			.getType(org.unicase.ui.diagram.urml.edit.parts.IsDetailedLabelEditPart.VISUAL_ID), new Point(0, 20));
+		registerSnapBackPosition(
+				UrmlVisualIDRegistry
+						.getType(org.unicase.ui.diagram.urml.edit.parts.IsDetailedLabelEditPart.VISUAL_ID),
+				new Point(0, 20));
 	}
 
 	/**
@@ -97,16 +100,12 @@
 	 */
 	protected void createDefaultEditPolicies() {
 		super.createDefaultEditPolicies();
-		installEditPolicy(EditPolicy.DIRECT_EDIT_ROLE, new LabelDirectEditPolicy());
-		installEditPolicy(EditPolicy.SELECTION_FEEDBACK_ROLE, new UrmlTextSelectionEditPolicy());
-		installEditPolicy(EditPolicy.PRIMARY_DRAG_ROLE, new NonResizableLabelEditPolicy() {
-
-			protected List createSelectionHandles() {
-				MoveHandle mh = new MoveHandle((GraphicalEditPart) getHost());
-				mh.setBorder(null);
-				return Collections.singletonList(mh);
-			}
-		});
+		installEditPolicy(EditPolicy.DIRECT_EDIT_ROLE,
+				new LabelDirectEditPolicy());
+		installEditPolicy(EditPolicy.SELECTION_FEEDBACK_ROLE,
+				new UrmlTextSelectionEditPolicy());
+		installEditPolicy(EditPolicy.PRIMARY_DRAG_ROLE,
+				new URMLDiagramEditPart.LinkLabelDragPolicy());
 	}
 
 	/**
@@ -174,6 +173,7 @@
 	/**
 	 * @generated
 	 */
+	@SuppressWarnings("rawtypes")
 	protected List getModelChildren() {
 		return Collections.EMPTY_LIST;
 	}
@@ -206,7 +206,9 @@
 		String text = null;
 		EObject parserElement = getParserElement();
 		if (parserElement != null && getParser() != null) {
-			text = getParser().getPrintString(new EObjectAdapter(parserElement), getParserOptions().intValue());
+			text = getParser().getPrintString(
+					new EObjectAdapter(parserElement),
+					getParserOptions().intValue());
 		}
 		if (text == null || text.length() == 0) {
 			text = defaultText;
@@ -236,7 +238,9 @@
 		if (getParserElement() == null || getParser() == null) {
 			return ""; //$NON-NLS-1$
 		}
-		return getParser().getEditString(new EObjectAdapter(getParserElement()), getParserOptions().intValue());
+		return getParser().getEditString(
+				new EObjectAdapter(getParserElement()),
+				getParserOptions().intValue());
 	}
 
 	/**
@@ -257,14 +261,20 @@
 					final EObject element = getParserElement();
 					final IParser parser = getParser();
 					try {
-						IParserEditStatus valid = (IParserEditStatus) getEditingDomain().runExclusive(
-							new RunnableWithResult.Impl() {
+						IParserEditStatus valid = (IParserEditStatus) getEditingDomain()
+								.runExclusive(
+										new RunnableWithResult.Impl<IParserEditStatus>() {
 
-								public void run() {
-									setResult(parser.isValidEditString(new EObjectAdapter(element), (String) value));
-								}
-							});
-						return valid.getCode() == ParserEditStatus.EDITABLE ? null : valid.getMessage();
+											public void run() {
+												setResult(parser
+														.isValidEditString(
+																new EObjectAdapter(
+																		element),
+																(String) value));
+											}
+										});
+						return valid.getCode() == ParserEditStatus.EDITABLE ? null
+								: valid.getMessage();
 					} catch (InterruptedException ie) {
 						ie.printStackTrace();
 					}
@@ -283,7 +293,8 @@
 		if (getParserElement() == null || getParser() == null) {
 			return null;
 		}
-		return getParser().getCompletionProcessor(new EObjectAdapter(getParserElement()));
+		return getParser().getCompletionProcessor(
+				new EObjectAdapter(getParserElement()));
 	}
 
 	/**
@@ -298,9 +309,12 @@
 	 */
 	public IParser getParser() {
 		if (parser == null) {
-			parser = UrmlParserProvider.getParser(UrmlElementTypes.AbstractFeatureDetailingFunctionalRequirements_4035,
-				getParserElement(), UrmlVisualIDRegistry
-					.getType(org.unicase.ui.diagram.urml.edit.parts.IsDetailedLabelEditPart.VISUAL_ID));
+			parser = UrmlParserProvider
+					.getParser(
+							UrmlElementTypes.AbstractFeatureDetailingFunctionalRequirements_4035,
+							getParserElement(),
+							UrmlVisualIDRegistry
+									.getType(org.unicase.ui.diagram.urml.edit.parts.IsDetailedLabelEditPart.VISUAL_ID));
 		}
 		return parser;
 	}
@@ -310,8 +324,9 @@
 	 */
 	protected DirectEditManager getManager() {
 		if (manager == null) {
-			setManager(new TextDirectEditManager(this, TextDirectEditManager.getTextCellEditorClass(this),
-				UrmlEditPartFactory.getTextCellEditorLocator(this)));
+			setManager(new TextDirectEditManager(this,
+					TextDirectEditManager.getTextCellEditorClass(this),
+					UrmlEditPartFactory.getTextCellEditorLocator(this)));
 		}
 		return manager;
 	}
@@ -335,7 +350,8 @@
 	 */
 	protected void performDirectEdit(Point eventLocation) {
 		if (getManager().getClass() == TextDirectEditManager.class) {
-			((TextDirectEditManager) getManager()).show(eventLocation.getSWTPoint());
+			((TextDirectEditManager) getManager()).show(eventLocation
+					.getSWTPoint());
 		}
 	}
 
@@ -360,11 +376,15 @@
 
 				public void run() {
 					if (isActive() && isEditable()) {
-						if (theRequest.getExtendedData().get(RequestConstants.REQ_DIRECTEDIT_EXTENDEDDATA_INITIAL_CHAR) instanceof Character) {
-							Character initialChar = (Character) theRequest.getExtendedData().get(
-								RequestConstants.REQ_DIRECTEDIT_EXTENDEDDATA_INITIAL_CHAR);
+						if (theRequest
+								.getExtendedData()
+								.get(RequestConstants.REQ_DIRECTEDIT_EXTENDEDDATA_INITIAL_CHAR) instanceof Character) {
+							Character initialChar = (Character) theRequest
+									.getExtendedData()
+									.get(RequestConstants.REQ_DIRECTEDIT_EXTENDEDDATA_INITIAL_CHAR);
 							performDirectEdit(initialChar.charValue());
-						} else if ((theRequest instanceof DirectEditRequest) && (getEditText().equals(getLabelText()))) {
+						} else if ((theRequest instanceof DirectEditRequest)
+								&& (getEditText().equals(getLabelText()))) {
 							DirectEditRequest editRequest = (DirectEditRequest) theRequest;
 							performDirectEdit(editRequest.getLocation());
 						} else {
@@ -410,7 +430,8 @@
 	 * @generated
 	 */
 	protected void refreshUnderline() {
-		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(NotationPackage.eINSTANCE.getFontStyle());
+		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(
+				NotationPackage.eINSTANCE.getFontStyle());
 		if (style != null && getFigure() instanceof WrappingLabel) {
 			((WrappingLabel) getFigure()).setTextUnderline(style.isUnderline());
 		}
@@ -420,9 +441,11 @@
 	 * @generated
 	 */
 	protected void refreshStrikeThrough() {
-		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(NotationPackage.eINSTANCE.getFontStyle());
+		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(
+				NotationPackage.eINSTANCE.getFontStyle());
 		if (style != null && getFigure() instanceof WrappingLabel) {
-			((WrappingLabel) getFigure()).setTextStrikeThrough(style.isStrikeThrough());
+			((WrappingLabel) getFigure()).setTextStrikeThrough(style
+					.isStrikeThrough());
 		}
 	}
 
@@ -430,11 +453,13 @@
 	 * @generated
 	 */
 	protected void refreshFont() {
-		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(NotationPackage.eINSTANCE.getFontStyle());
+		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(
+				NotationPackage.eINSTANCE.getFontStyle());
 		if (style != null) {
-			FontData fontData = new FontData(style.getFontName(), style.getFontHeight(), (style.isBold() ? SWT.BOLD
-				: SWT.NORMAL)
-				| (style.isItalic() ? SWT.ITALIC : SWT.NORMAL));
+			FontData fontData = new FontData(style.getFontName(),
+					style.getFontHeight(), (style.isBold() ? SWT.BOLD
+							: SWT.NORMAL)
+							| (style.isItalic() ? SWT.ITALIC : SWT.NORMAL));
 			setFont(fontData);
 		}
 	}
@@ -452,9 +477,11 @@
 	protected void addSemanticListeners() {
 		if (getParser() instanceof ISemanticParser) {
 			EObject element = resolveSemanticElement();
-			parserElements = ((ISemanticParser) getParser()).getSemanticElementsBeingParsed(element);
+			parserElements = ((ISemanticParser) getParser())
+					.getSemanticElementsBeingParsed(element);
 			for (int i = 0; i < parserElements.size(); i++) {
-				addListenerFilter("SemanticModel" + i, this, (EObject) parserElements.get(i)); //$NON-NLS-1$
+				addListenerFilter(
+						"SemanticModel" + i, this, (EObject) parserElements.get(i)); //$NON-NLS-1$
 			}
 		} else {
 			super.addSemanticListeners();
@@ -504,17 +531,25 @@
 		if (NotationPackage.eINSTANCE.getFontStyle_FontColor().equals(feature)) {
 			Integer c = (Integer) event.getNewValue();
 			setFontColor(DiagramColorRegistry.getInstance().getColor(c));
-		} else if (NotationPackage.eINSTANCE.getFontStyle_Underline().equals(feature)) {
+		} else if (NotationPackage.eINSTANCE.getFontStyle_Underline().equals(
+				feature)) {
 			refreshUnderline();
-		} else if (NotationPackage.eINSTANCE.getFontStyle_StrikeThrough().equals(feature)) {
+		} else if (NotationPackage.eINSTANCE.getFontStyle_StrikeThrough()
+				.equals(feature)) {
 			refreshStrikeThrough();
-		} else if (NotationPackage.eINSTANCE.getFontStyle_FontHeight().equals(feature)
-			|| NotationPackage.eINSTANCE.getFontStyle_FontName().equals(feature)
-			|| NotationPackage.eINSTANCE.getFontStyle_Bold().equals(feature)
-			|| NotationPackage.eINSTANCE.getFontStyle_Italic().equals(feature)) {
+		} else if (NotationPackage.eINSTANCE.getFontStyle_FontHeight().equals(
+				feature)
+				|| NotationPackage.eINSTANCE.getFontStyle_FontName().equals(
+						feature)
+				|| NotationPackage.eINSTANCE.getFontStyle_Bold()
+						.equals(feature)
+				|| NotationPackage.eINSTANCE.getFontStyle_Italic().equals(
+						feature)) {
 			refreshFont();
 		} else {
-			if (getParser() != null && getParser().isAffectingEvent(event, getParserOptions().intValue())) {
+			if (getParser() != null
+					&& getParser().isAffectingEvent(event,
+							getParserOptions().intValue())) {
 				refreshLabel();
 			}
 			if (getParser() instanceof ISemanticParser) {
Index: src/org/unicase/ui/diagram/urml/edit/parts/GoalReferenceWeight3EditPart.java
===================================================================
--- src/org/unicase/ui/diagram/urml/edit/parts/GoalReferenceWeight3EditPart.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/edit/parts/GoalReferenceWeight3EditPart.java	(working copy)
@@ -50,7 +50,8 @@
 /**
  * @generated
  */
-public class GoalReferenceWeight3EditPart extends LabelEditPart implements ITextAwareEditPart {
+public class GoalReferenceWeight3EditPart extends LabelEditPart implements
+		ITextAwareEditPart {
 
 	/**
 	 * @generated
@@ -70,7 +71,7 @@
 	/**
 	 * @generated
 	 */
-	private List parserElements;
+	private List<?> parserElements;
 
 	/**
 	 * @generated
@@ -81,8 +82,10 @@
 	 * @generated
 	 */
 	static {
-		registerSnapBackPosition(UrmlVisualIDRegistry
-			.getType(org.unicase.ui.diagram.urml.edit.parts.GoalReferenceWeight3EditPart.VISUAL_ID), new Point(0, 0));
+		registerSnapBackPosition(
+				UrmlVisualIDRegistry
+						.getType(org.unicase.ui.diagram.urml.edit.parts.GoalReferenceWeight3EditPart.VISUAL_ID),
+				new Point(0, 0));
 	}
 
 	/**
@@ -97,16 +100,12 @@
 	 */
 	protected void createDefaultEditPolicies() {
 		super.createDefaultEditPolicies();
-		installEditPolicy(EditPolicy.DIRECT_EDIT_ROLE, new LabelDirectEditPolicy());
-		installEditPolicy(EditPolicy.SELECTION_FEEDBACK_ROLE, new UrmlTextSelectionEditPolicy());
-		installEditPolicy(EditPolicy.PRIMARY_DRAG_ROLE, new NonResizableLabelEditPolicy() {
-
-			protected List createSelectionHandles() {
-				MoveHandle mh = new MoveHandle((GraphicalEditPart) getHost());
-				mh.setBorder(null);
-				return Collections.singletonList(mh);
-			}
-		});
+		installEditPolicy(EditPolicy.DIRECT_EDIT_ROLE,
+				new LabelDirectEditPolicy());
+		installEditPolicy(EditPolicy.SELECTION_FEEDBACK_ROLE,
+				new UrmlTextSelectionEditPolicy());
+		installEditPolicy(EditPolicy.PRIMARY_DRAG_ROLE,
+				new URMLDiagramEditPart.LinkLabelDragPolicy());
 	}
 
 	/**
@@ -174,6 +173,7 @@
 	/**
 	 * @generated
 	 */
+	@SuppressWarnings("rawtypes")
 	protected List getModelChildren() {
 		return Collections.EMPTY_LIST;
 	}
@@ -206,7 +206,9 @@
 		String text = null;
 		EObject parserElement = getParserElement();
 		if (parserElement != null && getParser() != null) {
-			text = getParser().getPrintString(new EObjectAdapter(parserElement), getParserOptions().intValue());
+			text = getParser().getPrintString(
+					new EObjectAdapter(parserElement),
+					getParserOptions().intValue());
 		}
 		if (text == null || text.length() == 0) {
 			text = defaultText;
@@ -236,7 +238,9 @@
 		if (getParserElement() == null || getParser() == null) {
 			return ""; //$NON-NLS-1$
 		}
-		return getParser().getEditString(new EObjectAdapter(getParserElement()), getParserOptions().intValue());
+		return getParser().getEditString(
+				new EObjectAdapter(getParserElement()),
+				getParserOptions().intValue());
 	}
 
 	/**
@@ -257,14 +261,20 @@
 					final EObject element = getParserElement();
 					final IParser parser = getParser();
 					try {
-						IParserEditStatus valid = (IParserEditStatus) getEditingDomain().runExclusive(
-							new RunnableWithResult.Impl() {
+						IParserEditStatus valid = (IParserEditStatus) getEditingDomain()
+								.runExclusive(
+										new RunnableWithResult.Impl<IParserEditStatus>() {
 
-								public void run() {
-									setResult(parser.isValidEditString(new EObjectAdapter(element), (String) value));
-								}
-							});
-						return valid.getCode() == ParserEditStatus.EDITABLE ? null : valid.getMessage();
+											public void run() {
+												setResult(parser
+														.isValidEditString(
+																new EObjectAdapter(
+																		element),
+																(String) value));
+											}
+										});
+						return valid.getCode() == ParserEditStatus.EDITABLE ? null
+								: valid.getMessage();
 					} catch (InterruptedException ie) {
 						ie.printStackTrace();
 					}
@@ -283,7 +293,8 @@
 		if (getParserElement() == null || getParser() == null) {
 			return null;
 		}
-		return getParser().getCompletionProcessor(new EObjectAdapter(getParserElement()));
+		return getParser().getCompletionProcessor(
+				new EObjectAdapter(getParserElement()));
 	}
 
 	/**
@@ -298,9 +309,12 @@
 	 */
 	public IParser getParser() {
 		if (parser == null) {
-			parser = UrmlParserProvider.getParser(UrmlElementTypes.GoalReference_4025, getParserElement(),
-				UrmlVisualIDRegistry
-					.getType(org.unicase.ui.diagram.urml.edit.parts.GoalReferenceWeight3EditPart.VISUAL_ID));
+			parser = UrmlParserProvider
+					.getParser(
+							UrmlElementTypes.GoalReference_4025,
+							getParserElement(),
+							UrmlVisualIDRegistry
+									.getType(org.unicase.ui.diagram.urml.edit.parts.GoalReferenceWeight3EditPart.VISUAL_ID));
 		}
 		return parser;
 	}
@@ -310,8 +324,9 @@
 	 */
 	protected DirectEditManager getManager() {
 		if (manager == null) {
-			setManager(new TextDirectEditManager(this, TextDirectEditManager.getTextCellEditorClass(this),
-				UrmlEditPartFactory.getTextCellEditorLocator(this)));
+			setManager(new TextDirectEditManager(this,
+					TextDirectEditManager.getTextCellEditorClass(this),
+					UrmlEditPartFactory.getTextCellEditorLocator(this)));
 		}
 		return manager;
 	}
@@ -335,7 +350,8 @@
 	 */
 	protected void performDirectEdit(Point eventLocation) {
 		if (getManager().getClass() == TextDirectEditManager.class) {
-			((TextDirectEditManager) getManager()).show(eventLocation.getSWTPoint());
+			((TextDirectEditManager) getManager()).show(eventLocation
+					.getSWTPoint());
 		}
 	}
 
@@ -360,11 +376,15 @@
 
 				public void run() {
 					if (isActive() && isEditable()) {
-						if (theRequest.getExtendedData().get(RequestConstants.REQ_DIRECTEDIT_EXTENDEDDATA_INITIAL_CHAR) instanceof Character) {
-							Character initialChar = (Character) theRequest.getExtendedData().get(
-								RequestConstants.REQ_DIRECTEDIT_EXTENDEDDATA_INITIAL_CHAR);
+						if (theRequest
+								.getExtendedData()
+								.get(RequestConstants.REQ_DIRECTEDIT_EXTENDEDDATA_INITIAL_CHAR) instanceof Character) {
+							Character initialChar = (Character) theRequest
+									.getExtendedData()
+									.get(RequestConstants.REQ_DIRECTEDIT_EXTENDEDDATA_INITIAL_CHAR);
 							performDirectEdit(initialChar.charValue());
-						} else if ((theRequest instanceof DirectEditRequest) && (getEditText().equals(getLabelText()))) {
+						} else if ((theRequest instanceof DirectEditRequest)
+								&& (getEditText().equals(getLabelText()))) {
 							DirectEditRequest editRequest = (DirectEditRequest) theRequest;
 							performDirectEdit(editRequest.getLocation());
 						} else {
@@ -410,7 +430,8 @@
 	 * @generated
 	 */
 	protected void refreshUnderline() {
-		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(NotationPackage.eINSTANCE.getFontStyle());
+		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(
+				NotationPackage.eINSTANCE.getFontStyle());
 		if (style != null && getFigure() instanceof WrappingLabel) {
 			((WrappingLabel) getFigure()).setTextUnderline(style.isUnderline());
 		}
@@ -420,9 +441,11 @@
 	 * @generated
 	 */
 	protected void refreshStrikeThrough() {
-		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(NotationPackage.eINSTANCE.getFontStyle());
+		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(
+				NotationPackage.eINSTANCE.getFontStyle());
 		if (style != null && getFigure() instanceof WrappingLabel) {
-			((WrappingLabel) getFigure()).setTextStrikeThrough(style.isStrikeThrough());
+			((WrappingLabel) getFigure()).setTextStrikeThrough(style
+					.isStrikeThrough());
 		}
 	}
 
@@ -430,11 +453,13 @@
 	 * @generated
 	 */
 	protected void refreshFont() {
-		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(NotationPackage.eINSTANCE.getFontStyle());
+		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(
+				NotationPackage.eINSTANCE.getFontStyle());
 		if (style != null) {
-			FontData fontData = new FontData(style.getFontName(), style.getFontHeight(), (style.isBold() ? SWT.BOLD
-				: SWT.NORMAL)
-				| (style.isItalic() ? SWT.ITALIC : SWT.NORMAL));
+			FontData fontData = new FontData(style.getFontName(),
+					style.getFontHeight(), (style.isBold() ? SWT.BOLD
+							: SWT.NORMAL)
+							| (style.isItalic() ? SWT.ITALIC : SWT.NORMAL));
 			setFont(fontData);
 		}
 	}
@@ -452,9 +477,11 @@
 	protected void addSemanticListeners() {
 		if (getParser() instanceof ISemanticParser) {
 			EObject element = resolveSemanticElement();
-			parserElements = ((ISemanticParser) getParser()).getSemanticElementsBeingParsed(element);
+			parserElements = ((ISemanticParser) getParser())
+					.getSemanticElementsBeingParsed(element);
 			for (int i = 0; i < parserElements.size(); i++) {
-				addListenerFilter("SemanticModel" + i, this, (EObject) parserElements.get(i)); //$NON-NLS-1$
+				addListenerFilter(
+						"SemanticModel" + i, this, (EObject) parserElements.get(i)); //$NON-NLS-1$
 			}
 		} else {
 			super.addSemanticListeners();
@@ -504,17 +531,25 @@
 		if (NotationPackage.eINSTANCE.getFontStyle_FontColor().equals(feature)) {
 			Integer c = (Integer) event.getNewValue();
 			setFontColor(DiagramColorRegistry.getInstance().getColor(c));
-		} else if (NotationPackage.eINSTANCE.getFontStyle_Underline().equals(feature)) {
+		} else if (NotationPackage.eINSTANCE.getFontStyle_Underline().equals(
+				feature)) {
 			refreshUnderline();
-		} else if (NotationPackage.eINSTANCE.getFontStyle_StrikeThrough().equals(feature)) {
+		} else if (NotationPackage.eINSTANCE.getFontStyle_StrikeThrough()
+				.equals(feature)) {
 			refreshStrikeThrough();
-		} else if (NotationPackage.eINSTANCE.getFontStyle_FontHeight().equals(feature)
-			|| NotationPackage.eINSTANCE.getFontStyle_FontName().equals(feature)
-			|| NotationPackage.eINSTANCE.getFontStyle_Bold().equals(feature)
-			|| NotationPackage.eINSTANCE.getFontStyle_Italic().equals(feature)) {
+		} else if (NotationPackage.eINSTANCE.getFontStyle_FontHeight().equals(
+				feature)
+				|| NotationPackage.eINSTANCE.getFontStyle_FontName().equals(
+						feature)
+				|| NotationPackage.eINSTANCE.getFontStyle_Bold()
+						.equals(feature)
+				|| NotationPackage.eINSTANCE.getFontStyle_Italic().equals(
+						feature)) {
 			refreshFont();
 		} else {
-			if (getParser() != null && getParser().isAffectingEvent(event, getParserOptions().intValue())) {
+			if (getParser() != null
+					&& getParser().isAffectingEvent(event,
+							getParserOptions().intValue())) {
 				refreshLabel();
 			}
 			if (getParser() instanceof ISemanticParser) {
Index: src/org/unicase/ui/diagram/urml/edit/parts/VariationPointInstanceEditPart.java
===================================================================
--- src/org/unicase/ui/diagram/urml/edit/parts/VariationPointInstanceEditPart.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/edit/parts/VariationPointInstanceEditPart.java	(working copy)
@@ -1,6 +1,7 @@
 package org.unicase.ui.diagram.urml.edit.parts;
 
 import java.util.ArrayList;
+import java.util.LinkedList;
 import java.util.List;
 
 import org.eclipse.draw2d.Graphics;
@@ -20,6 +21,7 @@
 import org.eclipse.gmf.runtime.diagram.ui.editpolicies.EditPolicyRoles;
 import org.eclipse.gmf.runtime.draw2d.ui.figures.ConstrainedToolbarLayout;
 import org.eclipse.gmf.runtime.emf.type.core.IElementType;
+import org.eclipse.gmf.runtime.gef.ui.figures.DefaultSizeNodeFigure;
 import org.eclipse.gmf.runtime.gef.ui.figures.NodeFigure;
 import org.eclipse.gmf.runtime.notation.View;
 import org.eclipse.swt.SWT;
@@ -66,7 +68,8 @@
 	 */
 	protected void createDefaultEditPolicies() {
 		super.createDefaultEditPolicies();
-		installEditPolicy(EditPolicyRoles.SEMANTIC_ROLE, new VariationPointInstanceItemSemanticEditPolicy());
+		installEditPolicy(EditPolicyRoles.SEMANTIC_ROLE,
+				new VariationPointInstanceItemSemanticEditPolicy());
 		installEditPolicy(EditPolicy.LAYOUT_ROLE, createLayoutEditPolicy());
 		installEditPolicy(EditPolicyRoles.OPEN_ROLE, new MEEditorOpenPolicie());
 		// XXX need an SCR to runtime to have another abstract superclass that would let children add reasonable
@@ -78,10 +81,11 @@
 	 * @generated
 	 */
 	protected LayoutEditPolicy createLayoutEditPolicy() {
-		LayoutEditPolicy lep = new LayoutEditPolicy() {
+		org.eclipse.gmf.runtime.diagram.ui.editpolicies.LayoutEditPolicy lep = new org.eclipse.gmf.runtime.diagram.ui.editpolicies.LayoutEditPolicy() {
 
 			protected EditPolicy createChildEditPolicy(EditPart child) {
-				EditPolicy result = child.getEditPolicy(EditPolicy.PRIMARY_DRAG_ROLE);
+				EditPolicy result = child
+						.getEditPolicy(EditPolicy.PRIMARY_DRAG_ROLE);
 				if (result == null) {
 					result = new NonResizableEditPolicy();
 				}
@@ -103,8 +107,7 @@
 	 * @generated
 	 */
 	protected IFigure createNodeShape() {
-		VariationPointInstanceFigure figure = new VariationPointInstanceFigure();
-		return primaryShape = figure;
+		return primaryShape = new VariationPointInstanceFigure();
 	}
 
 	/**
@@ -119,8 +122,9 @@
 	 */
 	protected boolean addFixedChild(EditPart childEditPart) {
 		if (childEditPart instanceof VariationPointInstanceNameEditPart) {
-			((VariationPointInstanceNameEditPart) childEditPart).setLabel(getPrimaryShape()
-				.getFigureVariationPointInstance_name());
+			((VariationPointInstanceNameEditPart) childEditPart)
+					.setLabel(getPrimaryShape()
+							.getFigureVariationPointInstance_name());
 			return true;
 		}
 		return false;
@@ -255,31 +259,27 @@
 	 * @generated
 	 */
 	public EditPart getPrimaryChildEditPart() {
-		return getChildBySemanticHint(UrmlVisualIDRegistry.getType(VariationPointInstanceNameEditPart.VISUAL_ID));
+		return getChildBySemanticHint(UrmlVisualIDRegistry
+				.getType(VariationPointInstanceNameEditPart.VISUAL_ID));
 	}
 
 	/**
 	 * @generated
 	 */
-	public List/* <org.eclipse.gmf.runtime.emf.type.core.IElementType> */getMARelTypesOnSource() {
-		List/* <org.eclipse.gmf.runtime.emf.type.core.IElementType> */types = new ArrayList/*
-																							 * <org.eclipse.gmf.runtime.emf
-																							 * .type.core.IElementType>
-																							 */();
+	public List<IElementType> getMARelTypesOnSource() {
+		ArrayList<IElementType> types = new ArrayList<IElementType>(3);
 		types.add(UrmlElementTypes.VariationPointInstanceVariationPoint_4033);
 		types.add(UrmlElementTypes.VariationPointInstanceSelectedFeatures_4040);
+		types.add(UrmlElementTypes.UrmlModelElementAssociations_4048);
 		return types;
 	}
 
 	/**
 	 * @generated
 	 */
-	public List/* <org.eclipse.gmf.runtime.emf.type.core.IElementType> */getMARelTypesOnSourceAndTarget(
-		IGraphicalEditPart targetEditPart) {
-		List/* <org.eclipse.gmf.runtime.emf.type.core.IElementType> */types = new ArrayList/*
-																							 * <org.eclipse.gmf.runtime.emf
-																							 * .type.core.IElementType>
-																							 */();
+	public List<IElementType> getMARelTypesOnSourceAndTarget(
+			IGraphicalEditPart targetEditPart) {
+		LinkedList<IElementType> types = new LinkedList<IElementType>();
 		if (targetEditPart instanceof VariationPointEditPart) {
 			types.add(UrmlElementTypes.VariationPointInstanceVariationPoint_4033);
 		}
@@ -289,26 +289,68 @@
 		if (targetEditPart instanceof VariationPointEditPart) {
 			types.add(UrmlElementTypes.VariationPointInstanceSelectedFeatures_4040);
 		}
+		if (targetEditPart instanceof StakeholderEditPart) {
+			types.add(UrmlElementTypes.UrmlModelElementAssociations_4048);
+		}
+		if (targetEditPart instanceof GoalEditPart) {
+			types.add(UrmlElementTypes.UrmlModelElementAssociations_4048);
+		}
+		if (targetEditPart instanceof FunctionalRequirementEditPart) {
+			types.add(UrmlElementTypes.UrmlModelElementAssociations_4048);
+		}
+		if (targetEditPart instanceof FeatureEditPart) {
+			types.add(UrmlElementTypes.UrmlModelElementAssociations_4048);
+		}
+		if (targetEditPart instanceof ServiceEditPart) {
+			types.add(UrmlElementTypes.UrmlModelElementAssociations_4048);
+		}
+		if (targetEditPart instanceof NonFunctionalRequirementEditPart) {
+			types.add(UrmlElementTypes.UrmlModelElementAssociations_4048);
+		}
+		if (targetEditPart instanceof DangerEditPart) {
+			types.add(UrmlElementTypes.UrmlModelElementAssociations_4048);
+		}
+		if (targetEditPart instanceof ActorEditPart) {
+			types.add(UrmlElementTypes.UrmlModelElementAssociations_4048);
+		}
+		if (targetEditPart instanceof ProceduralMitigationEditPart) {
+			types.add(UrmlElementTypes.UrmlModelElementAssociations_4048);
+		}
+		if (targetEditPart instanceof VariationPointEditPart) {
+			types.add(UrmlElementTypes.UrmlModelElementAssociations_4048);
+		}
+		if (targetEditPart instanceof org.unicase.ui.diagram.urml.edit.parts.VariationPointInstanceEditPart) {
+			types.add(UrmlElementTypes.UrmlModelElementAssociations_4048);
+		}
+		if (targetEditPart instanceof ProductEditPart) {
+			types.add(UrmlElementTypes.UrmlModelElementAssociations_4048);
+		}
 		return types;
 	}
 
 	/**
 	 * @generated
 	 */
-	public List/* <org.eclipse.gmf.runtime.emf.type.core.IElementType> */getMATypesForTarget(
-		IElementType relationshipType) {
-		List/* <org.eclipse.gmf.runtime.emf.type.core.IElementType> */types = new ArrayList/*
-																							 * <org.eclipse.gmf.runtime.emf
-																							 * .type.core.IElementType>
-																							 */();
+	public List<IElementType> getMATypesForTarget(IElementType relationshipType) {
+		LinkedList<IElementType> types = new LinkedList<IElementType>();
 		if (relationshipType == UrmlElementTypes.VariationPointInstanceVariationPoint_4033) {
 			types.add(UrmlElementTypes.VariationPoint_2013);
-		}
-		if (relationshipType == UrmlElementTypes.VariationPointInstanceSelectedFeatures_4040) {
+		} else if (relationshipType == UrmlElementTypes.VariationPointInstanceSelectedFeatures_4040) {
 			types.add(UrmlElementTypes.Feature_2012);
-		}
-		if (relationshipType == UrmlElementTypes.VariationPointInstanceSelectedFeatures_4040) {
+			types.add(UrmlElementTypes.VariationPoint_2013);
+		} else if (relationshipType == UrmlElementTypes.UrmlModelElementAssociations_4048) {
+			types.add(UrmlElementTypes.Stakeholder_2002);
+			types.add(UrmlElementTypes.Goal_2001);
+			types.add(UrmlElementTypes.FunctionalRequirement_2006);
+			types.add(UrmlElementTypes.Feature_2012);
+			types.add(UrmlElementTypes.Service_2007);
+			types.add(UrmlElementTypes.NonFunctionalRequirement_2008);
+			types.add(UrmlElementTypes.Danger_2009);
+			types.add(UrmlElementTypes.Actor_2010);
+			types.add(UrmlElementTypes.ProceduralMitigation_2011);
 			types.add(UrmlElementTypes.VariationPoint_2013);
+			types.add(UrmlElementTypes.VariationPointInstance_2014);
+			types.add(UrmlElementTypes.Product_2015);
 		}
 		return types;
 	}
@@ -316,26 +358,33 @@
 	/**
 	 * @generated
 	 */
-	public List/* <org.eclipse.gmf.runtime.emf.type.core.IElementType> */getMARelTypesOnTarget() {
-		List/* <org.eclipse.gmf.runtime.emf.type.core.IElementType> */types = new ArrayList/*
-																							 * <org.eclipse.gmf.runtime.emf
-																							 * .type.core.IElementType>
-																							 */();
+	public List<IElementType> getMARelTypesOnTarget() {
+		ArrayList<IElementType> types = new ArrayList<IElementType>(2);
 		types.add(UrmlElementTypes.ProductVariationPointInstances_4032);
+		types.add(UrmlElementTypes.UrmlModelElementAssociations_4048);
 		return types;
 	}
 
 	/**
 	 * @generated
 	 */
-	public List/* <org.eclipse.gmf.runtime.emf.type.core.IElementType> */getMATypesForSource(
-		IElementType relationshipType) {
-		List/* <org.eclipse.gmf.runtime.emf.type.core.IElementType> */types = new ArrayList/*
-																							 * <org.eclipse.gmf.runtime.emf
-																							 * .type.core.IElementType>
-																							 */();
+	public List<IElementType> getMATypesForSource(IElementType relationshipType) {
+		LinkedList<IElementType> types = new LinkedList<IElementType>();
 		if (relationshipType == UrmlElementTypes.ProductVariationPointInstances_4032) {
 			types.add(UrmlElementTypes.Product_2015);
+		} else if (relationshipType == UrmlElementTypes.UrmlModelElementAssociations_4048) {
+			types.add(UrmlElementTypes.Stakeholder_2002);
+			types.add(UrmlElementTypes.Goal_2001);
+			types.add(UrmlElementTypes.FunctionalRequirement_2006);
+			types.add(UrmlElementTypes.Feature_2012);
+			types.add(UrmlElementTypes.Service_2007);
+			types.add(UrmlElementTypes.NonFunctionalRequirement_2008);
+			types.add(UrmlElementTypes.Danger_2009);
+			types.add(UrmlElementTypes.Actor_2010);
+			types.add(UrmlElementTypes.ProceduralMitigation_2011);
+			types.add(UrmlElementTypes.VariationPoint_2013);
+			types.add(UrmlElementTypes.VariationPointInstance_2014);
+			types.add(UrmlElementTypes.Product_2015);
 		}
 		return types;
 	}
@@ -372,7 +421,8 @@
 
 			fFigureVariationPointInstance_name = new Label();
 
-			fFigureVariationPointInstance_name.setFont(FFIGUREVARIATIONPOINTINSTANCE_NAME_FONT);
+			fFigureVariationPointInstance_name
+					.setFont(FFIGUREVARIATIONPOINTINSTANCE_NAME_FONT);
 
 			this.add(fFigureVariationPointInstance_name);
 
@@ -381,25 +431,6 @@
 		/**
 		 * @generated
 		 */
-		private boolean myUseLocalCoordinates = false;
-
-		/**
-		 * @generated
-		 */
-		protected boolean useLocalCoordinates() {
-			return myUseLocalCoordinates;
-		}
-
-		/**
-		 * @generated
-		 */
-		protected void setUseLocalCoordinates(boolean useLocalCoordinates) {
-			myUseLocalCoordinates = useLocalCoordinates;
-		}
-
-		/**
-		 * @generated
-		 */
 		public Label getFigureVariationPointInstance_name() {
 			return fFigureVariationPointInstance_name;
 		}
@@ -409,6 +440,7 @@
 	/**
 	 * @generated
 	 */
-	static final Font FFIGUREVARIATIONPOINTINSTANCE_NAME_FONT = new Font(Display.getCurrent(), "Arial", 10, SWT.BOLD);
+	static final Font FFIGUREVARIATIONPOINTINSTANCE_NAME_FONT = new Font(
+			Display.getCurrent(), "Arial", 10, SWT.BOLD);
 
 }
Index: src/org/unicase/ui/diagram/urml/edit/parts/ProceduralMitigationEditPart.java
===================================================================
--- src/org/unicase/ui/diagram/urml/edit/parts/ProceduralMitigationEditPart.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/edit/parts/ProceduralMitigationEditPart.java	(working copy)
@@ -1,6 +1,7 @@
 package org.unicase.ui.diagram.urml.edit.parts;
 
 import java.util.ArrayList;
+import java.util.LinkedList;
 import java.util.List;
 
 import org.eclipse.draw2d.Graphics;
@@ -20,6 +21,7 @@
 import org.eclipse.gmf.runtime.diagram.ui.editpolicies.EditPolicyRoles;
 import org.eclipse.gmf.runtime.draw2d.ui.figures.ConstrainedToolbarLayout;
 import org.eclipse.gmf.runtime.emf.type.core.IElementType;
+import org.eclipse.gmf.runtime.gef.ui.figures.DefaultSizeNodeFigure;
 import org.eclipse.gmf.runtime.gef.ui.figures.NodeFigure;
 import org.eclipse.gmf.runtime.notation.View;
 import org.eclipse.swt.SWT;
@@ -66,7 +68,8 @@
 	 */
 	protected void createDefaultEditPolicies() {
 		super.createDefaultEditPolicies();
-		installEditPolicy(EditPolicyRoles.SEMANTIC_ROLE, new ProceduralMitigationItemSemanticEditPolicy());
+		installEditPolicy(EditPolicyRoles.SEMANTIC_ROLE,
+				new ProceduralMitigationItemSemanticEditPolicy());
 		installEditPolicy(EditPolicy.LAYOUT_ROLE, createLayoutEditPolicy());
 		installEditPolicy(EditPolicyRoles.OPEN_ROLE, new MEEditorOpenPolicie());
 		// XXX need an SCR to runtime to have another abstract superclass that would let children add reasonable
@@ -78,10 +81,11 @@
 	 * @generated
 	 */
 	protected LayoutEditPolicy createLayoutEditPolicy() {
-		LayoutEditPolicy lep = new LayoutEditPolicy() {
+		org.eclipse.gmf.runtime.diagram.ui.editpolicies.LayoutEditPolicy lep = new org.eclipse.gmf.runtime.diagram.ui.editpolicies.LayoutEditPolicy() {
 
 			protected EditPolicy createChildEditPolicy(EditPart child) {
-				EditPolicy result = child.getEditPolicy(EditPolicy.PRIMARY_DRAG_ROLE);
+				EditPolicy result = child
+						.getEditPolicy(EditPolicy.PRIMARY_DRAG_ROLE);
 				if (result == null) {
 					result = new NonResizableEditPolicy();
 				}
@@ -103,8 +107,7 @@
 	 * @generated
 	 */
 	protected IFigure createNodeShape() {
-		ProceduralMitigationFigure figure = new ProceduralMitigationFigure();
-		return primaryShape = figure;
+		return primaryShape = new ProceduralMitigationFigure();
 	}
 
 	/**
@@ -119,8 +122,9 @@
 	 */
 	protected boolean addFixedChild(EditPart childEditPart) {
 		if (childEditPart instanceof ProceduralMitigationNameEditPart) {
-			((ProceduralMitigationNameEditPart) childEditPart).setLabel(getPrimaryShape()
-				.getFigureProceduralMitigationFigure_name());
+			((ProceduralMitigationNameEditPart) childEditPart)
+					.setLabel(getPrimaryShape()
+							.getFigureProceduralMitigationFigure_name());
 			return true;
 		}
 		return false;
@@ -255,47 +259,119 @@
 	 * @generated
 	 */
 	public EditPart getPrimaryChildEditPart() {
-		return getChildBySemanticHint(UrmlVisualIDRegistry.getType(ProceduralMitigationNameEditPart.VISUAL_ID));
+		return getChildBySemanticHint(UrmlVisualIDRegistry
+				.getType(ProceduralMitigationNameEditPart.VISUAL_ID));
 	}
 
 	/**
 	 * @generated
 	 */
-	public List/* <org.eclipse.gmf.runtime.emf.type.core.IElementType> */getMARelTypesOnSource() {
-		List/* <org.eclipse.gmf.runtime.emf.type.core.IElementType> */types = new ArrayList/*
-																							 * <org.eclipse.gmf.runtime.emf
-																							 * .type.core.IElementType>
-																							 */();
+	public List<IElementType> getMARelTypesOnSource() {
+		ArrayList<IElementType> types = new ArrayList<IElementType>(2);
 		types.add(UrmlElementTypes.MitigationMitigatedDangers_4012);
+		types.add(UrmlElementTypes.UrmlModelElementAssociations_4048);
 		return types;
 	}
 
 	/**
 	 * @generated
 	 */
-	public List/* <org.eclipse.gmf.runtime.emf.type.core.IElementType> */getMARelTypesOnSourceAndTarget(
-		IGraphicalEditPart targetEditPart) {
-		List/* <org.eclipse.gmf.runtime.emf.type.core.IElementType> */types = new ArrayList/*
-																							 * <org.eclipse.gmf.runtime.emf
-																							 * .type.core.IElementType>
-																							 */();
+	public List<IElementType> getMARelTypesOnSourceAndTarget(
+			IGraphicalEditPart targetEditPart) {
+		LinkedList<IElementType> types = new LinkedList<IElementType>();
 		if (targetEditPart instanceof DangerEditPart) {
 			types.add(UrmlElementTypes.MitigationMitigatedDangers_4012);
 		}
+		if (targetEditPart instanceof StakeholderEditPart) {
+			types.add(UrmlElementTypes.UrmlModelElementAssociations_4048);
+		}
+		if (targetEditPart instanceof GoalEditPart) {
+			types.add(UrmlElementTypes.UrmlModelElementAssociations_4048);
+		}
+		if (targetEditPart instanceof FunctionalRequirementEditPart) {
+			types.add(UrmlElementTypes.UrmlModelElementAssociations_4048);
+		}
+		if (targetEditPart instanceof FeatureEditPart) {
+			types.add(UrmlElementTypes.UrmlModelElementAssociations_4048);
+		}
+		if (targetEditPart instanceof ServiceEditPart) {
+			types.add(UrmlElementTypes.UrmlModelElementAssociations_4048);
+		}
+		if (targetEditPart instanceof NonFunctionalRequirementEditPart) {
+			types.add(UrmlElementTypes.UrmlModelElementAssociations_4048);
+		}
+		if (targetEditPart instanceof DangerEditPart) {
+			types.add(UrmlElementTypes.UrmlModelElementAssociations_4048);
+		}
+		if (targetEditPart instanceof ActorEditPart) {
+			types.add(UrmlElementTypes.UrmlModelElementAssociations_4048);
+		}
+		if (targetEditPart instanceof org.unicase.ui.diagram.urml.edit.parts.ProceduralMitigationEditPart) {
+			types.add(UrmlElementTypes.UrmlModelElementAssociations_4048);
+		}
+		if (targetEditPart instanceof VariationPointEditPart) {
+			types.add(UrmlElementTypes.UrmlModelElementAssociations_4048);
+		}
+		if (targetEditPart instanceof VariationPointInstanceEditPart) {
+			types.add(UrmlElementTypes.UrmlModelElementAssociations_4048);
+		}
+		if (targetEditPart instanceof ProductEditPart) {
+			types.add(UrmlElementTypes.UrmlModelElementAssociations_4048);
+		}
 		return types;
 	}
 
 	/**
 	 * @generated
 	 */
-	public List/* <org.eclipse.gmf.runtime.emf.type.core.IElementType> */getMATypesForTarget(
-		IElementType relationshipType) {
-		List/* <org.eclipse.gmf.runtime.emf.type.core.IElementType> */types = new ArrayList/*
-																							 * <org.eclipse.gmf.runtime.emf
-																							 * .type.core.IElementType>
-																							 */();
+	public List<IElementType> getMATypesForTarget(IElementType relationshipType) {
+		LinkedList<IElementType> types = new LinkedList<IElementType>();
 		if (relationshipType == UrmlElementTypes.MitigationMitigatedDangers_4012) {
 			types.add(UrmlElementTypes.Danger_2009);
+		} else if (relationshipType == UrmlElementTypes.UrmlModelElementAssociations_4048) {
+			types.add(UrmlElementTypes.Stakeholder_2002);
+			types.add(UrmlElementTypes.Goal_2001);
+			types.add(UrmlElementTypes.FunctionalRequirement_2006);
+			types.add(UrmlElementTypes.Feature_2012);
+			types.add(UrmlElementTypes.Service_2007);
+			types.add(UrmlElementTypes.NonFunctionalRequirement_2008);
+			types.add(UrmlElementTypes.Danger_2009);
+			types.add(UrmlElementTypes.Actor_2010);
+			types.add(UrmlElementTypes.ProceduralMitigation_2011);
+			types.add(UrmlElementTypes.VariationPoint_2013);
+			types.add(UrmlElementTypes.VariationPointInstance_2014);
+			types.add(UrmlElementTypes.Product_2015);
+		}
+		return types;
+	}
+
+	/**
+	 * @generated
+	 */
+	public List<IElementType> getMARelTypesOnTarget() {
+		ArrayList<IElementType> types = new ArrayList<IElementType>(1);
+		types.add(UrmlElementTypes.UrmlModelElementAssociations_4048);
+		return types;
+	}
+
+	/**
+	 * @generated
+	 */
+	public List<IElementType> getMATypesForSource(IElementType relationshipType) {
+		LinkedList<IElementType> types = new LinkedList<IElementType>();
+		if (relationshipType == UrmlElementTypes.UrmlModelElementAssociations_4048) {
+			types.add(UrmlElementTypes.Stakeholder_2002);
+			types.add(UrmlElementTypes.Goal_2001);
+			types.add(UrmlElementTypes.FunctionalRequirement_2006);
+			types.add(UrmlElementTypes.Feature_2012);
+			types.add(UrmlElementTypes.Service_2007);
+			types.add(UrmlElementTypes.NonFunctionalRequirement_2008);
+			types.add(UrmlElementTypes.Danger_2009);
+			types.add(UrmlElementTypes.Actor_2010);
+			types.add(UrmlElementTypes.ProceduralMitigation_2011);
+			types.add(UrmlElementTypes.VariationPoint_2013);
+			types.add(UrmlElementTypes.VariationPointInstance_2014);
+			types.add(UrmlElementTypes.Product_2015);
 		}
 		return types;
 	}
@@ -332,7 +408,8 @@
 
 			fFigureProceduralMitigationFigure_name = new Label();
 
-			fFigureProceduralMitigationFigure_name.setFont(FFIGUREPROCEDURALMITIGATIONFIGURE_NAME_FONT);
+			fFigureProceduralMitigationFigure_name
+					.setFont(FFIGUREPROCEDURALMITIGATIONFIGURE_NAME_FONT);
 
 			this.add(fFigureProceduralMitigationFigure_name);
 
@@ -341,25 +418,6 @@
 		/**
 		 * @generated
 		 */
-		private boolean myUseLocalCoordinates = false;
-
-		/**
-		 * @generated
-		 */
-		protected boolean useLocalCoordinates() {
-			return myUseLocalCoordinates;
-		}
-
-		/**
-		 * @generated
-		 */
-		protected void setUseLocalCoordinates(boolean useLocalCoordinates) {
-			myUseLocalCoordinates = useLocalCoordinates;
-		}
-
-		/**
-		 * @generated
-		 */
 		public Label getFigureProceduralMitigationFigure_name() {
 			return fFigureProceduralMitigationFigure_name;
 		}
@@ -369,7 +427,7 @@
 	/**
 	 * @generated
 	 */
-	static final Font FFIGUREPROCEDURALMITIGATIONFIGURE_NAME_FONT = new Font(Display.getCurrent(), "Arial", 10,
-		SWT.BOLD);
+	static final Font FFIGUREPROCEDURALMITIGATIONFIGURE_NAME_FONT = new Font(
+			Display.getCurrent(), "Arial", 10, SWT.BOLD);
 
 }
Index: src/org/unicase/ui/diagram/urml/edit/parts/RequirementImplementingServicesEditPart.java
===================================================================
--- src/org/unicase/ui/diagram/urml/edit/parts/RequirementImplementingServicesEditPart.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/edit/parts/RequirementImplementingServicesEditPart.java	(working copy)
@@ -12,7 +12,8 @@
 /**
  * @generated
  */
-public class RequirementImplementingServicesEditPart extends ConnectionNodeEditPart implements ITreeBranchEditPart {
+public class RequirementImplementingServicesEditPart extends
+		ConnectionNodeEditPart implements ITreeBranchEditPart {
 
 	/**
 	 * @generated
@@ -31,41 +32,8 @@
 	 */
 	protected void createDefaultEditPolicies() {
 		super.createDefaultEditPolicies();
-		installEditPolicy(EditPolicyRoles.SEMANTIC_ROLE, new RequirementImplementingServicesItemSemanticEditPolicy());
-	}
-
-	/**
-	 * @generated
-	 */
-	protected boolean addFixedChild(EditPart childEditPart) {
-		return false;
-	}
-
-	/**
-	 * @generated
-	 */
-	protected void addChildVisual(EditPart childEditPart, int index) {
-		if (addFixedChild(childEditPart)) {
-			return;
-		}
-		super.addChildVisual(childEditPart, -1);
-	}
-
-	/**
-	 * @generated
-	 */
-	protected boolean removeFixedChild(EditPart childEditPart) {
-		return false;
-	}
-
-	/**
-	 * @generated
-	 */
-	protected void removeChildVisual(EditPart childEditPart) {
-		if (removeFixedChild(childEditPart)) {
-			return;
-		}
-		super.removeChildVisual(childEditPart);
+		installEditPolicy(EditPolicyRoles.SEMANTIC_ROLE,
+				new RequirementImplementingServicesItemSemanticEditPolicy());
 	}
 
 	/**
Index: src/org/unicase/ui/diagram/urml/edit/parts/AbstractFeatureSubFeaturesEditPart.java
===================================================================
--- src/org/unicase/ui/diagram/urml/edit/parts/AbstractFeatureSubFeaturesEditPart.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/edit/parts/AbstractFeatureSubFeaturesEditPart.java	(working copy)
@@ -12,7 +12,8 @@
 /**
  * @generated
  */
-public class AbstractFeatureSubFeaturesEditPart extends ConnectionNodeEditPart implements ITreeBranchEditPart {
+public class AbstractFeatureSubFeaturesEditPart extends ConnectionNodeEditPart
+		implements ITreeBranchEditPart {
 
 	/**
 	 * @generated
@@ -31,41 +32,8 @@
 	 */
 	protected void createDefaultEditPolicies() {
 		super.createDefaultEditPolicies();
-		installEditPolicy(EditPolicyRoles.SEMANTIC_ROLE, new AbstractFeatureSubFeaturesItemSemanticEditPolicy());
-	}
-
-	/**
-	 * @generated
-	 */
-	protected boolean addFixedChild(EditPart childEditPart) {
-		return false;
-	}
-
-	/**
-	 * @generated
-	 */
-	protected void addChildVisual(EditPart childEditPart, int index) {
-		if (addFixedChild(childEditPart)) {
-			return;
-		}
-		super.addChildVisual(childEditPart, -1);
-	}
-
-	/**
-	 * @generated
-	 */
-	protected boolean removeFixedChild(EditPart childEditPart) {
-		return false;
-	}
-
-	/**
-	 * @generated
-	 */
-	protected void removeChildVisual(EditPart childEditPart) {
-		if (removeFixedChild(childEditPart)) {
-			return;
-		}
-		super.removeChildVisual(childEditPart);
+		installEditPolicy(EditPolicyRoles.SEMANTIC_ROLE,
+				new AbstractFeatureSubFeaturesItemSemanticEditPolicy());
 	}
 
 	/**
Index: src/org/unicase/ui/diagram/urml/edit/parts/VariationPointOptionalSubFeaturesEditPart.java
===================================================================
--- src/org/unicase/ui/diagram/urml/edit/parts/VariationPointOptionalSubFeaturesEditPart.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/edit/parts/VariationPointOptionalSubFeaturesEditPart.java	(working copy)
@@ -12,7 +12,8 @@
 /**
  * @generated
  */
-public class VariationPointOptionalSubFeaturesEditPart extends ConnectionNodeEditPart implements ITreeBranchEditPart {
+public class VariationPointOptionalSubFeaturesEditPart extends
+		ConnectionNodeEditPart implements ITreeBranchEditPart {
 
 	/**
 	 * @generated
@@ -31,41 +32,8 @@
 	 */
 	protected void createDefaultEditPolicies() {
 		super.createDefaultEditPolicies();
-		installEditPolicy(EditPolicyRoles.SEMANTIC_ROLE, new VariationPointOptionalSubFeaturesItemSemanticEditPolicy());
-	}
-
-	/**
-	 * @generated
-	 */
-	protected boolean addFixedChild(EditPart childEditPart) {
-		return false;
-	}
-
-	/**
-	 * @generated
-	 */
-	protected void addChildVisual(EditPart childEditPart, int index) {
-		if (addFixedChild(childEditPart)) {
-			return;
-		}
-		super.addChildVisual(childEditPart, -1);
-	}
-
-	/**
-	 * @generated
-	 */
-	protected boolean removeFixedChild(EditPart childEditPart) {
-		return false;
-	}
-
-	/**
-	 * @generated
-	 */
-	protected void removeChildVisual(EditPart childEditPart) {
-		if (removeFixedChild(childEditPart)) {
-			return;
-		}
-		super.removeChildVisual(childEditPart);
+		installEditPolicy(EditPolicyRoles.SEMANTIC_ROLE,
+				new VariationPointOptionalSubFeaturesItemSemanticEditPolicy());
 	}
 
 	/**
Index: src/org/unicase/ui/diagram/urml/edit/parts/URMLDiagramEditPart.java
===================================================================
--- src/org/unicase/ui/diagram/urml/edit/parts/URMLDiagramEditPart.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/edit/parts/URMLDiagramEditPart.java	(working copy)
@@ -1,15 +1,30 @@
 package org.unicase.ui.diagram.urml.edit.parts;
 
+import java.util.Collections;
+import java.util.List;
+
+import org.eclipse.core.runtime.CoreException;
+import org.eclipse.core.runtime.IConfigurationElement;
+import org.eclipse.core.runtime.Platform;
+import org.eclipse.gef.GraphicalEditPart;
+import org.eclipse.gef.Request;
+import org.eclipse.gef.commands.Command;
+import org.eclipse.gef.editpolicies.NonResizableEditPolicy;
+import org.eclipse.gef.handles.MoveHandle;
+import org.eclipse.gmf.runtime.diagram.ui.editparts.DiagramEditPart;
 import org.eclipse.gmf.runtime.diagram.ui.editpolicies.EditPolicyRoles;
+import org.eclipse.gmf.runtime.diagram.ui.editpolicies.NonResizableLabelEditPolicy;
 import org.eclipse.gmf.runtime.notation.View;
 import org.unicase.ui.diagram.urml.edit.policies.URMLDiagramCanonicalEditPolicy;
 import org.unicase.ui.diagram.urml.edit.policies.URMLDiagramItemSemanticEditPolicy;
 import org.unicase.ui.unicasecommon.diagram.edit.parts.MEDiagramEditPart;
+import org.unicase.ui.urml.UrmlDiagramFilter;
+import org.unicase.workspace.util.WorkspaceUtil;
 
 /**
  * @generated
  */
-public class URMLDiagramEditPart extends MEDiagramEditPart {
+public class URMLDiagramEditPart extends DiagramEditPart {
 
 	/**
 	 * @generated
@@ -21,6 +36,8 @@
 	 */
 	public static final int VISUAL_ID = 1000;
 
+	private static final String EXTENSION_POINT_ID = "org.unicase.ui.diagram.urmlDiagram.filters";
+
 	/**
 	 * @generated
 	 */
@@ -33,9 +50,82 @@
 	 */
 	protected void createDefaultEditPolicies() {
 		super.createDefaultEditPolicies();
-		installEditPolicy(EditPolicyRoles.SEMANTIC_ROLE, new URMLDiagramItemSemanticEditPolicy());
-		installEditPolicy(EditPolicyRoles.CANONICAL_ROLE, new URMLDiagramCanonicalEditPolicy());
+		installEditPolicy(EditPolicyRoles.SEMANTIC_ROLE,
+				new URMLDiagramItemSemanticEditPolicy());
+		installEditPolicy(EditPolicyRoles.CANONICAL_ROLE,
+				new URMLDiagramCanonicalEditPolicy());
 		// removeEditPolicy(org.eclipse.gmf.runtime.diagram.ui.editpolicies.EditPolicyRoles.POPUPBAR_ROLE);
 	}
 
+	/**
+	 * @generated
+	 */
+	/*package-local*/static class NodeLabelDragPolicy extends
+			NonResizableEditPolicy {
+
+		/**
+		 * @generated
+		 */
+		@SuppressWarnings("rawtypes")
+		protected List createSelectionHandles() {
+			MoveHandle h = new MoveHandle((GraphicalEditPart) getHost());
+			h.setBorder(null);
+			return Collections.singletonList(h);
+		}
+
+		/**
+		 * @generated
+		 */
+		public Command getCommand(Request request) {
+			return null;
+		}
+
+		/**
+		 * @generated
+		 */
+		public boolean understandsRequest(Request request) {
+			return false;
+		}
+	}
+
+	/**
+	 * @generated
+	 */
+	/*package-local*/static class LinkLabelDragPolicy extends
+			NonResizableLabelEditPolicy {
+
+		/**
+		 * @generated
+		 */
+		@SuppressWarnings("rawtypes")
+		protected List createSelectionHandles() {
+			MoveHandle mh = new MoveHandle((GraphicalEditPart) getHost());
+			mh.setBorder(null);
+			return Collections.singletonList(mh);
+		}
+	}
+	
+	@Override
+	protected List<?> getModelChildren() {
+		List<?> filterElements = super.getModelChildren();
+
+		IConfigurationElement[] filterExtensions = Platform
+				.getExtensionRegistry().getConfigurationElementsFor(
+						EXTENSION_POINT_ID);
+		for (IConfigurationElement e : filterExtensions) {
+//			String className = e.getAttribute("filterClass");
+			try {
+				UrmlDiagramFilter filter = (UrmlDiagramFilter) e.createExecutableExtension("filterClass");
+//				Class<?> resolvedClass = Class.forName(className);
+//				UrmlDiagramFilter filter = (UrmlDiagramFilter) resolvedClass
+//						.newInstance();
+				filterElements = filter.filter(filterElements);
+			} catch (CoreException e2) {
+				// TODO Auto-generated catch block
+				e2.printStackTrace();
+			}
+		}
+		return filterElements;
+	}
+
 }
Index: src/org/unicase/ui/diagram/urml/edit/parts/DangerNameEditPart.java
===================================================================
--- src/org/unicase/ui/diagram/urml/edit/parts/DangerNameEditPart.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/edit/parts/DangerNameEditPart.java	(working copy)
@@ -52,7 +52,8 @@
 /**
  * @generated
  */
-public class DangerNameEditPart extends CompartmentEditPart implements ITextAwareEditPart {
+public class DangerNameEditPart extends CompartmentEditPart implements
+		ITextAwareEditPart {
 
 	/**
 	 * @generated
@@ -72,7 +73,7 @@
 	/**
 	 * @generated
 	 */
-	private List parserElements;
+	private List<?> parserElements;
 
 	/**
 	 * @generated
@@ -91,25 +92,12 @@
 	 */
 	protected void createDefaultEditPolicies() {
 		super.createDefaultEditPolicies();
-		installEditPolicy(EditPolicy.SELECTION_FEEDBACK_ROLE, new UrmlTextSelectionEditPolicy());
-		installEditPolicy(EditPolicy.DIRECT_EDIT_ROLE, new LabelDirectEditPolicy());
-		installEditPolicy(EditPolicy.PRIMARY_DRAG_ROLE, new NonResizableEditPolicy() {
-
-			protected List createSelectionHandles() {
-				List handles = new ArrayList();
-				NonResizableHandleKit.addMoveHandle((GraphicalEditPart) getHost(), handles);
-				((MoveHandle) handles.get(0)).setBorder(null);
-				return handles;
-			}
-
-			public Command getCommand(Request request) {
-				return null;
-			}
-
-			public boolean understandsRequest(Request request) {
-				return false;
-			}
-		});
+		installEditPolicy(EditPolicy.SELECTION_FEEDBACK_ROLE,
+				new UrmlTextSelectionEditPolicy());
+		installEditPolicy(EditPolicy.DIRECT_EDIT_ROLE,
+				new LabelDirectEditPolicy());
+		installEditPolicy(EditPolicy.PRIMARY_DRAG_ROLE,
+				new URMLDiagramEditPart.NodeLabelDragPolicy());
 	}
 
 	/**
@@ -159,7 +147,8 @@
 	/**
 	 * @generated
 	 */
-	public void setLabel(org.unicase.ui.unicasecommon.diagram.figures.Label figure) {
+	public void setLabel(
+			org.unicase.ui.unicasecommon.diagram.figures.Label figure) {
 		unregisterVisuals();
 		setFigure(figure);
 		defaultText = getLabelTextHelper(figure);
@@ -170,6 +159,7 @@
 	/**
 	 * @generated
 	 */
+	@SuppressWarnings("rawtypes")
 	protected List getModelChildren() {
 		return Collections.EMPTY_LIST;
 	}
@@ -202,7 +192,9 @@
 		String text = null;
 		EObject parserElement = getParserElement();
 		if (parserElement != null && getParser() != null) {
-			text = getParser().getPrintString(new EObjectAdapter(parserElement), getParserOptions().intValue());
+			text = getParser().getPrintString(
+					new EObjectAdapter(parserElement),
+					getParserOptions().intValue());
 		}
 		if (text == null || text.length() == 0) {
 			text = defaultText;
@@ -232,7 +224,9 @@
 		if (getParserElement() == null || getParser() == null) {
 			return ""; //$NON-NLS-1$
 		}
-		return getParser().getEditString(new EObjectAdapter(getParserElement()), getParserOptions().intValue());
+		return getParser().getEditString(
+				new EObjectAdapter(getParserElement()),
+				getParserOptions().intValue());
 	}
 
 	/**
@@ -253,14 +247,20 @@
 					final EObject element = getParserElement();
 					final IParser parser = getParser();
 					try {
-						IParserEditStatus valid = (IParserEditStatus) getEditingDomain().runExclusive(
-							new RunnableWithResult.Impl() {
+						IParserEditStatus valid = (IParserEditStatus) getEditingDomain()
+								.runExclusive(
+										new RunnableWithResult.Impl<IParserEditStatus>() {
 
-								public void run() {
-									setResult(parser.isValidEditString(new EObjectAdapter(element), (String) value));
-								}
-							});
-						return valid.getCode() == ParserEditStatus.EDITABLE ? null : valid.getMessage();
+											public void run() {
+												setResult(parser
+														.isValidEditString(
+																new EObjectAdapter(
+																		element),
+																(String) value));
+											}
+										});
+						return valid.getCode() == ParserEditStatus.EDITABLE ? null
+								: valid.getMessage();
 					} catch (InterruptedException ie) {
 						ie.printStackTrace();
 					}
@@ -279,7 +279,8 @@
 		if (getParserElement() == null || getParser() == null) {
 			return null;
 		}
-		return getParser().getCompletionProcessor(new EObjectAdapter(getParserElement()));
+		return getParser().getCompletionProcessor(
+				new EObjectAdapter(getParserElement()));
 	}
 
 	/**
@@ -294,8 +295,12 @@
 	 */
 	public IParser getParser() {
 		if (parser == null) {
-			parser = UrmlParserProvider.getParser(UrmlElementTypes.Danger_2009, getParserElement(),
-				UrmlVisualIDRegistry.getType(org.unicase.ui.diagram.urml.edit.parts.DangerNameEditPart.VISUAL_ID));
+			parser = UrmlParserProvider
+					.getParser(
+							UrmlElementTypes.Danger_2009,
+							getParserElement(),
+							UrmlVisualIDRegistry
+									.getType(org.unicase.ui.diagram.urml.edit.parts.DangerNameEditPart.VISUAL_ID));
 		}
 		return parser;
 	}
@@ -305,8 +310,9 @@
 	 */
 	protected DirectEditManager getManager() {
 		if (manager == null) {
-			setManager(new TextDirectEditManager(this, TextDirectEditManager.getTextCellEditorClass(this),
-				UrmlEditPartFactory.getTextCellEditorLocator(this)));
+			setManager(new TextDirectEditManager(this,
+					TextDirectEditManager.getTextCellEditorClass(this),
+					UrmlEditPartFactory.getTextCellEditorLocator(this)));
 		}
 		return manager;
 	}
@@ -330,7 +336,8 @@
 	 */
 	protected void performDirectEdit(Point eventLocation) {
 		if (getManager().getClass() == TextDirectEditManager.class) {
-			((TextDirectEditManager) getManager()).show(eventLocation.getSWTPoint());
+			((TextDirectEditManager) getManager()).show(eventLocation
+					.getSWTPoint());
 		}
 	}
 
@@ -355,11 +362,15 @@
 
 				public void run() {
 					if (isActive() && isEditable()) {
-						if (theRequest.getExtendedData().get(RequestConstants.REQ_DIRECTEDIT_EXTENDEDDATA_INITIAL_CHAR) instanceof Character) {
-							Character initialChar = (Character) theRequest.getExtendedData().get(
-								RequestConstants.REQ_DIRECTEDIT_EXTENDEDDATA_INITIAL_CHAR);
+						if (theRequest
+								.getExtendedData()
+								.get(RequestConstants.REQ_DIRECTEDIT_EXTENDEDDATA_INITIAL_CHAR) instanceof Character) {
+							Character initialChar = (Character) theRequest
+									.getExtendedData()
+									.get(RequestConstants.REQ_DIRECTEDIT_EXTENDEDDATA_INITIAL_CHAR);
 							performDirectEdit(initialChar.charValue());
-						} else if ((theRequest instanceof DirectEditRequest) && (getEditText().equals(getLabelText()))) {
+						} else if ((theRequest instanceof DirectEditRequest)
+								&& (getEditText().equals(getLabelText()))) {
 							DirectEditRequest editRequest = (DirectEditRequest) theRequest;
 							performDirectEdit(editRequest.getLocation());
 						} else {
@@ -405,7 +416,8 @@
 	 * @generated
 	 */
 	protected void refreshUnderline() {
-		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(NotationPackage.eINSTANCE.getFontStyle());
+		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(
+				NotationPackage.eINSTANCE.getFontStyle());
 		if (style != null && getFigure() instanceof WrappingLabel) {
 			((WrappingLabel) getFigure()).setTextUnderline(style.isUnderline());
 		}
@@ -415,9 +427,11 @@
 	 * @generated
 	 */
 	protected void refreshStrikeThrough() {
-		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(NotationPackage.eINSTANCE.getFontStyle());
+		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(
+				NotationPackage.eINSTANCE.getFontStyle());
 		if (style != null && getFigure() instanceof WrappingLabel) {
-			((WrappingLabel) getFigure()).setTextStrikeThrough(style.isStrikeThrough());
+			((WrappingLabel) getFigure()).setTextStrikeThrough(style
+					.isStrikeThrough());
 		}
 	}
 
@@ -425,11 +439,13 @@
 	 * @generated
 	 */
 	protected void refreshFont() {
-		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(NotationPackage.eINSTANCE.getFontStyle());
+		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(
+				NotationPackage.eINSTANCE.getFontStyle());
 		if (style != null) {
-			FontData fontData = new FontData(style.getFontName(), style.getFontHeight(), (style.isBold() ? SWT.BOLD
-				: SWT.NORMAL)
-				| (style.isItalic() ? SWT.ITALIC : SWT.NORMAL));
+			FontData fontData = new FontData(style.getFontName(),
+					style.getFontHeight(), (style.isBold() ? SWT.BOLD
+							: SWT.NORMAL)
+							| (style.isItalic() ? SWT.ITALIC : SWT.NORMAL));
 			setFont(fontData);
 		}
 	}
@@ -447,9 +463,11 @@
 	protected void addSemanticListeners() {
 		if (getParser() instanceof ISemanticParser) {
 			EObject element = resolveSemanticElement();
-			parserElements = ((ISemanticParser) getParser()).getSemanticElementsBeingParsed(element);
+			parserElements = ((ISemanticParser) getParser())
+					.getSemanticElementsBeingParsed(element);
 			for (int i = 0; i < parserElements.size(); i++) {
-				addListenerFilter("SemanticModel" + i, this, (EObject) parserElements.get(i)); //$NON-NLS-1$
+				addListenerFilter(
+						"SemanticModel" + i, this, (EObject) parserElements.get(i)); //$NON-NLS-1$
 			}
 		} else {
 			super.addSemanticListeners();
@@ -515,17 +533,25 @@
 		if (NotationPackage.eINSTANCE.getFontStyle_FontColor().equals(feature)) {
 			Integer c = (Integer) event.getNewValue();
 			setFontColor(DiagramColorRegistry.getInstance().getColor(c));
-		} else if (NotationPackage.eINSTANCE.getFontStyle_Underline().equals(feature)) {
+		} else if (NotationPackage.eINSTANCE.getFontStyle_Underline().equals(
+				feature)) {
 			refreshUnderline();
-		} else if (NotationPackage.eINSTANCE.getFontStyle_StrikeThrough().equals(feature)) {
+		} else if (NotationPackage.eINSTANCE.getFontStyle_StrikeThrough()
+				.equals(feature)) {
 			refreshStrikeThrough();
-		} else if (NotationPackage.eINSTANCE.getFontStyle_FontHeight().equals(feature)
-			|| NotationPackage.eINSTANCE.getFontStyle_FontName().equals(feature)
-			|| NotationPackage.eINSTANCE.getFontStyle_Bold().equals(feature)
-			|| NotationPackage.eINSTANCE.getFontStyle_Italic().equals(feature)) {
+		} else if (NotationPackage.eINSTANCE.getFontStyle_FontHeight().equals(
+				feature)
+				|| NotationPackage.eINSTANCE.getFontStyle_FontName().equals(
+						feature)
+				|| NotationPackage.eINSTANCE.getFontStyle_Bold()
+						.equals(feature)
+				|| NotationPackage.eINSTANCE.getFontStyle_Italic().equals(
+						feature)) {
 			refreshFont();
 		} else {
-			if (getParser() != null && getParser().isAffectingEvent(event, getParserOptions().intValue())) {
+			if (getParser() != null
+					&& getParser().isAffectingEvent(event,
+							getParserOptions().intValue())) {
 				refreshLabel();
 			}
 			if (getParser() instanceof ISemanticParser) {
Index: src/org/unicase/ui/diagram/urml/edit/parts/ProceduralMitigationNameEditPart.java
===================================================================
--- src/org/unicase/ui/diagram/urml/edit/parts/ProceduralMitigationNameEditPart.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/edit/parts/ProceduralMitigationNameEditPart.java	(working copy)
@@ -52,7 +52,8 @@
 /**
  * @generated
  */
-public class ProceduralMitigationNameEditPart extends CompartmentEditPart implements ITextAwareEditPart {
+public class ProceduralMitigationNameEditPart extends CompartmentEditPart
+		implements ITextAwareEditPart {
 
 	/**
 	 * @generated
@@ -72,7 +73,7 @@
 	/**
 	 * @generated
 	 */
-	private List parserElements;
+	private List<?> parserElements;
 
 	/**
 	 * @generated
@@ -91,25 +92,12 @@
 	 */
 	protected void createDefaultEditPolicies() {
 		super.createDefaultEditPolicies();
-		installEditPolicy(EditPolicy.SELECTION_FEEDBACK_ROLE, new UrmlTextSelectionEditPolicy());
-		installEditPolicy(EditPolicy.DIRECT_EDIT_ROLE, new LabelDirectEditPolicy());
-		installEditPolicy(EditPolicy.PRIMARY_DRAG_ROLE, new NonResizableEditPolicy() {
-
-			protected List createSelectionHandles() {
-				List handles = new ArrayList();
-				NonResizableHandleKit.addMoveHandle((GraphicalEditPart) getHost(), handles);
-				((MoveHandle) handles.get(0)).setBorder(null);
-				return handles;
-			}
-
-			public Command getCommand(Request request) {
-				return null;
-			}
-
-			public boolean understandsRequest(Request request) {
-				return false;
-			}
-		});
+		installEditPolicy(EditPolicy.SELECTION_FEEDBACK_ROLE,
+				new UrmlTextSelectionEditPolicy());
+		installEditPolicy(EditPolicy.DIRECT_EDIT_ROLE,
+				new LabelDirectEditPolicy());
+		installEditPolicy(EditPolicy.PRIMARY_DRAG_ROLE,
+				new URMLDiagramEditPart.NodeLabelDragPolicy());
 	}
 
 	/**
@@ -159,7 +147,8 @@
 	/**
 	 * @generated
 	 */
-	public void setLabel(org.unicase.ui.unicasecommon.diagram.figures.Label figure) {
+	public void setLabel(
+			org.unicase.ui.unicasecommon.diagram.figures.Label figure) {
 		unregisterVisuals();
 		setFigure(figure);
 		defaultText = getLabelTextHelper(figure);
@@ -170,6 +159,7 @@
 	/**
 	 * @generated
 	 */
+	@SuppressWarnings("rawtypes")
 	protected List getModelChildren() {
 		return Collections.EMPTY_LIST;
 	}
@@ -202,7 +192,9 @@
 		String text = null;
 		EObject parserElement = getParserElement();
 		if (parserElement != null && getParser() != null) {
-			text = getParser().getPrintString(new EObjectAdapter(parserElement), getParserOptions().intValue());
+			text = getParser().getPrintString(
+					new EObjectAdapter(parserElement),
+					getParserOptions().intValue());
 		}
 		if (text == null || text.length() == 0) {
 			text = defaultText;
@@ -232,7 +224,9 @@
 		if (getParserElement() == null || getParser() == null) {
 			return ""; //$NON-NLS-1$
 		}
-		return getParser().getEditString(new EObjectAdapter(getParserElement()), getParserOptions().intValue());
+		return getParser().getEditString(
+				new EObjectAdapter(getParserElement()),
+				getParserOptions().intValue());
 	}
 
 	/**
@@ -253,14 +247,20 @@
 					final EObject element = getParserElement();
 					final IParser parser = getParser();
 					try {
-						IParserEditStatus valid = (IParserEditStatus) getEditingDomain().runExclusive(
-							new RunnableWithResult.Impl() {
+						IParserEditStatus valid = (IParserEditStatus) getEditingDomain()
+								.runExclusive(
+										new RunnableWithResult.Impl<IParserEditStatus>() {
 
-								public void run() {
-									setResult(parser.isValidEditString(new EObjectAdapter(element), (String) value));
-								}
-							});
-						return valid.getCode() == ParserEditStatus.EDITABLE ? null : valid.getMessage();
+											public void run() {
+												setResult(parser
+														.isValidEditString(
+																new EObjectAdapter(
+																		element),
+																(String) value));
+											}
+										});
+						return valid.getCode() == ParserEditStatus.EDITABLE ? null
+								: valid.getMessage();
 					} catch (InterruptedException ie) {
 						ie.printStackTrace();
 					}
@@ -279,7 +279,8 @@
 		if (getParserElement() == null || getParser() == null) {
 			return null;
 		}
-		return getParser().getCompletionProcessor(new EObjectAdapter(getParserElement()));
+		return getParser().getCompletionProcessor(
+				new EObjectAdapter(getParserElement()));
 	}
 
 	/**
@@ -294,9 +295,12 @@
 	 */
 	public IParser getParser() {
 		if (parser == null) {
-			parser = UrmlParserProvider.getParser(UrmlElementTypes.ProceduralMitigation_2011, getParserElement(),
-				UrmlVisualIDRegistry
-					.getType(org.unicase.ui.diagram.urml.edit.parts.ProceduralMitigationNameEditPart.VISUAL_ID));
+			parser = UrmlParserProvider
+					.getParser(
+							UrmlElementTypes.ProceduralMitigation_2011,
+							getParserElement(),
+							UrmlVisualIDRegistry
+									.getType(org.unicase.ui.diagram.urml.edit.parts.ProceduralMitigationNameEditPart.VISUAL_ID));
 		}
 		return parser;
 	}
@@ -306,8 +310,9 @@
 	 */
 	protected DirectEditManager getManager() {
 		if (manager == null) {
-			setManager(new TextDirectEditManager(this, TextDirectEditManager.getTextCellEditorClass(this),
-				UrmlEditPartFactory.getTextCellEditorLocator(this)));
+			setManager(new TextDirectEditManager(this,
+					TextDirectEditManager.getTextCellEditorClass(this),
+					UrmlEditPartFactory.getTextCellEditorLocator(this)));
 		}
 		return manager;
 	}
@@ -331,7 +336,8 @@
 	 */
 	protected void performDirectEdit(Point eventLocation) {
 		if (getManager().getClass() == TextDirectEditManager.class) {
-			((TextDirectEditManager) getManager()).show(eventLocation.getSWTPoint());
+			((TextDirectEditManager) getManager()).show(eventLocation
+					.getSWTPoint());
 		}
 	}
 
@@ -356,11 +362,15 @@
 
 				public void run() {
 					if (isActive() && isEditable()) {
-						if (theRequest.getExtendedData().get(RequestConstants.REQ_DIRECTEDIT_EXTENDEDDATA_INITIAL_CHAR) instanceof Character) {
-							Character initialChar = (Character) theRequest.getExtendedData().get(
-								RequestConstants.REQ_DIRECTEDIT_EXTENDEDDATA_INITIAL_CHAR);
+						if (theRequest
+								.getExtendedData()
+								.get(RequestConstants.REQ_DIRECTEDIT_EXTENDEDDATA_INITIAL_CHAR) instanceof Character) {
+							Character initialChar = (Character) theRequest
+									.getExtendedData()
+									.get(RequestConstants.REQ_DIRECTEDIT_EXTENDEDDATA_INITIAL_CHAR);
 							performDirectEdit(initialChar.charValue());
-						} else if ((theRequest instanceof DirectEditRequest) && (getEditText().equals(getLabelText()))) {
+						} else if ((theRequest instanceof DirectEditRequest)
+								&& (getEditText().equals(getLabelText()))) {
 							DirectEditRequest editRequest = (DirectEditRequest) theRequest;
 							performDirectEdit(editRequest.getLocation());
 						} else {
@@ -406,7 +416,8 @@
 	 * @generated
 	 */
 	protected void refreshUnderline() {
-		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(NotationPackage.eINSTANCE.getFontStyle());
+		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(
+				NotationPackage.eINSTANCE.getFontStyle());
 		if (style != null && getFigure() instanceof WrappingLabel) {
 			((WrappingLabel) getFigure()).setTextUnderline(style.isUnderline());
 		}
@@ -416,9 +427,11 @@
 	 * @generated
 	 */
 	protected void refreshStrikeThrough() {
-		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(NotationPackage.eINSTANCE.getFontStyle());
+		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(
+				NotationPackage.eINSTANCE.getFontStyle());
 		if (style != null && getFigure() instanceof WrappingLabel) {
-			((WrappingLabel) getFigure()).setTextStrikeThrough(style.isStrikeThrough());
+			((WrappingLabel) getFigure()).setTextStrikeThrough(style
+					.isStrikeThrough());
 		}
 	}
 
@@ -426,11 +439,13 @@
 	 * @generated
 	 */
 	protected void refreshFont() {
-		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(NotationPackage.eINSTANCE.getFontStyle());
+		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(
+				NotationPackage.eINSTANCE.getFontStyle());
 		if (style != null) {
-			FontData fontData = new FontData(style.getFontName(), style.getFontHeight(), (style.isBold() ? SWT.BOLD
-				: SWT.NORMAL)
-				| (style.isItalic() ? SWT.ITALIC : SWT.NORMAL));
+			FontData fontData = new FontData(style.getFontName(),
+					style.getFontHeight(), (style.isBold() ? SWT.BOLD
+							: SWT.NORMAL)
+							| (style.isItalic() ? SWT.ITALIC : SWT.NORMAL));
 			setFont(fontData);
 		}
 	}
@@ -448,9 +463,11 @@
 	protected void addSemanticListeners() {
 		if (getParser() instanceof ISemanticParser) {
 			EObject element = resolveSemanticElement();
-			parserElements = ((ISemanticParser) getParser()).getSemanticElementsBeingParsed(element);
+			parserElements = ((ISemanticParser) getParser())
+					.getSemanticElementsBeingParsed(element);
 			for (int i = 0; i < parserElements.size(); i++) {
-				addListenerFilter("SemanticModel" + i, this, (EObject) parserElements.get(i)); //$NON-NLS-1$
+				addListenerFilter(
+						"SemanticModel" + i, this, (EObject) parserElements.get(i)); //$NON-NLS-1$
 			}
 		} else {
 			super.addSemanticListeners();
@@ -516,17 +533,25 @@
 		if (NotationPackage.eINSTANCE.getFontStyle_FontColor().equals(feature)) {
 			Integer c = (Integer) event.getNewValue();
 			setFontColor(DiagramColorRegistry.getInstance().getColor(c));
-		} else if (NotationPackage.eINSTANCE.getFontStyle_Underline().equals(feature)) {
+		} else if (NotationPackage.eINSTANCE.getFontStyle_Underline().equals(
+				feature)) {
 			refreshUnderline();
-		} else if (NotationPackage.eINSTANCE.getFontStyle_StrikeThrough().equals(feature)) {
+		} else if (NotationPackage.eINSTANCE.getFontStyle_StrikeThrough()
+				.equals(feature)) {
 			refreshStrikeThrough();
-		} else if (NotationPackage.eINSTANCE.getFontStyle_FontHeight().equals(feature)
-			|| NotationPackage.eINSTANCE.getFontStyle_FontName().equals(feature)
-			|| NotationPackage.eINSTANCE.getFontStyle_Bold().equals(feature)
-			|| NotationPackage.eINSTANCE.getFontStyle_Italic().equals(feature)) {
+		} else if (NotationPackage.eINSTANCE.getFontStyle_FontHeight().equals(
+				feature)
+				|| NotationPackage.eINSTANCE.getFontStyle_FontName().equals(
+						feature)
+				|| NotationPackage.eINSTANCE.getFontStyle_Bold()
+						.equals(feature)
+				|| NotationPackage.eINSTANCE.getFontStyle_Italic().equals(
+						feature)) {
 			refreshFont();
 		} else {
-			if (getParser() != null && getParser().isAffectingEvent(event, getParserOptions().intValue())) {
+			if (getParser() != null
+					&& getParser().isAffectingEvent(event,
+							getParserOptions().intValue())) {
 				refreshLabel();
 			}
 			if (getParser() instanceof ISemanticParser) {
Index: src/org/unicase/ui/diagram/urml/edit/parts/SelectLabelEditPart.java
===================================================================
--- src/org/unicase/ui/diagram/urml/edit/parts/SelectLabelEditPart.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/edit/parts/SelectLabelEditPart.java	(working copy)
@@ -50,7 +50,8 @@
 /**
  * @generated
  */
-public class SelectLabelEditPart extends LabelEditPart implements ITextAwareEditPart {
+public class SelectLabelEditPart extends LabelEditPart implements
+		ITextAwareEditPart {
 
 	/**
 	 * @generated
@@ -70,7 +71,7 @@
 	/**
 	 * @generated
 	 */
-	private List parserElements;
+	private List<?> parserElements;
 
 	/**
 	 * @generated
@@ -81,8 +82,10 @@
 	 * @generated
 	 */
 	static {
-		registerSnapBackPosition(UrmlVisualIDRegistry
-			.getType(org.unicase.ui.diagram.urml.edit.parts.SelectLabelEditPart.VISUAL_ID), new Point(0, 20));
+		registerSnapBackPosition(
+				UrmlVisualIDRegistry
+						.getType(org.unicase.ui.diagram.urml.edit.parts.SelectLabelEditPart.VISUAL_ID),
+				new Point(0, 20));
 	}
 
 	/**
@@ -97,16 +100,12 @@
 	 */
 	protected void createDefaultEditPolicies() {
 		super.createDefaultEditPolicies();
-		installEditPolicy(EditPolicy.DIRECT_EDIT_ROLE, new LabelDirectEditPolicy());
-		installEditPolicy(EditPolicy.SELECTION_FEEDBACK_ROLE, new UrmlTextSelectionEditPolicy());
-		installEditPolicy(EditPolicy.PRIMARY_DRAG_ROLE, new NonResizableLabelEditPolicy() {
-
-			protected List createSelectionHandles() {
-				MoveHandle mh = new MoveHandle((GraphicalEditPart) getHost());
-				mh.setBorder(null);
-				return Collections.singletonList(mh);
-			}
-		});
+		installEditPolicy(EditPolicy.DIRECT_EDIT_ROLE,
+				new LabelDirectEditPolicy());
+		installEditPolicy(EditPolicy.SELECTION_FEEDBACK_ROLE,
+				new UrmlTextSelectionEditPolicy());
+		installEditPolicy(EditPolicy.PRIMARY_DRAG_ROLE,
+				new URMLDiagramEditPart.LinkLabelDragPolicy());
 	}
 
 	/**
@@ -174,6 +173,7 @@
 	/**
 	 * @generated
 	 */
+	@SuppressWarnings("rawtypes")
 	protected List getModelChildren() {
 		return Collections.EMPTY_LIST;
 	}
@@ -206,7 +206,9 @@
 		String text = null;
 		EObject parserElement = getParserElement();
 		if (parserElement != null && getParser() != null) {
-			text = getParser().getPrintString(new EObjectAdapter(parserElement), getParserOptions().intValue());
+			text = getParser().getPrintString(
+					new EObjectAdapter(parserElement),
+					getParserOptions().intValue());
 		}
 		if (text == null || text.length() == 0) {
 			text = defaultText;
@@ -236,7 +238,9 @@
 		if (getParserElement() == null || getParser() == null) {
 			return ""; //$NON-NLS-1$
 		}
-		return getParser().getEditString(new EObjectAdapter(getParserElement()), getParserOptions().intValue());
+		return getParser().getEditString(
+				new EObjectAdapter(getParserElement()),
+				getParserOptions().intValue());
 	}
 
 	/**
@@ -257,14 +261,20 @@
 					final EObject element = getParserElement();
 					final IParser parser = getParser();
 					try {
-						IParserEditStatus valid = (IParserEditStatus) getEditingDomain().runExclusive(
-							new RunnableWithResult.Impl() {
+						IParserEditStatus valid = (IParserEditStatus) getEditingDomain()
+								.runExclusive(
+										new RunnableWithResult.Impl<IParserEditStatus>() {
 
-								public void run() {
-									setResult(parser.isValidEditString(new EObjectAdapter(element), (String) value));
-								}
-							});
-						return valid.getCode() == ParserEditStatus.EDITABLE ? null : valid.getMessage();
+											public void run() {
+												setResult(parser
+														.isValidEditString(
+																new EObjectAdapter(
+																		element),
+																(String) value));
+											}
+										});
+						return valid.getCode() == ParserEditStatus.EDITABLE ? null
+								: valid.getMessage();
 					} catch (InterruptedException ie) {
 						ie.printStackTrace();
 					}
@@ -283,7 +293,8 @@
 		if (getParserElement() == null || getParser() == null) {
 			return null;
 		}
-		return getParser().getCompletionProcessor(new EObjectAdapter(getParserElement()));
+		return getParser().getCompletionProcessor(
+				new EObjectAdapter(getParserElement()));
 	}
 
 	/**
@@ -298,9 +309,12 @@
 	 */
 	public IParser getParser() {
 		if (parser == null) {
-			parser = UrmlParserProvider.getParser(UrmlElementTypes.VariationPointInstanceSelectedFeatures_4040,
-				getParserElement(), UrmlVisualIDRegistry
-					.getType(org.unicase.ui.diagram.urml.edit.parts.SelectLabelEditPart.VISUAL_ID));
+			parser = UrmlParserProvider
+					.getParser(
+							UrmlElementTypes.VariationPointInstanceSelectedFeatures_4040,
+							getParserElement(),
+							UrmlVisualIDRegistry
+									.getType(org.unicase.ui.diagram.urml.edit.parts.SelectLabelEditPart.VISUAL_ID));
 		}
 		return parser;
 	}
@@ -310,8 +324,9 @@
 	 */
 	protected DirectEditManager getManager() {
 		if (manager == null) {
-			setManager(new TextDirectEditManager(this, TextDirectEditManager.getTextCellEditorClass(this),
-				UrmlEditPartFactory.getTextCellEditorLocator(this)));
+			setManager(new TextDirectEditManager(this,
+					TextDirectEditManager.getTextCellEditorClass(this),
+					UrmlEditPartFactory.getTextCellEditorLocator(this)));
 		}
 		return manager;
 	}
@@ -335,7 +350,8 @@
 	 */
 	protected void performDirectEdit(Point eventLocation) {
 		if (getManager().getClass() == TextDirectEditManager.class) {
-			((TextDirectEditManager) getManager()).show(eventLocation.getSWTPoint());
+			((TextDirectEditManager) getManager()).show(eventLocation
+					.getSWTPoint());
 		}
 	}
 
@@ -360,11 +376,15 @@
 
 				public void run() {
 					if (isActive() && isEditable()) {
-						if (theRequest.getExtendedData().get(RequestConstants.REQ_DIRECTEDIT_EXTENDEDDATA_INITIAL_CHAR) instanceof Character) {
-							Character initialChar = (Character) theRequest.getExtendedData().get(
-								RequestConstants.REQ_DIRECTEDIT_EXTENDEDDATA_INITIAL_CHAR);
+						if (theRequest
+								.getExtendedData()
+								.get(RequestConstants.REQ_DIRECTEDIT_EXTENDEDDATA_INITIAL_CHAR) instanceof Character) {
+							Character initialChar = (Character) theRequest
+									.getExtendedData()
+									.get(RequestConstants.REQ_DIRECTEDIT_EXTENDEDDATA_INITIAL_CHAR);
 							performDirectEdit(initialChar.charValue());
-						} else if ((theRequest instanceof DirectEditRequest) && (getEditText().equals(getLabelText()))) {
+						} else if ((theRequest instanceof DirectEditRequest)
+								&& (getEditText().equals(getLabelText()))) {
 							DirectEditRequest editRequest = (DirectEditRequest) theRequest;
 							performDirectEdit(editRequest.getLocation());
 						} else {
@@ -410,7 +430,8 @@
 	 * @generated
 	 */
 	protected void refreshUnderline() {
-		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(NotationPackage.eINSTANCE.getFontStyle());
+		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(
+				NotationPackage.eINSTANCE.getFontStyle());
 		if (style != null && getFigure() instanceof WrappingLabel) {
 			((WrappingLabel) getFigure()).setTextUnderline(style.isUnderline());
 		}
@@ -420,9 +441,11 @@
 	 * @generated
 	 */
 	protected void refreshStrikeThrough() {
-		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(NotationPackage.eINSTANCE.getFontStyle());
+		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(
+				NotationPackage.eINSTANCE.getFontStyle());
 		if (style != null && getFigure() instanceof WrappingLabel) {
-			((WrappingLabel) getFigure()).setTextStrikeThrough(style.isStrikeThrough());
+			((WrappingLabel) getFigure()).setTextStrikeThrough(style
+					.isStrikeThrough());
 		}
 	}
 
@@ -430,11 +453,13 @@
 	 * @generated
 	 */
 	protected void refreshFont() {
-		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(NotationPackage.eINSTANCE.getFontStyle());
+		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(
+				NotationPackage.eINSTANCE.getFontStyle());
 		if (style != null) {
-			FontData fontData = new FontData(style.getFontName(), style.getFontHeight(), (style.isBold() ? SWT.BOLD
-				: SWT.NORMAL)
-				| (style.isItalic() ? SWT.ITALIC : SWT.NORMAL));
+			FontData fontData = new FontData(style.getFontName(),
+					style.getFontHeight(), (style.isBold() ? SWT.BOLD
+							: SWT.NORMAL)
+							| (style.isItalic() ? SWT.ITALIC : SWT.NORMAL));
 			setFont(fontData);
 		}
 	}
@@ -452,9 +477,11 @@
 	protected void addSemanticListeners() {
 		if (getParser() instanceof ISemanticParser) {
 			EObject element = resolveSemanticElement();
-			parserElements = ((ISemanticParser) getParser()).getSemanticElementsBeingParsed(element);
+			parserElements = ((ISemanticParser) getParser())
+					.getSemanticElementsBeingParsed(element);
 			for (int i = 0; i < parserElements.size(); i++) {
-				addListenerFilter("SemanticModel" + i, this, (EObject) parserElements.get(i)); //$NON-NLS-1$
+				addListenerFilter(
+						"SemanticModel" + i, this, (EObject) parserElements.get(i)); //$NON-NLS-1$
 			}
 		} else {
 			super.addSemanticListeners();
@@ -504,17 +531,25 @@
 		if (NotationPackage.eINSTANCE.getFontStyle_FontColor().equals(feature)) {
 			Integer c = (Integer) event.getNewValue();
 			setFontColor(DiagramColorRegistry.getInstance().getColor(c));
-		} else if (NotationPackage.eINSTANCE.getFontStyle_Underline().equals(feature)) {
+		} else if (NotationPackage.eINSTANCE.getFontStyle_Underline().equals(
+				feature)) {
 			refreshUnderline();
-		} else if (NotationPackage.eINSTANCE.getFontStyle_StrikeThrough().equals(feature)) {
+		} else if (NotationPackage.eINSTANCE.getFontStyle_StrikeThrough()
+				.equals(feature)) {
 			refreshStrikeThrough();
-		} else if (NotationPackage.eINSTANCE.getFontStyle_FontHeight().equals(feature)
-			|| NotationPackage.eINSTANCE.getFontStyle_FontName().equals(feature)
-			|| NotationPackage.eINSTANCE.getFontStyle_Bold().equals(feature)
-			|| NotationPackage.eINSTANCE.getFontStyle_Italic().equals(feature)) {
+		} else if (NotationPackage.eINSTANCE.getFontStyle_FontHeight().equals(
+				feature)
+				|| NotationPackage.eINSTANCE.getFontStyle_FontName().equals(
+						feature)
+				|| NotationPackage.eINSTANCE.getFontStyle_Bold()
+						.equals(feature)
+				|| NotationPackage.eINSTANCE.getFontStyle_Italic().equals(
+						feature)) {
 			refreshFont();
 		} else {
-			if (getParser() != null && getParser().isAffectingEvent(event, getParserOptions().intValue())) {
+			if (getParser() != null
+					&& getParser().isAffectingEvent(event,
+							getParserOptions().intValue())) {
 				refreshLabel();
 			}
 			if (getParser() instanceof ISemanticParser) {
Index: src/org/unicase/ui/diagram/urml/edit/parts/InstantiateLabelEditPart.java
===================================================================
--- src/org/unicase/ui/diagram/urml/edit/parts/InstantiateLabelEditPart.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/edit/parts/InstantiateLabelEditPart.java	(working copy)
@@ -50,7 +50,8 @@
 /**
  * @generated
  */
-public class InstantiateLabelEditPart extends LabelEditPart implements ITextAwareEditPart {
+public class InstantiateLabelEditPart extends LabelEditPart implements
+		ITextAwareEditPart {
 
 	/**
 	 * @generated
@@ -70,7 +71,7 @@
 	/**
 	 * @generated
 	 */
-	private List parserElements;
+	private List<?> parserElements;
 
 	/**
 	 * @generated
@@ -81,8 +82,10 @@
 	 * @generated
 	 */
 	static {
-		registerSnapBackPosition(UrmlVisualIDRegistry
-			.getType(org.unicase.ui.diagram.urml.edit.parts.InstantiateLabelEditPart.VISUAL_ID), new Point(0, 20));
+		registerSnapBackPosition(
+				UrmlVisualIDRegistry
+						.getType(org.unicase.ui.diagram.urml.edit.parts.InstantiateLabelEditPart.VISUAL_ID),
+				new Point(0, 20));
 	}
 
 	/**
@@ -97,16 +100,12 @@
 	 */
 	protected void createDefaultEditPolicies() {
 		super.createDefaultEditPolicies();
-		installEditPolicy(EditPolicy.DIRECT_EDIT_ROLE, new LabelDirectEditPolicy());
-		installEditPolicy(EditPolicy.SELECTION_FEEDBACK_ROLE, new UrmlTextSelectionEditPolicy());
-		installEditPolicy(EditPolicy.PRIMARY_DRAG_ROLE, new NonResizableLabelEditPolicy() {
-
-			protected List createSelectionHandles() {
-				MoveHandle mh = new MoveHandle((GraphicalEditPart) getHost());
-				mh.setBorder(null);
-				return Collections.singletonList(mh);
-			}
-		});
+		installEditPolicy(EditPolicy.DIRECT_EDIT_ROLE,
+				new LabelDirectEditPolicy());
+		installEditPolicy(EditPolicy.SELECTION_FEEDBACK_ROLE,
+				new UrmlTextSelectionEditPolicy());
+		installEditPolicy(EditPolicy.PRIMARY_DRAG_ROLE,
+				new URMLDiagramEditPart.LinkLabelDragPolicy());
 	}
 
 	/**
@@ -174,6 +173,7 @@
 	/**
 	 * @generated
 	 */
+	@SuppressWarnings("rawtypes")
 	protected List getModelChildren() {
 		return Collections.EMPTY_LIST;
 	}
@@ -206,7 +206,9 @@
 		String text = null;
 		EObject parserElement = getParserElement();
 		if (parserElement != null && getParser() != null) {
-			text = getParser().getPrintString(new EObjectAdapter(parserElement), getParserOptions().intValue());
+			text = getParser().getPrintString(
+					new EObjectAdapter(parserElement),
+					getParserOptions().intValue());
 		}
 		if (text == null || text.length() == 0) {
 			text = defaultText;
@@ -236,7 +238,9 @@
 		if (getParserElement() == null || getParser() == null) {
 			return ""; //$NON-NLS-1$
 		}
-		return getParser().getEditString(new EObjectAdapter(getParserElement()), getParserOptions().intValue());
+		return getParser().getEditString(
+				new EObjectAdapter(getParserElement()),
+				getParserOptions().intValue());
 	}
 
 	/**
@@ -257,14 +261,20 @@
 					final EObject element = getParserElement();
 					final IParser parser = getParser();
 					try {
-						IParserEditStatus valid = (IParserEditStatus) getEditingDomain().runExclusive(
-							new RunnableWithResult.Impl() {
+						IParserEditStatus valid = (IParserEditStatus) getEditingDomain()
+								.runExclusive(
+										new RunnableWithResult.Impl<IParserEditStatus>() {
 
-								public void run() {
-									setResult(parser.isValidEditString(new EObjectAdapter(element), (String) value));
-								}
-							});
-						return valid.getCode() == ParserEditStatus.EDITABLE ? null : valid.getMessage();
+											public void run() {
+												setResult(parser
+														.isValidEditString(
+																new EObjectAdapter(
+																		element),
+																(String) value));
+											}
+										});
+						return valid.getCode() == ParserEditStatus.EDITABLE ? null
+								: valid.getMessage();
 					} catch (InterruptedException ie) {
 						ie.printStackTrace();
 					}
@@ -283,7 +293,8 @@
 		if (getParserElement() == null || getParser() == null) {
 			return null;
 		}
-		return getParser().getCompletionProcessor(new EObjectAdapter(getParserElement()));
+		return getParser().getCompletionProcessor(
+				new EObjectAdapter(getParserElement()));
 	}
 
 	/**
@@ -298,9 +309,12 @@
 	 */
 	public IParser getParser() {
 		if (parser == null) {
-			parser = UrmlParserProvider.getParser(UrmlElementTypes.VariationPointInstanceVariationPoint_4033,
-				getParserElement(), UrmlVisualIDRegistry
-					.getType(org.unicase.ui.diagram.urml.edit.parts.InstantiateLabelEditPart.VISUAL_ID));
+			parser = UrmlParserProvider
+					.getParser(
+							UrmlElementTypes.VariationPointInstanceVariationPoint_4033,
+							getParserElement(),
+							UrmlVisualIDRegistry
+									.getType(org.unicase.ui.diagram.urml.edit.parts.InstantiateLabelEditPart.VISUAL_ID));
 		}
 		return parser;
 	}
@@ -310,8 +324,9 @@
 	 */
 	protected DirectEditManager getManager() {
 		if (manager == null) {
-			setManager(new TextDirectEditManager(this, TextDirectEditManager.getTextCellEditorClass(this),
-				UrmlEditPartFactory.getTextCellEditorLocator(this)));
+			setManager(new TextDirectEditManager(this,
+					TextDirectEditManager.getTextCellEditorClass(this),
+					UrmlEditPartFactory.getTextCellEditorLocator(this)));
 		}
 		return manager;
 	}
@@ -335,7 +350,8 @@
 	 */
 	protected void performDirectEdit(Point eventLocation) {
 		if (getManager().getClass() == TextDirectEditManager.class) {
-			((TextDirectEditManager) getManager()).show(eventLocation.getSWTPoint());
+			((TextDirectEditManager) getManager()).show(eventLocation
+					.getSWTPoint());
 		}
 	}
 
@@ -360,11 +376,15 @@
 
 				public void run() {
 					if (isActive() && isEditable()) {
-						if (theRequest.getExtendedData().get(RequestConstants.REQ_DIRECTEDIT_EXTENDEDDATA_INITIAL_CHAR) instanceof Character) {
-							Character initialChar = (Character) theRequest.getExtendedData().get(
-								RequestConstants.REQ_DIRECTEDIT_EXTENDEDDATA_INITIAL_CHAR);
+						if (theRequest
+								.getExtendedData()
+								.get(RequestConstants.REQ_DIRECTEDIT_EXTENDEDDATA_INITIAL_CHAR) instanceof Character) {
+							Character initialChar = (Character) theRequest
+									.getExtendedData()
+									.get(RequestConstants.REQ_DIRECTEDIT_EXTENDEDDATA_INITIAL_CHAR);
 							performDirectEdit(initialChar.charValue());
-						} else if ((theRequest instanceof DirectEditRequest) && (getEditText().equals(getLabelText()))) {
+						} else if ((theRequest instanceof DirectEditRequest)
+								&& (getEditText().equals(getLabelText()))) {
 							DirectEditRequest editRequest = (DirectEditRequest) theRequest;
 							performDirectEdit(editRequest.getLocation());
 						} else {
@@ -410,7 +430,8 @@
 	 * @generated
 	 */
 	protected void refreshUnderline() {
-		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(NotationPackage.eINSTANCE.getFontStyle());
+		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(
+				NotationPackage.eINSTANCE.getFontStyle());
 		if (style != null && getFigure() instanceof WrappingLabel) {
 			((WrappingLabel) getFigure()).setTextUnderline(style.isUnderline());
 		}
@@ -420,9 +441,11 @@
 	 * @generated
 	 */
 	protected void refreshStrikeThrough() {
-		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(NotationPackage.eINSTANCE.getFontStyle());
+		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(
+				NotationPackage.eINSTANCE.getFontStyle());
 		if (style != null && getFigure() instanceof WrappingLabel) {
-			((WrappingLabel) getFigure()).setTextStrikeThrough(style.isStrikeThrough());
+			((WrappingLabel) getFigure()).setTextStrikeThrough(style
+					.isStrikeThrough());
 		}
 	}
 
@@ -430,11 +453,13 @@
 	 * @generated
 	 */
 	protected void refreshFont() {
-		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(NotationPackage.eINSTANCE.getFontStyle());
+		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(
+				NotationPackage.eINSTANCE.getFontStyle());
 		if (style != null) {
-			FontData fontData = new FontData(style.getFontName(), style.getFontHeight(), (style.isBold() ? SWT.BOLD
-				: SWT.NORMAL)
-				| (style.isItalic() ? SWT.ITALIC : SWT.NORMAL));
+			FontData fontData = new FontData(style.getFontName(),
+					style.getFontHeight(), (style.isBold() ? SWT.BOLD
+							: SWT.NORMAL)
+							| (style.isItalic() ? SWT.ITALIC : SWT.NORMAL));
 			setFont(fontData);
 		}
 	}
@@ -452,9 +477,11 @@
 	protected void addSemanticListeners() {
 		if (getParser() instanceof ISemanticParser) {
 			EObject element = resolveSemanticElement();
-			parserElements = ((ISemanticParser) getParser()).getSemanticElementsBeingParsed(element);
+			parserElements = ((ISemanticParser) getParser())
+					.getSemanticElementsBeingParsed(element);
 			for (int i = 0; i < parserElements.size(); i++) {
-				addListenerFilter("SemanticModel" + i, this, (EObject) parserElements.get(i)); //$NON-NLS-1$
+				addListenerFilter(
+						"SemanticModel" + i, this, (EObject) parserElements.get(i)); //$NON-NLS-1$
 			}
 		} else {
 			super.addSemanticListeners();
@@ -504,17 +531,25 @@
 		if (NotationPackage.eINSTANCE.getFontStyle_FontColor().equals(feature)) {
 			Integer c = (Integer) event.getNewValue();
 			setFontColor(DiagramColorRegistry.getInstance().getColor(c));
-		} else if (NotationPackage.eINSTANCE.getFontStyle_Underline().equals(feature)) {
+		} else if (NotationPackage.eINSTANCE.getFontStyle_Underline().equals(
+				feature)) {
 			refreshUnderline();
-		} else if (NotationPackage.eINSTANCE.getFontStyle_StrikeThrough().equals(feature)) {
+		} else if (NotationPackage.eINSTANCE.getFontStyle_StrikeThrough()
+				.equals(feature)) {
 			refreshStrikeThrough();
-		} else if (NotationPackage.eINSTANCE.getFontStyle_FontHeight().equals(feature)
-			|| NotationPackage.eINSTANCE.getFontStyle_FontName().equals(feature)
-			|| NotationPackage.eINSTANCE.getFontStyle_Bold().equals(feature)
-			|| NotationPackage.eINSTANCE.getFontStyle_Italic().equals(feature)) {
+		} else if (NotationPackage.eINSTANCE.getFontStyle_FontHeight().equals(
+				feature)
+				|| NotationPackage.eINSTANCE.getFontStyle_FontName().equals(
+						feature)
+				|| NotationPackage.eINSTANCE.getFontStyle_Bold()
+						.equals(feature)
+				|| NotationPackage.eINSTANCE.getFontStyle_Italic().equals(
+						feature)) {
 			refreshFont();
 		} else {
-			if (getParser() != null && getParser().isAffectingEvent(event, getParserOptions().intValue())) {
+			if (getParser() != null
+					&& getParser().isAffectingEvent(event,
+							getParserOptions().intValue())) {
 				refreshLabel();
 			}
 			if (getParser() instanceof ISemanticParser) {
Index: src/org/unicase/ui/diagram/urml/edit/parts/TriggersLabelEditPart.java
===================================================================
--- src/org/unicase/ui/diagram/urml/edit/parts/TriggersLabelEditPart.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/edit/parts/TriggersLabelEditPart.java	(working copy)
@@ -50,7 +50,8 @@
 /**
  * @generated
  */
-public class TriggersLabelEditPart extends LabelEditPart implements ITextAwareEditPart {
+public class TriggersLabelEditPart extends LabelEditPart implements
+		ITextAwareEditPart {
 
 	/**
 	 * @generated
@@ -70,7 +71,7 @@
 	/**
 	 * @generated
 	 */
-	private List parserElements;
+	private List<?> parserElements;
 
 	/**
 	 * @generated
@@ -81,8 +82,10 @@
 	 * @generated
 	 */
 	static {
-		registerSnapBackPosition(UrmlVisualIDRegistry
-			.getType(org.unicase.ui.diagram.urml.edit.parts.TriggersLabelEditPart.VISUAL_ID), new Point(0, 20));
+		registerSnapBackPosition(
+				UrmlVisualIDRegistry
+						.getType(org.unicase.ui.diagram.urml.edit.parts.TriggersLabelEditPart.VISUAL_ID),
+				new Point(0, 20));
 	}
 
 	/**
@@ -97,16 +100,12 @@
 	 */
 	protected void createDefaultEditPolicies() {
 		super.createDefaultEditPolicies();
-		installEditPolicy(EditPolicy.DIRECT_EDIT_ROLE, new LabelDirectEditPolicy());
-		installEditPolicy(EditPolicy.SELECTION_FEEDBACK_ROLE, new UrmlTextSelectionEditPolicy());
-		installEditPolicy(EditPolicy.PRIMARY_DRAG_ROLE, new NonResizableLabelEditPolicy() {
-
-			protected List createSelectionHandles() {
-				MoveHandle mh = new MoveHandle((GraphicalEditPart) getHost());
-				mh.setBorder(null);
-				return Collections.singletonList(mh);
-			}
-		});
+		installEditPolicy(EditPolicy.DIRECT_EDIT_ROLE,
+				new LabelDirectEditPolicy());
+		installEditPolicy(EditPolicy.SELECTION_FEEDBACK_ROLE,
+				new UrmlTextSelectionEditPolicy());
+		installEditPolicy(EditPolicy.PRIMARY_DRAG_ROLE,
+				new URMLDiagramEditPart.LinkLabelDragPolicy());
 	}
 
 	/**
@@ -174,6 +173,7 @@
 	/**
 	 * @generated
 	 */
+	@SuppressWarnings("rawtypes")
 	protected List getModelChildren() {
 		return Collections.EMPTY_LIST;
 	}
@@ -206,7 +206,9 @@
 		String text = null;
 		EObject parserElement = getParserElement();
 		if (parserElement != null && getParser() != null) {
-			text = getParser().getPrintString(new EObjectAdapter(parserElement), getParserOptions().intValue());
+			text = getParser().getPrintString(
+					new EObjectAdapter(parserElement),
+					getParserOptions().intValue());
 		}
 		if (text == null || text.length() == 0) {
 			text = defaultText;
@@ -236,7 +238,9 @@
 		if (getParserElement() == null || getParser() == null) {
 			return ""; //$NON-NLS-1$
 		}
-		return getParser().getEditString(new EObjectAdapter(getParserElement()), getParserOptions().intValue());
+		return getParser().getEditString(
+				new EObjectAdapter(getParserElement()),
+				getParserOptions().intValue());
 	}
 
 	/**
@@ -257,14 +261,20 @@
 					final EObject element = getParserElement();
 					final IParser parser = getParser();
 					try {
-						IParserEditStatus valid = (IParserEditStatus) getEditingDomain().runExclusive(
-							new RunnableWithResult.Impl() {
+						IParserEditStatus valid = (IParserEditStatus) getEditingDomain()
+								.runExclusive(
+										new RunnableWithResult.Impl<IParserEditStatus>() {
 
-								public void run() {
-									setResult(parser.isValidEditString(new EObjectAdapter(element), (String) value));
-								}
-							});
-						return valid.getCode() == ParserEditStatus.EDITABLE ? null : valid.getMessage();
+											public void run() {
+												setResult(parser
+														.isValidEditString(
+																new EObjectAdapter(
+																		element),
+																(String) value));
+											}
+										});
+						return valid.getCode() == ParserEditStatus.EDITABLE ? null
+								: valid.getMessage();
 					} catch (InterruptedException ie) {
 						ie.printStackTrace();
 					}
@@ -283,7 +293,8 @@
 		if (getParserElement() == null || getParser() == null) {
 			return null;
 		}
-		return getParser().getCompletionProcessor(new EObjectAdapter(getParserElement()));
+		return getParser().getCompletionProcessor(
+				new EObjectAdapter(getParserElement()));
 	}
 
 	/**
@@ -298,8 +309,12 @@
 	 */
 	public IParser getParser() {
 		if (parser == null) {
-			parser = UrmlParserProvider.getParser(UrmlElementTypes.AssetTriggeredDangers_4017, getParserElement(),
-				UrmlVisualIDRegistry.getType(org.unicase.ui.diagram.urml.edit.parts.TriggersLabelEditPart.VISUAL_ID));
+			parser = UrmlParserProvider
+					.getParser(
+							UrmlElementTypes.AssetTriggeredDangers_4017,
+							getParserElement(),
+							UrmlVisualIDRegistry
+									.getType(org.unicase.ui.diagram.urml.edit.parts.TriggersLabelEditPart.VISUAL_ID));
 		}
 		return parser;
 	}
@@ -309,8 +324,9 @@
 	 */
 	protected DirectEditManager getManager() {
 		if (manager == null) {
-			setManager(new TextDirectEditManager(this, TextDirectEditManager.getTextCellEditorClass(this),
-				UrmlEditPartFactory.getTextCellEditorLocator(this)));
+			setManager(new TextDirectEditManager(this,
+					TextDirectEditManager.getTextCellEditorClass(this),
+					UrmlEditPartFactory.getTextCellEditorLocator(this)));
 		}
 		return manager;
 	}
@@ -334,7 +350,8 @@
 	 */
 	protected void performDirectEdit(Point eventLocation) {
 		if (getManager().getClass() == TextDirectEditManager.class) {
-			((TextDirectEditManager) getManager()).show(eventLocation.getSWTPoint());
+			((TextDirectEditManager) getManager()).show(eventLocation
+					.getSWTPoint());
 		}
 	}
 
@@ -359,11 +376,15 @@
 
 				public void run() {
 					if (isActive() && isEditable()) {
-						if (theRequest.getExtendedData().get(RequestConstants.REQ_DIRECTEDIT_EXTENDEDDATA_INITIAL_CHAR) instanceof Character) {
-							Character initialChar = (Character) theRequest.getExtendedData().get(
-								RequestConstants.REQ_DIRECTEDIT_EXTENDEDDATA_INITIAL_CHAR);
+						if (theRequest
+								.getExtendedData()
+								.get(RequestConstants.REQ_DIRECTEDIT_EXTENDEDDATA_INITIAL_CHAR) instanceof Character) {
+							Character initialChar = (Character) theRequest
+									.getExtendedData()
+									.get(RequestConstants.REQ_DIRECTEDIT_EXTENDEDDATA_INITIAL_CHAR);
 							performDirectEdit(initialChar.charValue());
-						} else if ((theRequest instanceof DirectEditRequest) && (getEditText().equals(getLabelText()))) {
+						} else if ((theRequest instanceof DirectEditRequest)
+								&& (getEditText().equals(getLabelText()))) {
 							DirectEditRequest editRequest = (DirectEditRequest) theRequest;
 							performDirectEdit(editRequest.getLocation());
 						} else {
@@ -409,7 +430,8 @@
 	 * @generated
 	 */
 	protected void refreshUnderline() {
-		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(NotationPackage.eINSTANCE.getFontStyle());
+		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(
+				NotationPackage.eINSTANCE.getFontStyle());
 		if (style != null && getFigure() instanceof WrappingLabel) {
 			((WrappingLabel) getFigure()).setTextUnderline(style.isUnderline());
 		}
@@ -419,9 +441,11 @@
 	 * @generated
 	 */
 	protected void refreshStrikeThrough() {
-		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(NotationPackage.eINSTANCE.getFontStyle());
+		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(
+				NotationPackage.eINSTANCE.getFontStyle());
 		if (style != null && getFigure() instanceof WrappingLabel) {
-			((WrappingLabel) getFigure()).setTextStrikeThrough(style.isStrikeThrough());
+			((WrappingLabel) getFigure()).setTextStrikeThrough(style
+					.isStrikeThrough());
 		}
 	}
 
@@ -429,11 +453,13 @@
 	 * @generated
 	 */
 	protected void refreshFont() {
-		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(NotationPackage.eINSTANCE.getFontStyle());
+		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(
+				NotationPackage.eINSTANCE.getFontStyle());
 		if (style != null) {
-			FontData fontData = new FontData(style.getFontName(), style.getFontHeight(), (style.isBold() ? SWT.BOLD
-				: SWT.NORMAL)
-				| (style.isItalic() ? SWT.ITALIC : SWT.NORMAL));
+			FontData fontData = new FontData(style.getFontName(),
+					style.getFontHeight(), (style.isBold() ? SWT.BOLD
+							: SWT.NORMAL)
+							| (style.isItalic() ? SWT.ITALIC : SWT.NORMAL));
 			setFont(fontData);
 		}
 	}
@@ -451,9 +477,11 @@
 	protected void addSemanticListeners() {
 		if (getParser() instanceof ISemanticParser) {
 			EObject element = resolveSemanticElement();
-			parserElements = ((ISemanticParser) getParser()).getSemanticElementsBeingParsed(element);
+			parserElements = ((ISemanticParser) getParser())
+					.getSemanticElementsBeingParsed(element);
 			for (int i = 0; i < parserElements.size(); i++) {
-				addListenerFilter("SemanticModel" + i, this, (EObject) parserElements.get(i)); //$NON-NLS-1$
+				addListenerFilter(
+						"SemanticModel" + i, this, (EObject) parserElements.get(i)); //$NON-NLS-1$
 			}
 		} else {
 			super.addSemanticListeners();
@@ -503,17 +531,25 @@
 		if (NotationPackage.eINSTANCE.getFontStyle_FontColor().equals(feature)) {
 			Integer c = (Integer) event.getNewValue();
 			setFontColor(DiagramColorRegistry.getInstance().getColor(c));
-		} else if (NotationPackage.eINSTANCE.getFontStyle_Underline().equals(feature)) {
+		} else if (NotationPackage.eINSTANCE.getFontStyle_Underline().equals(
+				feature)) {
 			refreshUnderline();
-		} else if (NotationPackage.eINSTANCE.getFontStyle_StrikeThrough().equals(feature)) {
+		} else if (NotationPackage.eINSTANCE.getFontStyle_StrikeThrough()
+				.equals(feature)) {
 			refreshStrikeThrough();
-		} else if (NotationPackage.eINSTANCE.getFontStyle_FontHeight().equals(feature)
-			|| NotationPackage.eINSTANCE.getFontStyle_FontName().equals(feature)
-			|| NotationPackage.eINSTANCE.getFontStyle_Bold().equals(feature)
-			|| NotationPackage.eINSTANCE.getFontStyle_Italic().equals(feature)) {
+		} else if (NotationPackage.eINSTANCE.getFontStyle_FontHeight().equals(
+				feature)
+				|| NotationPackage.eINSTANCE.getFontStyle_FontName().equals(
+						feature)
+				|| NotationPackage.eINSTANCE.getFontStyle_Bold()
+						.equals(feature)
+				|| NotationPackage.eINSTANCE.getFontStyle_Italic().equals(
+						feature)) {
 			refreshFont();
 		} else {
-			if (getParser() != null && getParser().isAffectingEvent(event, getParserOptions().intValue())) {
+			if (getParser() != null
+					&& getParser().isAffectingEvent(event,
+							getParserOptions().intValue())) {
 				refreshLabel();
 			}
 			if (getParser() instanceof ISemanticParser) {
Index: src/org/unicase/ui/diagram/urml/edit/parts/UrmlModelElementAssociationsEditPart.java
===================================================================
--- src/org/unicase/ui/diagram/urml/edit/parts/UrmlModelElementAssociationsEditPart.java	(revision 0)
+++ src/org/unicase/ui/diagram/urml/edit/parts/UrmlModelElementAssociationsEditPart.java	(revision 0)
@@ -0,0 +1,59 @@
+package org.unicase.ui.diagram.urml.edit.parts;
+
+import org.eclipse.draw2d.Connection;
+import org.eclipse.gmf.runtime.diagram.ui.editparts.ConnectionNodeEditPart;
+import org.eclipse.gmf.runtime.diagram.ui.editparts.ITreeBranchEditPart;
+import org.eclipse.gmf.runtime.diagram.ui.editpolicies.EditPolicyRoles;
+import org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel;
+import org.eclipse.gmf.runtime.notation.View;
+import org.unicase.ui.diagram.urml.edit.policies.UrmlModelElementAssociationsItemSemanticEditPolicy;
+import org.unicase.ui.diagram.urml.own.figures.ShortenedPolylineConnection;
+
+/**
+ * @generated
+ */
+public class UrmlModelElementAssociationsEditPart extends
+		ConnectionNodeEditPart implements ITreeBranchEditPart {
+
+	/**
+	 * @generated
+	 */
+	public static final int VISUAL_ID = 4048;
+
+	/**
+	 * @generated
+	 */
+	public UrmlModelElementAssociationsEditPart(View view) {
+		super(view);
+	}
+
+	/**
+	 * @generated
+	 */
+	protected void createDefaultEditPolicies() {
+		super.createDefaultEditPolicies();
+		installEditPolicy(EditPolicyRoles.SEMANTIC_ROLE,
+				new UrmlModelElementAssociationsItemSemanticEditPolicy());
+	}
+
+	/**
+	 * Creates figure for this edit part.
+	 * 
+	 * Body of this method does not depend on settings in generation model
+	 * so you may safely remove <i>generated</i> tag and modify it.
+	 * 
+	 * @generated
+	 */
+
+	protected Connection createConnectionFigure() {
+		return new ShortenedPolylineConnection();
+	}
+
+	/**
+	 * @generated
+	 */
+	public ShortenedPolylineConnection getPrimaryShape() {
+		return (ShortenedPolylineConnection) getFigure();
+	}
+
+}
Index: src/org/unicase/ui/diagram/urml/edit/parts/InfluencesLabel3EditPart.java
===================================================================
--- src/org/unicase/ui/diagram/urml/edit/parts/InfluencesLabel3EditPart.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/edit/parts/InfluencesLabel3EditPart.java	(working copy)
@@ -50,7 +50,8 @@
 /**
  * @generated
  */
-public class InfluencesLabel3EditPart extends LabelEditPart implements ITextAwareEditPart {
+public class InfluencesLabel3EditPart extends LabelEditPart implements
+		ITextAwareEditPart {
 
 	/**
 	 * @generated
@@ -70,7 +71,7 @@
 	/**
 	 * @generated
 	 */
-	private List parserElements;
+	private List<?> parserElements;
 
 	/**
 	 * @generated
@@ -81,8 +82,10 @@
 	 * @generated
 	 */
 	static {
-		registerSnapBackPosition(UrmlVisualIDRegistry
-			.getType(org.unicase.ui.diagram.urml.edit.parts.InfluencesLabel3EditPart.VISUAL_ID), new Point(0, 20));
+		registerSnapBackPosition(
+				UrmlVisualIDRegistry
+						.getType(org.unicase.ui.diagram.urml.edit.parts.InfluencesLabel3EditPart.VISUAL_ID),
+				new Point(0, 20));
 	}
 
 	/**
@@ -97,16 +100,12 @@
 	 */
 	protected void createDefaultEditPolicies() {
 		super.createDefaultEditPolicies();
-		installEditPolicy(EditPolicy.DIRECT_EDIT_ROLE, new LabelDirectEditPolicy());
-		installEditPolicy(EditPolicy.SELECTION_FEEDBACK_ROLE, new UrmlTextSelectionEditPolicy());
-		installEditPolicy(EditPolicy.PRIMARY_DRAG_ROLE, new NonResizableLabelEditPolicy() {
-
-			protected List createSelectionHandles() {
-				MoveHandle mh = new MoveHandle((GraphicalEditPart) getHost());
-				mh.setBorder(null);
-				return Collections.singletonList(mh);
-			}
-		});
+		installEditPolicy(EditPolicy.DIRECT_EDIT_ROLE,
+				new LabelDirectEditPolicy());
+		installEditPolicy(EditPolicy.SELECTION_FEEDBACK_ROLE,
+				new UrmlTextSelectionEditPolicy());
+		installEditPolicy(EditPolicy.PRIMARY_DRAG_ROLE,
+				new URMLDiagramEditPart.LinkLabelDragPolicy());
 	}
 
 	/**
@@ -174,6 +173,7 @@
 	/**
 	 * @generated
 	 */
+	@SuppressWarnings("rawtypes")
 	protected List getModelChildren() {
 		return Collections.EMPTY_LIST;
 	}
@@ -206,7 +206,9 @@
 		String text = null;
 		EObject parserElement = getParserElement();
 		if (parserElement != null && getParser() != null) {
-			text = getParser().getPrintString(new EObjectAdapter(parserElement), getParserOptions().intValue());
+			text = getParser().getPrintString(
+					new EObjectAdapter(parserElement),
+					getParserOptions().intValue());
 		}
 		if (text == null || text.length() == 0) {
 			text = defaultText;
@@ -236,7 +238,9 @@
 		if (getParserElement() == null || getParser() == null) {
 			return ""; //$NON-NLS-1$
 		}
-		return getParser().getEditString(new EObjectAdapter(getParserElement()), getParserOptions().intValue());
+		return getParser().getEditString(
+				new EObjectAdapter(getParserElement()),
+				getParserOptions().intValue());
 	}
 
 	/**
@@ -257,14 +261,20 @@
 					final EObject element = getParserElement();
 					final IParser parser = getParser();
 					try {
-						IParserEditStatus valid = (IParserEditStatus) getEditingDomain().runExclusive(
-							new RunnableWithResult.Impl() {
+						IParserEditStatus valid = (IParserEditStatus) getEditingDomain()
+								.runExclusive(
+										new RunnableWithResult.Impl<IParserEditStatus>() {
 
-								public void run() {
-									setResult(parser.isValidEditString(new EObjectAdapter(element), (String) value));
-								}
-							});
-						return valid.getCode() == ParserEditStatus.EDITABLE ? null : valid.getMessage();
+											public void run() {
+												setResult(parser
+														.isValidEditString(
+																new EObjectAdapter(
+																		element),
+																(String) value));
+											}
+										});
+						return valid.getCode() == ParserEditStatus.EDITABLE ? null
+								: valid.getMessage();
 					} catch (InterruptedException ie) {
 						ie.printStackTrace();
 					}
@@ -283,7 +293,8 @@
 		if (getParserElement() == null || getParser() == null) {
 			return null;
 		}
-		return getParser().getCompletionProcessor(new EObjectAdapter(getParserElement()));
+		return getParser().getCompletionProcessor(
+				new EObjectAdapter(getParserElement()));
 	}
 
 	/**
@@ -299,8 +310,11 @@
 	public IParser getParser() {
 		if (parser == null) {
 			parser = UrmlParserProvider
-				.getParser(UrmlElementTypes.GoalReference_4024, getParserElement(), UrmlVisualIDRegistry
-					.getType(org.unicase.ui.diagram.urml.edit.parts.InfluencesLabel3EditPart.VISUAL_ID));
+					.getParser(
+							UrmlElementTypes.GoalReference_4024,
+							getParserElement(),
+							UrmlVisualIDRegistry
+									.getType(org.unicase.ui.diagram.urml.edit.parts.InfluencesLabel3EditPart.VISUAL_ID));
 		}
 		return parser;
 	}
@@ -310,8 +324,9 @@
 	 */
 	protected DirectEditManager getManager() {
 		if (manager == null) {
-			setManager(new TextDirectEditManager(this, TextDirectEditManager.getTextCellEditorClass(this),
-				UrmlEditPartFactory.getTextCellEditorLocator(this)));
+			setManager(new TextDirectEditManager(this,
+					TextDirectEditManager.getTextCellEditorClass(this),
+					UrmlEditPartFactory.getTextCellEditorLocator(this)));
 		}
 		return manager;
 	}
@@ -335,7 +350,8 @@
 	 */
 	protected void performDirectEdit(Point eventLocation) {
 		if (getManager().getClass() == TextDirectEditManager.class) {
-			((TextDirectEditManager) getManager()).show(eventLocation.getSWTPoint());
+			((TextDirectEditManager) getManager()).show(eventLocation
+					.getSWTPoint());
 		}
 	}
 
@@ -360,11 +376,15 @@
 
 				public void run() {
 					if (isActive() && isEditable()) {
-						if (theRequest.getExtendedData().get(RequestConstants.REQ_DIRECTEDIT_EXTENDEDDATA_INITIAL_CHAR) instanceof Character) {
-							Character initialChar = (Character) theRequest.getExtendedData().get(
-								RequestConstants.REQ_DIRECTEDIT_EXTENDEDDATA_INITIAL_CHAR);
+						if (theRequest
+								.getExtendedData()
+								.get(RequestConstants.REQ_DIRECTEDIT_EXTENDEDDATA_INITIAL_CHAR) instanceof Character) {
+							Character initialChar = (Character) theRequest
+									.getExtendedData()
+									.get(RequestConstants.REQ_DIRECTEDIT_EXTENDEDDATA_INITIAL_CHAR);
 							performDirectEdit(initialChar.charValue());
-						} else if ((theRequest instanceof DirectEditRequest) && (getEditText().equals(getLabelText()))) {
+						} else if ((theRequest instanceof DirectEditRequest)
+								&& (getEditText().equals(getLabelText()))) {
 							DirectEditRequest editRequest = (DirectEditRequest) theRequest;
 							performDirectEdit(editRequest.getLocation());
 						} else {
@@ -410,7 +430,8 @@
 	 * @generated
 	 */
 	protected void refreshUnderline() {
-		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(NotationPackage.eINSTANCE.getFontStyle());
+		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(
+				NotationPackage.eINSTANCE.getFontStyle());
 		if (style != null && getFigure() instanceof WrappingLabel) {
 			((WrappingLabel) getFigure()).setTextUnderline(style.isUnderline());
 		}
@@ -420,9 +441,11 @@
 	 * @generated
 	 */
 	protected void refreshStrikeThrough() {
-		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(NotationPackage.eINSTANCE.getFontStyle());
+		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(
+				NotationPackage.eINSTANCE.getFontStyle());
 		if (style != null && getFigure() instanceof WrappingLabel) {
-			((WrappingLabel) getFigure()).setTextStrikeThrough(style.isStrikeThrough());
+			((WrappingLabel) getFigure()).setTextStrikeThrough(style
+					.isStrikeThrough());
 		}
 	}
 
@@ -430,11 +453,13 @@
 	 * @generated
 	 */
 	protected void refreshFont() {
-		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(NotationPackage.eINSTANCE.getFontStyle());
+		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(
+				NotationPackage.eINSTANCE.getFontStyle());
 		if (style != null) {
-			FontData fontData = new FontData(style.getFontName(), style.getFontHeight(), (style.isBold() ? SWT.BOLD
-				: SWT.NORMAL)
-				| (style.isItalic() ? SWT.ITALIC : SWT.NORMAL));
+			FontData fontData = new FontData(style.getFontName(),
+					style.getFontHeight(), (style.isBold() ? SWT.BOLD
+							: SWT.NORMAL)
+							| (style.isItalic() ? SWT.ITALIC : SWT.NORMAL));
 			setFont(fontData);
 		}
 	}
@@ -452,9 +477,11 @@
 	protected void addSemanticListeners() {
 		if (getParser() instanceof ISemanticParser) {
 			EObject element = resolveSemanticElement();
-			parserElements = ((ISemanticParser) getParser()).getSemanticElementsBeingParsed(element);
+			parserElements = ((ISemanticParser) getParser())
+					.getSemanticElementsBeingParsed(element);
 			for (int i = 0; i < parserElements.size(); i++) {
-				addListenerFilter("SemanticModel" + i, this, (EObject) parserElements.get(i)); //$NON-NLS-1$
+				addListenerFilter(
+						"SemanticModel" + i, this, (EObject) parserElements.get(i)); //$NON-NLS-1$
 			}
 		} else {
 			super.addSemanticListeners();
@@ -504,17 +531,25 @@
 		if (NotationPackage.eINSTANCE.getFontStyle_FontColor().equals(feature)) {
 			Integer c = (Integer) event.getNewValue();
 			setFontColor(DiagramColorRegistry.getInstance().getColor(c));
-		} else if (NotationPackage.eINSTANCE.getFontStyle_Underline().equals(feature)) {
+		} else if (NotationPackage.eINSTANCE.getFontStyle_Underline().equals(
+				feature)) {
 			refreshUnderline();
-		} else if (NotationPackage.eINSTANCE.getFontStyle_StrikeThrough().equals(feature)) {
+		} else if (NotationPackage.eINSTANCE.getFontStyle_StrikeThrough()
+				.equals(feature)) {
 			refreshStrikeThrough();
-		} else if (NotationPackage.eINSTANCE.getFontStyle_FontHeight().equals(feature)
-			|| NotationPackage.eINSTANCE.getFontStyle_FontName().equals(feature)
-			|| NotationPackage.eINSTANCE.getFontStyle_Bold().equals(feature)
-			|| NotationPackage.eINSTANCE.getFontStyle_Italic().equals(feature)) {
+		} else if (NotationPackage.eINSTANCE.getFontStyle_FontHeight().equals(
+				feature)
+				|| NotationPackage.eINSTANCE.getFontStyle_FontName().equals(
+						feature)
+				|| NotationPackage.eINSTANCE.getFontStyle_Bold()
+						.equals(feature)
+				|| NotationPackage.eINSTANCE.getFontStyle_Italic().equals(
+						feature)) {
 			refreshFont();
 		} else {
-			if (getParser() != null && getParser().isAffectingEvent(event, getParserOptions().intValue())) {
+			if (getParser() != null
+					&& getParser().isAffectingEvent(event,
+							getParserOptions().intValue())) {
 				refreshLabel();
 			}
 			if (getParser() instanceof ISemanticParser) {
Index: src/org/unicase/ui/diagram/urml/edit/parts/GoalSubGoalsEditPart.java
===================================================================
--- src/org/unicase/ui/diagram/urml/edit/parts/GoalSubGoalsEditPart.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/edit/parts/GoalSubGoalsEditPart.java	(working copy)
@@ -12,7 +12,8 @@
 /**
  * @generated
  */
-public class GoalSubGoalsEditPart extends ConnectionNodeEditPart implements ITreeBranchEditPart {
+public class GoalSubGoalsEditPart extends ConnectionNodeEditPart implements
+		ITreeBranchEditPart {
 
 	/**
 	 * @generated
@@ -31,41 +32,8 @@
 	 */
 	protected void createDefaultEditPolicies() {
 		super.createDefaultEditPolicies();
-		installEditPolicy(EditPolicyRoles.SEMANTIC_ROLE, new GoalSubGoalsItemSemanticEditPolicy());
-	}
-
-	/**
-	 * @generated
-	 */
-	protected boolean addFixedChild(EditPart childEditPart) {
-		return false;
-	}
-
-	/**
-	 * @generated
-	 */
-	protected void addChildVisual(EditPart childEditPart, int index) {
-		if (addFixedChild(childEditPart)) {
-			return;
-		}
-		super.addChildVisual(childEditPart, -1);
-	}
-
-	/**
-	 * @generated
-	 */
-	protected boolean removeFixedChild(EditPart childEditPart) {
-		return false;
-	}
-
-	/**
-	 * @generated
-	 */
-	protected void removeChildVisual(EditPart childEditPart) {
-		if (removeFixedChild(childEditPart)) {
-			return;
-		}
-		super.removeChildVisual(childEditPart);
+		installEditPolicy(EditPolicyRoles.SEMANTIC_ROLE,
+				new GoalSubGoalsItemSemanticEditPolicy());
 	}
 
 	/**
Index: src/org/unicase/ui/diagram/urml/edit/parts/FeatureNameEditPart.java
===================================================================
--- src/org/unicase/ui/diagram/urml/edit/parts/FeatureNameEditPart.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/edit/parts/FeatureNameEditPart.java	(working copy)
@@ -52,7 +52,8 @@
 /**
  * @generated
  */
-public class FeatureNameEditPart extends CompartmentEditPart implements ITextAwareEditPart {
+public class FeatureNameEditPart extends CompartmentEditPart implements
+		ITextAwareEditPart {
 
 	/**
 	 * @generated
@@ -72,7 +73,7 @@
 	/**
 	 * @generated
 	 */
-	private List parserElements;
+	private List<?> parserElements;
 
 	/**
 	 * @generated
@@ -91,25 +92,12 @@
 	 */
 	protected void createDefaultEditPolicies() {
 		super.createDefaultEditPolicies();
-		installEditPolicy(EditPolicy.SELECTION_FEEDBACK_ROLE, new UrmlTextSelectionEditPolicy());
-		installEditPolicy(EditPolicy.DIRECT_EDIT_ROLE, new LabelDirectEditPolicy());
-		installEditPolicy(EditPolicy.PRIMARY_DRAG_ROLE, new NonResizableEditPolicy() {
-
-			protected List createSelectionHandles() {
-				List handles = new ArrayList();
-				NonResizableHandleKit.addMoveHandle((GraphicalEditPart) getHost(), handles);
-				((MoveHandle) handles.get(0)).setBorder(null);
-				return handles;
-			}
-
-			public Command getCommand(Request request) {
-				return null;
-			}
-
-			public boolean understandsRequest(Request request) {
-				return false;
-			}
-		});
+		installEditPolicy(EditPolicy.SELECTION_FEEDBACK_ROLE,
+				new UrmlTextSelectionEditPolicy());
+		installEditPolicy(EditPolicy.DIRECT_EDIT_ROLE,
+				new LabelDirectEditPolicy());
+		installEditPolicy(EditPolicy.PRIMARY_DRAG_ROLE,
+				new URMLDiagramEditPart.NodeLabelDragPolicy());
 	}
 
 	/**
@@ -159,7 +147,8 @@
 	/**
 	 * @generated
 	 */
-	public void setLabel(org.unicase.ui.unicasecommon.diagram.figures.Label figure) {
+	public void setLabel(
+			org.unicase.ui.unicasecommon.diagram.figures.Label figure) {
 		unregisterVisuals();
 		setFigure(figure);
 		defaultText = getLabelTextHelper(figure);
@@ -170,6 +159,7 @@
 	/**
 	 * @generated
 	 */
+	@SuppressWarnings("rawtypes")
 	protected List getModelChildren() {
 		return Collections.EMPTY_LIST;
 	}
@@ -202,7 +192,9 @@
 		String text = null;
 		EObject parserElement = getParserElement();
 		if (parserElement != null && getParser() != null) {
-			text = getParser().getPrintString(new EObjectAdapter(parserElement), getParserOptions().intValue());
+			text = getParser().getPrintString(
+					new EObjectAdapter(parserElement),
+					getParserOptions().intValue());
 		}
 		if (text == null || text.length() == 0) {
 			text = defaultText;
@@ -232,7 +224,9 @@
 		if (getParserElement() == null || getParser() == null) {
 			return ""; //$NON-NLS-1$
 		}
-		return getParser().getEditString(new EObjectAdapter(getParserElement()), getParserOptions().intValue());
+		return getParser().getEditString(
+				new EObjectAdapter(getParserElement()),
+				getParserOptions().intValue());
 	}
 
 	/**
@@ -253,14 +247,20 @@
 					final EObject element = getParserElement();
 					final IParser parser = getParser();
 					try {
-						IParserEditStatus valid = (IParserEditStatus) getEditingDomain().runExclusive(
-							new RunnableWithResult.Impl() {
+						IParserEditStatus valid = (IParserEditStatus) getEditingDomain()
+								.runExclusive(
+										new RunnableWithResult.Impl<IParserEditStatus>() {
 
-								public void run() {
-									setResult(parser.isValidEditString(new EObjectAdapter(element), (String) value));
-								}
-							});
-						return valid.getCode() == ParserEditStatus.EDITABLE ? null : valid.getMessage();
+											public void run() {
+												setResult(parser
+														.isValidEditString(
+																new EObjectAdapter(
+																		element),
+																(String) value));
+											}
+										});
+						return valid.getCode() == ParserEditStatus.EDITABLE ? null
+								: valid.getMessage();
 					} catch (InterruptedException ie) {
 						ie.printStackTrace();
 					}
@@ -279,7 +279,8 @@
 		if (getParserElement() == null || getParser() == null) {
 			return null;
 		}
-		return getParser().getCompletionProcessor(new EObjectAdapter(getParserElement()));
+		return getParser().getCompletionProcessor(
+				new EObjectAdapter(getParserElement()));
 	}
 
 	/**
@@ -294,8 +295,12 @@
 	 */
 	public IParser getParser() {
 		if (parser == null) {
-			parser = UrmlParserProvider.getParser(UrmlElementTypes.Feature_2012, getParserElement(),
-				UrmlVisualIDRegistry.getType(org.unicase.ui.diagram.urml.edit.parts.FeatureNameEditPart.VISUAL_ID));
+			parser = UrmlParserProvider
+					.getParser(
+							UrmlElementTypes.Feature_2012,
+							getParserElement(),
+							UrmlVisualIDRegistry
+									.getType(org.unicase.ui.diagram.urml.edit.parts.FeatureNameEditPart.VISUAL_ID));
 		}
 		return parser;
 	}
@@ -305,8 +310,9 @@
 	 */
 	protected DirectEditManager getManager() {
 		if (manager == null) {
-			setManager(new TextDirectEditManager(this, TextDirectEditManager.getTextCellEditorClass(this),
-				UrmlEditPartFactory.getTextCellEditorLocator(this)));
+			setManager(new TextDirectEditManager(this,
+					TextDirectEditManager.getTextCellEditorClass(this),
+					UrmlEditPartFactory.getTextCellEditorLocator(this)));
 		}
 		return manager;
 	}
@@ -330,7 +336,8 @@
 	 */
 	protected void performDirectEdit(Point eventLocation) {
 		if (getManager().getClass() == TextDirectEditManager.class) {
-			((TextDirectEditManager) getManager()).show(eventLocation.getSWTPoint());
+			((TextDirectEditManager) getManager()).show(eventLocation
+					.getSWTPoint());
 		}
 	}
 
@@ -355,11 +362,15 @@
 
 				public void run() {
 					if (isActive() && isEditable()) {
-						if (theRequest.getExtendedData().get(RequestConstants.REQ_DIRECTEDIT_EXTENDEDDATA_INITIAL_CHAR) instanceof Character) {
-							Character initialChar = (Character) theRequest.getExtendedData().get(
-								RequestConstants.REQ_DIRECTEDIT_EXTENDEDDATA_INITIAL_CHAR);
+						if (theRequest
+								.getExtendedData()
+								.get(RequestConstants.REQ_DIRECTEDIT_EXTENDEDDATA_INITIAL_CHAR) instanceof Character) {
+							Character initialChar = (Character) theRequest
+									.getExtendedData()
+									.get(RequestConstants.REQ_DIRECTEDIT_EXTENDEDDATA_INITIAL_CHAR);
 							performDirectEdit(initialChar.charValue());
-						} else if ((theRequest instanceof DirectEditRequest) && (getEditText().equals(getLabelText()))) {
+						} else if ((theRequest instanceof DirectEditRequest)
+								&& (getEditText().equals(getLabelText()))) {
 							DirectEditRequest editRequest = (DirectEditRequest) theRequest;
 							performDirectEdit(editRequest.getLocation());
 						} else {
@@ -405,7 +416,8 @@
 	 * @generated
 	 */
 	protected void refreshUnderline() {
-		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(NotationPackage.eINSTANCE.getFontStyle());
+		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(
+				NotationPackage.eINSTANCE.getFontStyle());
 		if (style != null && getFigure() instanceof WrappingLabel) {
 			((WrappingLabel) getFigure()).setTextUnderline(style.isUnderline());
 		}
@@ -415,9 +427,11 @@
 	 * @generated
 	 */
 	protected void refreshStrikeThrough() {
-		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(NotationPackage.eINSTANCE.getFontStyle());
+		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(
+				NotationPackage.eINSTANCE.getFontStyle());
 		if (style != null && getFigure() instanceof WrappingLabel) {
-			((WrappingLabel) getFigure()).setTextStrikeThrough(style.isStrikeThrough());
+			((WrappingLabel) getFigure()).setTextStrikeThrough(style
+					.isStrikeThrough());
 		}
 	}
 
@@ -425,11 +439,13 @@
 	 * @generated
 	 */
 	protected void refreshFont() {
-		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(NotationPackage.eINSTANCE.getFontStyle());
+		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(
+				NotationPackage.eINSTANCE.getFontStyle());
 		if (style != null) {
-			FontData fontData = new FontData(style.getFontName(), style.getFontHeight(), (style.isBold() ? SWT.BOLD
-				: SWT.NORMAL)
-				| (style.isItalic() ? SWT.ITALIC : SWT.NORMAL));
+			FontData fontData = new FontData(style.getFontName(),
+					style.getFontHeight(), (style.isBold() ? SWT.BOLD
+							: SWT.NORMAL)
+							| (style.isItalic() ? SWT.ITALIC : SWT.NORMAL));
 			setFont(fontData);
 		}
 	}
@@ -447,9 +463,11 @@
 	protected void addSemanticListeners() {
 		if (getParser() instanceof ISemanticParser) {
 			EObject element = resolveSemanticElement();
-			parserElements = ((ISemanticParser) getParser()).getSemanticElementsBeingParsed(element);
+			parserElements = ((ISemanticParser) getParser())
+					.getSemanticElementsBeingParsed(element);
 			for (int i = 0; i < parserElements.size(); i++) {
-				addListenerFilter("SemanticModel" + i, this, (EObject) parserElements.get(i)); //$NON-NLS-1$
+				addListenerFilter(
+						"SemanticModel" + i, this, (EObject) parserElements.get(i)); //$NON-NLS-1$
 			}
 		} else {
 			super.addSemanticListeners();
@@ -515,17 +533,25 @@
 		if (NotationPackage.eINSTANCE.getFontStyle_FontColor().equals(feature)) {
 			Integer c = (Integer) event.getNewValue();
 			setFontColor(DiagramColorRegistry.getInstance().getColor(c));
-		} else if (NotationPackage.eINSTANCE.getFontStyle_Underline().equals(feature)) {
+		} else if (NotationPackage.eINSTANCE.getFontStyle_Underline().equals(
+				feature)) {
 			refreshUnderline();
-		} else if (NotationPackage.eINSTANCE.getFontStyle_StrikeThrough().equals(feature)) {
+		} else if (NotationPackage.eINSTANCE.getFontStyle_StrikeThrough()
+				.equals(feature)) {
 			refreshStrikeThrough();
-		} else if (NotationPackage.eINSTANCE.getFontStyle_FontHeight().equals(feature)
-			|| NotationPackage.eINSTANCE.getFontStyle_FontName().equals(feature)
-			|| NotationPackage.eINSTANCE.getFontStyle_Bold().equals(feature)
-			|| NotationPackage.eINSTANCE.getFontStyle_Italic().equals(feature)) {
+		} else if (NotationPackage.eINSTANCE.getFontStyle_FontHeight().equals(
+				feature)
+				|| NotationPackage.eINSTANCE.getFontStyle_FontName().equals(
+						feature)
+				|| NotationPackage.eINSTANCE.getFontStyle_Bold()
+						.equals(feature)
+				|| NotationPackage.eINSTANCE.getFontStyle_Italic().equals(
+						feature)) {
 			refreshFont();
 		} else {
-			if (getParser() != null && getParser().isAffectingEvent(event, getParserOptions().intValue())) {
+			if (getParser() != null
+					&& getParser().isAffectingEvent(event,
+							getParserOptions().intValue())) {
 				refreshLabel();
 			}
 			if (getParser() instanceof ISemanticParser) {
Index: src/org/unicase/ui/diagram/urml/edit/parts/StakeholderNameEditPart.java
===================================================================
--- src/org/unicase/ui/diagram/urml/edit/parts/StakeholderNameEditPart.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/edit/parts/StakeholderNameEditPart.java	(working copy)
@@ -52,7 +52,8 @@
 /**
  * @generated
  */
-public class StakeholderNameEditPart extends CompartmentEditPart implements ITextAwareEditPart {
+public class StakeholderNameEditPart extends CompartmentEditPart implements
+		ITextAwareEditPart {
 
 	/**
 	 * @generated
@@ -72,7 +73,7 @@
 	/**
 	 * @generated
 	 */
-	private List parserElements;
+	private List<?> parserElements;
 
 	/**
 	 * @generated
@@ -91,25 +92,12 @@
 	 */
 	protected void createDefaultEditPolicies() {
 		super.createDefaultEditPolicies();
-		installEditPolicy(EditPolicy.SELECTION_FEEDBACK_ROLE, new UrmlTextSelectionEditPolicy());
-		installEditPolicy(EditPolicy.DIRECT_EDIT_ROLE, new LabelDirectEditPolicy());
-		installEditPolicy(EditPolicy.PRIMARY_DRAG_ROLE, new NonResizableEditPolicy() {
-
-			protected List createSelectionHandles() {
-				List handles = new ArrayList();
-				NonResizableHandleKit.addMoveHandle((GraphicalEditPart) getHost(), handles);
-				((MoveHandle) handles.get(0)).setBorder(null);
-				return handles;
-			}
-
-			public Command getCommand(Request request) {
-				return null;
-			}
-
-			public boolean understandsRequest(Request request) {
-				return false;
-			}
-		});
+		installEditPolicy(EditPolicy.SELECTION_FEEDBACK_ROLE,
+				new UrmlTextSelectionEditPolicy());
+		installEditPolicy(EditPolicy.DIRECT_EDIT_ROLE,
+				new LabelDirectEditPolicy());
+		installEditPolicy(EditPolicy.PRIMARY_DRAG_ROLE,
+				new URMLDiagramEditPart.NodeLabelDragPolicy());
 	}
 
 	/**
@@ -159,7 +147,8 @@
 	/**
 	 * @generated
 	 */
-	public void setLabel(org.unicase.ui.unicasecommon.diagram.figures.Label figure) {
+	public void setLabel(
+			org.unicase.ui.unicasecommon.diagram.figures.Label figure) {
 		unregisterVisuals();
 		setFigure(figure);
 		defaultText = getLabelTextHelper(figure);
@@ -170,6 +159,7 @@
 	/**
 	 * @generated
 	 */
+	@SuppressWarnings("rawtypes")
 	protected List getModelChildren() {
 		return Collections.EMPTY_LIST;
 	}
@@ -202,7 +192,9 @@
 		String text = null;
 		EObject parserElement = getParserElement();
 		if (parserElement != null && getParser() != null) {
-			text = getParser().getPrintString(new EObjectAdapter(parserElement), getParserOptions().intValue());
+			text = getParser().getPrintString(
+					new EObjectAdapter(parserElement),
+					getParserOptions().intValue());
 		}
 		if (text == null || text.length() == 0) {
 			text = defaultText;
@@ -232,7 +224,9 @@
 		if (getParserElement() == null || getParser() == null) {
 			return ""; //$NON-NLS-1$
 		}
-		return getParser().getEditString(new EObjectAdapter(getParserElement()), getParserOptions().intValue());
+		return getParser().getEditString(
+				new EObjectAdapter(getParserElement()),
+				getParserOptions().intValue());
 	}
 
 	/**
@@ -253,14 +247,20 @@
 					final EObject element = getParserElement();
 					final IParser parser = getParser();
 					try {
-						IParserEditStatus valid = (IParserEditStatus) getEditingDomain().runExclusive(
-							new RunnableWithResult.Impl() {
+						IParserEditStatus valid = (IParserEditStatus) getEditingDomain()
+								.runExclusive(
+										new RunnableWithResult.Impl<IParserEditStatus>() {
 
-								public void run() {
-									setResult(parser.isValidEditString(new EObjectAdapter(element), (String) value));
-								}
-							});
-						return valid.getCode() == ParserEditStatus.EDITABLE ? null : valid.getMessage();
+											public void run() {
+												setResult(parser
+														.isValidEditString(
+																new EObjectAdapter(
+																		element),
+																(String) value));
+											}
+										});
+						return valid.getCode() == ParserEditStatus.EDITABLE ? null
+								: valid.getMessage();
 					} catch (InterruptedException ie) {
 						ie.printStackTrace();
 					}
@@ -279,7 +279,8 @@
 		if (getParserElement() == null || getParser() == null) {
 			return null;
 		}
-		return getParser().getCompletionProcessor(new EObjectAdapter(getParserElement()));
+		return getParser().getCompletionProcessor(
+				new EObjectAdapter(getParserElement()));
 	}
 
 	/**
@@ -294,8 +295,12 @@
 	 */
 	public IParser getParser() {
 		if (parser == null) {
-			parser = UrmlParserProvider.getParser(UrmlElementTypes.Stakeholder_2002, getParserElement(),
-				UrmlVisualIDRegistry.getType(org.unicase.ui.diagram.urml.edit.parts.StakeholderNameEditPart.VISUAL_ID));
+			parser = UrmlParserProvider
+					.getParser(
+							UrmlElementTypes.Stakeholder_2002,
+							getParserElement(),
+							UrmlVisualIDRegistry
+									.getType(org.unicase.ui.diagram.urml.edit.parts.StakeholderNameEditPart.VISUAL_ID));
 		}
 		return parser;
 	}
@@ -305,8 +310,9 @@
 	 */
 	protected DirectEditManager getManager() {
 		if (manager == null) {
-			setManager(new TextDirectEditManager(this, TextDirectEditManager.getTextCellEditorClass(this),
-				UrmlEditPartFactory.getTextCellEditorLocator(this)));
+			setManager(new TextDirectEditManager(this,
+					TextDirectEditManager.getTextCellEditorClass(this),
+					UrmlEditPartFactory.getTextCellEditorLocator(this)));
 		}
 		return manager;
 	}
@@ -330,7 +336,8 @@
 	 */
 	protected void performDirectEdit(Point eventLocation) {
 		if (getManager().getClass() == TextDirectEditManager.class) {
-			((TextDirectEditManager) getManager()).show(eventLocation.getSWTPoint());
+			((TextDirectEditManager) getManager()).show(eventLocation
+					.getSWTPoint());
 		}
 	}
 
@@ -355,11 +362,15 @@
 
 				public void run() {
 					if (isActive() && isEditable()) {
-						if (theRequest.getExtendedData().get(RequestConstants.REQ_DIRECTEDIT_EXTENDEDDATA_INITIAL_CHAR) instanceof Character) {
-							Character initialChar = (Character) theRequest.getExtendedData().get(
-								RequestConstants.REQ_DIRECTEDIT_EXTENDEDDATA_INITIAL_CHAR);
+						if (theRequest
+								.getExtendedData()
+								.get(RequestConstants.REQ_DIRECTEDIT_EXTENDEDDATA_INITIAL_CHAR) instanceof Character) {
+							Character initialChar = (Character) theRequest
+									.getExtendedData()
+									.get(RequestConstants.REQ_DIRECTEDIT_EXTENDEDDATA_INITIAL_CHAR);
 							performDirectEdit(initialChar.charValue());
-						} else if ((theRequest instanceof DirectEditRequest) && (getEditText().equals(getLabelText()))) {
+						} else if ((theRequest instanceof DirectEditRequest)
+								&& (getEditText().equals(getLabelText()))) {
 							DirectEditRequest editRequest = (DirectEditRequest) theRequest;
 							performDirectEdit(editRequest.getLocation());
 						} else {
@@ -405,7 +416,8 @@
 	 * @generated
 	 */
 	protected void refreshUnderline() {
-		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(NotationPackage.eINSTANCE.getFontStyle());
+		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(
+				NotationPackage.eINSTANCE.getFontStyle());
 		if (style != null && getFigure() instanceof WrappingLabel) {
 			((WrappingLabel) getFigure()).setTextUnderline(style.isUnderline());
 		}
@@ -415,9 +427,11 @@
 	 * @generated
 	 */
 	protected void refreshStrikeThrough() {
-		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(NotationPackage.eINSTANCE.getFontStyle());
+		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(
+				NotationPackage.eINSTANCE.getFontStyle());
 		if (style != null && getFigure() instanceof WrappingLabel) {
-			((WrappingLabel) getFigure()).setTextStrikeThrough(style.isStrikeThrough());
+			((WrappingLabel) getFigure()).setTextStrikeThrough(style
+					.isStrikeThrough());
 		}
 	}
 
@@ -425,11 +439,13 @@
 	 * @generated
 	 */
 	protected void refreshFont() {
-		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(NotationPackage.eINSTANCE.getFontStyle());
+		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(
+				NotationPackage.eINSTANCE.getFontStyle());
 		if (style != null) {
-			FontData fontData = new FontData(style.getFontName(), style.getFontHeight(), (style.isBold() ? SWT.BOLD
-				: SWT.NORMAL)
-				| (style.isItalic() ? SWT.ITALIC : SWT.NORMAL));
+			FontData fontData = new FontData(style.getFontName(),
+					style.getFontHeight(), (style.isBold() ? SWT.BOLD
+							: SWT.NORMAL)
+							| (style.isItalic() ? SWT.ITALIC : SWT.NORMAL));
 			setFont(fontData);
 		}
 	}
@@ -447,9 +463,11 @@
 	protected void addSemanticListeners() {
 		if (getParser() instanceof ISemanticParser) {
 			EObject element = resolveSemanticElement();
-			parserElements = ((ISemanticParser) getParser()).getSemanticElementsBeingParsed(element);
+			parserElements = ((ISemanticParser) getParser())
+					.getSemanticElementsBeingParsed(element);
 			for (int i = 0; i < parserElements.size(); i++) {
-				addListenerFilter("SemanticModel" + i, this, (EObject) parserElements.get(i)); //$NON-NLS-1$
+				addListenerFilter(
+						"SemanticModel" + i, this, (EObject) parserElements.get(i)); //$NON-NLS-1$
 			}
 		} else {
 			super.addSemanticListeners();
@@ -515,17 +533,25 @@
 		if (NotationPackage.eINSTANCE.getFontStyle_FontColor().equals(feature)) {
 			Integer c = (Integer) event.getNewValue();
 			setFontColor(DiagramColorRegistry.getInstance().getColor(c));
-		} else if (NotationPackage.eINSTANCE.getFontStyle_Underline().equals(feature)) {
+		} else if (NotationPackage.eINSTANCE.getFontStyle_Underline().equals(
+				feature)) {
 			refreshUnderline();
-		} else if (NotationPackage.eINSTANCE.getFontStyle_StrikeThrough().equals(feature)) {
+		} else if (NotationPackage.eINSTANCE.getFontStyle_StrikeThrough()
+				.equals(feature)) {
 			refreshStrikeThrough();
-		} else if (NotationPackage.eINSTANCE.getFontStyle_FontHeight().equals(feature)
-			|| NotationPackage.eINSTANCE.getFontStyle_FontName().equals(feature)
-			|| NotationPackage.eINSTANCE.getFontStyle_Bold().equals(feature)
-			|| NotationPackage.eINSTANCE.getFontStyle_Italic().equals(feature)) {
+		} else if (NotationPackage.eINSTANCE.getFontStyle_FontHeight().equals(
+				feature)
+				|| NotationPackage.eINSTANCE.getFontStyle_FontName().equals(
+						feature)
+				|| NotationPackage.eINSTANCE.getFontStyle_Bold()
+						.equals(feature)
+				|| NotationPackage.eINSTANCE.getFontStyle_Italic().equals(
+						feature)) {
 			refreshFont();
 		} else {
-			if (getParser() != null && getParser().isAffectingEvent(event, getParserOptions().intValue())) {
+			if (getParser() != null
+					&& getParser().isAffectingEvent(event,
+							getParserOptions().intValue())) {
 				refreshLabel();
 			}
 			if (getParser() instanceof ISemanticParser) {
Index: src/org/unicase/ui/diagram/urml/edit/parts/ConsistsOfLabelEditPart.java
===================================================================
--- src/org/unicase/ui/diagram/urml/edit/parts/ConsistsOfLabelEditPart.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/edit/parts/ConsistsOfLabelEditPart.java	(working copy)
@@ -50,7 +50,8 @@
 /**
  * @generated
  */
-public class ConsistsOfLabelEditPart extends LabelEditPart implements ITextAwareEditPart {
+public class ConsistsOfLabelEditPart extends LabelEditPart implements
+		ITextAwareEditPart {
 
 	/**
 	 * @generated
@@ -70,7 +71,7 @@
 	/**
 	 * @generated
 	 */
-	private List parserElements;
+	private List<?> parserElements;
 
 	/**
 	 * @generated
@@ -81,8 +82,10 @@
 	 * @generated
 	 */
 	static {
-		registerSnapBackPosition(UrmlVisualIDRegistry
-			.getType(org.unicase.ui.diagram.urml.edit.parts.ConsistsOfLabelEditPart.VISUAL_ID), new Point(0, 20));
+		registerSnapBackPosition(
+				UrmlVisualIDRegistry
+						.getType(org.unicase.ui.diagram.urml.edit.parts.ConsistsOfLabelEditPart.VISUAL_ID),
+				new Point(0, 20));
 	}
 
 	/**
@@ -97,16 +100,12 @@
 	 */
 	protected void createDefaultEditPolicies() {
 		super.createDefaultEditPolicies();
-		installEditPolicy(EditPolicy.DIRECT_EDIT_ROLE, new LabelDirectEditPolicy());
-		installEditPolicy(EditPolicy.SELECTION_FEEDBACK_ROLE, new UrmlTextSelectionEditPolicy());
-		installEditPolicy(EditPolicy.PRIMARY_DRAG_ROLE, new NonResizableLabelEditPolicy() {
-
-			protected List createSelectionHandles() {
-				MoveHandle mh = new MoveHandle((GraphicalEditPart) getHost());
-				mh.setBorder(null);
-				return Collections.singletonList(mh);
-			}
-		});
+		installEditPolicy(EditPolicy.DIRECT_EDIT_ROLE,
+				new LabelDirectEditPolicy());
+		installEditPolicy(EditPolicy.SELECTION_FEEDBACK_ROLE,
+				new UrmlTextSelectionEditPolicy());
+		installEditPolicy(EditPolicy.PRIMARY_DRAG_ROLE,
+				new URMLDiagramEditPart.LinkLabelDragPolicy());
 	}
 
 	/**
@@ -174,6 +173,7 @@
 	/**
 	 * @generated
 	 */
+	@SuppressWarnings("rawtypes")
 	protected List getModelChildren() {
 		return Collections.EMPTY_LIST;
 	}
@@ -206,7 +206,9 @@
 		String text = null;
 		EObject parserElement = getParserElement();
 		if (parserElement != null && getParser() != null) {
-			text = getParser().getPrintString(new EObjectAdapter(parserElement), getParserOptions().intValue());
+			text = getParser().getPrintString(
+					new EObjectAdapter(parserElement),
+					getParserOptions().intValue());
 		}
 		if (text == null || text.length() == 0) {
 			text = defaultText;
@@ -236,7 +238,9 @@
 		if (getParserElement() == null || getParser() == null) {
 			return ""; //$NON-NLS-1$
 		}
-		return getParser().getEditString(new EObjectAdapter(getParserElement()), getParserOptions().intValue());
+		return getParser().getEditString(
+				new EObjectAdapter(getParserElement()),
+				getParserOptions().intValue());
 	}
 
 	/**
@@ -257,14 +261,20 @@
 					final EObject element = getParserElement();
 					final IParser parser = getParser();
 					try {
-						IParserEditStatus valid = (IParserEditStatus) getEditingDomain().runExclusive(
-							new RunnableWithResult.Impl() {
+						IParserEditStatus valid = (IParserEditStatus) getEditingDomain()
+								.runExclusive(
+										new RunnableWithResult.Impl<IParserEditStatus>() {
 
-								public void run() {
-									setResult(parser.isValidEditString(new EObjectAdapter(element), (String) value));
-								}
-							});
-						return valid.getCode() == ParserEditStatus.EDITABLE ? null : valid.getMessage();
+											public void run() {
+												setResult(parser
+														.isValidEditString(
+																new EObjectAdapter(
+																		element),
+																(String) value));
+											}
+										});
+						return valid.getCode() == ParserEditStatus.EDITABLE ? null
+								: valid.getMessage();
 					} catch (InterruptedException ie) {
 						ie.printStackTrace();
 					}
@@ -283,7 +293,8 @@
 		if (getParserElement() == null || getParser() == null) {
 			return null;
 		}
-		return getParser().getCompletionProcessor(new EObjectAdapter(getParserElement()));
+		return getParser().getCompletionProcessor(
+				new EObjectAdapter(getParserElement()));
 	}
 
 	/**
@@ -298,8 +309,12 @@
 	 */
 	public IParser getParser() {
 		if (parser == null) {
-			parser = UrmlParserProvider.getParser(UrmlElementTypes.ProductFeatures_4047, getParserElement(),
-				UrmlVisualIDRegistry.getType(org.unicase.ui.diagram.urml.edit.parts.ConsistsOfLabelEditPart.VISUAL_ID));
+			parser = UrmlParserProvider
+					.getParser(
+							UrmlElementTypes.ProductFeatures_4047,
+							getParserElement(),
+							UrmlVisualIDRegistry
+									.getType(org.unicase.ui.diagram.urml.edit.parts.ConsistsOfLabelEditPart.VISUAL_ID));
 		}
 		return parser;
 	}
@@ -309,8 +324,9 @@
 	 */
 	protected DirectEditManager getManager() {
 		if (manager == null) {
-			setManager(new TextDirectEditManager(this, TextDirectEditManager.getTextCellEditorClass(this),
-				UrmlEditPartFactory.getTextCellEditorLocator(this)));
+			setManager(new TextDirectEditManager(this,
+					TextDirectEditManager.getTextCellEditorClass(this),
+					UrmlEditPartFactory.getTextCellEditorLocator(this)));
 		}
 		return manager;
 	}
@@ -334,7 +350,8 @@
 	 */
 	protected void performDirectEdit(Point eventLocation) {
 		if (getManager().getClass() == TextDirectEditManager.class) {
-			((TextDirectEditManager) getManager()).show(eventLocation.getSWTPoint());
+			((TextDirectEditManager) getManager()).show(eventLocation
+					.getSWTPoint());
 		}
 	}
 
@@ -359,11 +376,15 @@
 
 				public void run() {
 					if (isActive() && isEditable()) {
-						if (theRequest.getExtendedData().get(RequestConstants.REQ_DIRECTEDIT_EXTENDEDDATA_INITIAL_CHAR) instanceof Character) {
-							Character initialChar = (Character) theRequest.getExtendedData().get(
-								RequestConstants.REQ_DIRECTEDIT_EXTENDEDDATA_INITIAL_CHAR);
+						if (theRequest
+								.getExtendedData()
+								.get(RequestConstants.REQ_DIRECTEDIT_EXTENDEDDATA_INITIAL_CHAR) instanceof Character) {
+							Character initialChar = (Character) theRequest
+									.getExtendedData()
+									.get(RequestConstants.REQ_DIRECTEDIT_EXTENDEDDATA_INITIAL_CHAR);
 							performDirectEdit(initialChar.charValue());
-						} else if ((theRequest instanceof DirectEditRequest) && (getEditText().equals(getLabelText()))) {
+						} else if ((theRequest instanceof DirectEditRequest)
+								&& (getEditText().equals(getLabelText()))) {
 							DirectEditRequest editRequest = (DirectEditRequest) theRequest;
 							performDirectEdit(editRequest.getLocation());
 						} else {
@@ -409,7 +430,8 @@
 	 * @generated
 	 */
 	protected void refreshUnderline() {
-		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(NotationPackage.eINSTANCE.getFontStyle());
+		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(
+				NotationPackage.eINSTANCE.getFontStyle());
 		if (style != null && getFigure() instanceof WrappingLabel) {
 			((WrappingLabel) getFigure()).setTextUnderline(style.isUnderline());
 		}
@@ -419,9 +441,11 @@
 	 * @generated
 	 */
 	protected void refreshStrikeThrough() {
-		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(NotationPackage.eINSTANCE.getFontStyle());
+		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(
+				NotationPackage.eINSTANCE.getFontStyle());
 		if (style != null && getFigure() instanceof WrappingLabel) {
-			((WrappingLabel) getFigure()).setTextStrikeThrough(style.isStrikeThrough());
+			((WrappingLabel) getFigure()).setTextStrikeThrough(style
+					.isStrikeThrough());
 		}
 	}
 
@@ -429,11 +453,13 @@
 	 * @generated
 	 */
 	protected void refreshFont() {
-		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(NotationPackage.eINSTANCE.getFontStyle());
+		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(
+				NotationPackage.eINSTANCE.getFontStyle());
 		if (style != null) {
-			FontData fontData = new FontData(style.getFontName(), style.getFontHeight(), (style.isBold() ? SWT.BOLD
-				: SWT.NORMAL)
-				| (style.isItalic() ? SWT.ITALIC : SWT.NORMAL));
+			FontData fontData = new FontData(style.getFontName(),
+					style.getFontHeight(), (style.isBold() ? SWT.BOLD
+							: SWT.NORMAL)
+							| (style.isItalic() ? SWT.ITALIC : SWT.NORMAL));
 			setFont(fontData);
 		}
 	}
@@ -451,9 +477,11 @@
 	protected void addSemanticListeners() {
 		if (getParser() instanceof ISemanticParser) {
 			EObject element = resolveSemanticElement();
-			parserElements = ((ISemanticParser) getParser()).getSemanticElementsBeingParsed(element);
+			parserElements = ((ISemanticParser) getParser())
+					.getSemanticElementsBeingParsed(element);
 			for (int i = 0; i < parserElements.size(); i++) {
-				addListenerFilter("SemanticModel" + i, this, (EObject) parserElements.get(i)); //$NON-NLS-1$
+				addListenerFilter(
+						"SemanticModel" + i, this, (EObject) parserElements.get(i)); //$NON-NLS-1$
 			}
 		} else {
 			super.addSemanticListeners();
@@ -503,17 +531,25 @@
 		if (NotationPackage.eINSTANCE.getFontStyle_FontColor().equals(feature)) {
 			Integer c = (Integer) event.getNewValue();
 			setFontColor(DiagramColorRegistry.getInstance().getColor(c));
-		} else if (NotationPackage.eINSTANCE.getFontStyle_Underline().equals(feature)) {
+		} else if (NotationPackage.eINSTANCE.getFontStyle_Underline().equals(
+				feature)) {
 			refreshUnderline();
-		} else if (NotationPackage.eINSTANCE.getFontStyle_StrikeThrough().equals(feature)) {
+		} else if (NotationPackage.eINSTANCE.getFontStyle_StrikeThrough()
+				.equals(feature)) {
 			refreshStrikeThrough();
-		} else if (NotationPackage.eINSTANCE.getFontStyle_FontHeight().equals(feature)
-			|| NotationPackage.eINSTANCE.getFontStyle_FontName().equals(feature)
-			|| NotationPackage.eINSTANCE.getFontStyle_Bold().equals(feature)
-			|| NotationPackage.eINSTANCE.getFontStyle_Italic().equals(feature)) {
+		} else if (NotationPackage.eINSTANCE.getFontStyle_FontHeight().equals(
+				feature)
+				|| NotationPackage.eINSTANCE.getFontStyle_FontName().equals(
+						feature)
+				|| NotationPackage.eINSTANCE.getFontStyle_Bold()
+						.equals(feature)
+				|| NotationPackage.eINSTANCE.getFontStyle_Italic().equals(
+						feature)) {
 			refreshFont();
 		} else {
-			if (getParser() != null && getParser().isAffectingEvent(event, getParserOptions().intValue())) {
+			if (getParser() != null
+					&& getParser().isAffectingEvent(event,
+							getParserOptions().intValue())) {
 				refreshLabel();
 			}
 			if (getParser() instanceof ISemanticParser) {
Index: src/org/unicase/ui/diagram/urml/edit/parts/ExpressesLabelEditPart.java
===================================================================
--- src/org/unicase/ui/diagram/urml/edit/parts/ExpressesLabelEditPart.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/edit/parts/ExpressesLabelEditPart.java	(working copy)
@@ -50,7 +50,8 @@
 /**
  * @generated
  */
-public class ExpressesLabelEditPart extends LabelEditPart implements ITextAwareEditPart {
+public class ExpressesLabelEditPart extends LabelEditPart implements
+		ITextAwareEditPart {
 
 	/**
 	 * @generated
@@ -70,7 +71,7 @@
 	/**
 	 * @generated
 	 */
-	private List parserElements;
+	private List<?> parserElements;
 
 	/**
 	 * @generated
@@ -81,8 +82,10 @@
 	 * @generated
 	 */
 	static {
-		registerSnapBackPosition(UrmlVisualIDRegistry
-			.getType(org.unicase.ui.diagram.urml.edit.parts.ExpressesLabelEditPart.VISUAL_ID), new Point(0, 20));
+		registerSnapBackPosition(
+				UrmlVisualIDRegistry
+						.getType(org.unicase.ui.diagram.urml.edit.parts.ExpressesLabelEditPart.VISUAL_ID),
+				new Point(0, 20));
 	}
 
 	/**
@@ -97,16 +100,12 @@
 	 */
 	protected void createDefaultEditPolicies() {
 		super.createDefaultEditPolicies();
-		installEditPolicy(EditPolicy.DIRECT_EDIT_ROLE, new LabelDirectEditPolicy());
-		installEditPolicy(EditPolicy.SELECTION_FEEDBACK_ROLE, new UrmlTextSelectionEditPolicy());
-		installEditPolicy(EditPolicy.PRIMARY_DRAG_ROLE, new NonResizableLabelEditPolicy() {
-
-			protected List createSelectionHandles() {
-				MoveHandle mh = new MoveHandle((GraphicalEditPart) getHost());
-				mh.setBorder(null);
-				return Collections.singletonList(mh);
-			}
-		});
+		installEditPolicy(EditPolicy.DIRECT_EDIT_ROLE,
+				new LabelDirectEditPolicy());
+		installEditPolicy(EditPolicy.SELECTION_FEEDBACK_ROLE,
+				new UrmlTextSelectionEditPolicy());
+		installEditPolicy(EditPolicy.PRIMARY_DRAG_ROLE,
+				new URMLDiagramEditPart.LinkLabelDragPolicy());
 	}
 
 	/**
@@ -174,6 +173,7 @@
 	/**
 	 * @generated
 	 */
+	@SuppressWarnings("rawtypes")
 	protected List getModelChildren() {
 		return Collections.EMPTY_LIST;
 	}
@@ -206,7 +206,9 @@
 		String text = null;
 		EObject parserElement = getParserElement();
 		if (parserElement != null && getParser() != null) {
-			text = getParser().getPrintString(new EObjectAdapter(parserElement), getParserOptions().intValue());
+			text = getParser().getPrintString(
+					new EObjectAdapter(parserElement),
+					getParserOptions().intValue());
 		}
 		if (text == null || text.length() == 0) {
 			text = defaultText;
@@ -236,7 +238,9 @@
 		if (getParserElement() == null || getParser() == null) {
 			return ""; //$NON-NLS-1$
 		}
-		return getParser().getEditString(new EObjectAdapter(getParserElement()), getParserOptions().intValue());
+		return getParser().getEditString(
+				new EObjectAdapter(getParserElement()),
+				getParserOptions().intValue());
 	}
 
 	/**
@@ -257,14 +261,20 @@
 					final EObject element = getParserElement();
 					final IParser parser = getParser();
 					try {
-						IParserEditStatus valid = (IParserEditStatus) getEditingDomain().runExclusive(
-							new RunnableWithResult.Impl() {
+						IParserEditStatus valid = (IParserEditStatus) getEditingDomain()
+								.runExclusive(
+										new RunnableWithResult.Impl<IParserEditStatus>() {
 
-								public void run() {
-									setResult(parser.isValidEditString(new EObjectAdapter(element), (String) value));
-								}
-							});
-						return valid.getCode() == ParserEditStatus.EDITABLE ? null : valid.getMessage();
+											public void run() {
+												setResult(parser
+														.isValidEditString(
+																new EObjectAdapter(
+																		element),
+																(String) value));
+											}
+										});
+						return valid.getCode() == ParserEditStatus.EDITABLE ? null
+								: valid.getMessage();
 					} catch (InterruptedException ie) {
 						ie.printStackTrace();
 					}
@@ -283,7 +293,8 @@
 		if (getParserElement() == null || getParser() == null) {
 			return null;
 		}
-		return getParser().getCompletionProcessor(new EObjectAdapter(getParserElement()));
+		return getParser().getCompletionProcessor(
+				new EObjectAdapter(getParserElement()));
 	}
 
 	/**
@@ -298,8 +309,12 @@
 	 */
 	public IParser getParser() {
 		if (parser == null) {
-			parser = UrmlParserProvider.getParser(UrmlElementTypes.StakeholderGoals_4008, getParserElement(),
-				UrmlVisualIDRegistry.getType(org.unicase.ui.diagram.urml.edit.parts.ExpressesLabelEditPart.VISUAL_ID));
+			parser = UrmlParserProvider
+					.getParser(
+							UrmlElementTypes.StakeholderGoals_4008,
+							getParserElement(),
+							UrmlVisualIDRegistry
+									.getType(org.unicase.ui.diagram.urml.edit.parts.ExpressesLabelEditPart.VISUAL_ID));
 		}
 		return parser;
 	}
@@ -309,8 +324,9 @@
 	 */
 	protected DirectEditManager getManager() {
 		if (manager == null) {
-			setManager(new TextDirectEditManager(this, TextDirectEditManager.getTextCellEditorClass(this),
-				UrmlEditPartFactory.getTextCellEditorLocator(this)));
+			setManager(new TextDirectEditManager(this,
+					TextDirectEditManager.getTextCellEditorClass(this),
+					UrmlEditPartFactory.getTextCellEditorLocator(this)));
 		}
 		return manager;
 	}
@@ -334,7 +350,8 @@
 	 */
 	protected void performDirectEdit(Point eventLocation) {
 		if (getManager().getClass() == TextDirectEditManager.class) {
-			((TextDirectEditManager) getManager()).show(eventLocation.getSWTPoint());
+			((TextDirectEditManager) getManager()).show(eventLocation
+					.getSWTPoint());
 		}
 	}
 
@@ -359,11 +376,15 @@
 
 				public void run() {
 					if (isActive() && isEditable()) {
-						if (theRequest.getExtendedData().get(RequestConstants.REQ_DIRECTEDIT_EXTENDEDDATA_INITIAL_CHAR) instanceof Character) {
-							Character initialChar = (Character) theRequest.getExtendedData().get(
-								RequestConstants.REQ_DIRECTEDIT_EXTENDEDDATA_INITIAL_CHAR);
+						if (theRequest
+								.getExtendedData()
+								.get(RequestConstants.REQ_DIRECTEDIT_EXTENDEDDATA_INITIAL_CHAR) instanceof Character) {
+							Character initialChar = (Character) theRequest
+									.getExtendedData()
+									.get(RequestConstants.REQ_DIRECTEDIT_EXTENDEDDATA_INITIAL_CHAR);
 							performDirectEdit(initialChar.charValue());
-						} else if ((theRequest instanceof DirectEditRequest) && (getEditText().equals(getLabelText()))) {
+						} else if ((theRequest instanceof DirectEditRequest)
+								&& (getEditText().equals(getLabelText()))) {
 							DirectEditRequest editRequest = (DirectEditRequest) theRequest;
 							performDirectEdit(editRequest.getLocation());
 						} else {
@@ -409,7 +430,8 @@
 	 * @generated
 	 */
 	protected void refreshUnderline() {
-		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(NotationPackage.eINSTANCE.getFontStyle());
+		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(
+				NotationPackage.eINSTANCE.getFontStyle());
 		if (style != null && getFigure() instanceof WrappingLabel) {
 			((WrappingLabel) getFigure()).setTextUnderline(style.isUnderline());
 		}
@@ -419,9 +441,11 @@
 	 * @generated
 	 */
 	protected void refreshStrikeThrough() {
-		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(NotationPackage.eINSTANCE.getFontStyle());
+		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(
+				NotationPackage.eINSTANCE.getFontStyle());
 		if (style != null && getFigure() instanceof WrappingLabel) {
-			((WrappingLabel) getFigure()).setTextStrikeThrough(style.isStrikeThrough());
+			((WrappingLabel) getFigure()).setTextStrikeThrough(style
+					.isStrikeThrough());
 		}
 	}
 
@@ -429,11 +453,13 @@
 	 * @generated
 	 */
 	protected void refreshFont() {
-		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(NotationPackage.eINSTANCE.getFontStyle());
+		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(
+				NotationPackage.eINSTANCE.getFontStyle());
 		if (style != null) {
-			FontData fontData = new FontData(style.getFontName(), style.getFontHeight(), (style.isBold() ? SWT.BOLD
-				: SWT.NORMAL)
-				| (style.isItalic() ? SWT.ITALIC : SWT.NORMAL));
+			FontData fontData = new FontData(style.getFontName(),
+					style.getFontHeight(), (style.isBold() ? SWT.BOLD
+							: SWT.NORMAL)
+							| (style.isItalic() ? SWT.ITALIC : SWT.NORMAL));
 			setFont(fontData);
 		}
 	}
@@ -451,9 +477,11 @@
 	protected void addSemanticListeners() {
 		if (getParser() instanceof ISemanticParser) {
 			EObject element = resolveSemanticElement();
-			parserElements = ((ISemanticParser) getParser()).getSemanticElementsBeingParsed(element);
+			parserElements = ((ISemanticParser) getParser())
+					.getSemanticElementsBeingParsed(element);
 			for (int i = 0; i < parserElements.size(); i++) {
-				addListenerFilter("SemanticModel" + i, this, (EObject) parserElements.get(i)); //$NON-NLS-1$
+				addListenerFilter(
+						"SemanticModel" + i, this, (EObject) parserElements.get(i)); //$NON-NLS-1$
 			}
 		} else {
 			super.addSemanticListeners();
@@ -503,17 +531,25 @@
 		if (NotationPackage.eINSTANCE.getFontStyle_FontColor().equals(feature)) {
 			Integer c = (Integer) event.getNewValue();
 			setFontColor(DiagramColorRegistry.getInstance().getColor(c));
-		} else if (NotationPackage.eINSTANCE.getFontStyle_Underline().equals(feature)) {
+		} else if (NotationPackage.eINSTANCE.getFontStyle_Underline().equals(
+				feature)) {
 			refreshUnderline();
-		} else if (NotationPackage.eINSTANCE.getFontStyle_StrikeThrough().equals(feature)) {
+		} else if (NotationPackage.eINSTANCE.getFontStyle_StrikeThrough()
+				.equals(feature)) {
 			refreshStrikeThrough();
-		} else if (NotationPackage.eINSTANCE.getFontStyle_FontHeight().equals(feature)
-			|| NotationPackage.eINSTANCE.getFontStyle_FontName().equals(feature)
-			|| NotationPackage.eINSTANCE.getFontStyle_Bold().equals(feature)
-			|| NotationPackage.eINSTANCE.getFontStyle_Italic().equals(feature)) {
+		} else if (NotationPackage.eINSTANCE.getFontStyle_FontHeight().equals(
+				feature)
+				|| NotationPackage.eINSTANCE.getFontStyle_FontName().equals(
+						feature)
+				|| NotationPackage.eINSTANCE.getFontStyle_Bold()
+						.equals(feature)
+				|| NotationPackage.eINSTANCE.getFontStyle_Italic().equals(
+						feature)) {
 			refreshFont();
 		} else {
-			if (getParser() != null && getParser().isAffectingEvent(event, getParserOptions().intValue())) {
+			if (getParser() != null
+					&& getParser().isAffectingEvent(event,
+							getParserOptions().intValue())) {
 				refreshLabel();
 			}
 			if (getParser() instanceof ISemanticParser) {
Index: src/org/unicase/ui/diagram/urml/edit/parts/IsRefinedLabel4EditPart.java
===================================================================
--- src/org/unicase/ui/diagram/urml/edit/parts/IsRefinedLabel4EditPart.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/edit/parts/IsRefinedLabel4EditPart.java	(working copy)
@@ -50,7 +50,8 @@
 /**
  * @generated
  */
-public class IsRefinedLabel4EditPart extends LabelEditPart implements ITextAwareEditPart {
+public class IsRefinedLabel4EditPart extends LabelEditPart implements
+		ITextAwareEditPart {
 
 	/**
 	 * @generated
@@ -70,7 +71,7 @@
 	/**
 	 * @generated
 	 */
-	private List parserElements;
+	private List<?> parserElements;
 
 	/**
 	 * @generated
@@ -81,8 +82,10 @@
 	 * @generated
 	 */
 	static {
-		registerSnapBackPosition(UrmlVisualIDRegistry
-			.getType(org.unicase.ui.diagram.urml.edit.parts.IsRefinedLabel4EditPart.VISUAL_ID), new Point(0, 20));
+		registerSnapBackPosition(
+				UrmlVisualIDRegistry
+						.getType(org.unicase.ui.diagram.urml.edit.parts.IsRefinedLabel4EditPart.VISUAL_ID),
+				new Point(0, 20));
 	}
 
 	/**
@@ -97,16 +100,12 @@
 	 */
 	protected void createDefaultEditPolicies() {
 		super.createDefaultEditPolicies();
-		installEditPolicy(EditPolicy.DIRECT_EDIT_ROLE, new LabelDirectEditPolicy());
-		installEditPolicy(EditPolicy.SELECTION_FEEDBACK_ROLE, new UrmlTextSelectionEditPolicy());
-		installEditPolicy(EditPolicy.PRIMARY_DRAG_ROLE, new NonResizableLabelEditPolicy() {
-
-			protected List createSelectionHandles() {
-				MoveHandle mh = new MoveHandle((GraphicalEditPart) getHost());
-				mh.setBorder(null);
-				return Collections.singletonList(mh);
-			}
-		});
+		installEditPolicy(EditPolicy.DIRECT_EDIT_ROLE,
+				new LabelDirectEditPolicy());
+		installEditPolicy(EditPolicy.SELECTION_FEEDBACK_ROLE,
+				new UrmlTextSelectionEditPolicy());
+		installEditPolicy(EditPolicy.PRIMARY_DRAG_ROLE,
+				new URMLDiagramEditPart.LinkLabelDragPolicy());
 	}
 
 	/**
@@ -174,6 +173,7 @@
 	/**
 	 * @generated
 	 */
+	@SuppressWarnings("rawtypes")
 	protected List getModelChildren() {
 		return Collections.EMPTY_LIST;
 	}
@@ -206,7 +206,9 @@
 		String text = null;
 		EObject parserElement = getParserElement();
 		if (parserElement != null && getParser() != null) {
-			text = getParser().getPrintString(new EObjectAdapter(parserElement), getParserOptions().intValue());
+			text = getParser().getPrintString(
+					new EObjectAdapter(parserElement),
+					getParserOptions().intValue());
 		}
 		if (text == null || text.length() == 0) {
 			text = defaultText;
@@ -236,7 +238,9 @@
 		if (getParserElement() == null || getParser() == null) {
 			return ""; //$NON-NLS-1$
 		}
-		return getParser().getEditString(new EObjectAdapter(getParserElement()), getParserOptions().intValue());
+		return getParser().getEditString(
+				new EObjectAdapter(getParserElement()),
+				getParserOptions().intValue());
 	}
 
 	/**
@@ -257,14 +261,20 @@
 					final EObject element = getParserElement();
 					final IParser parser = getParser();
 					try {
-						IParserEditStatus valid = (IParserEditStatus) getEditingDomain().runExclusive(
-							new RunnableWithResult.Impl() {
+						IParserEditStatus valid = (IParserEditStatus) getEditingDomain()
+								.runExclusive(
+										new RunnableWithResult.Impl<IParserEditStatus>() {
 
-								public void run() {
-									setResult(parser.isValidEditString(new EObjectAdapter(element), (String) value));
-								}
-							});
-						return valid.getCode() == ParserEditStatus.EDITABLE ? null : valid.getMessage();
+											public void run() {
+												setResult(parser
+														.isValidEditString(
+																new EObjectAdapter(
+																		element),
+																(String) value));
+											}
+										});
+						return valid.getCode() == ParserEditStatus.EDITABLE ? null
+								: valid.getMessage();
 					} catch (InterruptedException ie) {
 						ie.printStackTrace();
 					}
@@ -283,7 +293,8 @@
 		if (getParserElement() == null || getParser() == null) {
 			return null;
 		}
-		return getParser().getCompletionProcessor(new EObjectAdapter(getParserElement()));
+		return getParser().getCompletionProcessor(
+				new EObjectAdapter(getParserElement()));
 	}
 
 	/**
@@ -298,9 +309,12 @@
 	 */
 	public IParser getParser() {
 		if (parser == null) {
-			parser = UrmlParserProvider.getParser(UrmlElementTypes.FunctionalRequirementSubFunctionalRequirements_4044,
-				getParserElement(), UrmlVisualIDRegistry
-					.getType(org.unicase.ui.diagram.urml.edit.parts.IsRefinedLabel4EditPart.VISUAL_ID));
+			parser = UrmlParserProvider
+					.getParser(
+							UrmlElementTypes.FunctionalRequirementSubFunctionalRequirements_4044,
+							getParserElement(),
+							UrmlVisualIDRegistry
+									.getType(org.unicase.ui.diagram.urml.edit.parts.IsRefinedLabel4EditPart.VISUAL_ID));
 		}
 		return parser;
 	}
@@ -310,8 +324,9 @@
 	 */
 	protected DirectEditManager getManager() {
 		if (manager == null) {
-			setManager(new TextDirectEditManager(this, TextDirectEditManager.getTextCellEditorClass(this),
-				UrmlEditPartFactory.getTextCellEditorLocator(this)));
+			setManager(new TextDirectEditManager(this,
+					TextDirectEditManager.getTextCellEditorClass(this),
+					UrmlEditPartFactory.getTextCellEditorLocator(this)));
 		}
 		return manager;
 	}
@@ -335,7 +350,8 @@
 	 */
 	protected void performDirectEdit(Point eventLocation) {
 		if (getManager().getClass() == TextDirectEditManager.class) {
-			((TextDirectEditManager) getManager()).show(eventLocation.getSWTPoint());
+			((TextDirectEditManager) getManager()).show(eventLocation
+					.getSWTPoint());
 		}
 	}
 
@@ -360,11 +376,15 @@
 
 				public void run() {
 					if (isActive() && isEditable()) {
-						if (theRequest.getExtendedData().get(RequestConstants.REQ_DIRECTEDIT_EXTENDEDDATA_INITIAL_CHAR) instanceof Character) {
-							Character initialChar = (Character) theRequest.getExtendedData().get(
-								RequestConstants.REQ_DIRECTEDIT_EXTENDEDDATA_INITIAL_CHAR);
+						if (theRequest
+								.getExtendedData()
+								.get(RequestConstants.REQ_DIRECTEDIT_EXTENDEDDATA_INITIAL_CHAR) instanceof Character) {
+							Character initialChar = (Character) theRequest
+									.getExtendedData()
+									.get(RequestConstants.REQ_DIRECTEDIT_EXTENDEDDATA_INITIAL_CHAR);
 							performDirectEdit(initialChar.charValue());
-						} else if ((theRequest instanceof DirectEditRequest) && (getEditText().equals(getLabelText()))) {
+						} else if ((theRequest instanceof DirectEditRequest)
+								&& (getEditText().equals(getLabelText()))) {
 							DirectEditRequest editRequest = (DirectEditRequest) theRequest;
 							performDirectEdit(editRequest.getLocation());
 						} else {
@@ -410,7 +430,8 @@
 	 * @generated
 	 */
 	protected void refreshUnderline() {
-		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(NotationPackage.eINSTANCE.getFontStyle());
+		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(
+				NotationPackage.eINSTANCE.getFontStyle());
 		if (style != null && getFigure() instanceof WrappingLabel) {
 			((WrappingLabel) getFigure()).setTextUnderline(style.isUnderline());
 		}
@@ -420,9 +441,11 @@
 	 * @generated
 	 */
 	protected void refreshStrikeThrough() {
-		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(NotationPackage.eINSTANCE.getFontStyle());
+		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(
+				NotationPackage.eINSTANCE.getFontStyle());
 		if (style != null && getFigure() instanceof WrappingLabel) {
-			((WrappingLabel) getFigure()).setTextStrikeThrough(style.isStrikeThrough());
+			((WrappingLabel) getFigure()).setTextStrikeThrough(style
+					.isStrikeThrough());
 		}
 	}
 
@@ -430,11 +453,13 @@
 	 * @generated
 	 */
 	protected void refreshFont() {
-		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(NotationPackage.eINSTANCE.getFontStyle());
+		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(
+				NotationPackage.eINSTANCE.getFontStyle());
 		if (style != null) {
-			FontData fontData = new FontData(style.getFontName(), style.getFontHeight(), (style.isBold() ? SWT.BOLD
-				: SWT.NORMAL)
-				| (style.isItalic() ? SWT.ITALIC : SWT.NORMAL));
+			FontData fontData = new FontData(style.getFontName(),
+					style.getFontHeight(), (style.isBold() ? SWT.BOLD
+							: SWT.NORMAL)
+							| (style.isItalic() ? SWT.ITALIC : SWT.NORMAL));
 			setFont(fontData);
 		}
 	}
@@ -452,9 +477,11 @@
 	protected void addSemanticListeners() {
 		if (getParser() instanceof ISemanticParser) {
 			EObject element = resolveSemanticElement();
-			parserElements = ((ISemanticParser) getParser()).getSemanticElementsBeingParsed(element);
+			parserElements = ((ISemanticParser) getParser())
+					.getSemanticElementsBeingParsed(element);
 			for (int i = 0; i < parserElements.size(); i++) {
-				addListenerFilter("SemanticModel" + i, this, (EObject) parserElements.get(i)); //$NON-NLS-1$
+				addListenerFilter(
+						"SemanticModel" + i, this, (EObject) parserElements.get(i)); //$NON-NLS-1$
 			}
 		} else {
 			super.addSemanticListeners();
@@ -504,17 +531,25 @@
 		if (NotationPackage.eINSTANCE.getFontStyle_FontColor().equals(feature)) {
 			Integer c = (Integer) event.getNewValue();
 			setFontColor(DiagramColorRegistry.getInstance().getColor(c));
-		} else if (NotationPackage.eINSTANCE.getFontStyle_Underline().equals(feature)) {
+		} else if (NotationPackage.eINSTANCE.getFontStyle_Underline().equals(
+				feature)) {
 			refreshUnderline();
-		} else if (NotationPackage.eINSTANCE.getFontStyle_StrikeThrough().equals(feature)) {
+		} else if (NotationPackage.eINSTANCE.getFontStyle_StrikeThrough()
+				.equals(feature)) {
 			refreshStrikeThrough();
-		} else if (NotationPackage.eINSTANCE.getFontStyle_FontHeight().equals(feature)
-			|| NotationPackage.eINSTANCE.getFontStyle_FontName().equals(feature)
-			|| NotationPackage.eINSTANCE.getFontStyle_Bold().equals(feature)
-			|| NotationPackage.eINSTANCE.getFontStyle_Italic().equals(feature)) {
+		} else if (NotationPackage.eINSTANCE.getFontStyle_FontHeight().equals(
+				feature)
+				|| NotationPackage.eINSTANCE.getFontStyle_FontName().equals(
+						feature)
+				|| NotationPackage.eINSTANCE.getFontStyle_Bold()
+						.equals(feature)
+				|| NotationPackage.eINSTANCE.getFontStyle_Italic().equals(
+						feature)) {
 			refreshFont();
 		} else {
-			if (getParser() != null && getParser().isAffectingEvent(event, getParserOptions().intValue())) {
+			if (getParser() != null
+					&& getParser().isAffectingEvent(event,
+							getParserOptions().intValue())) {
 				refreshLabel();
 			}
 			if (getParser() instanceof ISemanticParser) {
Index: src/org/unicase/ui/diagram/urml/edit/parts/RequiresLabelEditPart.java
===================================================================
--- src/org/unicase/ui/diagram/urml/edit/parts/RequiresLabelEditPart.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/edit/parts/RequiresLabelEditPart.java	(working copy)
@@ -50,7 +50,8 @@
 /**
  * @generated
  */
-public class RequiresLabelEditPart extends LabelEditPart implements ITextAwareEditPart {
+public class RequiresLabelEditPart extends LabelEditPart implements
+		ITextAwareEditPart {
 
 	/**
 	 * @generated
@@ -70,7 +71,7 @@
 	/**
 	 * @generated
 	 */
-	private List parserElements;
+	private List<?> parserElements;
 
 	/**
 	 * @generated
@@ -81,8 +82,10 @@
 	 * @generated
 	 */
 	static {
-		registerSnapBackPosition(UrmlVisualIDRegistry
-			.getType(org.unicase.ui.diagram.urml.edit.parts.RequiresLabelEditPart.VISUAL_ID), new Point(0, 20));
+		registerSnapBackPosition(
+				UrmlVisualIDRegistry
+						.getType(org.unicase.ui.diagram.urml.edit.parts.RequiresLabelEditPart.VISUAL_ID),
+				new Point(0, 20));
 	}
 
 	/**
@@ -97,16 +100,12 @@
 	 */
 	protected void createDefaultEditPolicies() {
 		super.createDefaultEditPolicies();
-		installEditPolicy(EditPolicy.DIRECT_EDIT_ROLE, new LabelDirectEditPolicy());
-		installEditPolicy(EditPolicy.SELECTION_FEEDBACK_ROLE, new UrmlTextSelectionEditPolicy());
-		installEditPolicy(EditPolicy.PRIMARY_DRAG_ROLE, new NonResizableLabelEditPolicy() {
-
-			protected List createSelectionHandles() {
-				MoveHandle mh = new MoveHandle((GraphicalEditPart) getHost());
-				mh.setBorder(null);
-				return Collections.singletonList(mh);
-			}
-		});
+		installEditPolicy(EditPolicy.DIRECT_EDIT_ROLE,
+				new LabelDirectEditPolicy());
+		installEditPolicy(EditPolicy.SELECTION_FEEDBACK_ROLE,
+				new UrmlTextSelectionEditPolicy());
+		installEditPolicy(EditPolicy.PRIMARY_DRAG_ROLE,
+				new URMLDiagramEditPart.LinkLabelDragPolicy());
 	}
 
 	/**
@@ -174,6 +173,7 @@
 	/**
 	 * @generated
 	 */
+	@SuppressWarnings("rawtypes")
 	protected List getModelChildren() {
 		return Collections.EMPTY_LIST;
 	}
@@ -206,7 +206,9 @@
 		String text = null;
 		EObject parserElement = getParserElement();
 		if (parserElement != null && getParser() != null) {
-			text = getParser().getPrintString(new EObjectAdapter(parserElement), getParserOptions().intValue());
+			text = getParser().getPrintString(
+					new EObjectAdapter(parserElement),
+					getParserOptions().intValue());
 		}
 		if (text == null || text.length() == 0) {
 			text = defaultText;
@@ -236,7 +238,9 @@
 		if (getParserElement() == null || getParser() == null) {
 			return ""; //$NON-NLS-1$
 		}
-		return getParser().getEditString(new EObjectAdapter(getParserElement()), getParserOptions().intValue());
+		return getParser().getEditString(
+				new EObjectAdapter(getParserElement()),
+				getParserOptions().intValue());
 	}
 
 	/**
@@ -257,14 +261,20 @@
 					final EObject element = getParserElement();
 					final IParser parser = getParser();
 					try {
-						IParserEditStatus valid = (IParserEditStatus) getEditingDomain().runExclusive(
-							new RunnableWithResult.Impl() {
+						IParserEditStatus valid = (IParserEditStatus) getEditingDomain()
+								.runExclusive(
+										new RunnableWithResult.Impl<IParserEditStatus>() {
 
-								public void run() {
-									setResult(parser.isValidEditString(new EObjectAdapter(element), (String) value));
-								}
-							});
-						return valid.getCode() == ParserEditStatus.EDITABLE ? null : valid.getMessage();
+											public void run() {
+												setResult(parser
+														.isValidEditString(
+																new EObjectAdapter(
+																		element),
+																(String) value));
+											}
+										});
+						return valid.getCode() == ParserEditStatus.EDITABLE ? null
+								: valid.getMessage();
 					} catch (InterruptedException ie) {
 						ie.printStackTrace();
 					}
@@ -283,7 +293,8 @@
 		if (getParserElement() == null || getParser() == null) {
 			return null;
 		}
-		return getParser().getCompletionProcessor(new EObjectAdapter(getParserElement()));
+		return getParser().getCompletionProcessor(
+				new EObjectAdapter(getParserElement()));
 	}
 
 	/**
@@ -298,9 +309,12 @@
 	 */
 	public IParser getParser() {
 		if (parser == null) {
-			parser = UrmlParserProvider.getParser(UrmlElementTypes.AbstractFeatureRequiredFeatures_4045,
-				getParserElement(), UrmlVisualIDRegistry
-					.getType(org.unicase.ui.diagram.urml.edit.parts.RequiresLabelEditPart.VISUAL_ID));
+			parser = UrmlParserProvider
+					.getParser(
+							UrmlElementTypes.AbstractFeatureRequiredFeatures_4045,
+							getParserElement(),
+							UrmlVisualIDRegistry
+									.getType(org.unicase.ui.diagram.urml.edit.parts.RequiresLabelEditPart.VISUAL_ID));
 		}
 		return parser;
 	}
@@ -310,8 +324,9 @@
 	 */
 	protected DirectEditManager getManager() {
 		if (manager == null) {
-			setManager(new TextDirectEditManager(this, TextDirectEditManager.getTextCellEditorClass(this),
-				UrmlEditPartFactory.getTextCellEditorLocator(this)));
+			setManager(new TextDirectEditManager(this,
+					TextDirectEditManager.getTextCellEditorClass(this),
+					UrmlEditPartFactory.getTextCellEditorLocator(this)));
 		}
 		return manager;
 	}
@@ -335,7 +350,8 @@
 	 */
 	protected void performDirectEdit(Point eventLocation) {
 		if (getManager().getClass() == TextDirectEditManager.class) {
-			((TextDirectEditManager) getManager()).show(eventLocation.getSWTPoint());
+			((TextDirectEditManager) getManager()).show(eventLocation
+					.getSWTPoint());
 		}
 	}
 
@@ -360,11 +376,15 @@
 
 				public void run() {
 					if (isActive() && isEditable()) {
-						if (theRequest.getExtendedData().get(RequestConstants.REQ_DIRECTEDIT_EXTENDEDDATA_INITIAL_CHAR) instanceof Character) {
-							Character initialChar = (Character) theRequest.getExtendedData().get(
-								RequestConstants.REQ_DIRECTEDIT_EXTENDEDDATA_INITIAL_CHAR);
+						if (theRequest
+								.getExtendedData()
+								.get(RequestConstants.REQ_DIRECTEDIT_EXTENDEDDATA_INITIAL_CHAR) instanceof Character) {
+							Character initialChar = (Character) theRequest
+									.getExtendedData()
+									.get(RequestConstants.REQ_DIRECTEDIT_EXTENDEDDATA_INITIAL_CHAR);
 							performDirectEdit(initialChar.charValue());
-						} else if ((theRequest instanceof DirectEditRequest) && (getEditText().equals(getLabelText()))) {
+						} else if ((theRequest instanceof DirectEditRequest)
+								&& (getEditText().equals(getLabelText()))) {
 							DirectEditRequest editRequest = (DirectEditRequest) theRequest;
 							performDirectEdit(editRequest.getLocation());
 						} else {
@@ -410,7 +430,8 @@
 	 * @generated
 	 */
 	protected void refreshUnderline() {
-		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(NotationPackage.eINSTANCE.getFontStyle());
+		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(
+				NotationPackage.eINSTANCE.getFontStyle());
 		if (style != null && getFigure() instanceof WrappingLabel) {
 			((WrappingLabel) getFigure()).setTextUnderline(style.isUnderline());
 		}
@@ -420,9 +441,11 @@
 	 * @generated
 	 */
 	protected void refreshStrikeThrough() {
-		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(NotationPackage.eINSTANCE.getFontStyle());
+		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(
+				NotationPackage.eINSTANCE.getFontStyle());
 		if (style != null && getFigure() instanceof WrappingLabel) {
-			((WrappingLabel) getFigure()).setTextStrikeThrough(style.isStrikeThrough());
+			((WrappingLabel) getFigure()).setTextStrikeThrough(style
+					.isStrikeThrough());
 		}
 	}
 
@@ -430,11 +453,13 @@
 	 * @generated
 	 */
 	protected void refreshFont() {
-		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(NotationPackage.eINSTANCE.getFontStyle());
+		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(
+				NotationPackage.eINSTANCE.getFontStyle());
 		if (style != null) {
-			FontData fontData = new FontData(style.getFontName(), style.getFontHeight(), (style.isBold() ? SWT.BOLD
-				: SWT.NORMAL)
-				| (style.isItalic() ? SWT.ITALIC : SWT.NORMAL));
+			FontData fontData = new FontData(style.getFontName(),
+					style.getFontHeight(), (style.isBold() ? SWT.BOLD
+							: SWT.NORMAL)
+							| (style.isItalic() ? SWT.ITALIC : SWT.NORMAL));
 			setFont(fontData);
 		}
 	}
@@ -452,9 +477,11 @@
 	protected void addSemanticListeners() {
 		if (getParser() instanceof ISemanticParser) {
 			EObject element = resolveSemanticElement();
-			parserElements = ((ISemanticParser) getParser()).getSemanticElementsBeingParsed(element);
+			parserElements = ((ISemanticParser) getParser())
+					.getSemanticElementsBeingParsed(element);
 			for (int i = 0; i < parserElements.size(); i++) {
-				addListenerFilter("SemanticModel" + i, this, (EObject) parserElements.get(i)); //$NON-NLS-1$
+				addListenerFilter(
+						"SemanticModel" + i, this, (EObject) parserElements.get(i)); //$NON-NLS-1$
 			}
 		} else {
 			super.addSemanticListeners();
@@ -504,17 +531,25 @@
 		if (NotationPackage.eINSTANCE.getFontStyle_FontColor().equals(feature)) {
 			Integer c = (Integer) event.getNewValue();
 			setFontColor(DiagramColorRegistry.getInstance().getColor(c));
-		} else if (NotationPackage.eINSTANCE.getFontStyle_Underline().equals(feature)) {
+		} else if (NotationPackage.eINSTANCE.getFontStyle_Underline().equals(
+				feature)) {
 			refreshUnderline();
-		} else if (NotationPackage.eINSTANCE.getFontStyle_StrikeThrough().equals(feature)) {
+		} else if (NotationPackage.eINSTANCE.getFontStyle_StrikeThrough()
+				.equals(feature)) {
 			refreshStrikeThrough();
-		} else if (NotationPackage.eINSTANCE.getFontStyle_FontHeight().equals(feature)
-			|| NotationPackage.eINSTANCE.getFontStyle_FontName().equals(feature)
-			|| NotationPackage.eINSTANCE.getFontStyle_Bold().equals(feature)
-			|| NotationPackage.eINSTANCE.getFontStyle_Italic().equals(feature)) {
+		} else if (NotationPackage.eINSTANCE.getFontStyle_FontHeight().equals(
+				feature)
+				|| NotationPackage.eINSTANCE.getFontStyle_FontName().equals(
+						feature)
+				|| NotationPackage.eINSTANCE.getFontStyle_Bold()
+						.equals(feature)
+				|| NotationPackage.eINSTANCE.getFontStyle_Italic().equals(
+						feature)) {
 			refreshFont();
 		} else {
-			if (getParser() != null && getParser().isAffectingEvent(event, getParserOptions().intValue())) {
+			if (getParser() != null
+					&& getParser().isAffectingEvent(event,
+							getParserOptions().intValue())) {
 				refreshLabel();
 			}
 			if (getParser() instanceof ISemanticParser) {
Index: src/org/unicase/ui/diagram/urml/edit/parts/IsRefinedLabelEditPart.java
===================================================================
--- src/org/unicase/ui/diagram/urml/edit/parts/IsRefinedLabelEditPart.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/edit/parts/IsRefinedLabelEditPart.java	(working copy)
@@ -50,7 +50,8 @@
 /**
  * @generated
  */
-public class IsRefinedLabelEditPart extends LabelEditPart implements ITextAwareEditPart {
+public class IsRefinedLabelEditPart extends LabelEditPart implements
+		ITextAwareEditPart {
 
 	/**
 	 * @generated
@@ -70,7 +71,7 @@
 	/**
 	 * @generated
 	 */
-	private List parserElements;
+	private List<?> parserElements;
 
 	/**
 	 * @generated
@@ -81,8 +82,10 @@
 	 * @generated
 	 */
 	static {
-		registerSnapBackPosition(UrmlVisualIDRegistry
-			.getType(org.unicase.ui.diagram.urml.edit.parts.IsRefinedLabelEditPart.VISUAL_ID), new Point(0, 20));
+		registerSnapBackPosition(
+				UrmlVisualIDRegistry
+						.getType(org.unicase.ui.diagram.urml.edit.parts.IsRefinedLabelEditPart.VISUAL_ID),
+				new Point(0, 20));
 	}
 
 	/**
@@ -97,16 +100,12 @@
 	 */
 	protected void createDefaultEditPolicies() {
 		super.createDefaultEditPolicies();
-		installEditPolicy(EditPolicy.DIRECT_EDIT_ROLE, new LabelDirectEditPolicy());
-		installEditPolicy(EditPolicy.SELECTION_FEEDBACK_ROLE, new UrmlTextSelectionEditPolicy());
-		installEditPolicy(EditPolicy.PRIMARY_DRAG_ROLE, new NonResizableLabelEditPolicy() {
-
-			protected List createSelectionHandles() {
-				MoveHandle mh = new MoveHandle((GraphicalEditPart) getHost());
-				mh.setBorder(null);
-				return Collections.singletonList(mh);
-			}
-		});
+		installEditPolicy(EditPolicy.DIRECT_EDIT_ROLE,
+				new LabelDirectEditPolicy());
+		installEditPolicy(EditPolicy.SELECTION_FEEDBACK_ROLE,
+				new UrmlTextSelectionEditPolicy());
+		installEditPolicy(EditPolicy.PRIMARY_DRAG_ROLE,
+				new URMLDiagramEditPart.LinkLabelDragPolicy());
 	}
 
 	/**
@@ -174,6 +173,7 @@
 	/**
 	 * @generated
 	 */
+	@SuppressWarnings("rawtypes")
 	protected List getModelChildren() {
 		return Collections.EMPTY_LIST;
 	}
@@ -206,7 +206,9 @@
 		String text = null;
 		EObject parserElement = getParserElement();
 		if (parserElement != null && getParser() != null) {
-			text = getParser().getPrintString(new EObjectAdapter(parserElement), getParserOptions().intValue());
+			text = getParser().getPrintString(
+					new EObjectAdapter(parserElement),
+					getParserOptions().intValue());
 		}
 		if (text == null || text.length() == 0) {
 			text = defaultText;
@@ -236,7 +238,9 @@
 		if (getParserElement() == null || getParser() == null) {
 			return ""; //$NON-NLS-1$
 		}
-		return getParser().getEditString(new EObjectAdapter(getParserElement()), getParserOptions().intValue());
+		return getParser().getEditString(
+				new EObjectAdapter(getParserElement()),
+				getParserOptions().intValue());
 	}
 
 	/**
@@ -257,14 +261,20 @@
 					final EObject element = getParserElement();
 					final IParser parser = getParser();
 					try {
-						IParserEditStatus valid = (IParserEditStatus) getEditingDomain().runExclusive(
-							new RunnableWithResult.Impl() {
+						IParserEditStatus valid = (IParserEditStatus) getEditingDomain()
+								.runExclusive(
+										new RunnableWithResult.Impl<IParserEditStatus>() {
 
-								public void run() {
-									setResult(parser.isValidEditString(new EObjectAdapter(element), (String) value));
-								}
-							});
-						return valid.getCode() == ParserEditStatus.EDITABLE ? null : valid.getMessage();
+											public void run() {
+												setResult(parser
+														.isValidEditString(
+																new EObjectAdapter(
+																		element),
+																(String) value));
+											}
+										});
+						return valid.getCode() == ParserEditStatus.EDITABLE ? null
+								: valid.getMessage();
 					} catch (InterruptedException ie) {
 						ie.printStackTrace();
 					}
@@ -283,7 +293,8 @@
 		if (getParserElement() == null || getParser() == null) {
 			return null;
 		}
-		return getParser().getCompletionProcessor(new EObjectAdapter(getParserElement()));
+		return getParser().getCompletionProcessor(
+				new EObjectAdapter(getParserElement()));
 	}
 
 	/**
@@ -298,8 +309,12 @@
 	 */
 	public IParser getParser() {
 		if (parser == null) {
-			parser = UrmlParserProvider.getParser(UrmlElementTypes.GoalSubGoals_4018, getParserElement(),
-				UrmlVisualIDRegistry.getType(org.unicase.ui.diagram.urml.edit.parts.IsRefinedLabelEditPart.VISUAL_ID));
+			parser = UrmlParserProvider
+					.getParser(
+							UrmlElementTypes.GoalSubGoals_4018,
+							getParserElement(),
+							UrmlVisualIDRegistry
+									.getType(org.unicase.ui.diagram.urml.edit.parts.IsRefinedLabelEditPart.VISUAL_ID));
 		}
 		return parser;
 	}
@@ -309,8 +324,9 @@
 	 */
 	protected DirectEditManager getManager() {
 		if (manager == null) {
-			setManager(new TextDirectEditManager(this, TextDirectEditManager.getTextCellEditorClass(this),
-				UrmlEditPartFactory.getTextCellEditorLocator(this)));
+			setManager(new TextDirectEditManager(this,
+					TextDirectEditManager.getTextCellEditorClass(this),
+					UrmlEditPartFactory.getTextCellEditorLocator(this)));
 		}
 		return manager;
 	}
@@ -334,7 +350,8 @@
 	 */
 	protected void performDirectEdit(Point eventLocation) {
 		if (getManager().getClass() == TextDirectEditManager.class) {
-			((TextDirectEditManager) getManager()).show(eventLocation.getSWTPoint());
+			((TextDirectEditManager) getManager()).show(eventLocation
+					.getSWTPoint());
 		}
 	}
 
@@ -359,11 +376,15 @@
 
 				public void run() {
 					if (isActive() && isEditable()) {
-						if (theRequest.getExtendedData().get(RequestConstants.REQ_DIRECTEDIT_EXTENDEDDATA_INITIAL_CHAR) instanceof Character) {
-							Character initialChar = (Character) theRequest.getExtendedData().get(
-								RequestConstants.REQ_DIRECTEDIT_EXTENDEDDATA_INITIAL_CHAR);
+						if (theRequest
+								.getExtendedData()
+								.get(RequestConstants.REQ_DIRECTEDIT_EXTENDEDDATA_INITIAL_CHAR) instanceof Character) {
+							Character initialChar = (Character) theRequest
+									.getExtendedData()
+									.get(RequestConstants.REQ_DIRECTEDIT_EXTENDEDDATA_INITIAL_CHAR);
 							performDirectEdit(initialChar.charValue());
-						} else if ((theRequest instanceof DirectEditRequest) && (getEditText().equals(getLabelText()))) {
+						} else if ((theRequest instanceof DirectEditRequest)
+								&& (getEditText().equals(getLabelText()))) {
 							DirectEditRequest editRequest = (DirectEditRequest) theRequest;
 							performDirectEdit(editRequest.getLocation());
 						} else {
@@ -409,7 +430,8 @@
 	 * @generated
 	 */
 	protected void refreshUnderline() {
-		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(NotationPackage.eINSTANCE.getFontStyle());
+		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(
+				NotationPackage.eINSTANCE.getFontStyle());
 		if (style != null && getFigure() instanceof WrappingLabel) {
 			((WrappingLabel) getFigure()).setTextUnderline(style.isUnderline());
 		}
@@ -419,9 +441,11 @@
 	 * @generated
 	 */
 	protected void refreshStrikeThrough() {
-		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(NotationPackage.eINSTANCE.getFontStyle());
+		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(
+				NotationPackage.eINSTANCE.getFontStyle());
 		if (style != null && getFigure() instanceof WrappingLabel) {
-			((WrappingLabel) getFigure()).setTextStrikeThrough(style.isStrikeThrough());
+			((WrappingLabel) getFigure()).setTextStrikeThrough(style
+					.isStrikeThrough());
 		}
 	}
 
@@ -429,11 +453,13 @@
 	 * @generated
 	 */
 	protected void refreshFont() {
-		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(NotationPackage.eINSTANCE.getFontStyle());
+		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(
+				NotationPackage.eINSTANCE.getFontStyle());
 		if (style != null) {
-			FontData fontData = new FontData(style.getFontName(), style.getFontHeight(), (style.isBold() ? SWT.BOLD
-				: SWT.NORMAL)
-				| (style.isItalic() ? SWT.ITALIC : SWT.NORMAL));
+			FontData fontData = new FontData(style.getFontName(),
+					style.getFontHeight(), (style.isBold() ? SWT.BOLD
+							: SWT.NORMAL)
+							| (style.isItalic() ? SWT.ITALIC : SWT.NORMAL));
 			setFont(fontData);
 		}
 	}
@@ -451,9 +477,11 @@
 	protected void addSemanticListeners() {
 		if (getParser() instanceof ISemanticParser) {
 			EObject element = resolveSemanticElement();
-			parserElements = ((ISemanticParser) getParser()).getSemanticElementsBeingParsed(element);
+			parserElements = ((ISemanticParser) getParser())
+					.getSemanticElementsBeingParsed(element);
 			for (int i = 0; i < parserElements.size(); i++) {
-				addListenerFilter("SemanticModel" + i, this, (EObject) parserElements.get(i)); //$NON-NLS-1$
+				addListenerFilter(
+						"SemanticModel" + i, this, (EObject) parserElements.get(i)); //$NON-NLS-1$
 			}
 		} else {
 			super.addSemanticListeners();
@@ -503,17 +531,25 @@
 		if (NotationPackage.eINSTANCE.getFontStyle_FontColor().equals(feature)) {
 			Integer c = (Integer) event.getNewValue();
 			setFontColor(DiagramColorRegistry.getInstance().getColor(c));
-		} else if (NotationPackage.eINSTANCE.getFontStyle_Underline().equals(feature)) {
+		} else if (NotationPackage.eINSTANCE.getFontStyle_Underline().equals(
+				feature)) {
 			refreshUnderline();
-		} else if (NotationPackage.eINSTANCE.getFontStyle_StrikeThrough().equals(feature)) {
+		} else if (NotationPackage.eINSTANCE.getFontStyle_StrikeThrough()
+				.equals(feature)) {
 			refreshStrikeThrough();
-		} else if (NotationPackage.eINSTANCE.getFontStyle_FontHeight().equals(feature)
-			|| NotationPackage.eINSTANCE.getFontStyle_FontName().equals(feature)
-			|| NotationPackage.eINSTANCE.getFontStyle_Bold().equals(feature)
-			|| NotationPackage.eINSTANCE.getFontStyle_Italic().equals(feature)) {
+		} else if (NotationPackage.eINSTANCE.getFontStyle_FontHeight().equals(
+				feature)
+				|| NotationPackage.eINSTANCE.getFontStyle_FontName().equals(
+						feature)
+				|| NotationPackage.eINSTANCE.getFontStyle_Bold()
+						.equals(feature)
+				|| NotationPackage.eINSTANCE.getFontStyle_Italic().equals(
+						feature)) {
 			refreshFont();
 		} else {
-			if (getParser() != null && getParser().isAffectingEvent(event, getParserOptions().intValue())) {
+			if (getParser() != null
+					&& getParser().isAffectingEvent(event,
+							getParserOptions().intValue())) {
 				refreshLabel();
 			}
 			if (getParser() instanceof ISemanticParser) {
Index: src/org/unicase/ui/diagram/urml/edit/parts/ProductEditPart.java
===================================================================
--- src/org/unicase/ui/diagram/urml/edit/parts/ProductEditPart.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/edit/parts/ProductEditPart.java	(working copy)
@@ -1,6 +1,7 @@
 package org.unicase.ui.diagram.urml.edit.parts;
 
 import java.util.ArrayList;
+import java.util.LinkedList;
 import java.util.List;
 
 import org.eclipse.draw2d.Graphics;
@@ -20,6 +21,7 @@
 import org.eclipse.gmf.runtime.diagram.ui.editpolicies.EditPolicyRoles;
 import org.eclipse.gmf.runtime.draw2d.ui.figures.ConstrainedToolbarLayout;
 import org.eclipse.gmf.runtime.emf.type.core.IElementType;
+import org.eclipse.gmf.runtime.gef.ui.figures.DefaultSizeNodeFigure;
 import org.eclipse.gmf.runtime.gef.ui.figures.NodeFigure;
 import org.eclipse.gmf.runtime.notation.View;
 import org.eclipse.swt.SWT;
@@ -66,7 +68,8 @@
 	 */
 	protected void createDefaultEditPolicies() {
 		super.createDefaultEditPolicies();
-		installEditPolicy(EditPolicyRoles.SEMANTIC_ROLE, new ProductItemSemanticEditPolicy());
+		installEditPolicy(EditPolicyRoles.SEMANTIC_ROLE,
+				new ProductItemSemanticEditPolicy());
 		installEditPolicy(EditPolicy.LAYOUT_ROLE, createLayoutEditPolicy());
 		installEditPolicy(EditPolicyRoles.OPEN_ROLE, new MEEditorOpenPolicie());
 		// XXX need an SCR to runtime to have another abstract superclass that would let children add reasonable
@@ -78,10 +81,11 @@
 	 * @generated
 	 */
 	protected LayoutEditPolicy createLayoutEditPolicy() {
-		LayoutEditPolicy lep = new LayoutEditPolicy() {
+		org.eclipse.gmf.runtime.diagram.ui.editpolicies.LayoutEditPolicy lep = new org.eclipse.gmf.runtime.diagram.ui.editpolicies.LayoutEditPolicy() {
 
 			protected EditPolicy createChildEditPolicy(EditPart child) {
-				EditPolicy result = child.getEditPolicy(EditPolicy.PRIMARY_DRAG_ROLE);
+				EditPolicy result = child
+						.getEditPolicy(EditPolicy.PRIMARY_DRAG_ROLE);
 				if (result == null) {
 					result = new NonResizableEditPolicy();
 				}
@@ -103,8 +107,7 @@
 	 * @generated
 	 */
 	protected IFigure createNodeShape() {
-		ProductFigure figure = new ProductFigure();
-		return primaryShape = figure;
+		return primaryShape = new ProductFigure();
 	}
 
 	/**
@@ -119,7 +122,8 @@
 	 */
 	protected boolean addFixedChild(EditPart childEditPart) {
 		if (childEditPart instanceof ProductNameEditPart) {
-			((ProductNameEditPart) childEditPart).setLabel(getPrimaryShape().getProductFigure_name());
+			((ProductNameEditPart) childEditPart).setLabel(getPrimaryShape()
+					.getProductFigure_name());
 			return true;
 		}
 		return false;
@@ -254,54 +258,125 @@
 	 * @generated
 	 */
 	public EditPart getPrimaryChildEditPart() {
-		return getChildBySemanticHint(UrmlVisualIDRegistry.getType(ProductNameEditPart.VISUAL_ID));
+		return getChildBySemanticHint(UrmlVisualIDRegistry
+				.getType(ProductNameEditPart.VISUAL_ID));
 	}
 
 	/**
 	 * @generated
 	 */
-	public List/* <org.eclipse.gmf.runtime.emf.type.core.IElementType> */getMARelTypesOnSource() {
-		List/* <org.eclipse.gmf.runtime.emf.type.core.IElementType> */types = new ArrayList/*
-																							 * <org.eclipse.gmf.runtime.emf
-																							 * .type.core.IElementType>
-																							 */();
+	public List<IElementType> getMARelTypesOnSource() {
+		ArrayList<IElementType> types = new ArrayList<IElementType>(3);
 		types.add(UrmlElementTypes.ProductVariationPointInstances_4032);
 		types.add(UrmlElementTypes.ProductFeatures_4047);
+		types.add(UrmlElementTypes.UrmlModelElementAssociations_4048);
 		return types;
 	}
 
 	/**
 	 * @generated
 	 */
-	public List/* <org.eclipse.gmf.runtime.emf.type.core.IElementType> */getMARelTypesOnSourceAndTarget(
-		IGraphicalEditPart targetEditPart) {
-		List/* <org.eclipse.gmf.runtime.emf.type.core.IElementType> */types = new ArrayList/*
-																							 * <org.eclipse.gmf.runtime.emf
-																							 * .type.core.IElementType>
-																							 */();
+	public List<IElementType> getMARelTypesOnSourceAndTarget(
+			IGraphicalEditPart targetEditPart) {
+		LinkedList<IElementType> types = new LinkedList<IElementType>();
 		if (targetEditPart instanceof VariationPointInstanceEditPart) {
 			types.add(UrmlElementTypes.ProductVariationPointInstances_4032);
 		}
 		if (targetEditPart instanceof FeatureEditPart) {
 			types.add(UrmlElementTypes.ProductFeatures_4047);
 		}
+		if (targetEditPart instanceof StakeholderEditPart) {
+			types.add(UrmlElementTypes.UrmlModelElementAssociations_4048);
+		}
+		if (targetEditPart instanceof GoalEditPart) {
+			types.add(UrmlElementTypes.UrmlModelElementAssociations_4048);
+		}
+		if (targetEditPart instanceof FunctionalRequirementEditPart) {
+			types.add(UrmlElementTypes.UrmlModelElementAssociations_4048);
+		}
+		if (targetEditPart instanceof FeatureEditPart) {
+			types.add(UrmlElementTypes.UrmlModelElementAssociations_4048);
+		}
+		if (targetEditPart instanceof ServiceEditPart) {
+			types.add(UrmlElementTypes.UrmlModelElementAssociations_4048);
+		}
+		if (targetEditPart instanceof NonFunctionalRequirementEditPart) {
+			types.add(UrmlElementTypes.UrmlModelElementAssociations_4048);
+		}
+		if (targetEditPart instanceof DangerEditPart) {
+			types.add(UrmlElementTypes.UrmlModelElementAssociations_4048);
+		}
+		if (targetEditPart instanceof ActorEditPart) {
+			types.add(UrmlElementTypes.UrmlModelElementAssociations_4048);
+		}
+		if (targetEditPart instanceof ProceduralMitigationEditPart) {
+			types.add(UrmlElementTypes.UrmlModelElementAssociations_4048);
+		}
+		if (targetEditPart instanceof VariationPointEditPart) {
+			types.add(UrmlElementTypes.UrmlModelElementAssociations_4048);
+		}
+		if (targetEditPart instanceof VariationPointInstanceEditPart) {
+			types.add(UrmlElementTypes.UrmlModelElementAssociations_4048);
+		}
+		if (targetEditPart instanceof org.unicase.ui.diagram.urml.edit.parts.ProductEditPart) {
+			types.add(UrmlElementTypes.UrmlModelElementAssociations_4048);
+		}
 		return types;
 	}
 
 	/**
 	 * @generated
 	 */
-	public List/* <org.eclipse.gmf.runtime.emf.type.core.IElementType> */getMATypesForTarget(
-		IElementType relationshipType) {
-		List/* <org.eclipse.gmf.runtime.emf.type.core.IElementType> */types = new ArrayList/*
-																							 * <org.eclipse.gmf.runtime.emf
-																							 * .type.core.IElementType>
-																							 */();
+	public List<IElementType> getMATypesForTarget(IElementType relationshipType) {
+		LinkedList<IElementType> types = new LinkedList<IElementType>();
 		if (relationshipType == UrmlElementTypes.ProductVariationPointInstances_4032) {
 			types.add(UrmlElementTypes.VariationPointInstance_2014);
+		} else if (relationshipType == UrmlElementTypes.ProductFeatures_4047) {
+			types.add(UrmlElementTypes.Feature_2012);
+		} else if (relationshipType == UrmlElementTypes.UrmlModelElementAssociations_4048) {
+			types.add(UrmlElementTypes.Stakeholder_2002);
+			types.add(UrmlElementTypes.Goal_2001);
+			types.add(UrmlElementTypes.FunctionalRequirement_2006);
+			types.add(UrmlElementTypes.Feature_2012);
+			types.add(UrmlElementTypes.Service_2007);
+			types.add(UrmlElementTypes.NonFunctionalRequirement_2008);
+			types.add(UrmlElementTypes.Danger_2009);
+			types.add(UrmlElementTypes.Actor_2010);
+			types.add(UrmlElementTypes.ProceduralMitigation_2011);
+			types.add(UrmlElementTypes.VariationPoint_2013);
+			types.add(UrmlElementTypes.VariationPointInstance_2014);
+			types.add(UrmlElementTypes.Product_2015);
 		}
-		if (relationshipType == UrmlElementTypes.ProductFeatures_4047) {
+		return types;
+	}
+
+	/**
+	 * @generated
+	 */
+	public List<IElementType> getMARelTypesOnTarget() {
+		ArrayList<IElementType> types = new ArrayList<IElementType>(1);
+		types.add(UrmlElementTypes.UrmlModelElementAssociations_4048);
+		return types;
+	}
+
+	/**
+	 * @generated
+	 */
+	public List<IElementType> getMATypesForSource(IElementType relationshipType) {
+		LinkedList<IElementType> types = new LinkedList<IElementType>();
+		if (relationshipType == UrmlElementTypes.UrmlModelElementAssociations_4048) {
+			types.add(UrmlElementTypes.Stakeholder_2002);
+			types.add(UrmlElementTypes.Goal_2001);
+			types.add(UrmlElementTypes.FunctionalRequirement_2006);
 			types.add(UrmlElementTypes.Feature_2012);
+			types.add(UrmlElementTypes.Service_2007);
+			types.add(UrmlElementTypes.NonFunctionalRequirement_2008);
+			types.add(UrmlElementTypes.Danger_2009);
+			types.add(UrmlElementTypes.Actor_2010);
+			types.add(UrmlElementTypes.ProceduralMitigation_2011);
+			types.add(UrmlElementTypes.VariationPoint_2013);
+			types.add(UrmlElementTypes.VariationPointInstance_2014);
+			types.add(UrmlElementTypes.Product_2015);
 		}
 		return types;
 	}
@@ -347,25 +422,6 @@
 		/**
 		 * @generated
 		 */
-		private boolean myUseLocalCoordinates = false;
-
-		/**
-		 * @generated
-		 */
-		protected boolean useLocalCoordinates() {
-			return myUseLocalCoordinates;
-		}
-
-		/**
-		 * @generated
-		 */
-		protected void setUseLocalCoordinates(boolean useLocalCoordinates) {
-			myUseLocalCoordinates = useLocalCoordinates;
-		}
-
-		/**
-		 * @generated
-		 */
 		public Label getProductFigure_name() {
 			return fProductFigure_name;
 		}
@@ -375,6 +431,7 @@
 	/**
 	 * @generated
 	 */
-	static final Font FPRODUCTFIGURE_NAME_FONT = new Font(Display.getCurrent(), "Arial", 10, SWT.BOLD);
+	static final Font FPRODUCTFIGURE_NAME_FONT = new Font(Display.getCurrent(),
+			"Arial", 10, SWT.BOLD);
 
 }
Index: src/org/unicase/ui/diagram/urml/edit/parts/InfluencesLabel2EditPart.java
===================================================================
--- src/org/unicase/ui/diagram/urml/edit/parts/InfluencesLabel2EditPart.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/edit/parts/InfluencesLabel2EditPart.java	(working copy)
@@ -50,7 +50,8 @@
 /**
  * @generated
  */
-public class InfluencesLabel2EditPart extends LabelEditPart implements ITextAwareEditPart {
+public class InfluencesLabel2EditPart extends LabelEditPart implements
+		ITextAwareEditPart {
 
 	/**
 	 * @generated
@@ -70,7 +71,7 @@
 	/**
 	 * @generated
 	 */
-	private List parserElements;
+	private List<?> parserElements;
 
 	/**
 	 * @generated
@@ -81,8 +82,10 @@
 	 * @generated
 	 */
 	static {
-		registerSnapBackPosition(UrmlVisualIDRegistry
-			.getType(org.unicase.ui.diagram.urml.edit.parts.InfluencesLabel2EditPart.VISUAL_ID), new Point(0, 20));
+		registerSnapBackPosition(
+				UrmlVisualIDRegistry
+						.getType(org.unicase.ui.diagram.urml.edit.parts.InfluencesLabel2EditPart.VISUAL_ID),
+				new Point(0, 20));
 	}
 
 	/**
@@ -97,16 +100,12 @@
 	 */
 	protected void createDefaultEditPolicies() {
 		super.createDefaultEditPolicies();
-		installEditPolicy(EditPolicy.DIRECT_EDIT_ROLE, new LabelDirectEditPolicy());
-		installEditPolicy(EditPolicy.SELECTION_FEEDBACK_ROLE, new UrmlTextSelectionEditPolicy());
-		installEditPolicy(EditPolicy.PRIMARY_DRAG_ROLE, new NonResizableLabelEditPolicy() {
-
-			protected List createSelectionHandles() {
-				MoveHandle mh = new MoveHandle((GraphicalEditPart) getHost());
-				mh.setBorder(null);
-				return Collections.singletonList(mh);
-			}
-		});
+		installEditPolicy(EditPolicy.DIRECT_EDIT_ROLE,
+				new LabelDirectEditPolicy());
+		installEditPolicy(EditPolicy.SELECTION_FEEDBACK_ROLE,
+				new UrmlTextSelectionEditPolicy());
+		installEditPolicy(EditPolicy.PRIMARY_DRAG_ROLE,
+				new URMLDiagramEditPart.LinkLabelDragPolicy());
 	}
 
 	/**
@@ -174,6 +173,7 @@
 	/**
 	 * @generated
 	 */
+	@SuppressWarnings("rawtypes")
 	protected List getModelChildren() {
 		return Collections.EMPTY_LIST;
 	}
@@ -206,7 +206,9 @@
 		String text = null;
 		EObject parserElement = getParserElement();
 		if (parserElement != null && getParser() != null) {
-			text = getParser().getPrintString(new EObjectAdapter(parserElement), getParserOptions().intValue());
+			text = getParser().getPrintString(
+					new EObjectAdapter(parserElement),
+					getParserOptions().intValue());
 		}
 		if (text == null || text.length() == 0) {
 			text = defaultText;
@@ -236,7 +238,9 @@
 		if (getParserElement() == null || getParser() == null) {
 			return ""; //$NON-NLS-1$
 		}
-		return getParser().getEditString(new EObjectAdapter(getParserElement()), getParserOptions().intValue());
+		return getParser().getEditString(
+				new EObjectAdapter(getParserElement()),
+				getParserOptions().intValue());
 	}
 
 	/**
@@ -257,14 +261,20 @@
 					final EObject element = getParserElement();
 					final IParser parser = getParser();
 					try {
-						IParserEditStatus valid = (IParserEditStatus) getEditingDomain().runExclusive(
-							new RunnableWithResult.Impl() {
+						IParserEditStatus valid = (IParserEditStatus) getEditingDomain()
+								.runExclusive(
+										new RunnableWithResult.Impl<IParserEditStatus>() {
 
-								public void run() {
-									setResult(parser.isValidEditString(new EObjectAdapter(element), (String) value));
-								}
-							});
-						return valid.getCode() == ParserEditStatus.EDITABLE ? null : valid.getMessage();
+											public void run() {
+												setResult(parser
+														.isValidEditString(
+																new EObjectAdapter(
+																		element),
+																(String) value));
+											}
+										});
+						return valid.getCode() == ParserEditStatus.EDITABLE ? null
+								: valid.getMessage();
 					} catch (InterruptedException ie) {
 						ie.printStackTrace();
 					}
@@ -283,7 +293,8 @@
 		if (getParserElement() == null || getParser() == null) {
 			return null;
 		}
-		return getParser().getCompletionProcessor(new EObjectAdapter(getParserElement()));
+		return getParser().getCompletionProcessor(
+				new EObjectAdapter(getParserElement()));
 	}
 
 	/**
@@ -299,8 +310,11 @@
 	public IParser getParser() {
 		if (parser == null) {
 			parser = UrmlParserProvider
-				.getParser(UrmlElementTypes.GoalReference_4023, getParserElement(), UrmlVisualIDRegistry
-					.getType(org.unicase.ui.diagram.urml.edit.parts.InfluencesLabel2EditPart.VISUAL_ID));
+					.getParser(
+							UrmlElementTypes.GoalReference_4023,
+							getParserElement(),
+							UrmlVisualIDRegistry
+									.getType(org.unicase.ui.diagram.urml.edit.parts.InfluencesLabel2EditPart.VISUAL_ID));
 		}
 		return parser;
 	}
@@ -310,8 +324,9 @@
 	 */
 	protected DirectEditManager getManager() {
 		if (manager == null) {
-			setManager(new TextDirectEditManager(this, TextDirectEditManager.getTextCellEditorClass(this),
-				UrmlEditPartFactory.getTextCellEditorLocator(this)));
+			setManager(new TextDirectEditManager(this,
+					TextDirectEditManager.getTextCellEditorClass(this),
+					UrmlEditPartFactory.getTextCellEditorLocator(this)));
 		}
 		return manager;
 	}
@@ -335,7 +350,8 @@
 	 */
 	protected void performDirectEdit(Point eventLocation) {
 		if (getManager().getClass() == TextDirectEditManager.class) {
-			((TextDirectEditManager) getManager()).show(eventLocation.getSWTPoint());
+			((TextDirectEditManager) getManager()).show(eventLocation
+					.getSWTPoint());
 		}
 	}
 
@@ -360,11 +376,15 @@
 
 				public void run() {
 					if (isActive() && isEditable()) {
-						if (theRequest.getExtendedData().get(RequestConstants.REQ_DIRECTEDIT_EXTENDEDDATA_INITIAL_CHAR) instanceof Character) {
-							Character initialChar = (Character) theRequest.getExtendedData().get(
-								RequestConstants.REQ_DIRECTEDIT_EXTENDEDDATA_INITIAL_CHAR);
+						if (theRequest
+								.getExtendedData()
+								.get(RequestConstants.REQ_DIRECTEDIT_EXTENDEDDATA_INITIAL_CHAR) instanceof Character) {
+							Character initialChar = (Character) theRequest
+									.getExtendedData()
+									.get(RequestConstants.REQ_DIRECTEDIT_EXTENDEDDATA_INITIAL_CHAR);
 							performDirectEdit(initialChar.charValue());
-						} else if ((theRequest instanceof DirectEditRequest) && (getEditText().equals(getLabelText()))) {
+						} else if ((theRequest instanceof DirectEditRequest)
+								&& (getEditText().equals(getLabelText()))) {
 							DirectEditRequest editRequest = (DirectEditRequest) theRequest;
 							performDirectEdit(editRequest.getLocation());
 						} else {
@@ -410,7 +430,8 @@
 	 * @generated
 	 */
 	protected void refreshUnderline() {
-		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(NotationPackage.eINSTANCE.getFontStyle());
+		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(
+				NotationPackage.eINSTANCE.getFontStyle());
 		if (style != null && getFigure() instanceof WrappingLabel) {
 			((WrappingLabel) getFigure()).setTextUnderline(style.isUnderline());
 		}
@@ -420,9 +441,11 @@
 	 * @generated
 	 */
 	protected void refreshStrikeThrough() {
-		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(NotationPackage.eINSTANCE.getFontStyle());
+		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(
+				NotationPackage.eINSTANCE.getFontStyle());
 		if (style != null && getFigure() instanceof WrappingLabel) {
-			((WrappingLabel) getFigure()).setTextStrikeThrough(style.isStrikeThrough());
+			((WrappingLabel) getFigure()).setTextStrikeThrough(style
+					.isStrikeThrough());
 		}
 	}
 
@@ -430,11 +453,13 @@
 	 * @generated
 	 */
 	protected void refreshFont() {
-		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(NotationPackage.eINSTANCE.getFontStyle());
+		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(
+				NotationPackage.eINSTANCE.getFontStyle());
 		if (style != null) {
-			FontData fontData = new FontData(style.getFontName(), style.getFontHeight(), (style.isBold() ? SWT.BOLD
-				: SWT.NORMAL)
-				| (style.isItalic() ? SWT.ITALIC : SWT.NORMAL));
+			FontData fontData = new FontData(style.getFontName(),
+					style.getFontHeight(), (style.isBold() ? SWT.BOLD
+							: SWT.NORMAL)
+							| (style.isItalic() ? SWT.ITALIC : SWT.NORMAL));
 			setFont(fontData);
 		}
 	}
@@ -452,9 +477,11 @@
 	protected void addSemanticListeners() {
 		if (getParser() instanceof ISemanticParser) {
 			EObject element = resolveSemanticElement();
-			parserElements = ((ISemanticParser) getParser()).getSemanticElementsBeingParsed(element);
+			parserElements = ((ISemanticParser) getParser())
+					.getSemanticElementsBeingParsed(element);
 			for (int i = 0; i < parserElements.size(); i++) {
-				addListenerFilter("SemanticModel" + i, this, (EObject) parserElements.get(i)); //$NON-NLS-1$
+				addListenerFilter(
+						"SemanticModel" + i, this, (EObject) parserElements.get(i)); //$NON-NLS-1$
 			}
 		} else {
 			super.addSemanticListeners();
@@ -504,17 +531,25 @@
 		if (NotationPackage.eINSTANCE.getFontStyle_FontColor().equals(feature)) {
 			Integer c = (Integer) event.getNewValue();
 			setFontColor(DiagramColorRegistry.getInstance().getColor(c));
-		} else if (NotationPackage.eINSTANCE.getFontStyle_Underline().equals(feature)) {
+		} else if (NotationPackage.eINSTANCE.getFontStyle_Underline().equals(
+				feature)) {
 			refreshUnderline();
-		} else if (NotationPackage.eINSTANCE.getFontStyle_StrikeThrough().equals(feature)) {
+		} else if (NotationPackage.eINSTANCE.getFontStyle_StrikeThrough()
+				.equals(feature)) {
 			refreshStrikeThrough();
-		} else if (NotationPackage.eINSTANCE.getFontStyle_FontHeight().equals(feature)
-			|| NotationPackage.eINSTANCE.getFontStyle_FontName().equals(feature)
-			|| NotationPackage.eINSTANCE.getFontStyle_Bold().equals(feature)
-			|| NotationPackage.eINSTANCE.getFontStyle_Italic().equals(feature)) {
+		} else if (NotationPackage.eINSTANCE.getFontStyle_FontHeight().equals(
+				feature)
+				|| NotationPackage.eINSTANCE.getFontStyle_FontName().equals(
+						feature)
+				|| NotationPackage.eINSTANCE.getFontStyle_Bold()
+						.equals(feature)
+				|| NotationPackage.eINSTANCE.getFontStyle_Italic().equals(
+						feature)) {
 			refreshFont();
 		} else {
-			if (getParser() != null && getParser().isAffectingEvent(event, getParserOptions().intValue())) {
+			if (getParser() != null
+					&& getParser().isAffectingEvent(event,
+							getParserOptions().intValue())) {
 				refreshLabel();
 			}
 			if (getParser() instanceof ISemanticParser) {
Index: src/org/unicase/ui/diagram/urml/edit/parts/StakeholderGoalsEditPart.java
===================================================================
--- src/org/unicase/ui/diagram/urml/edit/parts/StakeholderGoalsEditPart.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/edit/parts/StakeholderGoalsEditPart.java	(working copy)
@@ -12,7 +12,8 @@
 /**
  * @generated
  */
-public class StakeholderGoalsEditPart extends ConnectionNodeEditPart implements ITreeBranchEditPart {
+public class StakeholderGoalsEditPart extends ConnectionNodeEditPart implements
+		ITreeBranchEditPart {
 
 	/**
 	 * @generated
@@ -31,41 +32,8 @@
 	 */
 	protected void createDefaultEditPolicies() {
 		super.createDefaultEditPolicies();
-		installEditPolicy(EditPolicyRoles.SEMANTIC_ROLE, new StakeholderGoalsItemSemanticEditPolicy());
-	}
-
-	/**
-	 * @generated
-	 */
-	protected boolean addFixedChild(EditPart childEditPart) {
-		return false;
-	}
-
-	/**
-	 * @generated
-	 */
-	protected void addChildVisual(EditPart childEditPart, int index) {
-		if (addFixedChild(childEditPart)) {
-			return;
-		}
-		super.addChildVisual(childEditPart, -1);
-	}
-
-	/**
-	 * @generated
-	 */
-	protected boolean removeFixedChild(EditPart childEditPart) {
-		return false;
-	}
-
-	/**
-	 * @generated
-	 */
-	protected void removeChildVisual(EditPart childEditPart) {
-		if (removeFixedChild(childEditPart)) {
-			return;
-		}
-		super.removeChildVisual(childEditPart);
+		installEditPolicy(EditPolicyRoles.SEMANTIC_ROLE,
+				new StakeholderGoalsItemSemanticEditPolicy());
 	}
 
 	/**
Index: src/org/unicase/ui/diagram/urml/edit/parts/ServiceEditPart.java
===================================================================
--- src/org/unicase/ui/diagram/urml/edit/parts/ServiceEditPart.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/edit/parts/ServiceEditPart.java	(working copy)
@@ -1,6 +1,7 @@
 package org.unicase.ui.diagram.urml.edit.parts;
 
 import java.util.ArrayList;
+import java.util.LinkedList;
 import java.util.List;
 
 import org.eclipse.draw2d.Graphics;
@@ -20,6 +21,7 @@
 import org.eclipse.gmf.runtime.diagram.ui.editpolicies.EditPolicyRoles;
 import org.eclipse.gmf.runtime.draw2d.ui.figures.ConstrainedToolbarLayout;
 import org.eclipse.gmf.runtime.emf.type.core.IElementType;
+import org.eclipse.gmf.runtime.gef.ui.figures.DefaultSizeNodeFigure;
 import org.eclipse.gmf.runtime.gef.ui.figures.NodeFigure;
 import org.eclipse.gmf.runtime.notation.View;
 import org.eclipse.swt.SWT;
@@ -66,7 +68,8 @@
 	 */
 	protected void createDefaultEditPolicies() {
 		super.createDefaultEditPolicies();
-		installEditPolicy(EditPolicyRoles.SEMANTIC_ROLE, new ServiceItemSemanticEditPolicy());
+		installEditPolicy(EditPolicyRoles.SEMANTIC_ROLE,
+				new ServiceItemSemanticEditPolicy());
 		installEditPolicy(EditPolicy.LAYOUT_ROLE, createLayoutEditPolicy());
 		installEditPolicy(EditPolicyRoles.OPEN_ROLE, new MEEditorOpenPolicie());
 		// XXX need an SCR to runtime to have another abstract superclass that would let children add reasonable
@@ -78,10 +81,11 @@
 	 * @generated
 	 */
 	protected LayoutEditPolicy createLayoutEditPolicy() {
-		LayoutEditPolicy lep = new LayoutEditPolicy() {
+		org.eclipse.gmf.runtime.diagram.ui.editpolicies.LayoutEditPolicy lep = new org.eclipse.gmf.runtime.diagram.ui.editpolicies.LayoutEditPolicy() {
 
 			protected EditPolicy createChildEditPolicy(EditPart child) {
-				EditPolicy result = child.getEditPolicy(EditPolicy.PRIMARY_DRAG_ROLE);
+				EditPolicy result = child
+						.getEditPolicy(EditPolicy.PRIMARY_DRAG_ROLE);
 				if (result == null) {
 					result = new NonResizableEditPolicy();
 				}
@@ -103,8 +107,7 @@
 	 * @generated
 	 */
 	protected IFigure createNodeShape() {
-		ServiceFigure figure = new ServiceFigure();
-		return primaryShape = figure;
+		return primaryShape = new ServiceFigure();
 	}
 
 	/**
@@ -119,7 +122,8 @@
 	 */
 	protected boolean addFixedChild(EditPart childEditPart) {
 		if (childEditPart instanceof ServiceNameEditPart) {
-			((ServiceNameEditPart) childEditPart).setLabel(getPrimaryShape().getFigureServiceFigure_name());
+			((ServiceNameEditPart) childEditPart).setLabel(getPrimaryShape()
+					.getFigureServiceFigure_name());
 			return true;
 		}
 		return false;
@@ -254,54 +258,94 @@
 	 * @generated
 	 */
 	public EditPart getPrimaryChildEditPart() {
-		return getChildBySemanticHint(UrmlVisualIDRegistry.getType(ServiceNameEditPart.VISUAL_ID));
+		return getChildBySemanticHint(UrmlVisualIDRegistry
+				.getType(ServiceNameEditPart.VISUAL_ID));
 	}
 
 	/**
 	 * @generated
 	 */
-	public List/* <org.eclipse.gmf.runtime.emf.type.core.IElementType> */getMARelTypesOnSource() {
-		List/* <org.eclipse.gmf.runtime.emf.type.core.IElementType> */types = new ArrayList/*
-																							 * <org.eclipse.gmf.runtime.emf
-																							 * .type.core.IElementType>
-																							 */();
+	public List<IElementType> getMARelTypesOnSource() {
+		ArrayList<IElementType> types = new ArrayList<IElementType>(3);
 		types.add(UrmlElementTypes.AssetTriggeredDangers_4017);
 		types.add(UrmlElementTypes.ServiceSubServices_4022);
+		types.add(UrmlElementTypes.UrmlModelElementAssociations_4048);
 		return types;
 	}
 
 	/**
 	 * @generated
 	 */
-	public List/* <org.eclipse.gmf.runtime.emf.type.core.IElementType> */getMARelTypesOnSourceAndTarget(
-		IGraphicalEditPart targetEditPart) {
-		List/* <org.eclipse.gmf.runtime.emf.type.core.IElementType> */types = new ArrayList/*
-																							 * <org.eclipse.gmf.runtime.emf
-																							 * .type.core.IElementType>
-																							 */();
+	public List<IElementType> getMARelTypesOnSourceAndTarget(
+			IGraphicalEditPart targetEditPart) {
+		LinkedList<IElementType> types = new LinkedList<IElementType>();
 		if (targetEditPart instanceof DangerEditPart) {
 			types.add(UrmlElementTypes.AssetTriggeredDangers_4017);
 		}
 		if (targetEditPart instanceof org.unicase.ui.diagram.urml.edit.parts.ServiceEditPart) {
 			types.add(UrmlElementTypes.ServiceSubServices_4022);
 		}
+		if (targetEditPart instanceof StakeholderEditPart) {
+			types.add(UrmlElementTypes.UrmlModelElementAssociations_4048);
+		}
+		if (targetEditPart instanceof GoalEditPart) {
+			types.add(UrmlElementTypes.UrmlModelElementAssociations_4048);
+		}
+		if (targetEditPart instanceof FunctionalRequirementEditPart) {
+			types.add(UrmlElementTypes.UrmlModelElementAssociations_4048);
+		}
+		if (targetEditPart instanceof FeatureEditPart) {
+			types.add(UrmlElementTypes.UrmlModelElementAssociations_4048);
+		}
+		if (targetEditPart instanceof org.unicase.ui.diagram.urml.edit.parts.ServiceEditPart) {
+			types.add(UrmlElementTypes.UrmlModelElementAssociations_4048);
+		}
+		if (targetEditPart instanceof NonFunctionalRequirementEditPart) {
+			types.add(UrmlElementTypes.UrmlModelElementAssociations_4048);
+		}
+		if (targetEditPart instanceof DangerEditPart) {
+			types.add(UrmlElementTypes.UrmlModelElementAssociations_4048);
+		}
+		if (targetEditPart instanceof ActorEditPart) {
+			types.add(UrmlElementTypes.UrmlModelElementAssociations_4048);
+		}
+		if (targetEditPart instanceof ProceduralMitigationEditPart) {
+			types.add(UrmlElementTypes.UrmlModelElementAssociations_4048);
+		}
+		if (targetEditPart instanceof VariationPointEditPart) {
+			types.add(UrmlElementTypes.UrmlModelElementAssociations_4048);
+		}
+		if (targetEditPart instanceof VariationPointInstanceEditPart) {
+			types.add(UrmlElementTypes.UrmlModelElementAssociations_4048);
+		}
+		if (targetEditPart instanceof ProductEditPart) {
+			types.add(UrmlElementTypes.UrmlModelElementAssociations_4048);
+		}
 		return types;
 	}
 
 	/**
 	 * @generated
 	 */
-	public List/* <org.eclipse.gmf.runtime.emf.type.core.IElementType> */getMATypesForTarget(
-		IElementType relationshipType) {
-		List/* <org.eclipse.gmf.runtime.emf.type.core.IElementType> */types = new ArrayList/*
-																							 * <org.eclipse.gmf.runtime.emf
-																							 * .type.core.IElementType>
-																							 */();
+	public List<IElementType> getMATypesForTarget(IElementType relationshipType) {
+		LinkedList<IElementType> types = new LinkedList<IElementType>();
 		if (relationshipType == UrmlElementTypes.AssetTriggeredDangers_4017) {
 			types.add(UrmlElementTypes.Danger_2009);
-		}
-		if (relationshipType == UrmlElementTypes.ServiceSubServices_4022) {
+		} else if (relationshipType == UrmlElementTypes.ServiceSubServices_4022) {
+			types.add(UrmlElementTypes.Service_2007);
+		} else if (relationshipType == UrmlElementTypes.UrmlModelElementAssociations_4048) {
+			types.add(UrmlElementTypes.Stakeholder_2002);
+			types.add(UrmlElementTypes.Goal_2001);
+			types.add(UrmlElementTypes.FunctionalRequirement_2006);
+			types.add(UrmlElementTypes.Feature_2012);
 			types.add(UrmlElementTypes.Service_2007);
+			types.add(UrmlElementTypes.NonFunctionalRequirement_2008);
+			types.add(UrmlElementTypes.Danger_2009);
+			types.add(UrmlElementTypes.Actor_2010);
+			types.add(UrmlElementTypes.ProceduralMitigation_2011);
+			types.add(UrmlElementTypes.VariationPoint_2013);
+			types.add(UrmlElementTypes.VariationPointInstance_2014);
+			types.add(UrmlElementTypes.Product_2015);
 		}
 		return types;
 	}
@@ -309,37 +353,40 @@
 	/**
 	 * @generated
 	 */
-	public List/* <org.eclipse.gmf.runtime.emf.type.core.IElementType> */getMARelTypesOnTarget() {
-		List/* <org.eclipse.gmf.runtime.emf.type.core.IElementType> */types = new ArrayList/*
-																							 * <org.eclipse.gmf.runtime.emf
-																							 * .type.core.IElementType>
-																							 */();
+	public List<IElementType> getMARelTypesOnTarget() {
+		ArrayList<IElementType> types = new ArrayList<IElementType>(4);
 		types.add(UrmlElementTypes.RequirementImplementingServices_4005);
 		types.add(UrmlElementTypes.DangerHarmedAssets_4013);
 		types.add(UrmlElementTypes.ServiceSubServices_4022);
+		types.add(UrmlElementTypes.UrmlModelElementAssociations_4048);
 		return types;
 	}
 
 	/**
 	 * @generated
 	 */
-	public List/* <org.eclipse.gmf.runtime.emf.type.core.IElementType> */getMATypesForSource(
-		IElementType relationshipType) {
-		List/* <org.eclipse.gmf.runtime.emf.type.core.IElementType> */types = new ArrayList/*
-																							 * <org.eclipse.gmf.runtime.emf
-																							 * .type.core.IElementType>
-																							 */();
+	public List<IElementType> getMATypesForSource(IElementType relationshipType) {
+		LinkedList<IElementType> types = new LinkedList<IElementType>();
 		if (relationshipType == UrmlElementTypes.RequirementImplementingServices_4005) {
 			types.add(UrmlElementTypes.FunctionalRequirement_2006);
-		}
-		if (relationshipType == UrmlElementTypes.RequirementImplementingServices_4005) {
 			types.add(UrmlElementTypes.NonFunctionalRequirement_2008);
-		}
-		if (relationshipType == UrmlElementTypes.DangerHarmedAssets_4013) {
+		} else if (relationshipType == UrmlElementTypes.DangerHarmedAssets_4013) {
 			types.add(UrmlElementTypes.Danger_2009);
-		}
-		if (relationshipType == UrmlElementTypes.ServiceSubServices_4022) {
+		} else if (relationshipType == UrmlElementTypes.ServiceSubServices_4022) {
 			types.add(UrmlElementTypes.Service_2007);
+		} else if (relationshipType == UrmlElementTypes.UrmlModelElementAssociations_4048) {
+			types.add(UrmlElementTypes.Stakeholder_2002);
+			types.add(UrmlElementTypes.Goal_2001);
+			types.add(UrmlElementTypes.FunctionalRequirement_2006);
+			types.add(UrmlElementTypes.Feature_2012);
+			types.add(UrmlElementTypes.Service_2007);
+			types.add(UrmlElementTypes.NonFunctionalRequirement_2008);
+			types.add(UrmlElementTypes.Danger_2009);
+			types.add(UrmlElementTypes.Actor_2010);
+			types.add(UrmlElementTypes.ProceduralMitigation_2011);
+			types.add(UrmlElementTypes.VariationPoint_2013);
+			types.add(UrmlElementTypes.VariationPointInstance_2014);
+			types.add(UrmlElementTypes.Product_2015);
 		}
 		return types;
 	}
@@ -385,25 +432,6 @@
 		/**
 		 * @generated
 		 */
-		private boolean myUseLocalCoordinates = false;
-
-		/**
-		 * @generated
-		 */
-		protected boolean useLocalCoordinates() {
-			return myUseLocalCoordinates;
-		}
-
-		/**
-		 * @generated
-		 */
-		protected void setUseLocalCoordinates(boolean useLocalCoordinates) {
-			myUseLocalCoordinates = useLocalCoordinates;
-		}
-
-		/**
-		 * @generated
-		 */
 		public Label getFigureServiceFigure_name() {
 			return fFigureServiceFigure_name;
 		}
@@ -413,6 +441,7 @@
 	/**
 	 * @generated
 	 */
-	static final Font FFIGURESERVICEFIGURE_NAME_FONT = new Font(Display.getCurrent(), "Arial", 10, SWT.BOLD);
+	static final Font FFIGURESERVICEFIGURE_NAME_FONT = new Font(
+			Display.getCurrent(), "Arial", 10, SWT.BOLD);
 
 }
Index: src/org/unicase/ui/diagram/urml/edit/parts/GoalReferenceWeight2EditPart.java
===================================================================
--- src/org/unicase/ui/diagram/urml/edit/parts/GoalReferenceWeight2EditPart.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/edit/parts/GoalReferenceWeight2EditPart.java	(working copy)
@@ -50,7 +50,8 @@
 /**
  * @generated
  */
-public class GoalReferenceWeight2EditPart extends LabelEditPart implements ITextAwareEditPart {
+public class GoalReferenceWeight2EditPart extends LabelEditPart implements
+		ITextAwareEditPart {
 
 	/**
 	 * @generated
@@ -70,7 +71,7 @@
 	/**
 	 * @generated
 	 */
-	private List parserElements;
+	private List<?> parserElements;
 
 	/**
 	 * @generated
@@ -81,8 +82,10 @@
 	 * @generated
 	 */
 	static {
-		registerSnapBackPosition(UrmlVisualIDRegistry
-			.getType(org.unicase.ui.diagram.urml.edit.parts.GoalReferenceWeight2EditPart.VISUAL_ID), new Point(0, 0));
+		registerSnapBackPosition(
+				UrmlVisualIDRegistry
+						.getType(org.unicase.ui.diagram.urml.edit.parts.GoalReferenceWeight2EditPart.VISUAL_ID),
+				new Point(0, 0));
 	}
 
 	/**
@@ -97,16 +100,12 @@
 	 */
 	protected void createDefaultEditPolicies() {
 		super.createDefaultEditPolicies();
-		installEditPolicy(EditPolicy.DIRECT_EDIT_ROLE, new LabelDirectEditPolicy());
-		installEditPolicy(EditPolicy.SELECTION_FEEDBACK_ROLE, new UrmlTextSelectionEditPolicy());
-		installEditPolicy(EditPolicy.PRIMARY_DRAG_ROLE, new NonResizableLabelEditPolicy() {
-
-			protected List createSelectionHandles() {
-				MoveHandle mh = new MoveHandle((GraphicalEditPart) getHost());
-				mh.setBorder(null);
-				return Collections.singletonList(mh);
-			}
-		});
+		installEditPolicy(EditPolicy.DIRECT_EDIT_ROLE,
+				new LabelDirectEditPolicy());
+		installEditPolicy(EditPolicy.SELECTION_FEEDBACK_ROLE,
+				new UrmlTextSelectionEditPolicy());
+		installEditPolicy(EditPolicy.PRIMARY_DRAG_ROLE,
+				new URMLDiagramEditPart.LinkLabelDragPolicy());
 	}
 
 	/**
@@ -174,6 +173,7 @@
 	/**
 	 * @generated
 	 */
+	@SuppressWarnings("rawtypes")
 	protected List getModelChildren() {
 		return Collections.EMPTY_LIST;
 	}
@@ -206,7 +206,9 @@
 		String text = null;
 		EObject parserElement = getParserElement();
 		if (parserElement != null && getParser() != null) {
-			text = getParser().getPrintString(new EObjectAdapter(parserElement), getParserOptions().intValue());
+			text = getParser().getPrintString(
+					new EObjectAdapter(parserElement),
+					getParserOptions().intValue());
 		}
 		if (text == null || text.length() == 0) {
 			text = defaultText;
@@ -236,7 +238,9 @@
 		if (getParserElement() == null || getParser() == null) {
 			return ""; //$NON-NLS-1$
 		}
-		return getParser().getEditString(new EObjectAdapter(getParserElement()), getParserOptions().intValue());
+		return getParser().getEditString(
+				new EObjectAdapter(getParserElement()),
+				getParserOptions().intValue());
 	}
 
 	/**
@@ -257,14 +261,20 @@
 					final EObject element = getParserElement();
 					final IParser parser = getParser();
 					try {
-						IParserEditStatus valid = (IParserEditStatus) getEditingDomain().runExclusive(
-							new RunnableWithResult.Impl() {
+						IParserEditStatus valid = (IParserEditStatus) getEditingDomain()
+								.runExclusive(
+										new RunnableWithResult.Impl<IParserEditStatus>() {
 
-								public void run() {
-									setResult(parser.isValidEditString(new EObjectAdapter(element), (String) value));
-								}
-							});
-						return valid.getCode() == ParserEditStatus.EDITABLE ? null : valid.getMessage();
+											public void run() {
+												setResult(parser
+														.isValidEditString(
+																new EObjectAdapter(
+																		element),
+																(String) value));
+											}
+										});
+						return valid.getCode() == ParserEditStatus.EDITABLE ? null
+								: valid.getMessage();
 					} catch (InterruptedException ie) {
 						ie.printStackTrace();
 					}
@@ -283,7 +293,8 @@
 		if (getParserElement() == null || getParser() == null) {
 			return null;
 		}
-		return getParser().getCompletionProcessor(new EObjectAdapter(getParserElement()));
+		return getParser().getCompletionProcessor(
+				new EObjectAdapter(getParserElement()));
 	}
 
 	/**
@@ -298,9 +309,12 @@
 	 */
 	public IParser getParser() {
 		if (parser == null) {
-			parser = UrmlParserProvider.getParser(UrmlElementTypes.GoalReference_4024, getParserElement(),
-				UrmlVisualIDRegistry
-					.getType(org.unicase.ui.diagram.urml.edit.parts.GoalReferenceWeight2EditPart.VISUAL_ID));
+			parser = UrmlParserProvider
+					.getParser(
+							UrmlElementTypes.GoalReference_4024,
+							getParserElement(),
+							UrmlVisualIDRegistry
+									.getType(org.unicase.ui.diagram.urml.edit.parts.GoalReferenceWeight2EditPart.VISUAL_ID));
 		}
 		return parser;
 	}
@@ -310,8 +324,9 @@
 	 */
 	protected DirectEditManager getManager() {
 		if (manager == null) {
-			setManager(new TextDirectEditManager(this, TextDirectEditManager.getTextCellEditorClass(this),
-				UrmlEditPartFactory.getTextCellEditorLocator(this)));
+			setManager(new TextDirectEditManager(this,
+					TextDirectEditManager.getTextCellEditorClass(this),
+					UrmlEditPartFactory.getTextCellEditorLocator(this)));
 		}
 		return manager;
 	}
@@ -335,7 +350,8 @@
 	 */
 	protected void performDirectEdit(Point eventLocation) {
 		if (getManager().getClass() == TextDirectEditManager.class) {
-			((TextDirectEditManager) getManager()).show(eventLocation.getSWTPoint());
+			((TextDirectEditManager) getManager()).show(eventLocation
+					.getSWTPoint());
 		}
 	}
 
@@ -360,11 +376,15 @@
 
 				public void run() {
 					if (isActive() && isEditable()) {
-						if (theRequest.getExtendedData().get(RequestConstants.REQ_DIRECTEDIT_EXTENDEDDATA_INITIAL_CHAR) instanceof Character) {
-							Character initialChar = (Character) theRequest.getExtendedData().get(
-								RequestConstants.REQ_DIRECTEDIT_EXTENDEDDATA_INITIAL_CHAR);
+						if (theRequest
+								.getExtendedData()
+								.get(RequestConstants.REQ_DIRECTEDIT_EXTENDEDDATA_INITIAL_CHAR) instanceof Character) {
+							Character initialChar = (Character) theRequest
+									.getExtendedData()
+									.get(RequestConstants.REQ_DIRECTEDIT_EXTENDEDDATA_INITIAL_CHAR);
 							performDirectEdit(initialChar.charValue());
-						} else if ((theRequest instanceof DirectEditRequest) && (getEditText().equals(getLabelText()))) {
+						} else if ((theRequest instanceof DirectEditRequest)
+								&& (getEditText().equals(getLabelText()))) {
 							DirectEditRequest editRequest = (DirectEditRequest) theRequest;
 							performDirectEdit(editRequest.getLocation());
 						} else {
@@ -410,7 +430,8 @@
 	 * @generated
 	 */
 	protected void refreshUnderline() {
-		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(NotationPackage.eINSTANCE.getFontStyle());
+		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(
+				NotationPackage.eINSTANCE.getFontStyle());
 		if (style != null && getFigure() instanceof WrappingLabel) {
 			((WrappingLabel) getFigure()).setTextUnderline(style.isUnderline());
 		}
@@ -420,9 +441,11 @@
 	 * @generated
 	 */
 	protected void refreshStrikeThrough() {
-		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(NotationPackage.eINSTANCE.getFontStyle());
+		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(
+				NotationPackage.eINSTANCE.getFontStyle());
 		if (style != null && getFigure() instanceof WrappingLabel) {
-			((WrappingLabel) getFigure()).setTextStrikeThrough(style.isStrikeThrough());
+			((WrappingLabel) getFigure()).setTextStrikeThrough(style
+					.isStrikeThrough());
 		}
 	}
 
@@ -430,11 +453,13 @@
 	 * @generated
 	 */
 	protected void refreshFont() {
-		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(NotationPackage.eINSTANCE.getFontStyle());
+		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(
+				NotationPackage.eINSTANCE.getFontStyle());
 		if (style != null) {
-			FontData fontData = new FontData(style.getFontName(), style.getFontHeight(), (style.isBold() ? SWT.BOLD
-				: SWT.NORMAL)
-				| (style.isItalic() ? SWT.ITALIC : SWT.NORMAL));
+			FontData fontData = new FontData(style.getFontName(),
+					style.getFontHeight(), (style.isBold() ? SWT.BOLD
+							: SWT.NORMAL)
+							| (style.isItalic() ? SWT.ITALIC : SWT.NORMAL));
 			setFont(fontData);
 		}
 	}
@@ -452,9 +477,11 @@
 	protected void addSemanticListeners() {
 		if (getParser() instanceof ISemanticParser) {
 			EObject element = resolveSemanticElement();
-			parserElements = ((ISemanticParser) getParser()).getSemanticElementsBeingParsed(element);
+			parserElements = ((ISemanticParser) getParser())
+					.getSemanticElementsBeingParsed(element);
 			for (int i = 0; i < parserElements.size(); i++) {
-				addListenerFilter("SemanticModel" + i, this, (EObject) parserElements.get(i)); //$NON-NLS-1$
+				addListenerFilter(
+						"SemanticModel" + i, this, (EObject) parserElements.get(i)); //$NON-NLS-1$
 			}
 		} else {
 			super.addSemanticListeners();
@@ -504,17 +531,25 @@
 		if (NotationPackage.eINSTANCE.getFontStyle_FontColor().equals(feature)) {
 			Integer c = (Integer) event.getNewValue();
 			setFontColor(DiagramColorRegistry.getInstance().getColor(c));
-		} else if (NotationPackage.eINSTANCE.getFontStyle_Underline().equals(feature)) {
+		} else if (NotationPackage.eINSTANCE.getFontStyle_Underline().equals(
+				feature)) {
 			refreshUnderline();
-		} else if (NotationPackage.eINSTANCE.getFontStyle_StrikeThrough().equals(feature)) {
+		} else if (NotationPackage.eINSTANCE.getFontStyle_StrikeThrough()
+				.equals(feature)) {
 			refreshStrikeThrough();
-		} else if (NotationPackage.eINSTANCE.getFontStyle_FontHeight().equals(feature)
-			|| NotationPackage.eINSTANCE.getFontStyle_FontName().equals(feature)
-			|| NotationPackage.eINSTANCE.getFontStyle_Bold().equals(feature)
-			|| NotationPackage.eINSTANCE.getFontStyle_Italic().equals(feature)) {
+		} else if (NotationPackage.eINSTANCE.getFontStyle_FontHeight().equals(
+				feature)
+				|| NotationPackage.eINSTANCE.getFontStyle_FontName().equals(
+						feature)
+				|| NotationPackage.eINSTANCE.getFontStyle_Bold()
+						.equals(feature)
+				|| NotationPackage.eINSTANCE.getFontStyle_Italic().equals(
+						feature)) {
 			refreshFont();
 		} else {
-			if (getParser() != null && getParser().isAffectingEvent(event, getParserOptions().intValue())) {
+			if (getParser() != null
+					&& getParser().isAffectingEvent(event,
+							getParserOptions().intValue())) {
 				refreshLabel();
 			}
 			if (getParser() instanceof ISemanticParser) {
Index: src/org/unicase/ui/diagram/urml/edit/parts/ProductFeaturesEditPart.java
===================================================================
--- src/org/unicase/ui/diagram/urml/edit/parts/ProductFeaturesEditPart.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/edit/parts/ProductFeaturesEditPart.java	(working copy)
@@ -12,7 +12,8 @@
 /**
  * @generated
  */
-public class ProductFeaturesEditPart extends ConnectionNodeEditPart implements ITreeBranchEditPart {
+public class ProductFeaturesEditPart extends ConnectionNodeEditPart implements
+		ITreeBranchEditPart {
 
 	/**
 	 * @generated
@@ -31,41 +32,8 @@
 	 */
 	protected void createDefaultEditPolicies() {
 		super.createDefaultEditPolicies();
-		installEditPolicy(EditPolicyRoles.SEMANTIC_ROLE, new ProductFeaturesItemSemanticEditPolicy());
-	}
-
-	/**
-	 * @generated
-	 */
-	protected boolean addFixedChild(EditPart childEditPart) {
-		return false;
-	}
-
-	/**
-	 * @generated
-	 */
-	protected void addChildVisual(EditPart childEditPart, int index) {
-		if (addFixedChild(childEditPart)) {
-			return;
-		}
-		super.addChildVisual(childEditPart, -1);
-	}
-
-	/**
-	 * @generated
-	 */
-	protected boolean removeFixedChild(EditPart childEditPart) {
-		return false;
-	}
-
-	/**
-	 * @generated
-	 */
-	protected void removeChildVisual(EditPart childEditPart) {
-		if (removeFixedChild(childEditPart)) {
-			return;
-		}
-		super.removeChildVisual(childEditPart);
+		installEditPolicy(EditPolicyRoles.SEMANTIC_ROLE,
+				new ProductFeaturesItemSemanticEditPolicy());
 	}
 
 	/**
Index: src/org/unicase/ui/diagram/urml/edit/parts/GoalReferenceWeightEditPart.java
===================================================================
--- src/org/unicase/ui/diagram/urml/edit/parts/GoalReferenceWeightEditPart.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/edit/parts/GoalReferenceWeightEditPart.java	(working copy)
@@ -50,7 +50,8 @@
 /**
  * @generated
  */
-public class GoalReferenceWeightEditPart extends LabelEditPart implements ITextAwareEditPart {
+public class GoalReferenceWeightEditPart extends LabelEditPart implements
+		ITextAwareEditPart {
 
 	/**
 	 * @generated
@@ -70,7 +71,7 @@
 	/**
 	 * @generated
 	 */
-	private List parserElements;
+	private List<?> parserElements;
 
 	/**
 	 * @generated
@@ -81,8 +82,10 @@
 	 * @generated
 	 */
 	static {
-		registerSnapBackPosition(UrmlVisualIDRegistry
-			.getType(org.unicase.ui.diagram.urml.edit.parts.GoalReferenceWeightEditPart.VISUAL_ID), new Point(0, 0));
+		registerSnapBackPosition(
+				UrmlVisualIDRegistry
+						.getType(org.unicase.ui.diagram.urml.edit.parts.GoalReferenceWeightEditPart.VISUAL_ID),
+				new Point(0, 0));
 	}
 
 	/**
@@ -97,16 +100,12 @@
 	 */
 	protected void createDefaultEditPolicies() {
 		super.createDefaultEditPolicies();
-		installEditPolicy(EditPolicy.DIRECT_EDIT_ROLE, new LabelDirectEditPolicy());
-		installEditPolicy(EditPolicy.SELECTION_FEEDBACK_ROLE, new UrmlTextSelectionEditPolicy());
-		installEditPolicy(EditPolicy.PRIMARY_DRAG_ROLE, new NonResizableLabelEditPolicy() {
-
-			protected List createSelectionHandles() {
-				MoveHandle mh = new MoveHandle((GraphicalEditPart) getHost());
-				mh.setBorder(null);
-				return Collections.singletonList(mh);
-			}
-		});
+		installEditPolicy(EditPolicy.DIRECT_EDIT_ROLE,
+				new LabelDirectEditPolicy());
+		installEditPolicy(EditPolicy.SELECTION_FEEDBACK_ROLE,
+				new UrmlTextSelectionEditPolicy());
+		installEditPolicy(EditPolicy.PRIMARY_DRAG_ROLE,
+				new URMLDiagramEditPart.LinkLabelDragPolicy());
 	}
 
 	/**
@@ -174,6 +173,7 @@
 	/**
 	 * @generated
 	 */
+	@SuppressWarnings("rawtypes")
 	protected List getModelChildren() {
 		return Collections.EMPTY_LIST;
 	}
@@ -206,7 +206,9 @@
 		String text = null;
 		EObject parserElement = getParserElement();
 		if (parserElement != null && getParser() != null) {
-			text = getParser().getPrintString(new EObjectAdapter(parserElement), getParserOptions().intValue());
+			text = getParser().getPrintString(
+					new EObjectAdapter(parserElement),
+					getParserOptions().intValue());
 		}
 		if (text == null || text.length() == 0) {
 			text = defaultText;
@@ -236,7 +238,9 @@
 		if (getParserElement() == null || getParser() == null) {
 			return ""; //$NON-NLS-1$
 		}
-		return getParser().getEditString(new EObjectAdapter(getParserElement()), getParserOptions().intValue());
+		return getParser().getEditString(
+				new EObjectAdapter(getParserElement()),
+				getParserOptions().intValue());
 	}
 
 	/**
@@ -257,14 +261,20 @@
 					final EObject element = getParserElement();
 					final IParser parser = getParser();
 					try {
-						IParserEditStatus valid = (IParserEditStatus) getEditingDomain().runExclusive(
-							new RunnableWithResult.Impl() {
+						IParserEditStatus valid = (IParserEditStatus) getEditingDomain()
+								.runExclusive(
+										new RunnableWithResult.Impl<IParserEditStatus>() {
 
-								public void run() {
-									setResult(parser.isValidEditString(new EObjectAdapter(element), (String) value));
-								}
-							});
-						return valid.getCode() == ParserEditStatus.EDITABLE ? null : valid.getMessage();
+											public void run() {
+												setResult(parser
+														.isValidEditString(
+																new EObjectAdapter(
+																		element),
+																(String) value));
+											}
+										});
+						return valid.getCode() == ParserEditStatus.EDITABLE ? null
+								: valid.getMessage();
 					} catch (InterruptedException ie) {
 						ie.printStackTrace();
 					}
@@ -283,7 +293,8 @@
 		if (getParserElement() == null || getParser() == null) {
 			return null;
 		}
-		return getParser().getCompletionProcessor(new EObjectAdapter(getParserElement()));
+		return getParser().getCompletionProcessor(
+				new EObjectAdapter(getParserElement()));
 	}
 
 	/**
@@ -298,9 +309,12 @@
 	 */
 	public IParser getParser() {
 		if (parser == null) {
-			parser = UrmlParserProvider.getParser(UrmlElementTypes.GoalReference_4023, getParserElement(),
-				UrmlVisualIDRegistry
-					.getType(org.unicase.ui.diagram.urml.edit.parts.GoalReferenceWeightEditPart.VISUAL_ID));
+			parser = UrmlParserProvider
+					.getParser(
+							UrmlElementTypes.GoalReference_4023,
+							getParserElement(),
+							UrmlVisualIDRegistry
+									.getType(org.unicase.ui.diagram.urml.edit.parts.GoalReferenceWeightEditPart.VISUAL_ID));
 		}
 		return parser;
 	}
@@ -310,8 +324,9 @@
 	 */
 	protected DirectEditManager getManager() {
 		if (manager == null) {
-			setManager(new TextDirectEditManager(this, TextDirectEditManager.getTextCellEditorClass(this),
-				UrmlEditPartFactory.getTextCellEditorLocator(this)));
+			setManager(new TextDirectEditManager(this,
+					TextDirectEditManager.getTextCellEditorClass(this),
+					UrmlEditPartFactory.getTextCellEditorLocator(this)));
 		}
 		return manager;
 	}
@@ -335,7 +350,8 @@
 	 */
 	protected void performDirectEdit(Point eventLocation) {
 		if (getManager().getClass() == TextDirectEditManager.class) {
-			((TextDirectEditManager) getManager()).show(eventLocation.getSWTPoint());
+			((TextDirectEditManager) getManager()).show(eventLocation
+					.getSWTPoint());
 		}
 	}
 
@@ -360,11 +376,15 @@
 
 				public void run() {
 					if (isActive() && isEditable()) {
-						if (theRequest.getExtendedData().get(RequestConstants.REQ_DIRECTEDIT_EXTENDEDDATA_INITIAL_CHAR) instanceof Character) {
-							Character initialChar = (Character) theRequest.getExtendedData().get(
-								RequestConstants.REQ_DIRECTEDIT_EXTENDEDDATA_INITIAL_CHAR);
+						if (theRequest
+								.getExtendedData()
+								.get(RequestConstants.REQ_DIRECTEDIT_EXTENDEDDATA_INITIAL_CHAR) instanceof Character) {
+							Character initialChar = (Character) theRequest
+									.getExtendedData()
+									.get(RequestConstants.REQ_DIRECTEDIT_EXTENDEDDATA_INITIAL_CHAR);
 							performDirectEdit(initialChar.charValue());
-						} else if ((theRequest instanceof DirectEditRequest) && (getEditText().equals(getLabelText()))) {
+						} else if ((theRequest instanceof DirectEditRequest)
+								&& (getEditText().equals(getLabelText()))) {
 							DirectEditRequest editRequest = (DirectEditRequest) theRequest;
 							performDirectEdit(editRequest.getLocation());
 						} else {
@@ -410,7 +430,8 @@
 	 * @generated
 	 */
 	protected void refreshUnderline() {
-		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(NotationPackage.eINSTANCE.getFontStyle());
+		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(
+				NotationPackage.eINSTANCE.getFontStyle());
 		if (style != null && getFigure() instanceof WrappingLabel) {
 			((WrappingLabel) getFigure()).setTextUnderline(style.isUnderline());
 		}
@@ -420,9 +441,11 @@
 	 * @generated
 	 */
 	protected void refreshStrikeThrough() {
-		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(NotationPackage.eINSTANCE.getFontStyle());
+		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(
+				NotationPackage.eINSTANCE.getFontStyle());
 		if (style != null && getFigure() instanceof WrappingLabel) {
-			((WrappingLabel) getFigure()).setTextStrikeThrough(style.isStrikeThrough());
+			((WrappingLabel) getFigure()).setTextStrikeThrough(style
+					.isStrikeThrough());
 		}
 	}
 
@@ -430,11 +453,13 @@
 	 * @generated
 	 */
 	protected void refreshFont() {
-		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(NotationPackage.eINSTANCE.getFontStyle());
+		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(
+				NotationPackage.eINSTANCE.getFontStyle());
 		if (style != null) {
-			FontData fontData = new FontData(style.getFontName(), style.getFontHeight(), (style.isBold() ? SWT.BOLD
-				: SWT.NORMAL)
-				| (style.isItalic() ? SWT.ITALIC : SWT.NORMAL));
+			FontData fontData = new FontData(style.getFontName(),
+					style.getFontHeight(), (style.isBold() ? SWT.BOLD
+							: SWT.NORMAL)
+							| (style.isItalic() ? SWT.ITALIC : SWT.NORMAL));
 			setFont(fontData);
 		}
 	}
@@ -452,9 +477,11 @@
 	protected void addSemanticListeners() {
 		if (getParser() instanceof ISemanticParser) {
 			EObject element = resolveSemanticElement();
-			parserElements = ((ISemanticParser) getParser()).getSemanticElementsBeingParsed(element);
+			parserElements = ((ISemanticParser) getParser())
+					.getSemanticElementsBeingParsed(element);
 			for (int i = 0; i < parserElements.size(); i++) {
-				addListenerFilter("SemanticModel" + i, this, (EObject) parserElements.get(i)); //$NON-NLS-1$
+				addListenerFilter(
+						"SemanticModel" + i, this, (EObject) parserElements.get(i)); //$NON-NLS-1$
 			}
 		} else {
 			super.addSemanticListeners();
@@ -504,17 +531,25 @@
 		if (NotationPackage.eINSTANCE.getFontStyle_FontColor().equals(feature)) {
 			Integer c = (Integer) event.getNewValue();
 			setFontColor(DiagramColorRegistry.getInstance().getColor(c));
-		} else if (NotationPackage.eINSTANCE.getFontStyle_Underline().equals(feature)) {
+		} else if (NotationPackage.eINSTANCE.getFontStyle_Underline().equals(
+				feature)) {
 			refreshUnderline();
-		} else if (NotationPackage.eINSTANCE.getFontStyle_StrikeThrough().equals(feature)) {
+		} else if (NotationPackage.eINSTANCE.getFontStyle_StrikeThrough()
+				.equals(feature)) {
 			refreshStrikeThrough();
-		} else if (NotationPackage.eINSTANCE.getFontStyle_FontHeight().equals(feature)
-			|| NotationPackage.eINSTANCE.getFontStyle_FontName().equals(feature)
-			|| NotationPackage.eINSTANCE.getFontStyle_Bold().equals(feature)
-			|| NotationPackage.eINSTANCE.getFontStyle_Italic().equals(feature)) {
+		} else if (NotationPackage.eINSTANCE.getFontStyle_FontHeight().equals(
+				feature)
+				|| NotationPackage.eINSTANCE.getFontStyle_FontName().equals(
+						feature)
+				|| NotationPackage.eINSTANCE.getFontStyle_Bold()
+						.equals(feature)
+				|| NotationPackage.eINSTANCE.getFontStyle_Italic().equals(
+						feature)) {
 			refreshFont();
 		} else {
-			if (getParser() != null && getParser().isAffectingEvent(event, getParserOptions().intValue())) {
+			if (getParser() != null
+					&& getParser().isAffectingEvent(event,
+							getParserOptions().intValue())) {
 				refreshLabel();
 			}
 			if (getParser() instanceof ISemanticParser) {
Index: src/org/unicase/ui/diagram/urml/edit/helpers/UrmlBaseEditHelper.java
===================================================================
--- src/org/unicase/ui/diagram/urml/edit/helpers/UrmlBaseEditHelper.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/edit/helpers/UrmlBaseEditHelper.java	(working copy)
@@ -33,7 +33,7 @@
 	protected IEditHelperAdvice[] getEditHelperAdvice(IEditCommandRequest req) {
 		if (req.getParameter(CONTEXT_ELEMENT_TYPE) instanceof IElementType) {
 			return ElementTypeRegistry.getInstance().getEditHelperAdvice(
-				(IElementType) req.getParameter(CONTEXT_ELEMENT_TYPE));
+					(IElementType) req.getParameter(CONTEXT_ELEMENT_TYPE));
 		}
 		return super.getEditHelperAdvice(req);
 	}
@@ -67,7 +67,8 @@
 	/**
 	 * @generated
 	 */
-	protected ICommand getCreateRelationshipCommand(CreateRelationshipRequest req) {
+	protected ICommand getCreateRelationshipCommand(
+			CreateRelationshipRequest req) {
 		return null;
 	}
 
Index: src/org/unicase/ui/diagram/urml/edit/commands/DangerCreateCommand.java
===================================================================
--- src/org/unicase/ui/diagram/urml/edit/commands/DangerCreateCommand.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/edit/commands/DangerCreateCommand.java	(working copy)
@@ -33,7 +33,8 @@
 	 * @generated
 	 */
 	protected EObject getElementToEdit() {
-		EObject container = ((CreateElementRequest) getRequest()).getContainer();
+		EObject container = ((CreateElementRequest) getRequest())
+				.getContainer();
 		if (container instanceof View) {
 			container = ((View) container).getElement();
 		}
@@ -51,7 +52,8 @@
 	/**
 	 * @generated
 	 */
-	protected CommandResult doExecuteWithResult(IProgressMonitor monitor, IAdaptable info) throws ExecutionException {
+	protected CommandResult doExecuteWithResult(IProgressMonitor monitor,
+			IAdaptable info) throws ExecutionException {
 		Danger newElement = DangerFactory.eINSTANCE.createDanger();
 
 		MEDiagram owner = (MEDiagram) getElementToEdit();
@@ -68,12 +70,17 @@
 	/**
 	 * @generated
 	 */
-	protected void doConfigure(Danger newElement, IProgressMonitor monitor, IAdaptable info) throws ExecutionException {
-		IElementType elementType = ((CreateElementRequest) getRequest()).getElementType();
-		ConfigureRequest configureRequest = new ConfigureRequest(getEditingDomain(), newElement, elementType);
-		configureRequest.setClientContext(((CreateElementRequest) getRequest()).getClientContext());
+	protected void doConfigure(Danger newElement, IProgressMonitor monitor,
+			IAdaptable info) throws ExecutionException {
+		IElementType elementType = ((CreateElementRequest) getRequest())
+				.getElementType();
+		ConfigureRequest configureRequest = new ConfigureRequest(
+				getEditingDomain(), newElement, elementType);
+		configureRequest.setClientContext(((CreateElementRequest) getRequest())
+				.getClientContext());
 		configureRequest.addParameters(getRequest().getParameters());
-		ICommand configureCommand = elementType.getEditCommand(configureRequest);
+		ICommand configureCommand = elementType
+				.getEditCommand(configureRequest);
 		if (configureCommand != null && configureCommand.canExecute()) {
 			configureCommand.execute(monitor, info);
 		}
Index: src/org/unicase/ui/diagram/urml/edit/commands/VariationPointInstanceCreateCommand.java
===================================================================
--- src/org/unicase/ui/diagram/urml/edit/commands/VariationPointInstanceCreateCommand.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/edit/commands/VariationPointInstanceCreateCommand.java	(working copy)
@@ -33,7 +33,8 @@
 	 * @generated
 	 */
 	protected EObject getElementToEdit() {
-		EObject container = ((CreateElementRequest) getRequest()).getContainer();
+		EObject container = ((CreateElementRequest) getRequest())
+				.getContainer();
 		if (container instanceof View) {
 			container = ((View) container).getElement();
 		}
@@ -51,8 +52,10 @@
 	/**
 	 * @generated
 	 */
-	protected CommandResult doExecuteWithResult(IProgressMonitor monitor, IAdaptable info) throws ExecutionException {
-		VariationPointInstance newElement = FeatureFactory.eINSTANCE.createVariationPointInstance();
+	protected CommandResult doExecuteWithResult(IProgressMonitor monitor,
+			IAdaptable info) throws ExecutionException {
+		VariationPointInstance newElement = FeatureFactory.eINSTANCE
+				.createVariationPointInstance();
 
 		MEDiagram owner = (MEDiagram) getElementToEdit();
 		owner.getNewElements().add(newElement);
@@ -68,13 +71,18 @@
 	/**
 	 * @generated
 	 */
-	protected void doConfigure(VariationPointInstance newElement, IProgressMonitor monitor, IAdaptable info)
-		throws ExecutionException {
-		IElementType elementType = ((CreateElementRequest) getRequest()).getElementType();
-		ConfigureRequest configureRequest = new ConfigureRequest(getEditingDomain(), newElement, elementType);
-		configureRequest.setClientContext(((CreateElementRequest) getRequest()).getClientContext());
+	protected void doConfigure(VariationPointInstance newElement,
+			IProgressMonitor monitor, IAdaptable info)
+			throws ExecutionException {
+		IElementType elementType = ((CreateElementRequest) getRequest())
+				.getElementType();
+		ConfigureRequest configureRequest = new ConfigureRequest(
+				getEditingDomain(), newElement, elementType);
+		configureRequest.setClientContext(((CreateElementRequest) getRequest())
+				.getClientContext());
 		configureRequest.addParameters(getRequest().getParameters());
-		ICommand configureCommand = elementType.getEditCommand(configureRequest);
+		ICommand configureCommand = elementType
+				.getEditCommand(configureRequest);
 		if (configureCommand != null && configureCommand.canExecute()) {
 			configureCommand.execute(monitor, info);
 		}
Index: src/org/unicase/ui/diagram/urml/edit/commands/AssetTriggeredDangersCreateCommand.java
===================================================================
--- src/org/unicase/ui/diagram/urml/edit/commands/AssetTriggeredDangersCreateCommand.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/edit/commands/AssetTriggeredDangersCreateCommand.java	(working copy)
@@ -29,7 +29,8 @@
 	/**
 	 * @generated
 	 */
-	public AssetTriggeredDangersCreateCommand(CreateRelationshipRequest request, EObject source, EObject target) {
+	public AssetTriggeredDangersCreateCommand(
+			CreateRelationshipRequest request, EObject source, EObject target) {
 		super(request.getLabel(), null, request);
 		this.source = source;
 		this.target = target;
@@ -52,16 +53,18 @@
 			return true; // link creation is in progress; source is not defined yet
 		}
 		// target may be null here but it's possible to check constraint
-		return UrmlBaseItemSemanticEditPolicy.LinkConstraints.canCreateAssetTriggeredDangers_4017(getSource(),
-			getTarget());
+		return UrmlBaseItemSemanticEditPolicy.getLinkConstraints()
+				.canCreateAssetTriggeredDangers_4017(getSource(), getTarget());
 	}
 
 	/**
 	 * @generated
 	 */
-	protected CommandResult doExecuteWithResult(IProgressMonitor monitor, IAdaptable info) throws ExecutionException {
+	protected CommandResult doExecuteWithResult(IProgressMonitor monitor,
+			IAdaptable info) throws ExecutionException {
 		if (!canExecute()) {
-			throw new ExecutionException("Invalid arguments in create link command"); //$NON-NLS-1$
+			throw new ExecutionException(
+					"Invalid arguments in create link command"); //$NON-NLS-1$
 		}
 
 		if (getSource() != null && getTarget() != null) {
Index: src/org/unicase/ui/diagram/urml/edit/commands/AbstractFeatureRequiredFeaturesReorientCommand.java
===================================================================
--- src/org/unicase/ui/diagram/urml/edit/commands/AbstractFeatureRequiredFeaturesReorientCommand.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/edit/commands/AbstractFeatureRequiredFeaturesReorientCommand.java	(working copy)
@@ -14,7 +14,8 @@
 /**
  * @generated
  */
-public class AbstractFeatureRequiredFeaturesReorientCommand extends EditElementCommand {
+public class AbstractFeatureRequiredFeaturesReorientCommand extends
+		EditElementCommand {
 
 	/**
 	 * @generated
@@ -39,7 +40,8 @@
 	/**
 	 * @generated
 	 */
-	public AbstractFeatureRequiredFeaturesReorientCommand(ReorientReferenceRelationshipRequest request) {
+	public AbstractFeatureRequiredFeaturesReorientCommand(
+			ReorientReferenceRelationshipRequest request) {
 		super(request.getLabel(), null, request);
 		reorientDirection = request.getDirection();
 		referenceOwner = request.getReferenceOwner();
@@ -70,8 +72,9 @@
 		if (!(oldEnd instanceof AbstractFeature && newEnd instanceof AbstractFeature)) {
 			return false;
 		}
-		return UrmlBaseItemSemanticEditPolicy.LinkConstraints.canExistAbstractFeatureRequiredFeatures_4045(
-			getNewSource(), getOldTarget());
+		return UrmlBaseItemSemanticEditPolicy.getLinkConstraints()
+				.canExistAbstractFeatureRequiredFeatures_4045(getNewSource(),
+						getOldTarget());
 	}
 
 	/**
@@ -81,16 +84,19 @@
 		if (!(oldEnd instanceof AbstractFeature && newEnd instanceof AbstractFeature)) {
 			return false;
 		}
-		return UrmlBaseItemSemanticEditPolicy.LinkConstraints.canExistAbstractFeatureRequiredFeatures_4045(
-			getOldSource(), getNewTarget());
+		return UrmlBaseItemSemanticEditPolicy.getLinkConstraints()
+				.canExistAbstractFeatureRequiredFeatures_4045(getOldSource(),
+						getNewTarget());
 	}
 
 	/**
 	 * @generated
 	 */
-	protected CommandResult doExecuteWithResult(IProgressMonitor monitor, IAdaptable info) throws ExecutionException {
+	protected CommandResult doExecuteWithResult(IProgressMonitor monitor,
+			IAdaptable info) throws ExecutionException {
 		if (!canExecute()) {
-			throw new ExecutionException("Invalid arguments in reorient link command"); //$NON-NLS-1$
+			throw new ExecutionException(
+					"Invalid arguments in reorient link command"); //$NON-NLS-1$
 		}
 		if (reorientDirection == ReorientRelationshipRequest.REORIENT_SOURCE) {
 			return reorientSource();
Index: src/org/unicase/ui/diagram/urml/edit/commands/FeatureCreateCommand.java
===================================================================
--- src/org/unicase/ui/diagram/urml/edit/commands/FeatureCreateCommand.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/edit/commands/FeatureCreateCommand.java	(working copy)
@@ -33,7 +33,8 @@
 	 * @generated
 	 */
 	protected EObject getElementToEdit() {
-		EObject container = ((CreateElementRequest) getRequest()).getContainer();
+		EObject container = ((CreateElementRequest) getRequest())
+				.getContainer();
 		if (container instanceof View) {
 			container = ((View) container).getElement();
 		}
@@ -51,7 +52,8 @@
 	/**
 	 * @generated
 	 */
-	protected CommandResult doExecuteWithResult(IProgressMonitor monitor, IAdaptable info) throws ExecutionException {
+	protected CommandResult doExecuteWithResult(IProgressMonitor monitor,
+			IAdaptable info) throws ExecutionException {
 		Feature newElement = FeatureFactory.eINSTANCE.createFeature();
 
 		MEDiagram owner = (MEDiagram) getElementToEdit();
@@ -68,12 +70,17 @@
 	/**
 	 * @generated
 	 */
-	protected void doConfigure(Feature newElement, IProgressMonitor monitor, IAdaptable info) throws ExecutionException {
-		IElementType elementType = ((CreateElementRequest) getRequest()).getElementType();
-		ConfigureRequest configureRequest = new ConfigureRequest(getEditingDomain(), newElement, elementType);
-		configureRequest.setClientContext(((CreateElementRequest) getRequest()).getClientContext());
+	protected void doConfigure(Feature newElement, IProgressMonitor monitor,
+			IAdaptable info) throws ExecutionException {
+		IElementType elementType = ((CreateElementRequest) getRequest())
+				.getElementType();
+		ConfigureRequest configureRequest = new ConfigureRequest(
+				getEditingDomain(), newElement, elementType);
+		configureRequest.setClientContext(((CreateElementRequest) getRequest())
+				.getClientContext());
 		configureRequest.addParameters(getRequest().getParameters());
-		ICommand configureCommand = elementType.getEditCommand(configureRequest);
+		ICommand configureCommand = elementType
+				.getEditCommand(configureRequest);
 		if (configureCommand != null && configureCommand.canExecute()) {
 			configureCommand.execute(monitor, info);
 		}
Index: src/org/unicase/ui/diagram/urml/edit/commands/ProceduralMitigationCreateCommand.java
===================================================================
--- src/org/unicase/ui/diagram/urml/edit/commands/ProceduralMitigationCreateCommand.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/edit/commands/ProceduralMitigationCreateCommand.java	(working copy)
@@ -33,7 +33,8 @@
 	 * @generated
 	 */
 	protected EObject getElementToEdit() {
-		EObject container = ((CreateElementRequest) getRequest()).getContainer();
+		EObject container = ((CreateElementRequest) getRequest())
+				.getContainer();
 		if (container instanceof View) {
 			container = ((View) container).getElement();
 		}
@@ -51,8 +52,10 @@
 	/**
 	 * @generated
 	 */
-	protected CommandResult doExecuteWithResult(IProgressMonitor monitor, IAdaptable info) throws ExecutionException {
-		ProceduralMitigation newElement = DangerFactory.eINSTANCE.createProceduralMitigation();
+	protected CommandResult doExecuteWithResult(IProgressMonitor monitor,
+			IAdaptable info) throws ExecutionException {
+		ProceduralMitigation newElement = DangerFactory.eINSTANCE
+				.createProceduralMitigation();
 
 		MEDiagram owner = (MEDiagram) getElementToEdit();
 		owner.getNewElements().add(newElement);
@@ -68,13 +71,18 @@
 	/**
 	 * @generated
 	 */
-	protected void doConfigure(ProceduralMitigation newElement, IProgressMonitor monitor, IAdaptable info)
-		throws ExecutionException {
-		IElementType elementType = ((CreateElementRequest) getRequest()).getElementType();
-		ConfigureRequest configureRequest = new ConfigureRequest(getEditingDomain(), newElement, elementType);
-		configureRequest.setClientContext(((CreateElementRequest) getRequest()).getClientContext());
+	protected void doConfigure(ProceduralMitigation newElement,
+			IProgressMonitor monitor, IAdaptable info)
+			throws ExecutionException {
+		IElementType elementType = ((CreateElementRequest) getRequest())
+				.getElementType();
+		ConfigureRequest configureRequest = new ConfigureRequest(
+				getEditingDomain(), newElement, elementType);
+		configureRequest.setClientContext(((CreateElementRequest) getRequest())
+				.getClientContext());
 		configureRequest.addParameters(getRequest().getParameters());
-		ICommand configureCommand = elementType.getEditCommand(configureRequest);
+		ICommand configureCommand = elementType
+				.getEditCommand(configureRequest);
 		if (configureCommand != null && configureCommand.canExecute()) {
 			configureCommand.execute(monitor, info);
 		}
Index: src/org/unicase/ui/diagram/urml/edit/commands/AbstractFeatureSubFeaturesReorientCommand.java
===================================================================
--- src/org/unicase/ui/diagram/urml/edit/commands/AbstractFeatureSubFeaturesReorientCommand.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/edit/commands/AbstractFeatureSubFeaturesReorientCommand.java	(working copy)
@@ -14,7 +14,8 @@
 /**
  * @generated
  */
-public class AbstractFeatureSubFeaturesReorientCommand extends EditElementCommand {
+public class AbstractFeatureSubFeaturesReorientCommand extends
+		EditElementCommand {
 
 	/**
 	 * @generated
@@ -39,7 +40,8 @@
 	/**
 	 * @generated
 	 */
-	public AbstractFeatureSubFeaturesReorientCommand(ReorientReferenceRelationshipRequest request) {
+	public AbstractFeatureSubFeaturesReorientCommand(
+			ReorientReferenceRelationshipRequest request) {
 		super(request.getLabel(), null, request);
 		reorientDirection = request.getDirection();
 		referenceOwner = request.getReferenceOwner();
@@ -70,8 +72,9 @@
 		if (!(oldEnd instanceof AbstractFeature && newEnd instanceof AbstractFeature)) {
 			return false;
 		}
-		return UrmlBaseItemSemanticEditPolicy.LinkConstraints.canExistAbstractFeatureSubFeatures_4034(getNewSource(),
-			getOldTarget());
+		return UrmlBaseItemSemanticEditPolicy.getLinkConstraints()
+				.canExistAbstractFeatureSubFeatures_4034(getNewSource(),
+						getOldTarget());
 	}
 
 	/**
@@ -81,16 +84,19 @@
 		if (!(oldEnd instanceof AbstractFeature && newEnd instanceof AbstractFeature)) {
 			return false;
 		}
-		return UrmlBaseItemSemanticEditPolicy.LinkConstraints.canExistAbstractFeatureSubFeatures_4034(getOldSource(),
-			getNewTarget());
+		return UrmlBaseItemSemanticEditPolicy.getLinkConstraints()
+				.canExistAbstractFeatureSubFeatures_4034(getOldSource(),
+						getNewTarget());
 	}
 
 	/**
 	 * @generated
 	 */
-	protected CommandResult doExecuteWithResult(IProgressMonitor monitor, IAdaptable info) throws ExecutionException {
+	protected CommandResult doExecuteWithResult(IProgressMonitor monitor,
+			IAdaptable info) throws ExecutionException {
 		if (!canExecute()) {
-			throw new ExecutionException("Invalid arguments in reorient link command"); //$NON-NLS-1$
+			throw new ExecutionException(
+					"Invalid arguments in reorient link command"); //$NON-NLS-1$
 		}
 		if (reorientDirection == ReorientRelationshipRequest.REORIENT_SOURCE) {
 			return reorientSource();
Index: src/org/unicase/ui/diagram/urml/edit/commands/VariationPointOptionalSubFeaturesCreateCommand.java
===================================================================
--- src/org/unicase/ui/diagram/urml/edit/commands/VariationPointOptionalSubFeaturesCreateCommand.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/edit/commands/VariationPointOptionalSubFeaturesCreateCommand.java	(working copy)
@@ -14,7 +14,8 @@
 /**
  * @generated
  */
-public class VariationPointOptionalSubFeaturesCreateCommand extends EditElementCommand {
+public class VariationPointOptionalSubFeaturesCreateCommand extends
+		EditElementCommand {
 
 	/**
 	 * @generated
@@ -29,8 +30,8 @@
 	/**
 	 * @generated
 	 */
-	public VariationPointOptionalSubFeaturesCreateCommand(CreateRelationshipRequest request, EObject source,
-		EObject target) {
+	public VariationPointOptionalSubFeaturesCreateCommand(
+			CreateRelationshipRequest request, EObject source, EObject target) {
 		super(request.getLabel(), null, request);
 		this.source = source;
 		this.target = target;
@@ -53,16 +54,19 @@
 			return true; // link creation is in progress; source is not defined yet
 		}
 		// target may be null here but it's possible to check constraint
-		return UrmlBaseItemSemanticEditPolicy.LinkConstraints.canCreateVariationPointOptionalSubFeatures_4046(
-			getSource(), getTarget());
+		return UrmlBaseItemSemanticEditPolicy.getLinkConstraints()
+				.canCreateVariationPointOptionalSubFeatures_4046(getSource(),
+						getTarget());
 	}
 
 	/**
 	 * @generated
 	 */
-	protected CommandResult doExecuteWithResult(IProgressMonitor monitor, IAdaptable info) throws ExecutionException {
+	protected CommandResult doExecuteWithResult(IProgressMonitor monitor,
+			IAdaptable info) throws ExecutionException {
 		if (!canExecute()) {
-			throw new ExecutionException("Invalid arguments in create link command"); //$NON-NLS-1$
+			throw new ExecutionException(
+					"Invalid arguments in create link command"); //$NON-NLS-1$
 		}
 
 		if (getSource() != null && getTarget() != null) {
Index: src/org/unicase/ui/diagram/urml/edit/commands/GoalReferenceReorientCommand.java
===================================================================
--- src/org/unicase/ui/diagram/urml/edit/commands/GoalReferenceReorientCommand.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/edit/commands/GoalReferenceReorientCommand.java	(working copy)
@@ -7,8 +7,10 @@
 import org.eclipse.gmf.runtime.common.core.command.CommandResult;
 import org.eclipse.gmf.runtime.emf.type.core.commands.EditElementCommand;
 import org.eclipse.gmf.runtime.emf.type.core.requests.ReorientRelationshipRequest;
+import org.unicase.model.diagram.MEDiagram;
 import org.unicase.model.urml.goal.Goal;
 import org.unicase.model.urml.goal.GoalReference;
+import org.unicase.ui.diagram.urml.edit.policies.UrmlBaseItemSemanticEditPolicy;
 
 /**
  * @generated
@@ -93,9 +95,11 @@
 	/**
 	 * @generated
 	 */
-	protected CommandResult doExecuteWithResult(IProgressMonitor monitor, IAdaptable info) throws ExecutionException {
+	protected CommandResult doExecuteWithResult(IProgressMonitor monitor,
+			IAdaptable info) throws ExecutionException {
 		if (!canExecute()) {
-			throw new ExecutionException("Invalid arguments in reorient link command"); //$NON-NLS-1$
+			throw new ExecutionException(
+					"Invalid arguments in reorient link command"); //$NON-NLS-1$
 		}
 		if (reorientDirection == ReorientRelationshipRequest.REORIENT_SOURCE) {
 			return reorientSource();
Index: src/org/unicase/ui/diagram/urml/edit/commands/UrmlModelElementAssociationsReorientCommand.java
===================================================================
--- src/org/unicase/ui/diagram/urml/edit/commands/UrmlModelElementAssociationsReorientCommand.java	(revision 0)
+++ src/org/unicase/ui/diagram/urml/edit/commands/UrmlModelElementAssociationsReorientCommand.java	(revision 0)
@@ -0,0 +1,155 @@
+package org.unicase.ui.diagram.urml.edit.commands;
+
+import org.eclipse.core.commands.ExecutionException;
+import org.eclipse.core.runtime.IAdaptable;
+import org.eclipse.core.runtime.IProgressMonitor;
+import org.eclipse.emf.ecore.EObject;
+import org.eclipse.gmf.runtime.common.core.command.CommandResult;
+import org.eclipse.gmf.runtime.emf.type.core.commands.EditElementCommand;
+import org.eclipse.gmf.runtime.emf.type.core.requests.ReorientReferenceRelationshipRequest;
+import org.eclipse.gmf.runtime.emf.type.core.requests.ReorientRelationshipRequest;
+import org.unicase.model.urml.UrmlModelElement;
+import org.unicase.ui.diagram.urml.edit.policies.UrmlBaseItemSemanticEditPolicy;
+
+/**
+ * @generated
+ */
+public class UrmlModelElementAssociationsReorientCommand extends
+		EditElementCommand {
+
+	/**
+	 * @generated
+	 */
+	private final int reorientDirection;
+
+	/**
+	 * @generated
+	 */
+	private final EObject referenceOwner;
+
+	/**
+	 * @generated
+	 */
+	private final EObject oldEnd;
+
+	/**
+	 * @generated
+	 */
+	private final EObject newEnd;
+
+	/**
+	 * @generated
+	 */
+	public UrmlModelElementAssociationsReorientCommand(
+			ReorientReferenceRelationshipRequest request) {
+		super(request.getLabel(), null, request);
+		reorientDirection = request.getDirection();
+		referenceOwner = request.getReferenceOwner();
+		oldEnd = request.getOldRelationshipEnd();
+		newEnd = request.getNewRelationshipEnd();
+	}
+
+	/**
+	 * @generated
+	 */
+	public boolean canExecute() {
+		if (false == referenceOwner instanceof UrmlModelElement) {
+			return false;
+		}
+		if (reorientDirection == ReorientRelationshipRequest.REORIENT_SOURCE) {
+			return canReorientSource();
+		}
+		if (reorientDirection == ReorientRelationshipRequest.REORIENT_TARGET) {
+			return canReorientTarget();
+		}
+		return false;
+	}
+
+	/**
+	 * @generated
+	 */
+	protected boolean canReorientSource() {
+		if (!(oldEnd instanceof UrmlModelElement && newEnd instanceof UrmlModelElement)) {
+			return false;
+		}
+		return UrmlBaseItemSemanticEditPolicy.getLinkConstraints()
+				.canExistUrmlModelElementAssociations_4048(getNewSource(),
+						getOldTarget());
+	}
+
+	/**
+	 * @generated
+	 */
+	protected boolean canReorientTarget() {
+		if (!(oldEnd instanceof UrmlModelElement && newEnd instanceof UrmlModelElement)) {
+			return false;
+		}
+		return UrmlBaseItemSemanticEditPolicy.getLinkConstraints()
+				.canExistUrmlModelElementAssociations_4048(getOldSource(),
+						getNewTarget());
+	}
+
+	/**
+	 * @generated
+	 */
+	protected CommandResult doExecuteWithResult(IProgressMonitor monitor,
+			IAdaptable info) throws ExecutionException {
+		if (!canExecute()) {
+			throw new ExecutionException(
+					"Invalid arguments in reorient link command"); //$NON-NLS-1$
+		}
+		if (reorientDirection == ReorientRelationshipRequest.REORIENT_SOURCE) {
+			return reorientSource();
+		}
+		if (reorientDirection == ReorientRelationshipRequest.REORIENT_TARGET) {
+			return reorientTarget();
+		}
+		throw new IllegalStateException();
+	}
+
+	/**
+	 * @generated
+	 */
+	protected CommandResult reorientSource() throws ExecutionException {
+		getOldSource().getAssociations().remove(getOldTarget());
+		getNewSource().getAssociations().add(getOldTarget());
+		return CommandResult.newOKCommandResult(referenceOwner);
+	}
+
+	/**
+	 * @generated
+	 */
+	protected CommandResult reorientTarget() throws ExecutionException {
+		getOldSource().getAssociations().remove(getOldTarget());
+		getOldSource().getAssociations().add(getNewTarget());
+		return CommandResult.newOKCommandResult(referenceOwner);
+	}
+
+	/**
+	 * @generated
+	 */
+	protected UrmlModelElement getOldSource() {
+		return (UrmlModelElement) referenceOwner;
+	}
+
+	/**
+	 * @generated
+	 */
+	protected UrmlModelElement getNewSource() {
+		return (UrmlModelElement) newEnd;
+	}
+
+	/**
+	 * @generated
+	 */
+	protected UrmlModelElement getOldTarget() {
+		return (UrmlModelElement) oldEnd;
+	}
+
+	/**
+	 * @generated
+	 */
+	protected UrmlModelElement getNewTarget() {
+		return (UrmlModelElement) newEnd;
+	}
+}
Index: src/org/unicase/ui/diagram/urml/edit/commands/VariationPointInstanceVariationPointCreateCommand.java
===================================================================
--- src/org/unicase/ui/diagram/urml/edit/commands/VariationPointInstanceVariationPointCreateCommand.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/edit/commands/VariationPointInstanceVariationPointCreateCommand.java	(working copy)
@@ -14,7 +14,8 @@
 /**
  * @generated
  */
-public class VariationPointInstanceVariationPointCreateCommand extends EditElementCommand {
+public class VariationPointInstanceVariationPointCreateCommand extends
+		EditElementCommand {
 
 	/**
 	 * @generated
@@ -29,8 +30,8 @@
 	/**
 	 * @generated
 	 */
-	public VariationPointInstanceVariationPointCreateCommand(CreateRelationshipRequest request, EObject source,
-		EObject target) {
+	public VariationPointInstanceVariationPointCreateCommand(
+			CreateRelationshipRequest request, EObject source, EObject target) {
 		super(request.getLabel(), null, request);
 		this.source = source;
 		this.target = target;
@@ -53,16 +54,19 @@
 			return true; // link creation is in progress; source is not defined yet
 		}
 		// target may be null here but it's possible to check constraint
-		return UrmlBaseItemSemanticEditPolicy.LinkConstraints.canCreateVariationPointInstanceVariationPoint_4033(
-			getSource(), getTarget());
+		return UrmlBaseItemSemanticEditPolicy.getLinkConstraints()
+				.canCreateVariationPointInstanceVariationPoint_4033(
+						getSource(), getTarget());
 	}
 
 	/**
 	 * @generated
 	 */
-	protected CommandResult doExecuteWithResult(IProgressMonitor monitor, IAdaptable info) throws ExecutionException {
+	protected CommandResult doExecuteWithResult(IProgressMonitor monitor,
+			IAdaptable info) throws ExecutionException {
 		if (!canExecute()) {
-			throw new ExecutionException("Invalid arguments in create link command"); //$NON-NLS-1$
+			throw new ExecutionException(
+					"Invalid arguments in create link command"); //$NON-NLS-1$
 		}
 
 		if (getSource() != null && getTarget() != null) {
Index: src/org/unicase/ui/diagram/urml/edit/commands/VariationPointInstanceSelectedFeaturesReorientCommand.java
===================================================================
--- src/org/unicase/ui/diagram/urml/edit/commands/VariationPointInstanceSelectedFeaturesReorientCommand.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/edit/commands/VariationPointInstanceSelectedFeaturesReorientCommand.java	(working copy)
@@ -15,7 +15,8 @@
 /**
  * @generated
  */
-public class VariationPointInstanceSelectedFeaturesReorientCommand extends EditElementCommand {
+public class VariationPointInstanceSelectedFeaturesReorientCommand extends
+		EditElementCommand {
 
 	/**
 	 * @generated
@@ -40,7 +41,8 @@
 	/**
 	 * @generated
 	 */
-	public VariationPointInstanceSelectedFeaturesReorientCommand(ReorientReferenceRelationshipRequest request) {
+	public VariationPointInstanceSelectedFeaturesReorientCommand(
+			ReorientReferenceRelationshipRequest request) {
 		super(request.getLabel(), null, request);
 		reorientDirection = request.getDirection();
 		referenceOwner = request.getReferenceOwner();
@@ -71,8 +73,9 @@
 		if (!(oldEnd instanceof AbstractFeature && newEnd instanceof VariationPointInstance)) {
 			return false;
 		}
-		return UrmlBaseItemSemanticEditPolicy.LinkConstraints.canExistVariationPointInstanceSelectedFeatures_4040(
-			getNewSource(), getOldTarget());
+		return UrmlBaseItemSemanticEditPolicy.getLinkConstraints()
+				.canExistVariationPointInstanceSelectedFeatures_4040(
+						getNewSource(), getOldTarget());
 	}
 
 	/**
@@ -82,16 +85,19 @@
 		if (!(oldEnd instanceof AbstractFeature && newEnd instanceof AbstractFeature)) {
 			return false;
 		}
-		return UrmlBaseItemSemanticEditPolicy.LinkConstraints.canExistVariationPointInstanceSelectedFeatures_4040(
-			getOldSource(), getNewTarget());
+		return UrmlBaseItemSemanticEditPolicy.getLinkConstraints()
+				.canExistVariationPointInstanceSelectedFeatures_4040(
+						getOldSource(), getNewTarget());
 	}
 
 	/**
 	 * @generated
 	 */
-	protected CommandResult doExecuteWithResult(IProgressMonitor monitor, IAdaptable info) throws ExecutionException {
+	protected CommandResult doExecuteWithResult(IProgressMonitor monitor,
+			IAdaptable info) throws ExecutionException {
 		if (!canExecute()) {
-			throw new ExecutionException("Invalid arguments in reorient link command"); //$NON-NLS-1$
+			throw new ExecutionException(
+					"Invalid arguments in reorient link command"); //$NON-NLS-1$
 		}
 		if (reorientDirection == ReorientRelationshipRequest.REORIENT_SOURCE) {
 			return reorientSource();
Index: src/org/unicase/ui/diagram/urml/edit/commands/RequirementImplementingServicesReorientCommand.java
===================================================================
--- src/org/unicase/ui/diagram/urml/edit/commands/RequirementImplementingServicesReorientCommand.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/edit/commands/RequirementImplementingServicesReorientCommand.java	(working copy)
@@ -15,7 +15,8 @@
 /**
  * @generated
  */
-public class RequirementImplementingServicesReorientCommand extends EditElementCommand {
+public class RequirementImplementingServicesReorientCommand extends
+		EditElementCommand {
 
 	/**
 	 * @generated
@@ -40,7 +41,8 @@
 	/**
 	 * @generated
 	 */
-	public RequirementImplementingServicesReorientCommand(ReorientReferenceRelationshipRequest request) {
+	public RequirementImplementingServicesReorientCommand(
+			ReorientReferenceRelationshipRequest request) {
 		super(request.getLabel(), null, request);
 		reorientDirection = request.getDirection();
 		referenceOwner = request.getReferenceOwner();
@@ -71,8 +73,9 @@
 		if (!(oldEnd instanceof Service && newEnd instanceof Requirement)) {
 			return false;
 		}
-		return UrmlBaseItemSemanticEditPolicy.LinkConstraints.canExistRequirementImplementingServices_4005(
-			getNewSource(), getOldTarget());
+		return UrmlBaseItemSemanticEditPolicy.getLinkConstraints()
+				.canExistRequirementImplementingServices_4005(getNewSource(),
+						getOldTarget());
 	}
 
 	/**
@@ -82,16 +85,19 @@
 		if (!(oldEnd instanceof Service && newEnd instanceof Service)) {
 			return false;
 		}
-		return UrmlBaseItemSemanticEditPolicy.LinkConstraints.canExistRequirementImplementingServices_4005(
-			getOldSource(), getNewTarget());
+		return UrmlBaseItemSemanticEditPolicy.getLinkConstraints()
+				.canExistRequirementImplementingServices_4005(getOldSource(),
+						getNewTarget());
 	}
 
 	/**
 	 * @generated
 	 */
-	protected CommandResult doExecuteWithResult(IProgressMonitor monitor, IAdaptable info) throws ExecutionException {
+	protected CommandResult doExecuteWithResult(IProgressMonitor monitor,
+			IAdaptable info) throws ExecutionException {
 		if (!canExecute()) {
-			throw new ExecutionException("Invalid arguments in reorient link command"); //$NON-NLS-1$
+			throw new ExecutionException(
+					"Invalid arguments in reorient link command"); //$NON-NLS-1$
 		}
 		if (reorientDirection == ReorientRelationshipRequest.REORIENT_SOURCE) {
 			return reorientSource();
Index: src/org/unicase/ui/diagram/urml/edit/commands/GoalReference4CreateCommand.java
===================================================================
--- src/org/unicase/ui/diagram/urml/edit/commands/GoalReference4CreateCommand.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/edit/commands/GoalReference4CreateCommand.java	(working copy)
@@ -16,6 +16,7 @@
 import org.unicase.model.urml.goal.GoalFactory;
 import org.unicase.model.urml.goal.GoalReference;
 import org.unicase.ui.diagram.urml.edit.policies.UrmlBaseItemSemanticEditPolicy;
+import org.unicase.ui.diagram.urml.providers.ElementInitializers;
 import org.unicase.ui.diagram.urml.providers.UrmlElementTypes;
 
 /**
@@ -44,7 +45,8 @@
 	 * 
 	 * @generated NOT
 	 */
-	public GoalReference4CreateCommand(CreateRelationshipRequest request, EObject source, EObject target) {
+	public GoalReference4CreateCommand(CreateRelationshipRequest request,
+			EObject source, EObject target) {
 		super(request.getLabel(), null, request);
 		/* user code */
 		throw new UnsupportedOperationException();
@@ -54,8 +56,8 @@
 	/**
 	 * @generated NOT
 	 */
-	public GoalReference4CreateCommand(CreateRelationshipRequest request, EObject source, EObject target,
-		EObject eContainer) {
+	public GoalReference4CreateCommand(CreateRelationshipRequest request,
+			EObject source, EObject target, EObject eContainer) {
 		super(request.getLabel(), null, request);
 		this.source = source;
 		this.target = target;
@@ -64,7 +66,8 @@
 		// Find container element for the new link.
 		// Climb up by containment hierarchy starting from the source
 		// and return the first element that is instance of the container class.
-		for (EObject element = eContainer; element != null; element = element.eContainer()) {
+		for (EObject element = eContainer; element != null; element = element
+				.eContainer()) {
 			if (element instanceof MEDiagram) {
 				container = (MEDiagram) element;
 				super.setElementToEdit(container);
@@ -95,16 +98,19 @@
 		if (getContainer() == null) {
 			return false;
 		}
-		return UrmlBaseItemSemanticEditPolicy.LinkConstraints.canCreateGoalReference_4025(getContainer(), getSource(),
-			getTarget());
+		return UrmlBaseItemSemanticEditPolicy.getLinkConstraints()
+				.canCreateGoalReference_4025(getContainer(), getSource(),
+						getTarget());
 	}
 
 	/**
 	 * @generated NOT
 	 */
-	protected CommandResult doExecuteWithResult(IProgressMonitor monitor, IAdaptable info) throws ExecutionException {
+	protected CommandResult doExecuteWithResult(IProgressMonitor monitor,
+			IAdaptable info) throws ExecutionException {
 		if (!canExecute()) {
-			throw new ExecutionException("Invalid arguments in create link command"); //$NON-NLS-1$
+			throw new ExecutionException(
+					"Invalid arguments in create link command"); //$NON-NLS-1$
 		}
 
 		GoalReference newElement = GoalFactory.eINSTANCE.createGoalReference();
@@ -114,7 +120,7 @@
 		/* user code */
 		newElement.setSource(getSource());
 		newElement.setTarget(getTarget());
-		UrmlElementTypes.init_GoalReference_4025(newElement);
+		UrmlElementTypes.getInstance().init_GoalReference_4025(newElement);
 		doConfigure(newElement, monitor, info);
 		((CreateElementRequest) getRequest()).setNewElement(newElement);
 		return CommandResult.newOKCommandResult(newElement);
@@ -124,15 +130,22 @@
 	/**
 	 * @generated
 	 */
-	protected void doConfigure(GoalReference newElement, IProgressMonitor monitor, IAdaptable info)
-		throws ExecutionException {
-		IElementType elementType = ((CreateElementRequest) getRequest()).getElementType();
-		ConfigureRequest configureRequest = new ConfigureRequest(getEditingDomain(), newElement, elementType);
-		configureRequest.setClientContext(((CreateElementRequest) getRequest()).getClientContext());
+	protected void doConfigure(GoalReference newElement,
+			IProgressMonitor monitor, IAdaptable info)
+			throws ExecutionException {
+		IElementType elementType = ((CreateElementRequest) getRequest())
+				.getElementType();
+		ConfigureRequest configureRequest = new ConfigureRequest(
+				getEditingDomain(), newElement, elementType);
+		configureRequest.setClientContext(((CreateElementRequest) getRequest())
+				.getClientContext());
 		configureRequest.addParameters(getRequest().getParameters());
-		configureRequest.setParameter(CreateRelationshipRequest.SOURCE, getSource());
-		configureRequest.setParameter(CreateRelationshipRequest.TARGET, getTarget());
-		ICommand configureCommand = elementType.getEditCommand(configureRequest);
+		configureRequest.setParameter(CreateRelationshipRequest.SOURCE,
+				getSource());
+		configureRequest.setParameter(CreateRelationshipRequest.TARGET,
+				getTarget());
+		ICommand configureCommand = elementType
+				.getEditCommand(configureRequest);
 		if (configureCommand != null && configureCommand.canExecute()) {
 			configureCommand.execute(monitor, info);
 		}
@@ -176,7 +189,8 @@
 		// Find container element for the new link.
 		// Climb up by containment hierarchy starting from the source
 		// and return the first element that is instance of the container class.
-		for (EObject element = source; element != null; element = element.eContainer()) {
+		for (EObject element = source; element != null; element = element
+				.eContainer()) {
 			if (element instanceof MEDiagram) {
 				return (MEDiagram) element;
 			}
Index: src/org/unicase/ui/diagram/urml/edit/commands/ProductFeaturesReorientCommand.java
===================================================================
--- src/org/unicase/ui/diagram/urml/edit/commands/ProductFeaturesReorientCommand.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/edit/commands/ProductFeaturesReorientCommand.java	(working copy)
@@ -40,7 +40,8 @@
 	/**
 	 * @generated
 	 */
-	public ProductFeaturesReorientCommand(ReorientReferenceRelationshipRequest request) {
+	public ProductFeaturesReorientCommand(
+			ReorientReferenceRelationshipRequest request) {
 		super(request.getLabel(), null, request);
 		reorientDirection = request.getDirection();
 		referenceOwner = request.getReferenceOwner();
@@ -71,8 +72,8 @@
 		if (!(oldEnd instanceof Feature && newEnd instanceof Product)) {
 			return false;
 		}
-		return UrmlBaseItemSemanticEditPolicy.LinkConstraints.canExistProductFeatures_4047(getNewSource(),
-			getOldTarget());
+		return UrmlBaseItemSemanticEditPolicy.getLinkConstraints()
+				.canExistProductFeatures_4047(getNewSource(), getOldTarget());
 	}
 
 	/**
@@ -82,16 +83,18 @@
 		if (!(oldEnd instanceof Feature && newEnd instanceof Feature)) {
 			return false;
 		}
-		return UrmlBaseItemSemanticEditPolicy.LinkConstraints.canExistProductFeatures_4047(getOldSource(),
-			getNewTarget());
+		return UrmlBaseItemSemanticEditPolicy.getLinkConstraints()
+				.canExistProductFeatures_4047(getOldSource(), getNewTarget());
 	}
 
 	/**
 	 * @generated
 	 */
-	protected CommandResult doExecuteWithResult(IProgressMonitor monitor, IAdaptable info) throws ExecutionException {
+	protected CommandResult doExecuteWithResult(IProgressMonitor monitor,
+			IAdaptable info) throws ExecutionException {
 		if (!canExecute()) {
-			throw new ExecutionException("Invalid arguments in reorient link command"); //$NON-NLS-1$
+			throw new ExecutionException(
+					"Invalid arguments in reorient link command"); //$NON-NLS-1$
 		}
 		if (reorientDirection == ReorientRelationshipRequest.REORIENT_SOURCE) {
 			return reorientSource();
Index: src/org/unicase/ui/diagram/urml/edit/commands/GoalSubGoalsReorientCommand.java
===================================================================
--- src/org/unicase/ui/diagram/urml/edit/commands/GoalSubGoalsReorientCommand.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/edit/commands/GoalSubGoalsReorientCommand.java	(working copy)
@@ -39,7 +39,8 @@
 	/**
 	 * @generated
 	 */
-	public GoalSubGoalsReorientCommand(ReorientReferenceRelationshipRequest request) {
+	public GoalSubGoalsReorientCommand(
+			ReorientReferenceRelationshipRequest request) {
 		super(request.getLabel(), null, request);
 		reorientDirection = request.getDirection();
 		referenceOwner = request.getReferenceOwner();
@@ -70,7 +71,8 @@
 		if (!(oldEnd instanceof Goal && newEnd instanceof Goal)) {
 			return false;
 		}
-		return UrmlBaseItemSemanticEditPolicy.LinkConstraints.canExistGoalSubGoals_4018(getNewSource(), getOldTarget());
+		return UrmlBaseItemSemanticEditPolicy.getLinkConstraints()
+				.canExistGoalSubGoals_4018(getNewSource(), getOldTarget());
 	}
 
 	/**
@@ -80,15 +82,18 @@
 		if (!(oldEnd instanceof Goal && newEnd instanceof Goal)) {
 			return false;
 		}
-		return UrmlBaseItemSemanticEditPolicy.LinkConstraints.canExistGoalSubGoals_4018(getOldSource(), getNewTarget());
+		return UrmlBaseItemSemanticEditPolicy.getLinkConstraints()
+				.canExistGoalSubGoals_4018(getOldSource(), getNewTarget());
 	}
 
 	/**
 	 * @generated
 	 */
-	protected CommandResult doExecuteWithResult(IProgressMonitor monitor, IAdaptable info) throws ExecutionException {
+	protected CommandResult doExecuteWithResult(IProgressMonitor monitor,
+			IAdaptable info) throws ExecutionException {
 		if (!canExecute()) {
-			throw new ExecutionException("Invalid arguments in reorient link command"); //$NON-NLS-1$
+			throw new ExecutionException(
+					"Invalid arguments in reorient link command"); //$NON-NLS-1$
 		}
 		if (reorientDirection == ReorientRelationshipRequest.REORIENT_SOURCE) {
 			return reorientSource();
Index: src/org/unicase/ui/diagram/urml/edit/commands/VariationPointOptionalSubFeaturesReorientCommand.java
===================================================================
--- src/org/unicase/ui/diagram/urml/edit/commands/VariationPointOptionalSubFeaturesReorientCommand.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/edit/commands/VariationPointOptionalSubFeaturesReorientCommand.java	(working copy)
@@ -15,7 +15,8 @@
 /**
  * @generated
  */
-public class VariationPointOptionalSubFeaturesReorientCommand extends EditElementCommand {
+public class VariationPointOptionalSubFeaturesReorientCommand extends
+		EditElementCommand {
 
 	/**
 	 * @generated
@@ -40,7 +41,8 @@
 	/**
 	 * @generated
 	 */
-	public VariationPointOptionalSubFeaturesReorientCommand(ReorientReferenceRelationshipRequest request) {
+	public VariationPointOptionalSubFeaturesReorientCommand(
+			ReorientReferenceRelationshipRequest request) {
 		super(request.getLabel(), null, request);
 		reorientDirection = request.getDirection();
 		referenceOwner = request.getReferenceOwner();
@@ -71,8 +73,9 @@
 		if (!(oldEnd instanceof AbstractFeature && newEnd instanceof VariationPoint)) {
 			return false;
 		}
-		return UrmlBaseItemSemanticEditPolicy.LinkConstraints.canExistVariationPointOptionalSubFeatures_4046(
-			getNewSource(), getOldTarget());
+		return UrmlBaseItemSemanticEditPolicy.getLinkConstraints()
+				.canExistVariationPointOptionalSubFeatures_4046(getNewSource(),
+						getOldTarget());
 	}
 
 	/**
@@ -82,16 +85,19 @@
 		if (!(oldEnd instanceof AbstractFeature && newEnd instanceof AbstractFeature)) {
 			return false;
 		}
-		return UrmlBaseItemSemanticEditPolicy.LinkConstraints.canExistVariationPointOptionalSubFeatures_4046(
-			getOldSource(), getNewTarget());
+		return UrmlBaseItemSemanticEditPolicy.getLinkConstraints()
+				.canExistVariationPointOptionalSubFeatures_4046(getOldSource(),
+						getNewTarget());
 	}
 
 	/**
 	 * @generated
 	 */
-	protected CommandResult doExecuteWithResult(IProgressMonitor monitor, IAdaptable info) throws ExecutionException {
+	protected CommandResult doExecuteWithResult(IProgressMonitor monitor,
+			IAdaptable info) throws ExecutionException {
 		if (!canExecute()) {
-			throw new ExecutionException("Invalid arguments in reorient link command"); //$NON-NLS-1$
+			throw new ExecutionException(
+					"Invalid arguments in reorient link command"); //$NON-NLS-1$
 		}
 		if (reorientDirection == ReorientRelationshipRequest.REORIENT_SOURCE) {
 			return reorientSource();
Index: src/org/unicase/ui/diagram/urml/edit/commands/RequirementImplementingServicesCreateCommand.java
===================================================================
--- src/org/unicase/ui/diagram/urml/edit/commands/RequirementImplementingServicesCreateCommand.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/edit/commands/RequirementImplementingServicesCreateCommand.java	(working copy)
@@ -14,7 +14,8 @@
 /**
  * @generated
  */
-public class RequirementImplementingServicesCreateCommand extends EditElementCommand {
+public class RequirementImplementingServicesCreateCommand extends
+		EditElementCommand {
 
 	/**
 	 * @generated
@@ -29,8 +30,8 @@
 	/**
 	 * @generated
 	 */
-	public RequirementImplementingServicesCreateCommand(CreateRelationshipRequest request, EObject source,
-		EObject target) {
+	public RequirementImplementingServicesCreateCommand(
+			CreateRelationshipRequest request, EObject source, EObject target) {
 		super(request.getLabel(), null, request);
 		this.source = source;
 		this.target = target;
@@ -53,16 +54,19 @@
 			return true; // link creation is in progress; source is not defined yet
 		}
 		// target may be null here but it's possible to check constraint
-		return UrmlBaseItemSemanticEditPolicy.LinkConstraints.canCreateRequirementImplementingServices_4005(
-			getSource(), getTarget());
+		return UrmlBaseItemSemanticEditPolicy.getLinkConstraints()
+				.canCreateRequirementImplementingServices_4005(getSource(),
+						getTarget());
 	}
 
 	/**
 	 * @generated
 	 */
-	protected CommandResult doExecuteWithResult(IProgressMonitor monitor, IAdaptable info) throws ExecutionException {
+	protected CommandResult doExecuteWithResult(IProgressMonitor monitor,
+			IAdaptable info) throws ExecutionException {
 		if (!canExecute()) {
-			throw new ExecutionException("Invalid arguments in create link command"); //$NON-NLS-1$
+			throw new ExecutionException(
+					"Invalid arguments in create link command"); //$NON-NLS-1$
 		}
 
 		if (getSource() != null && getTarget() != null) {
Index: src/org/unicase/ui/diagram/urml/edit/commands/GoalReference2ReorientCommand.java
===================================================================
--- src/org/unicase/ui/diagram/urml/edit/commands/GoalReference2ReorientCommand.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/edit/commands/GoalReference2ReorientCommand.java	(working copy)
@@ -7,8 +7,10 @@
 import org.eclipse.gmf.runtime.common.core.command.CommandResult;
 import org.eclipse.gmf.runtime.emf.type.core.commands.EditElementCommand;
 import org.eclipse.gmf.runtime.emf.type.core.requests.ReorientRelationshipRequest;
+import org.unicase.model.diagram.MEDiagram;
 import org.unicase.model.urml.goal.Goal;
 import org.unicase.model.urml.goal.GoalReference;
+import org.unicase.ui.diagram.urml.edit.policies.UrmlBaseItemSemanticEditPolicy;
 
 /**
  * @generated
@@ -93,9 +95,11 @@
 	/**
 	 * @generated
 	 */
-	protected CommandResult doExecuteWithResult(IProgressMonitor monitor, IAdaptable info) throws ExecutionException {
+	protected CommandResult doExecuteWithResult(IProgressMonitor monitor,
+			IAdaptable info) throws ExecutionException {
 		if (!canExecute()) {
-			throw new ExecutionException("Invalid arguments in reorient link command"); //$NON-NLS-1$
+			throw new ExecutionException(
+					"Invalid arguments in reorient link command"); //$NON-NLS-1$
 		}
 		if (reorientDirection == ReorientRelationshipRequest.REORIENT_SOURCE) {
 			return reorientSource();
Index: src/org/unicase/ui/diagram/urml/edit/commands/VariationPointInstanceSelectedFeaturesCreateCommand.java
===================================================================
--- src/org/unicase/ui/diagram/urml/edit/commands/VariationPointInstanceSelectedFeaturesCreateCommand.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/edit/commands/VariationPointInstanceSelectedFeaturesCreateCommand.java	(working copy)
@@ -14,7 +14,8 @@
 /**
  * @generated
  */
-public class VariationPointInstanceSelectedFeaturesCreateCommand extends EditElementCommand {
+public class VariationPointInstanceSelectedFeaturesCreateCommand extends
+		EditElementCommand {
 
 	/**
 	 * @generated
@@ -29,8 +30,8 @@
 	/**
 	 * @generated
 	 */
-	public VariationPointInstanceSelectedFeaturesCreateCommand(CreateRelationshipRequest request, EObject source,
-		EObject target) {
+	public VariationPointInstanceSelectedFeaturesCreateCommand(
+			CreateRelationshipRequest request, EObject source, EObject target) {
 		super(request.getLabel(), null, request);
 		this.source = source;
 		this.target = target;
@@ -53,16 +54,19 @@
 			return true; // link creation is in progress; source is not defined yet
 		}
 		// target may be null here but it's possible to check constraint
-		return UrmlBaseItemSemanticEditPolicy.LinkConstraints.canCreateVariationPointInstanceSelectedFeatures_4040(
-			getSource(), getTarget());
+		return UrmlBaseItemSemanticEditPolicy.getLinkConstraints()
+				.canCreateVariationPointInstanceSelectedFeatures_4040(
+						getSource(), getTarget());
 	}
 
 	/**
 	 * @generated
 	 */
-	protected CommandResult doExecuteWithResult(IProgressMonitor monitor, IAdaptable info) throws ExecutionException {
+	protected CommandResult doExecuteWithResult(IProgressMonitor monitor,
+			IAdaptable info) throws ExecutionException {
 		if (!canExecute()) {
-			throw new ExecutionException("Invalid arguments in create link command"); //$NON-NLS-1$
+			throw new ExecutionException(
+					"Invalid arguments in create link command"); //$NON-NLS-1$
 		}
 
 		if (getSource() != null && getTarget() != null) {
Index: src/org/unicase/ui/diagram/urml/edit/commands/AbstractFeatureDetailingFunctionalRequirementsReorientCommand.java
===================================================================
--- src/org/unicase/ui/diagram/urml/edit/commands/AbstractFeatureDetailingFunctionalRequirementsReorientCommand.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/edit/commands/AbstractFeatureDetailingFunctionalRequirementsReorientCommand.java	(working copy)
@@ -15,7 +15,8 @@
 /**
  * @generated
  */
-public class AbstractFeatureDetailingFunctionalRequirementsReorientCommand extends EditElementCommand {
+public class AbstractFeatureDetailingFunctionalRequirementsReorientCommand
+		extends EditElementCommand {
 
 	/**
 	 * @generated
@@ -40,7 +41,8 @@
 	/**
 	 * @generated
 	 */
-	public AbstractFeatureDetailingFunctionalRequirementsReorientCommand(ReorientReferenceRelationshipRequest request) {
+	public AbstractFeatureDetailingFunctionalRequirementsReorientCommand(
+			ReorientReferenceRelationshipRequest request) {
 		super(request.getLabel(), null, request);
 		reorientDirection = request.getDirection();
 		referenceOwner = request.getReferenceOwner();
@@ -71,8 +73,9 @@
 		if (!(oldEnd instanceof FunctionalRequirement && newEnd instanceof AbstractFeature)) {
 			return false;
 		}
-		return UrmlBaseItemSemanticEditPolicy.LinkConstraints
-			.canExistAbstractFeatureDetailingFunctionalRequirements_4035(getNewSource(), getOldTarget());
+		return UrmlBaseItemSemanticEditPolicy.getLinkConstraints()
+				.canExistAbstractFeatureDetailingFunctionalRequirements_4035(
+						getNewSource(), getOldTarget());
 	}
 
 	/**
@@ -82,16 +85,19 @@
 		if (!(oldEnd instanceof FunctionalRequirement && newEnd instanceof FunctionalRequirement)) {
 			return false;
 		}
-		return UrmlBaseItemSemanticEditPolicy.LinkConstraints
-			.canExistAbstractFeatureDetailingFunctionalRequirements_4035(getOldSource(), getNewTarget());
+		return UrmlBaseItemSemanticEditPolicy.getLinkConstraints()
+				.canExistAbstractFeatureDetailingFunctionalRequirements_4035(
+						getOldSource(), getNewTarget());
 	}
 
 	/**
 	 * @generated
 	 */
-	protected CommandResult doExecuteWithResult(IProgressMonitor monitor, IAdaptable info) throws ExecutionException {
+	protected CommandResult doExecuteWithResult(IProgressMonitor monitor,
+			IAdaptable info) throws ExecutionException {
 		if (!canExecute()) {
-			throw new ExecutionException("Invalid arguments in reorient link command"); //$NON-NLS-1$
+			throw new ExecutionException(
+					"Invalid arguments in reorient link command"); //$NON-NLS-1$
 		}
 		if (reorientDirection == ReorientRelationshipRequest.REORIENT_SOURCE) {
 			return reorientSource();
@@ -106,7 +112,8 @@
 	 * @generated
 	 */
 	protected CommandResult reorientSource() throws ExecutionException {
-		getOldSource().getDetailingFunctionalRequirements().remove(getOldTarget());
+		getOldSource().getDetailingFunctionalRequirements().remove(
+				getOldTarget());
 		getNewSource().getDetailingFunctionalRequirements().add(getOldTarget());
 		return CommandResult.newOKCommandResult(referenceOwner);
 	}
@@ -115,7 +122,8 @@
 	 * @generated
 	 */
 	protected CommandResult reorientTarget() throws ExecutionException {
-		getOldSource().getDetailingFunctionalRequirements().remove(getOldTarget());
+		getOldSource().getDetailingFunctionalRequirements().remove(
+				getOldTarget());
 		getOldSource().getDetailingFunctionalRequirements().add(getNewTarget());
 		return CommandResult.newOKCommandResult(referenceOwner);
 	}
Index: src/org/unicase/ui/diagram/urml/edit/commands/AbstractFeatureConstrainingNonFunctionalRequirementsCreateCommand.java
===================================================================
--- src/org/unicase/ui/diagram/urml/edit/commands/AbstractFeatureConstrainingNonFunctionalRequirementsCreateCommand.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/edit/commands/AbstractFeatureConstrainingNonFunctionalRequirementsCreateCommand.java	(working copy)
@@ -14,7 +14,8 @@
 /**
  * @generated
  */
-public class AbstractFeatureConstrainingNonFunctionalRequirementsCreateCommand extends EditElementCommand {
+public class AbstractFeatureConstrainingNonFunctionalRequirementsCreateCommand
+		extends EditElementCommand {
 
 	/**
 	 * @generated
@@ -29,8 +30,8 @@
 	/**
 	 * @generated
 	 */
-	public AbstractFeatureConstrainingNonFunctionalRequirementsCreateCommand(CreateRelationshipRequest request,
-		EObject source, EObject target) {
+	public AbstractFeatureConstrainingNonFunctionalRequirementsCreateCommand(
+			CreateRelationshipRequest request, EObject source, EObject target) {
 		super(request.getLabel(), null, request);
 		this.source = source;
 		this.target = target;
@@ -46,27 +47,33 @@
 		if (source != null && false == source instanceof AbstractFeature) {
 			return false;
 		}
-		if (target != null && false == target instanceof NonFunctionalRequirement) {
+		if (target != null
+				&& false == target instanceof NonFunctionalRequirement) {
 			return false;
 		}
 		if (getSource() == null) {
 			return true; // link creation is in progress; source is not defined yet
 		}
 		// target may be null here but it's possible to check constraint
-		return UrmlBaseItemSemanticEditPolicy.LinkConstraints
-			.canCreateAbstractFeatureConstrainingNonFunctionalRequirements_4036(getSource(), getTarget());
+		return UrmlBaseItemSemanticEditPolicy
+				.getLinkConstraints()
+				.canCreateAbstractFeatureConstrainingNonFunctionalRequirements_4036(
+						getSource(), getTarget());
 	}
 
 	/**
 	 * @generated
 	 */
-	protected CommandResult doExecuteWithResult(IProgressMonitor monitor, IAdaptable info) throws ExecutionException {
+	protected CommandResult doExecuteWithResult(IProgressMonitor monitor,
+			IAdaptable info) throws ExecutionException {
 		if (!canExecute()) {
-			throw new ExecutionException("Invalid arguments in create link command"); //$NON-NLS-1$
+			throw new ExecutionException(
+					"Invalid arguments in create link command"); //$NON-NLS-1$
 		}
 
 		if (getSource() != null && getTarget() != null) {
-			getSource().getConstrainingNonFunctionalRequirements().add(getTarget());
+			getSource().getConstrainingNonFunctionalRequirements().add(
+					getTarget());
 		}
 		return CommandResult.newOKCommandResult();
 
Index: src/org/unicase/ui/diagram/urml/edit/commands/ProductVariationPointInstancesReorientCommand.java
===================================================================
--- src/org/unicase/ui/diagram/urml/edit/commands/ProductVariationPointInstancesReorientCommand.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/edit/commands/ProductVariationPointInstancesReorientCommand.java	(working copy)
@@ -15,7 +15,8 @@
 /**
  * @generated
  */
-public class ProductVariationPointInstancesReorientCommand extends EditElementCommand {
+public class ProductVariationPointInstancesReorientCommand extends
+		EditElementCommand {
 
 	/**
 	 * @generated
@@ -40,7 +41,8 @@
 	/**
 	 * @generated
 	 */
-	public ProductVariationPointInstancesReorientCommand(ReorientReferenceRelationshipRequest request) {
+	public ProductVariationPointInstancesReorientCommand(
+			ReorientReferenceRelationshipRequest request) {
 		super(request.getLabel(), null, request);
 		reorientDirection = request.getDirection();
 		referenceOwner = request.getReferenceOwner();
@@ -71,8 +73,9 @@
 		if (!(oldEnd instanceof VariationPointInstance && newEnd instanceof Product)) {
 			return false;
 		}
-		return UrmlBaseItemSemanticEditPolicy.LinkConstraints.canExistProductVariationPointInstances_4032(
-			getNewSource(), getOldTarget());
+		return UrmlBaseItemSemanticEditPolicy.getLinkConstraints()
+				.canExistProductVariationPointInstances_4032(getNewSource(),
+						getOldTarget());
 	}
 
 	/**
@@ -82,16 +85,19 @@
 		if (!(oldEnd instanceof VariationPointInstance && newEnd instanceof VariationPointInstance)) {
 			return false;
 		}
-		return UrmlBaseItemSemanticEditPolicy.LinkConstraints.canExistProductVariationPointInstances_4032(
-			getOldSource(), getNewTarget());
+		return UrmlBaseItemSemanticEditPolicy.getLinkConstraints()
+				.canExistProductVariationPointInstances_4032(getOldSource(),
+						getNewTarget());
 	}
 
 	/**
 	 * @generated
 	 */
-	protected CommandResult doExecuteWithResult(IProgressMonitor monitor, IAdaptable info) throws ExecutionException {
+	protected CommandResult doExecuteWithResult(IProgressMonitor monitor,
+			IAdaptable info) throws ExecutionException {
 		if (!canExecute()) {
-			throw new ExecutionException("Invalid arguments in reorient link command"); //$NON-NLS-1$
+			throw new ExecutionException(
+					"Invalid arguments in reorient link command"); //$NON-NLS-1$
 		}
 		if (reorientDirection == ReorientRelationshipRequest.REORIENT_SOURCE) {
 			return reorientSource();
Index: src/org/unicase/ui/diagram/urml/edit/commands/ProductCreateCommand.java
===================================================================
--- src/org/unicase/ui/diagram/urml/edit/commands/ProductCreateCommand.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/edit/commands/ProductCreateCommand.java	(working copy)
@@ -33,7 +33,8 @@
 	 * @generated
 	 */
 	protected EObject getElementToEdit() {
-		EObject container = ((CreateElementRequest) getRequest()).getContainer();
+		EObject container = ((CreateElementRequest) getRequest())
+				.getContainer();
 		if (container instanceof View) {
 			container = ((View) container).getElement();
 		}
@@ -51,7 +52,8 @@
 	/**
 	 * @generated
 	 */
-	protected CommandResult doExecuteWithResult(IProgressMonitor monitor, IAdaptable info) throws ExecutionException {
+	protected CommandResult doExecuteWithResult(IProgressMonitor monitor,
+			IAdaptable info) throws ExecutionException {
 		Product newElement = FeatureFactory.eINSTANCE.createProduct();
 
 		MEDiagram owner = (MEDiagram) getElementToEdit();
@@ -68,12 +70,17 @@
 	/**
 	 * @generated
 	 */
-	protected void doConfigure(Product newElement, IProgressMonitor monitor, IAdaptable info) throws ExecutionException {
-		IElementType elementType = ((CreateElementRequest) getRequest()).getElementType();
-		ConfigureRequest configureRequest = new ConfigureRequest(getEditingDomain(), newElement, elementType);
-		configureRequest.setClientContext(((CreateElementRequest) getRequest()).getClientContext());
+	protected void doConfigure(Product newElement, IProgressMonitor monitor,
+			IAdaptable info) throws ExecutionException {
+		IElementType elementType = ((CreateElementRequest) getRequest())
+				.getElementType();
+		ConfigureRequest configureRequest = new ConfigureRequest(
+				getEditingDomain(), newElement, elementType);
+		configureRequest.setClientContext(((CreateElementRequest) getRequest())
+				.getClientContext());
 		configureRequest.addParameters(getRequest().getParameters());
-		ICommand configureCommand = elementType.getEditCommand(configureRequest);
+		ICommand configureCommand = elementType
+				.getEditCommand(configureRequest);
 		if (configureCommand != null && configureCommand.canExecute()) {
 			configureCommand.execute(monitor, info);
 		}
Index: src/org/unicase/ui/diagram/urml/edit/commands/AbstractFeatureExcludedFeaturesReorientCommand.java
===================================================================
--- src/org/unicase/ui/diagram/urml/edit/commands/AbstractFeatureExcludedFeaturesReorientCommand.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/edit/commands/AbstractFeatureExcludedFeaturesReorientCommand.java	(working copy)
@@ -14,7 +14,8 @@
 /**
  * @generated
  */
-public class AbstractFeatureExcludedFeaturesReorientCommand extends EditElementCommand {
+public class AbstractFeatureExcludedFeaturesReorientCommand extends
+		EditElementCommand {
 
 	/**
 	 * @generated
@@ -39,7 +40,8 @@
 	/**
 	 * @generated
 	 */
-	public AbstractFeatureExcludedFeaturesReorientCommand(ReorientReferenceRelationshipRequest request) {
+	public AbstractFeatureExcludedFeaturesReorientCommand(
+			ReorientReferenceRelationshipRequest request) {
 		super(request.getLabel(), null, request);
 		reorientDirection = request.getDirection();
 		referenceOwner = request.getReferenceOwner();
@@ -70,8 +72,9 @@
 		if (!(oldEnd instanceof AbstractFeature && newEnd instanceof AbstractFeature)) {
 			return false;
 		}
-		return UrmlBaseItemSemanticEditPolicy.LinkConstraints.canExistAbstractFeatureExcludedFeatures_4038(
-			getNewSource(), getOldTarget());
+		return UrmlBaseItemSemanticEditPolicy.getLinkConstraints()
+				.canExistAbstractFeatureExcludedFeatures_4038(getNewSource(),
+						getOldTarget());
 	}
 
 	/**
@@ -81,16 +84,19 @@
 		if (!(oldEnd instanceof AbstractFeature && newEnd instanceof AbstractFeature)) {
 			return false;
 		}
-		return UrmlBaseItemSemanticEditPolicy.LinkConstraints.canExistAbstractFeatureExcludedFeatures_4038(
-			getOldSource(), getNewTarget());
+		return UrmlBaseItemSemanticEditPolicy.getLinkConstraints()
+				.canExistAbstractFeatureExcludedFeatures_4038(getOldSource(),
+						getNewTarget());
 	}
 
 	/**
 	 * @generated
 	 */
-	protected CommandResult doExecuteWithResult(IProgressMonitor monitor, IAdaptable info) throws ExecutionException {
+	protected CommandResult doExecuteWithResult(IProgressMonitor monitor,
+			IAdaptable info) throws ExecutionException {
 		if (!canExecute()) {
-			throw new ExecutionException("Invalid arguments in reorient link command"); //$NON-NLS-1$
+			throw new ExecutionException(
+					"Invalid arguments in reorient link command"); //$NON-NLS-1$
 		}
 		if (reorientDirection == ReorientRelationshipRequest.REORIENT_SOURCE) {
 			return reorientSource();
Index: src/org/unicase/ui/diagram/urml/edit/commands/ServiceCreateCommand.java
===================================================================
--- src/org/unicase/ui/diagram/urml/edit/commands/ServiceCreateCommand.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/edit/commands/ServiceCreateCommand.java	(working copy)
@@ -33,7 +33,8 @@
 	 * @generated
 	 */
 	protected EObject getElementToEdit() {
-		EObject container = ((CreateElementRequest) getRequest()).getContainer();
+		EObject container = ((CreateElementRequest) getRequest())
+				.getContainer();
 		if (container instanceof View) {
 			container = ((View) container).getElement();
 		}
@@ -51,7 +52,8 @@
 	/**
 	 * @generated
 	 */
-	protected CommandResult doExecuteWithResult(IProgressMonitor monitor, IAdaptable info) throws ExecutionException {
+	protected CommandResult doExecuteWithResult(IProgressMonitor monitor,
+			IAdaptable info) throws ExecutionException {
 		Service newElement = ServiceFactory.eINSTANCE.createService();
 
 		MEDiagram owner = (MEDiagram) getElementToEdit();
@@ -68,12 +70,17 @@
 	/**
 	 * @generated
 	 */
-	protected void doConfigure(Service newElement, IProgressMonitor monitor, IAdaptable info) throws ExecutionException {
-		IElementType elementType = ((CreateElementRequest) getRequest()).getElementType();
-		ConfigureRequest configureRequest = new ConfigureRequest(getEditingDomain(), newElement, elementType);
-		configureRequest.setClientContext(((CreateElementRequest) getRequest()).getClientContext());
+	protected void doConfigure(Service newElement, IProgressMonitor monitor,
+			IAdaptable info) throws ExecutionException {
+		IElementType elementType = ((CreateElementRequest) getRequest())
+				.getElementType();
+		ConfigureRequest configureRequest = new ConfigureRequest(
+				getEditingDomain(), newElement, elementType);
+		configureRequest.setClientContext(((CreateElementRequest) getRequest())
+				.getClientContext());
 		configureRequest.addParameters(getRequest().getParameters());
-		ICommand configureCommand = elementType.getEditCommand(configureRequest);
+		ICommand configureCommand = elementType
+				.getEditCommand(configureRequest);
 		if (configureCommand != null && configureCommand.canExecute()) {
 			configureCommand.execute(monitor, info);
 		}
Index: src/org/unicase/ui/diagram/urml/edit/commands/ProductFeaturesCreateCommand.java
===================================================================
--- src/org/unicase/ui/diagram/urml/edit/commands/ProductFeaturesCreateCommand.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/edit/commands/ProductFeaturesCreateCommand.java	(working copy)
@@ -29,7 +29,8 @@
 	/**
 	 * @generated
 	 */
-	public ProductFeaturesCreateCommand(CreateRelationshipRequest request, EObject source, EObject target) {
+	public ProductFeaturesCreateCommand(CreateRelationshipRequest request,
+			EObject source, EObject target) {
 		super(request.getLabel(), null, request);
 		this.source = source;
 		this.target = target;
@@ -52,15 +53,18 @@
 			return true; // link creation is in progress; source is not defined yet
 		}
 		// target may be null here but it's possible to check constraint
-		return UrmlBaseItemSemanticEditPolicy.LinkConstraints.canCreateProductFeatures_4047(getSource(), getTarget());
+		return UrmlBaseItemSemanticEditPolicy.getLinkConstraints()
+				.canCreateProductFeatures_4047(getSource(), getTarget());
 	}
 
 	/**
 	 * @generated
 	 */
-	protected CommandResult doExecuteWithResult(IProgressMonitor monitor, IAdaptable info) throws ExecutionException {
+	protected CommandResult doExecuteWithResult(IProgressMonitor monitor,
+			IAdaptable info) throws ExecutionException {
 		if (!canExecute()) {
-			throw new ExecutionException("Invalid arguments in create link command"); //$NON-NLS-1$
+			throw new ExecutionException(
+					"Invalid arguments in create link command"); //$NON-NLS-1$
 		}
 
 		if (getSource() != null && getTarget() != null) {
Index: src/org/unicase/ui/diagram/urml/edit/commands/AbstractFeatureSubFeaturesCreateCommand.java
===================================================================
--- src/org/unicase/ui/diagram/urml/edit/commands/AbstractFeatureSubFeaturesCreateCommand.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/edit/commands/AbstractFeatureSubFeaturesCreateCommand.java	(working copy)
@@ -28,7 +28,8 @@
 	/**
 	 * @generated
 	 */
-	public AbstractFeatureSubFeaturesCreateCommand(CreateRelationshipRequest request, EObject source, EObject target) {
+	public AbstractFeatureSubFeaturesCreateCommand(
+			CreateRelationshipRequest request, EObject source, EObject target) {
 		super(request.getLabel(), null, request);
 		this.source = source;
 		this.target = target;
@@ -51,16 +52,19 @@
 			return true; // link creation is in progress; source is not defined yet
 		}
 		// target may be null here but it's possible to check constraint
-		return UrmlBaseItemSemanticEditPolicy.LinkConstraints.canCreateAbstractFeatureSubFeatures_4034(getSource(),
-			getTarget());
+		return UrmlBaseItemSemanticEditPolicy.getLinkConstraints()
+				.canCreateAbstractFeatureSubFeatures_4034(getSource(),
+						getTarget());
 	}
 
 	/**
 	 * @generated
 	 */
-	protected CommandResult doExecuteWithResult(IProgressMonitor monitor, IAdaptable info) throws ExecutionException {
+	protected CommandResult doExecuteWithResult(IProgressMonitor monitor,
+			IAdaptable info) throws ExecutionException {
 		if (!canExecute()) {
-			throw new ExecutionException("Invalid arguments in create link command"); //$NON-NLS-1$
+			throw new ExecutionException(
+					"Invalid arguments in create link command"); //$NON-NLS-1$
 		}
 
 		if (getSource() != null && getTarget() != null) {
Index: src/org/unicase/ui/diagram/urml/edit/commands/AbstractFeatureRequiredFeaturesCreateCommand.java
===================================================================
--- src/org/unicase/ui/diagram/urml/edit/commands/AbstractFeatureRequiredFeaturesCreateCommand.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/edit/commands/AbstractFeatureRequiredFeaturesCreateCommand.java	(working copy)
@@ -13,7 +13,8 @@
 /**
  * @generated
  */
-public class AbstractFeatureRequiredFeaturesCreateCommand extends EditElementCommand {
+public class AbstractFeatureRequiredFeaturesCreateCommand extends
+		EditElementCommand {
 
 	/**
 	 * @generated
@@ -28,8 +29,8 @@
 	/**
 	 * @generated
 	 */
-	public AbstractFeatureRequiredFeaturesCreateCommand(CreateRelationshipRequest request, EObject source,
-		EObject target) {
+	public AbstractFeatureRequiredFeaturesCreateCommand(
+			CreateRelationshipRequest request, EObject source, EObject target) {
 		super(request.getLabel(), null, request);
 		this.source = source;
 		this.target = target;
@@ -52,16 +53,19 @@
 			return true; // link creation is in progress; source is not defined yet
 		}
 		// target may be null here but it's possible to check constraint
-		return UrmlBaseItemSemanticEditPolicy.LinkConstraints.canCreateAbstractFeatureRequiredFeatures_4045(
-			getSource(), getTarget());
+		return UrmlBaseItemSemanticEditPolicy.getLinkConstraints()
+				.canCreateAbstractFeatureRequiredFeatures_4045(getSource(),
+						getTarget());
 	}
 
 	/**
 	 * @generated
 	 */
-	protected CommandResult doExecuteWithResult(IProgressMonitor monitor, IAdaptable info) throws ExecutionException {
+	protected CommandResult doExecuteWithResult(IProgressMonitor monitor,
+			IAdaptable info) throws ExecutionException {
 		if (!canExecute()) {
-			throw new ExecutionException("Invalid arguments in create link command"); //$NON-NLS-1$
+			throw new ExecutionException(
+					"Invalid arguments in create link command"); //$NON-NLS-1$
 		}
 
 		if (getSource() != null && getTarget() != null) {
Index: src/org/unicase/ui/diagram/urml/edit/commands/NonFunctionalRequirementSubNonFunctionalRequirementsReorientCommand.java
===================================================================
--- src/org/unicase/ui/diagram/urml/edit/commands/NonFunctionalRequirementSubNonFunctionalRequirementsReorientCommand.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/edit/commands/NonFunctionalRequirementSubNonFunctionalRequirementsReorientCommand.java	(working copy)
@@ -14,7 +14,8 @@
 /**
  * @generated
  */
-public class NonFunctionalRequirementSubNonFunctionalRequirementsReorientCommand extends EditElementCommand {
+public class NonFunctionalRequirementSubNonFunctionalRequirementsReorientCommand
+		extends EditElementCommand {
 
 	/**
 	 * @generated
@@ -40,7 +41,7 @@
 	 * @generated
 	 */
 	public NonFunctionalRequirementSubNonFunctionalRequirementsReorientCommand(
-		ReorientReferenceRelationshipRequest request) {
+			ReorientReferenceRelationshipRequest request) {
 		super(request.getLabel(), null, request);
 		reorientDirection = request.getDirection();
 		referenceOwner = request.getReferenceOwner();
@@ -71,8 +72,10 @@
 		if (!(oldEnd instanceof NonFunctionalRequirement && newEnd instanceof NonFunctionalRequirement)) {
 			return false;
 		}
-		return UrmlBaseItemSemanticEditPolicy.LinkConstraints
-			.canExistNonFunctionalRequirementSubNonFunctionalRequirements_4043(getNewSource(), getOldTarget());
+		return UrmlBaseItemSemanticEditPolicy
+				.getLinkConstraints()
+				.canExistNonFunctionalRequirementSubNonFunctionalRequirements_4043(
+						getNewSource(), getOldTarget());
 	}
 
 	/**
@@ -82,16 +85,20 @@
 		if (!(oldEnd instanceof NonFunctionalRequirement && newEnd instanceof NonFunctionalRequirement)) {
 			return false;
 		}
-		return UrmlBaseItemSemanticEditPolicy.LinkConstraints
-			.canExistNonFunctionalRequirementSubNonFunctionalRequirements_4043(getOldSource(), getNewTarget());
+		return UrmlBaseItemSemanticEditPolicy
+				.getLinkConstraints()
+				.canExistNonFunctionalRequirementSubNonFunctionalRequirements_4043(
+						getOldSource(), getNewTarget());
 	}
 
 	/**
 	 * @generated
 	 */
-	protected CommandResult doExecuteWithResult(IProgressMonitor monitor, IAdaptable info) throws ExecutionException {
+	protected CommandResult doExecuteWithResult(IProgressMonitor monitor,
+			IAdaptable info) throws ExecutionException {
 		if (!canExecute()) {
-			throw new ExecutionException("Invalid arguments in reorient link command"); //$NON-NLS-1$
+			throw new ExecutionException(
+					"Invalid arguments in reorient link command"); //$NON-NLS-1$
 		}
 		if (reorientDirection == ReorientRelationshipRequest.REORIENT_SOURCE) {
 			return reorientSource();
Index: src/org/unicase/ui/diagram/urml/edit/commands/AbstractFeatureDetailingFunctionalRequirementsCreateCommand.java
===================================================================
--- src/org/unicase/ui/diagram/urml/edit/commands/AbstractFeatureDetailingFunctionalRequirementsCreateCommand.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/edit/commands/AbstractFeatureDetailingFunctionalRequirementsCreateCommand.java	(working copy)
@@ -14,7 +14,8 @@
 /**
  * @generated
  */
-public class AbstractFeatureDetailingFunctionalRequirementsCreateCommand extends EditElementCommand {
+public class AbstractFeatureDetailingFunctionalRequirementsCreateCommand extends
+		EditElementCommand {
 
 	/**
 	 * @generated
@@ -29,8 +30,8 @@
 	/**
 	 * @generated
 	 */
-	public AbstractFeatureDetailingFunctionalRequirementsCreateCommand(CreateRelationshipRequest request,
-		EObject source, EObject target) {
+	public AbstractFeatureDetailingFunctionalRequirementsCreateCommand(
+			CreateRelationshipRequest request, EObject source, EObject target) {
 		super(request.getLabel(), null, request);
 		this.source = source;
 		this.target = target;
@@ -53,16 +54,19 @@
 			return true; // link creation is in progress; source is not defined yet
 		}
 		// target may be null here but it's possible to check constraint
-		return UrmlBaseItemSemanticEditPolicy.LinkConstraints
-			.canCreateAbstractFeatureDetailingFunctionalRequirements_4035(getSource(), getTarget());
+		return UrmlBaseItemSemanticEditPolicy.getLinkConstraints()
+				.canCreateAbstractFeatureDetailingFunctionalRequirements_4035(
+						getSource(), getTarget());
 	}
 
 	/**
 	 * @generated
 	 */
-	protected CommandResult doExecuteWithResult(IProgressMonitor monitor, IAdaptable info) throws ExecutionException {
+	protected CommandResult doExecuteWithResult(IProgressMonitor monitor,
+			IAdaptable info) throws ExecutionException {
 		if (!canExecute()) {
-			throw new ExecutionException("Invalid arguments in create link command"); //$NON-NLS-1$
+			throw new ExecutionException(
+					"Invalid arguments in create link command"); //$NON-NLS-1$
 		}
 
 		if (getSource() != null && getTarget() != null) {
Index: src/org/unicase/ui/diagram/urml/edit/commands/VariationPointInstanceVariationPointReorientCommand.java
===================================================================
--- src/org/unicase/ui/diagram/urml/edit/commands/VariationPointInstanceVariationPointReorientCommand.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/edit/commands/VariationPointInstanceVariationPointReorientCommand.java	(working copy)
@@ -15,7 +15,8 @@
 /**
  * @generated
  */
-public class VariationPointInstanceVariationPointReorientCommand extends EditElementCommand {
+public class VariationPointInstanceVariationPointReorientCommand extends
+		EditElementCommand {
 
 	/**
 	 * @generated
@@ -40,7 +41,8 @@
 	/**
 	 * @generated
 	 */
-	public VariationPointInstanceVariationPointReorientCommand(ReorientReferenceRelationshipRequest request) {
+	public VariationPointInstanceVariationPointReorientCommand(
+			ReorientReferenceRelationshipRequest request) {
 		super(request.getLabel(), null, request);
 		reorientDirection = request.getDirection();
 		referenceOwner = request.getReferenceOwner();
@@ -71,8 +73,9 @@
 		if (!(oldEnd instanceof VariationPoint && newEnd instanceof VariationPointInstance)) {
 			return false;
 		}
-		return UrmlBaseItemSemanticEditPolicy.LinkConstraints.canExistVariationPointInstanceVariationPoint_4033(
-			getNewSource(), getOldTarget());
+		return UrmlBaseItemSemanticEditPolicy.getLinkConstraints()
+				.canExistVariationPointInstanceVariationPoint_4033(
+						getNewSource(), getOldTarget());
 	}
 
 	/**
@@ -82,16 +85,19 @@
 		if (!(oldEnd instanceof VariationPoint && newEnd instanceof VariationPoint)) {
 			return false;
 		}
-		return UrmlBaseItemSemanticEditPolicy.LinkConstraints.canExistVariationPointInstanceVariationPoint_4033(
-			getOldSource(), getNewTarget());
+		return UrmlBaseItemSemanticEditPolicy.getLinkConstraints()
+				.canExistVariationPointInstanceVariationPoint_4033(
+						getOldSource(), getNewTarget());
 	}
 
 	/**
 	 * @generated
 	 */
-	protected CommandResult doExecuteWithResult(IProgressMonitor monitor, IAdaptable info) throws ExecutionException {
+	protected CommandResult doExecuteWithResult(IProgressMonitor monitor,
+			IAdaptable info) throws ExecutionException {
 		if (!canExecute()) {
-			throw new ExecutionException("Invalid arguments in reorient link command"); //$NON-NLS-1$
+			throw new ExecutionException(
+					"Invalid arguments in reorient link command"); //$NON-NLS-1$
 		}
 		if (reorientDirection == ReorientRelationshipRequest.REORIENT_SOURCE) {
 			return reorientSource();
Index: src/org/unicase/ui/diagram/urml/edit/commands/DangerHarmedAssetsReorientCommand.java
===================================================================
--- src/org/unicase/ui/diagram/urml/edit/commands/DangerHarmedAssetsReorientCommand.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/edit/commands/DangerHarmedAssetsReorientCommand.java	(working copy)
@@ -40,7 +40,8 @@
 	/**
 	 * @generated
 	 */
-	public DangerHarmedAssetsReorientCommand(ReorientReferenceRelationshipRequest request) {
+	public DangerHarmedAssetsReorientCommand(
+			ReorientReferenceRelationshipRequest request) {
 		super(request.getLabel(), null, request);
 		reorientDirection = request.getDirection();
 		referenceOwner = request.getReferenceOwner();
@@ -71,8 +72,9 @@
 		if (!(oldEnd instanceof Asset && newEnd instanceof Danger)) {
 			return false;
 		}
-		return UrmlBaseItemSemanticEditPolicy.LinkConstraints.canExistDangerHarmedAssets_4013(getNewSource(),
-			getOldTarget());
+		return UrmlBaseItemSemanticEditPolicy
+				.getLinkConstraints()
+				.canExistDangerHarmedAssets_4013(getNewSource(), getOldTarget());
 	}
 
 	/**
@@ -82,16 +84,19 @@
 		if (!(oldEnd instanceof Asset && newEnd instanceof Asset)) {
 			return false;
 		}
-		return UrmlBaseItemSemanticEditPolicy.LinkConstraints.canExistDangerHarmedAssets_4013(getOldSource(),
-			getNewTarget());
+		return UrmlBaseItemSemanticEditPolicy
+				.getLinkConstraints()
+				.canExistDangerHarmedAssets_4013(getOldSource(), getNewTarget());
 	}
 
 	/**
 	 * @generated
 	 */
-	protected CommandResult doExecuteWithResult(IProgressMonitor monitor, IAdaptable info) throws ExecutionException {
+	protected CommandResult doExecuteWithResult(IProgressMonitor monitor,
+			IAdaptable info) throws ExecutionException {
 		if (!canExecute()) {
-			throw new ExecutionException("Invalid arguments in reorient link command"); //$NON-NLS-1$
+			throw new ExecutionException(
+					"Invalid arguments in reorient link command"); //$NON-NLS-1$
 		}
 		if (reorientDirection == ReorientRelationshipRequest.REORIENT_SOURCE) {
 			return reorientSource();
Index: src/org/unicase/ui/diagram/urml/edit/commands/DangerHarmedAssetsCreateCommand.java
===================================================================
--- src/org/unicase/ui/diagram/urml/edit/commands/DangerHarmedAssetsCreateCommand.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/edit/commands/DangerHarmedAssetsCreateCommand.java	(working copy)
@@ -29,7 +29,8 @@
 	/**
 	 * @generated
 	 */
-	public DangerHarmedAssetsCreateCommand(CreateRelationshipRequest request, EObject source, EObject target) {
+	public DangerHarmedAssetsCreateCommand(CreateRelationshipRequest request,
+			EObject source, EObject target) {
 		super(request.getLabel(), null, request);
 		this.source = source;
 		this.target = target;
@@ -52,16 +53,18 @@
 			return true; // link creation is in progress; source is not defined yet
 		}
 		// target may be null here but it's possible to check constraint
-		return UrmlBaseItemSemanticEditPolicy.LinkConstraints
-			.canCreateDangerHarmedAssets_4013(getSource(), getTarget());
+		return UrmlBaseItemSemanticEditPolicy.getLinkConstraints()
+				.canCreateDangerHarmedAssets_4013(getSource(), getTarget());
 	}
 
 	/**
 	 * @generated
 	 */
-	protected CommandResult doExecuteWithResult(IProgressMonitor monitor, IAdaptable info) throws ExecutionException {
+	protected CommandResult doExecuteWithResult(IProgressMonitor monitor,
+			IAdaptable info) throws ExecutionException {
 		if (!canExecute()) {
-			throw new ExecutionException("Invalid arguments in create link command"); //$NON-NLS-1$
+			throw new ExecutionException(
+					"Invalid arguments in create link command"); //$NON-NLS-1$
 		}
 
 		if (getSource() != null && getTarget() != null) {
Index: src/org/unicase/ui/diagram/urml/edit/commands/NonFunctionalRequirementCreateCommand.java
===================================================================
--- src/org/unicase/ui/diagram/urml/edit/commands/NonFunctionalRequirementCreateCommand.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/edit/commands/NonFunctionalRequirementCreateCommand.java	(working copy)
@@ -33,7 +33,8 @@
 	 * @generated
 	 */
 	protected EObject getElementToEdit() {
-		EObject container = ((CreateElementRequest) getRequest()).getContainer();
+		EObject container = ((CreateElementRequest) getRequest())
+				.getContainer();
 		if (container instanceof View) {
 			container = ((View) container).getElement();
 		}
@@ -51,8 +52,10 @@
 	/**
 	 * @generated
 	 */
-	protected CommandResult doExecuteWithResult(IProgressMonitor monitor, IAdaptable info) throws ExecutionException {
-		NonFunctionalRequirement newElement = RequirementFactory.eINSTANCE.createNonFunctionalRequirement();
+	protected CommandResult doExecuteWithResult(IProgressMonitor monitor,
+			IAdaptable info) throws ExecutionException {
+		NonFunctionalRequirement newElement = RequirementFactory.eINSTANCE
+				.createNonFunctionalRequirement();
 
 		MEDiagram owner = (MEDiagram) getElementToEdit();
 		owner.getNewElements().add(newElement);
@@ -68,13 +71,18 @@
 	/**
 	 * @generated
 	 */
-	protected void doConfigure(NonFunctionalRequirement newElement, IProgressMonitor monitor, IAdaptable info)
-		throws ExecutionException {
-		IElementType elementType = ((CreateElementRequest) getRequest()).getElementType();
-		ConfigureRequest configureRequest = new ConfigureRequest(getEditingDomain(), newElement, elementType);
-		configureRequest.setClientContext(((CreateElementRequest) getRequest()).getClientContext());
+	protected void doConfigure(NonFunctionalRequirement newElement,
+			IProgressMonitor monitor, IAdaptable info)
+			throws ExecutionException {
+		IElementType elementType = ((CreateElementRequest) getRequest())
+				.getElementType();
+		ConfigureRequest configureRequest = new ConfigureRequest(
+				getEditingDomain(), newElement, elementType);
+		configureRequest.setClientContext(((CreateElementRequest) getRequest())
+				.getClientContext());
 		configureRequest.addParameters(getRequest().getParameters());
-		ICommand configureCommand = elementType.getEditCommand(configureRequest);
+		ICommand configureCommand = elementType
+				.getEditCommand(configureRequest);
 		if (configureCommand != null && configureCommand.canExecute()) {
 			configureCommand.execute(monitor, info);
 		}
Index: src/org/unicase/ui/diagram/urml/edit/commands/GoalReference3ReorientCommand.java
===================================================================
--- src/org/unicase/ui/diagram/urml/edit/commands/GoalReference3ReorientCommand.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/edit/commands/GoalReference3ReorientCommand.java	(working copy)
@@ -7,8 +7,10 @@
 import org.eclipse.gmf.runtime.common.core.command.CommandResult;
 import org.eclipse.gmf.runtime.emf.type.core.commands.EditElementCommand;
 import org.eclipse.gmf.runtime.emf.type.core.requests.ReorientRelationshipRequest;
+import org.unicase.model.diagram.MEDiagram;
 import org.unicase.model.urml.goal.Goal;
 import org.unicase.model.urml.goal.GoalReference;
+import org.unicase.ui.diagram.urml.edit.policies.UrmlBaseItemSemanticEditPolicy;
 
 /**
  * @generated
@@ -93,9 +95,11 @@
 	/**
 	 * @generated
 	 */
-	protected CommandResult doExecuteWithResult(IProgressMonitor monitor, IAdaptable info) throws ExecutionException {
+	protected CommandResult doExecuteWithResult(IProgressMonitor monitor,
+			IAdaptable info) throws ExecutionException {
 		if (!canExecute()) {
-			throw new ExecutionException("Invalid arguments in reorient link command"); //$NON-NLS-1$
+			throw new ExecutionException(
+					"Invalid arguments in reorient link command"); //$NON-NLS-1$
 		}
 		if (reorientDirection == ReorientRelationshipRequest.REORIENT_SOURCE) {
 			return reorientSource();
Index: src/org/unicase/ui/diagram/urml/edit/commands/FunctionalRequirementCreateCommand.java
===================================================================
--- src/org/unicase/ui/diagram/urml/edit/commands/FunctionalRequirementCreateCommand.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/edit/commands/FunctionalRequirementCreateCommand.java	(working copy)
@@ -33,7 +33,8 @@
 	 * @generated
 	 */
 	protected EObject getElementToEdit() {
-		EObject container = ((CreateElementRequest) getRequest()).getContainer();
+		EObject container = ((CreateElementRequest) getRequest())
+				.getContainer();
 		if (container instanceof View) {
 			container = ((View) container).getElement();
 		}
@@ -51,8 +52,10 @@
 	/**
 	 * @generated
 	 */
-	protected CommandResult doExecuteWithResult(IProgressMonitor monitor, IAdaptable info) throws ExecutionException {
-		FunctionalRequirement newElement = RequirementFactory.eINSTANCE.createFunctionalRequirement();
+	protected CommandResult doExecuteWithResult(IProgressMonitor monitor,
+			IAdaptable info) throws ExecutionException {
+		FunctionalRequirement newElement = RequirementFactory.eINSTANCE
+				.createFunctionalRequirement();
 
 		MEDiagram owner = (MEDiagram) getElementToEdit();
 		owner.getNewElements().add(newElement);
@@ -68,13 +71,18 @@
 	/**
 	 * @generated
 	 */
-	protected void doConfigure(FunctionalRequirement newElement, IProgressMonitor monitor, IAdaptable info)
-		throws ExecutionException {
-		IElementType elementType = ((CreateElementRequest) getRequest()).getElementType();
-		ConfigureRequest configureRequest = new ConfigureRequest(getEditingDomain(), newElement, elementType);
-		configureRequest.setClientContext(((CreateElementRequest) getRequest()).getClientContext());
+	protected void doConfigure(FunctionalRequirement newElement,
+			IProgressMonitor monitor, IAdaptable info)
+			throws ExecutionException {
+		IElementType elementType = ((CreateElementRequest) getRequest())
+				.getElementType();
+		ConfigureRequest configureRequest = new ConfigureRequest(
+				getEditingDomain(), newElement, elementType);
+		configureRequest.setClientContext(((CreateElementRequest) getRequest())
+				.getClientContext());
 		configureRequest.addParameters(getRequest().getParameters());
-		ICommand configureCommand = elementType.getEditCommand(configureRequest);
+		ICommand configureCommand = elementType
+				.getEditCommand(configureRequest);
 		if (configureCommand != null && configureCommand.canExecute()) {
 			configureCommand.execute(monitor, info);
 		}
Index: src/org/unicase/ui/diagram/urml/edit/commands/StakeholderGoalsReorientCommand.java
===================================================================
--- src/org/unicase/ui/diagram/urml/edit/commands/StakeholderGoalsReorientCommand.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/edit/commands/StakeholderGoalsReorientCommand.java	(working copy)
@@ -40,7 +40,8 @@
 	/**
 	 * @generated
 	 */
-	public StakeholderGoalsReorientCommand(ReorientReferenceRelationshipRequest request) {
+	public StakeholderGoalsReorientCommand(
+			ReorientReferenceRelationshipRequest request) {
 		super(request.getLabel(), null, request);
 		reorientDirection = request.getDirection();
 		referenceOwner = request.getReferenceOwner();
@@ -71,8 +72,8 @@
 		if (!(oldEnd instanceof Goal && newEnd instanceof Stakeholder)) {
 			return false;
 		}
-		return UrmlBaseItemSemanticEditPolicy.LinkConstraints.canExistStakeholderGoals_4008(getNewSource(),
-			getOldTarget());
+		return UrmlBaseItemSemanticEditPolicy.getLinkConstraints()
+				.canExistStakeholderGoals_4008(getNewSource(), getOldTarget());
 	}
 
 	/**
@@ -82,16 +83,18 @@
 		if (!(oldEnd instanceof Goal && newEnd instanceof Goal)) {
 			return false;
 		}
-		return UrmlBaseItemSemanticEditPolicy.LinkConstraints.canExistStakeholderGoals_4008(getOldSource(),
-			getNewTarget());
+		return UrmlBaseItemSemanticEditPolicy.getLinkConstraints()
+				.canExistStakeholderGoals_4008(getOldSource(), getNewTarget());
 	}
 
 	/**
 	 * @generated
 	 */
-	protected CommandResult doExecuteWithResult(IProgressMonitor monitor, IAdaptable info) throws ExecutionException {
+	protected CommandResult doExecuteWithResult(IProgressMonitor monitor,
+			IAdaptable info) throws ExecutionException {
 		if (!canExecute()) {
-			throw new ExecutionException("Invalid arguments in reorient link command"); //$NON-NLS-1$
+			throw new ExecutionException(
+					"Invalid arguments in reorient link command"); //$NON-NLS-1$
 		}
 		if (reorientDirection == ReorientRelationshipRequest.REORIENT_SOURCE) {
 			return reorientSource();
Index: src/org/unicase/ui/diagram/urml/edit/commands/ProductVariationPointInstancesCreateCommand.java
===================================================================
--- src/org/unicase/ui/diagram/urml/edit/commands/ProductVariationPointInstancesCreateCommand.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/edit/commands/ProductVariationPointInstancesCreateCommand.java	(working copy)
@@ -14,7 +14,8 @@
 /**
  * @generated
  */
-public class ProductVariationPointInstancesCreateCommand extends EditElementCommand {
+public class ProductVariationPointInstancesCreateCommand extends
+		EditElementCommand {
 
 	/**
 	 * @generated
@@ -29,7 +30,8 @@
 	/**
 	 * @generated
 	 */
-	public ProductVariationPointInstancesCreateCommand(CreateRelationshipRequest request, EObject source, EObject target) {
+	public ProductVariationPointInstancesCreateCommand(
+			CreateRelationshipRequest request, EObject source, EObject target) {
 		super(request.getLabel(), null, request);
 		this.source = source;
 		this.target = target;
@@ -52,16 +54,19 @@
 			return true; // link creation is in progress; source is not defined yet
 		}
 		// target may be null here but it's possible to check constraint
-		return UrmlBaseItemSemanticEditPolicy.LinkConstraints.canCreateProductVariationPointInstances_4032(getSource(),
-			getTarget());
+		return UrmlBaseItemSemanticEditPolicy.getLinkConstraints()
+				.canCreateProductVariationPointInstances_4032(getSource(),
+						getTarget());
 	}
 
 	/**
 	 * @generated
 	 */
-	protected CommandResult doExecuteWithResult(IProgressMonitor monitor, IAdaptable info) throws ExecutionException {
+	protected CommandResult doExecuteWithResult(IProgressMonitor monitor,
+			IAdaptable info) throws ExecutionException {
 		if (!canExecute()) {
-			throw new ExecutionException("Invalid arguments in create link command"); //$NON-NLS-1$
+			throw new ExecutionException(
+					"Invalid arguments in create link command"); //$NON-NLS-1$
 		}
 
 		if (getSource() != null && getTarget() != null) {
Index: src/org/unicase/ui/diagram/urml/edit/commands/GoalReferenceCreateCommand.java
===================================================================
--- src/org/unicase/ui/diagram/urml/edit/commands/GoalReferenceCreateCommand.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/edit/commands/GoalReferenceCreateCommand.java	(working copy)
@@ -16,6 +16,7 @@
 import org.unicase.model.urml.goal.GoalFactory;
 import org.unicase.model.urml.goal.GoalReference;
 import org.unicase.ui.diagram.urml.edit.policies.UrmlBaseItemSemanticEditPolicy;
+import org.unicase.ui.diagram.urml.providers.ElementInitializers;
 import org.unicase.ui.diagram.urml.providers.UrmlElementTypes;
 
 /**
@@ -44,7 +45,8 @@
 	 * 
 	 * @generated NOT
 	 */
-	public GoalReferenceCreateCommand(CreateRelationshipRequest request, EObject source, EObject target) {
+	public GoalReferenceCreateCommand(CreateRelationshipRequest request,
+			EObject source, EObject target) {
 		super(request.getLabel(), null, request);
 		/* user code */
 		throw new UnsupportedOperationException();
@@ -54,8 +56,8 @@
 	/**
 	 * @generated NOT
 	 */
-	public GoalReferenceCreateCommand(CreateRelationshipRequest request, EObject source, EObject target,
-		EObject eContainer) {
+	public GoalReferenceCreateCommand(CreateRelationshipRequest request,
+			EObject source, EObject target, EObject eContainer) {
 		super(request.getLabel(), null, request);
 		this.source = source;
 		this.target = target;
@@ -64,7 +66,8 @@
 		// Find container element for the new link.
 		// Climb up by containment hierarchy starting from the source
 		// and return the first element that is instance of the container class.
-		for (EObject element = eContainer; element != null; element = element.eContainer()) {
+		for (EObject element = eContainer; element != null; element = element
+				.eContainer()) {
 			if (element instanceof MEDiagram) {
 				container = (MEDiagram) element;
 				super.setElementToEdit(container);
@@ -95,16 +98,19 @@
 		if (getContainer() == null) {
 			return false;
 		}
-		return UrmlBaseItemSemanticEditPolicy.LinkConstraints.canCreateGoalReference_4016(getContainer(), getSource(),
-			getTarget());
+		return UrmlBaseItemSemanticEditPolicy.getLinkConstraints()
+				.canCreateGoalReference_4016(getContainer(), getSource(),
+						getTarget());
 	}
 
 	/**
 	 * @generated NOT
 	 */
-	protected CommandResult doExecuteWithResult(IProgressMonitor monitor, IAdaptable info) throws ExecutionException {
+	protected CommandResult doExecuteWithResult(IProgressMonitor monitor,
+			IAdaptable info) throws ExecutionException {
 		if (!canExecute()) {
-			throw new ExecutionException("Invalid arguments in create link command"); //$NON-NLS-1$
+			throw new ExecutionException(
+					"Invalid arguments in create link command"); //$NON-NLS-1$
 		}
 
 		GoalReference newElement = GoalFactory.eINSTANCE.createGoalReference();
@@ -114,7 +120,7 @@
 		/* user code */
 		newElement.setSource(getSource());
 		newElement.setTarget(getTarget());
-		UrmlElementTypes.init_GoalReference_4016(newElement);
+		UrmlElementTypes.getInstance().init_GoalReference_4016(newElement);
 		doConfigure(newElement, monitor, info);
 		((CreateElementRequest) getRequest()).setNewElement(newElement);
 		return CommandResult.newOKCommandResult(newElement);
@@ -124,15 +130,22 @@
 	/**
 	 * @generated
 	 */
-	protected void doConfigure(GoalReference newElement, IProgressMonitor monitor, IAdaptable info)
-		throws ExecutionException {
-		IElementType elementType = ((CreateElementRequest) getRequest()).getElementType();
-		ConfigureRequest configureRequest = new ConfigureRequest(getEditingDomain(), newElement, elementType);
-		configureRequest.setClientContext(((CreateElementRequest) getRequest()).getClientContext());
+	protected void doConfigure(GoalReference newElement,
+			IProgressMonitor monitor, IAdaptable info)
+			throws ExecutionException {
+		IElementType elementType = ((CreateElementRequest) getRequest())
+				.getElementType();
+		ConfigureRequest configureRequest = new ConfigureRequest(
+				getEditingDomain(), newElement, elementType);
+		configureRequest.setClientContext(((CreateElementRequest) getRequest())
+				.getClientContext());
 		configureRequest.addParameters(getRequest().getParameters());
-		configureRequest.setParameter(CreateRelationshipRequest.SOURCE, getSource());
-		configureRequest.setParameter(CreateRelationshipRequest.TARGET, getTarget());
-		ICommand configureCommand = elementType.getEditCommand(configureRequest);
+		configureRequest.setParameter(CreateRelationshipRequest.SOURCE,
+				getSource());
+		configureRequest.setParameter(CreateRelationshipRequest.TARGET,
+				getTarget());
+		ICommand configureCommand = elementType
+				.getEditCommand(configureRequest);
 		if (configureCommand != null && configureCommand.canExecute()) {
 			configureCommand.execute(monitor, info);
 		}
@@ -176,7 +189,8 @@
 		// Find container element for the new link.
 		// Climb up by containment hierarchy starting from the source
 		// and return the first element that is instance of the container class.
-		for (EObject element = source; element != null; element = element.eContainer()) {
+		for (EObject element = source; element != null; element = element
+				.eContainer()) {
 			if (element instanceof MEDiagram) {
 				return (MEDiagram) element;
 			}
Index: src/org/unicase/ui/diagram/urml/edit/commands/GoalReference4ReorientCommand.java
===================================================================
--- src/org/unicase/ui/diagram/urml/edit/commands/GoalReference4ReorientCommand.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/edit/commands/GoalReference4ReorientCommand.java	(working copy)
@@ -7,8 +7,10 @@
 import org.eclipse.gmf.runtime.common.core.command.CommandResult;
 import org.eclipse.gmf.runtime.emf.type.core.commands.EditElementCommand;
 import org.eclipse.gmf.runtime.emf.type.core.requests.ReorientRelationshipRequest;
+import org.unicase.model.diagram.MEDiagram;
 import org.unicase.model.urml.goal.Goal;
 import org.unicase.model.urml.goal.GoalReference;
+import org.unicase.ui.diagram.urml.edit.policies.UrmlBaseItemSemanticEditPolicy;
 
 /**
  * @generated
@@ -93,9 +95,11 @@
 	/**
 	 * @generated
 	 */
-	protected CommandResult doExecuteWithResult(IProgressMonitor monitor, IAdaptable info) throws ExecutionException {
+	protected CommandResult doExecuteWithResult(IProgressMonitor monitor,
+			IAdaptable info) throws ExecutionException {
 		if (!canExecute()) {
-			throw new ExecutionException("Invalid arguments in reorient link command"); //$NON-NLS-1$
+			throw new ExecutionException(
+					"Invalid arguments in reorient link command"); //$NON-NLS-1$
 		}
 		if (reorientDirection == ReorientRelationshipRequest.REORIENT_SOURCE) {
 			return reorientSource();
Index: src/org/unicase/ui/diagram/urml/edit/commands/AbstractFeatureConstrainingNonFunctionalRequirementsReorientCommand.java
===================================================================
--- src/org/unicase/ui/diagram/urml/edit/commands/AbstractFeatureConstrainingNonFunctionalRequirementsReorientCommand.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/edit/commands/AbstractFeatureConstrainingNonFunctionalRequirementsReorientCommand.java	(working copy)
@@ -15,7 +15,8 @@
 /**
  * @generated
  */
-public class AbstractFeatureConstrainingNonFunctionalRequirementsReorientCommand extends EditElementCommand {
+public class AbstractFeatureConstrainingNonFunctionalRequirementsReorientCommand
+		extends EditElementCommand {
 
 	/**
 	 * @generated
@@ -41,7 +42,7 @@
 	 * @generated
 	 */
 	public AbstractFeatureConstrainingNonFunctionalRequirementsReorientCommand(
-		ReorientReferenceRelationshipRequest request) {
+			ReorientReferenceRelationshipRequest request) {
 		super(request.getLabel(), null, request);
 		reorientDirection = request.getDirection();
 		referenceOwner = request.getReferenceOwner();
@@ -72,8 +73,10 @@
 		if (!(oldEnd instanceof NonFunctionalRequirement && newEnd instanceof AbstractFeature)) {
 			return false;
 		}
-		return UrmlBaseItemSemanticEditPolicy.LinkConstraints
-			.canExistAbstractFeatureConstrainingNonFunctionalRequirements_4036(getNewSource(), getOldTarget());
+		return UrmlBaseItemSemanticEditPolicy
+				.getLinkConstraints()
+				.canExistAbstractFeatureConstrainingNonFunctionalRequirements_4036(
+						getNewSource(), getOldTarget());
 	}
 
 	/**
@@ -83,16 +86,20 @@
 		if (!(oldEnd instanceof NonFunctionalRequirement && newEnd instanceof NonFunctionalRequirement)) {
 			return false;
 		}
-		return UrmlBaseItemSemanticEditPolicy.LinkConstraints
-			.canExistAbstractFeatureConstrainingNonFunctionalRequirements_4036(getOldSource(), getNewTarget());
+		return UrmlBaseItemSemanticEditPolicy
+				.getLinkConstraints()
+				.canExistAbstractFeatureConstrainingNonFunctionalRequirements_4036(
+						getOldSource(), getNewTarget());
 	}
 
 	/**
 	 * @generated
 	 */
-	protected CommandResult doExecuteWithResult(IProgressMonitor monitor, IAdaptable info) throws ExecutionException {
+	protected CommandResult doExecuteWithResult(IProgressMonitor monitor,
+			IAdaptable info) throws ExecutionException {
 		if (!canExecute()) {
-			throw new ExecutionException("Invalid arguments in reorient link command"); //$NON-NLS-1$
+			throw new ExecutionException(
+					"Invalid arguments in reorient link command"); //$NON-NLS-1$
 		}
 		if (reorientDirection == ReorientRelationshipRequest.REORIENT_SOURCE) {
 			return reorientSource();
@@ -107,8 +114,10 @@
 	 * @generated
 	 */
 	protected CommandResult reorientSource() throws ExecutionException {
-		getOldSource().getConstrainingNonFunctionalRequirements().remove(getOldTarget());
-		getNewSource().getConstrainingNonFunctionalRequirements().add(getOldTarget());
+		getOldSource().getConstrainingNonFunctionalRequirements().remove(
+				getOldTarget());
+		getNewSource().getConstrainingNonFunctionalRequirements().add(
+				getOldTarget());
 		return CommandResult.newOKCommandResult(referenceOwner);
 	}
 
@@ -116,8 +125,10 @@
 	 * @generated
 	 */
 	protected CommandResult reorientTarget() throws ExecutionException {
-		getOldSource().getConstrainingNonFunctionalRequirements().remove(getOldTarget());
-		getOldSource().getConstrainingNonFunctionalRequirements().add(getNewTarget());
+		getOldSource().getConstrainingNonFunctionalRequirements().remove(
+				getOldTarget());
+		getOldSource().getConstrainingNonFunctionalRequirements().add(
+				getNewTarget());
 		return CommandResult.newOKCommandResult(referenceOwner);
 	}
 
Index: src/org/unicase/ui/diagram/urml/edit/commands/ServiceSubServicesReorientCommand.java
===================================================================
--- src/org/unicase/ui/diagram/urml/edit/commands/ServiceSubServicesReorientCommand.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/edit/commands/ServiceSubServicesReorientCommand.java	(working copy)
@@ -39,7 +39,8 @@
 	/**
 	 * @generated
 	 */
-	public ServiceSubServicesReorientCommand(ReorientReferenceRelationshipRequest request) {
+	public ServiceSubServicesReorientCommand(
+			ReorientReferenceRelationshipRequest request) {
 		super(request.getLabel(), null, request);
 		reorientDirection = request.getDirection();
 		referenceOwner = request.getReferenceOwner();
@@ -70,8 +71,9 @@
 		if (!(oldEnd instanceof Service && newEnd instanceof Service)) {
 			return false;
 		}
-		return UrmlBaseItemSemanticEditPolicy.LinkConstraints.canExistServiceSubServices_4022(getNewSource(),
-			getOldTarget());
+		return UrmlBaseItemSemanticEditPolicy
+				.getLinkConstraints()
+				.canExistServiceSubServices_4022(getNewSource(), getOldTarget());
 	}
 
 	/**
@@ -81,16 +83,19 @@
 		if (!(oldEnd instanceof Service && newEnd instanceof Service)) {
 			return false;
 		}
-		return UrmlBaseItemSemanticEditPolicy.LinkConstraints.canExistServiceSubServices_4022(getOldSource(),
-			getNewTarget());
+		return UrmlBaseItemSemanticEditPolicy
+				.getLinkConstraints()
+				.canExistServiceSubServices_4022(getOldSource(), getNewTarget());
 	}
 
 	/**
 	 * @generated
 	 */
-	protected CommandResult doExecuteWithResult(IProgressMonitor monitor, IAdaptable info) throws ExecutionException {
+	protected CommandResult doExecuteWithResult(IProgressMonitor monitor,
+			IAdaptable info) throws ExecutionException {
 		if (!canExecute()) {
-			throw new ExecutionException("Invalid arguments in reorient link command"); //$NON-NLS-1$
+			throw new ExecutionException(
+					"Invalid arguments in reorient link command"); //$NON-NLS-1$
 		}
 		if (reorientDirection == ReorientRelationshipRequest.REORIENT_SOURCE) {
 			return reorientSource();
Index: src/org/unicase/ui/diagram/urml/edit/commands/MitigationMitigatedDangersCreateCommand.java
===================================================================
--- src/org/unicase/ui/diagram/urml/edit/commands/MitigationMitigatedDangersCreateCommand.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/edit/commands/MitigationMitigatedDangersCreateCommand.java	(working copy)
@@ -29,7 +29,8 @@
 	/**
 	 * @generated
 	 */
-	public MitigationMitigatedDangersCreateCommand(CreateRelationshipRequest request, EObject source, EObject target) {
+	public MitigationMitigatedDangersCreateCommand(
+			CreateRelationshipRequest request, EObject source, EObject target) {
 		super(request.getLabel(), null, request);
 		this.source = source;
 		this.target = target;
@@ -52,16 +53,19 @@
 			return true; // link creation is in progress; source is not defined yet
 		}
 		// target may be null here but it's possible to check constraint
-		return UrmlBaseItemSemanticEditPolicy.LinkConstraints.canCreateMitigationMitigatedDangers_4012(getSource(),
-			getTarget());
+		return UrmlBaseItemSemanticEditPolicy.getLinkConstraints()
+				.canCreateMitigationMitigatedDangers_4012(getSource(),
+						getTarget());
 	}
 
 	/**
 	 * @generated
 	 */
-	protected CommandResult doExecuteWithResult(IProgressMonitor monitor, IAdaptable info) throws ExecutionException {
+	protected CommandResult doExecuteWithResult(IProgressMonitor monitor,
+			IAdaptable info) throws ExecutionException {
 		if (!canExecute()) {
-			throw new ExecutionException("Invalid arguments in create link command"); //$NON-NLS-1$
+			throw new ExecutionException(
+					"Invalid arguments in create link command"); //$NON-NLS-1$
 		}
 
 		if (getSource() != null && getTarget() != null) {
Index: src/org/unicase/ui/diagram/urml/edit/commands/ServiceSubServicesCreateCommand.java
===================================================================
--- src/org/unicase/ui/diagram/urml/edit/commands/ServiceSubServicesCreateCommand.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/edit/commands/ServiceSubServicesCreateCommand.java	(working copy)
@@ -28,7 +28,8 @@
 	/**
 	 * @generated
 	 */
-	public ServiceSubServicesCreateCommand(CreateRelationshipRequest request, EObject source, EObject target) {
+	public ServiceSubServicesCreateCommand(CreateRelationshipRequest request,
+			EObject source, EObject target) {
 		super(request.getLabel(), null, request);
 		this.source = source;
 		this.target = target;
@@ -51,16 +52,18 @@
 			return true; // link creation is in progress; source is not defined yet
 		}
 		// target may be null here but it's possible to check constraint
-		return UrmlBaseItemSemanticEditPolicy.LinkConstraints
-			.canCreateServiceSubServices_4022(getSource(), getTarget());
+		return UrmlBaseItemSemanticEditPolicy.getLinkConstraints()
+				.canCreateServiceSubServices_4022(getSource(), getTarget());
 	}
 
 	/**
 	 * @generated
 	 */
-	protected CommandResult doExecuteWithResult(IProgressMonitor monitor, IAdaptable info) throws ExecutionException {
+	protected CommandResult doExecuteWithResult(IProgressMonitor monitor,
+			IAdaptable info) throws ExecutionException {
 		if (!canExecute()) {
-			throw new ExecutionException("Invalid arguments in create link command"); //$NON-NLS-1$
+			throw new ExecutionException(
+					"Invalid arguments in create link command"); //$NON-NLS-1$
 		}
 
 		if (getSource() != null && getTarget() != null) {
Index: src/org/unicase/ui/diagram/urml/edit/commands/GoalRealizedFeaturesCreateCommand.java
===================================================================
--- src/org/unicase/ui/diagram/urml/edit/commands/GoalRealizedFeaturesCreateCommand.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/edit/commands/GoalRealizedFeaturesCreateCommand.java	(working copy)
@@ -29,7 +29,8 @@
 	/**
 	 * @generated
 	 */
-	public GoalRealizedFeaturesCreateCommand(CreateRelationshipRequest request, EObject source, EObject target) {
+	public GoalRealizedFeaturesCreateCommand(CreateRelationshipRequest request,
+			EObject source, EObject target) {
 		super(request.getLabel(), null, request);
 		this.source = source;
 		this.target = target;
@@ -52,16 +53,18 @@
 			return true; // link creation is in progress; source is not defined yet
 		}
 		// target may be null here but it's possible to check constraint
-		return UrmlBaseItemSemanticEditPolicy.LinkConstraints.canCreateGoalRealizedFeatures_4004(getSource(),
-			getTarget());
+		return UrmlBaseItemSemanticEditPolicy.getLinkConstraints()
+				.canCreateGoalRealizedFeatures_4004(getSource(), getTarget());
 	}
 
 	/**
 	 * @generated
 	 */
-	protected CommandResult doExecuteWithResult(IProgressMonitor monitor, IAdaptable info) throws ExecutionException {
+	protected CommandResult doExecuteWithResult(IProgressMonitor monitor,
+			IAdaptable info) throws ExecutionException {
 		if (!canExecute()) {
-			throw new ExecutionException("Invalid arguments in create link command"); //$NON-NLS-1$
+			throw new ExecutionException(
+					"Invalid arguments in create link command"); //$NON-NLS-1$
 		}
 
 		if (getSource() != null && getTarget() != null) {
Index: src/org/unicase/ui/diagram/urml/edit/commands/GoalRealizedFeaturesReorientCommand.java
===================================================================
--- src/org/unicase/ui/diagram/urml/edit/commands/GoalRealizedFeaturesReorientCommand.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/edit/commands/GoalRealizedFeaturesReorientCommand.java	(working copy)
@@ -40,7 +40,8 @@
 	/**
 	 * @generated
 	 */
-	public GoalRealizedFeaturesReorientCommand(ReorientReferenceRelationshipRequest request) {
+	public GoalRealizedFeaturesReorientCommand(
+			ReorientReferenceRelationshipRequest request) {
 		super(request.getLabel(), null, request);
 		reorientDirection = request.getDirection();
 		referenceOwner = request.getReferenceOwner();
@@ -71,8 +72,9 @@
 		if (!(oldEnd instanceof AbstractFeature && newEnd instanceof Goal)) {
 			return false;
 		}
-		return UrmlBaseItemSemanticEditPolicy.LinkConstraints.canExistGoalRealizedFeatures_4004(getNewSource(),
-			getOldTarget());
+		return UrmlBaseItemSemanticEditPolicy.getLinkConstraints()
+				.canExistGoalRealizedFeatures_4004(getNewSource(),
+						getOldTarget());
 	}
 
 	/**
@@ -82,16 +84,19 @@
 		if (!(oldEnd instanceof AbstractFeature && newEnd instanceof AbstractFeature)) {
 			return false;
 		}
-		return UrmlBaseItemSemanticEditPolicy.LinkConstraints.canExistGoalRealizedFeatures_4004(getOldSource(),
-			getNewTarget());
+		return UrmlBaseItemSemanticEditPolicy.getLinkConstraints()
+				.canExistGoalRealizedFeatures_4004(getOldSource(),
+						getNewTarget());
 	}
 
 	/**
 	 * @generated
 	 */
-	protected CommandResult doExecuteWithResult(IProgressMonitor monitor, IAdaptable info) throws ExecutionException {
+	protected CommandResult doExecuteWithResult(IProgressMonitor monitor,
+			IAdaptable info) throws ExecutionException {
 		if (!canExecute()) {
-			throw new ExecutionException("Invalid arguments in reorient link command"); //$NON-NLS-1$
+			throw new ExecutionException(
+					"Invalid arguments in reorient link command"); //$NON-NLS-1$
 		}
 		if (reorientDirection == ReorientRelationshipRequest.REORIENT_SOURCE) {
 			return reorientSource();
Index: src/org/unicase/ui/diagram/urml/edit/commands/StakeholderGoalsCreateCommand.java
===================================================================
--- src/org/unicase/ui/diagram/urml/edit/commands/StakeholderGoalsCreateCommand.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/edit/commands/StakeholderGoalsCreateCommand.java	(working copy)
@@ -29,7 +29,8 @@
 	/**
 	 * @generated
 	 */
-	public StakeholderGoalsCreateCommand(CreateRelationshipRequest request, EObject source, EObject target) {
+	public StakeholderGoalsCreateCommand(CreateRelationshipRequest request,
+			EObject source, EObject target) {
 		super(request.getLabel(), null, request);
 		this.source = source;
 		this.target = target;
@@ -52,15 +53,18 @@
 			return true; // link creation is in progress; source is not defined yet
 		}
 		// target may be null here but it's possible to check constraint
-		return UrmlBaseItemSemanticEditPolicy.LinkConstraints.canCreateStakeholderGoals_4008(getSource(), getTarget());
+		return UrmlBaseItemSemanticEditPolicy.getLinkConstraints()
+				.canCreateStakeholderGoals_4008(getSource(), getTarget());
 	}
 
 	/**
 	 * @generated
 	 */
-	protected CommandResult doExecuteWithResult(IProgressMonitor monitor, IAdaptable info) throws ExecutionException {
+	protected CommandResult doExecuteWithResult(IProgressMonitor monitor,
+			IAdaptable info) throws ExecutionException {
 		if (!canExecute()) {
-			throw new ExecutionException("Invalid arguments in create link command"); //$NON-NLS-1$
+			throw new ExecutionException(
+					"Invalid arguments in create link command"); //$NON-NLS-1$
 		}
 
 		if (getSource() != null && getTarget() != null) {
Index: src/org/unicase/ui/diagram/urml/edit/commands/StakeholderCreateCommand.java
===================================================================
--- src/org/unicase/ui/diagram/urml/edit/commands/StakeholderCreateCommand.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/edit/commands/StakeholderCreateCommand.java	(working copy)
@@ -33,7 +33,8 @@
 	 * @generated
 	 */
 	protected EObject getElementToEdit() {
-		EObject container = ((CreateElementRequest) getRequest()).getContainer();
+		EObject container = ((CreateElementRequest) getRequest())
+				.getContainer();
 		if (container instanceof View) {
 			container = ((View) container).getElement();
 		}
@@ -51,7 +52,8 @@
 	/**
 	 * @generated
 	 */
-	protected CommandResult doExecuteWithResult(IProgressMonitor monitor, IAdaptable info) throws ExecutionException {
+	protected CommandResult doExecuteWithResult(IProgressMonitor monitor,
+			IAdaptable info) throws ExecutionException {
 		Stakeholder newElement = UrmlFactory.eINSTANCE.createStakeholder();
 
 		MEDiagram owner = (MEDiagram) getElementToEdit();
@@ -68,13 +70,18 @@
 	/**
 	 * @generated
 	 */
-	protected void doConfigure(Stakeholder newElement, IProgressMonitor monitor, IAdaptable info)
-		throws ExecutionException {
-		IElementType elementType = ((CreateElementRequest) getRequest()).getElementType();
-		ConfigureRequest configureRequest = new ConfigureRequest(getEditingDomain(), newElement, elementType);
-		configureRequest.setClientContext(((CreateElementRequest) getRequest()).getClientContext());
+	protected void doConfigure(Stakeholder newElement,
+			IProgressMonitor monitor, IAdaptable info)
+			throws ExecutionException {
+		IElementType elementType = ((CreateElementRequest) getRequest())
+				.getElementType();
+		ConfigureRequest configureRequest = new ConfigureRequest(
+				getEditingDomain(), newElement, elementType);
+		configureRequest.setClientContext(((CreateElementRequest) getRequest())
+				.getClientContext());
 		configureRequest.addParameters(getRequest().getParameters());
-		ICommand configureCommand = elementType.getEditCommand(configureRequest);
+		ICommand configureCommand = elementType
+				.getEditCommand(configureRequest);
 		if (configureCommand != null && configureCommand.canExecute()) {
 			configureCommand.execute(monitor, info);
 		}
Index: src/org/unicase/ui/diagram/urml/edit/commands/MitigationMitigatedDangersReorientCommand.java
===================================================================
--- src/org/unicase/ui/diagram/urml/edit/commands/MitigationMitigatedDangersReorientCommand.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/edit/commands/MitigationMitigatedDangersReorientCommand.java	(working copy)
@@ -15,7 +15,8 @@
 /**
  * @generated
  */
-public class MitigationMitigatedDangersReorientCommand extends EditElementCommand {
+public class MitigationMitigatedDangersReorientCommand extends
+		EditElementCommand {
 
 	/**
 	 * @generated
@@ -40,7 +41,8 @@
 	/**
 	 * @generated
 	 */
-	public MitigationMitigatedDangersReorientCommand(ReorientReferenceRelationshipRequest request) {
+	public MitigationMitigatedDangersReorientCommand(
+			ReorientReferenceRelationshipRequest request) {
 		super(request.getLabel(), null, request);
 		reorientDirection = request.getDirection();
 		referenceOwner = request.getReferenceOwner();
@@ -71,8 +73,9 @@
 		if (!(oldEnd instanceof Danger && newEnd instanceof Mitigation)) {
 			return false;
 		}
-		return UrmlBaseItemSemanticEditPolicy.LinkConstraints.canExistMitigationMitigatedDangers_4012(getNewSource(),
-			getOldTarget());
+		return UrmlBaseItemSemanticEditPolicy.getLinkConstraints()
+				.canExistMitigationMitigatedDangers_4012(getNewSource(),
+						getOldTarget());
 	}
 
 	/**
@@ -82,16 +85,19 @@
 		if (!(oldEnd instanceof Danger && newEnd instanceof Danger)) {
 			return false;
 		}
-		return UrmlBaseItemSemanticEditPolicy.LinkConstraints.canExistMitigationMitigatedDangers_4012(getOldSource(),
-			getNewTarget());
+		return UrmlBaseItemSemanticEditPolicy.getLinkConstraints()
+				.canExistMitigationMitigatedDangers_4012(getOldSource(),
+						getNewTarget());
 	}
 
 	/**
 	 * @generated
 	 */
-	protected CommandResult doExecuteWithResult(IProgressMonitor monitor, IAdaptable info) throws ExecutionException {
+	protected CommandResult doExecuteWithResult(IProgressMonitor monitor,
+			IAdaptable info) throws ExecutionException {
 		if (!canExecute()) {
-			throw new ExecutionException("Invalid arguments in reorient link command"); //$NON-NLS-1$
+			throw new ExecutionException(
+					"Invalid arguments in reorient link command"); //$NON-NLS-1$
 		}
 		if (reorientDirection == ReorientRelationshipRequest.REORIENT_SOURCE) {
 			return reorientSource();
Index: src/org/unicase/ui/diagram/urml/edit/commands/GoalSubGoalsCreateCommand.java
===================================================================
--- src/org/unicase/ui/diagram/urml/edit/commands/GoalSubGoalsCreateCommand.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/edit/commands/GoalSubGoalsCreateCommand.java	(working copy)
@@ -28,7 +28,8 @@
 	/**
 	 * @generated
 	 */
-	public GoalSubGoalsCreateCommand(CreateRelationshipRequest request, EObject source, EObject target) {
+	public GoalSubGoalsCreateCommand(CreateRelationshipRequest request,
+			EObject source, EObject target) {
 		super(request.getLabel(), null, request);
 		this.source = source;
 		this.target = target;
@@ -51,15 +52,18 @@
 			return true; // link creation is in progress; source is not defined yet
 		}
 		// target may be null here but it's possible to check constraint
-		return UrmlBaseItemSemanticEditPolicy.LinkConstraints.canCreateGoalSubGoals_4018(getSource(), getTarget());
+		return UrmlBaseItemSemanticEditPolicy.getLinkConstraints()
+				.canCreateGoalSubGoals_4018(getSource(), getTarget());
 	}
 
 	/**
 	 * @generated
 	 */
-	protected CommandResult doExecuteWithResult(IProgressMonitor monitor, IAdaptable info) throws ExecutionException {
+	protected CommandResult doExecuteWithResult(IProgressMonitor monitor,
+			IAdaptable info) throws ExecutionException {
 		if (!canExecute()) {
-			throw new ExecutionException("Invalid arguments in create link command"); //$NON-NLS-1$
+			throw new ExecutionException(
+					"Invalid arguments in create link command"); //$NON-NLS-1$
 		}
 
 		if (getSource() != null && getTarget() != null) {
Index: src/org/unicase/ui/diagram/urml/edit/commands/NonFunctionalRequirementSubNonFunctionalRequirementsCreateCommand.java
===================================================================
--- src/org/unicase/ui/diagram/urml/edit/commands/NonFunctionalRequirementSubNonFunctionalRequirementsCreateCommand.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/edit/commands/NonFunctionalRequirementSubNonFunctionalRequirementsCreateCommand.java	(working copy)
@@ -13,7 +13,8 @@
 /**
  * @generated
  */
-public class NonFunctionalRequirementSubNonFunctionalRequirementsCreateCommand extends EditElementCommand {
+public class NonFunctionalRequirementSubNonFunctionalRequirementsCreateCommand
+		extends EditElementCommand {
 
 	/**
 	 * @generated
@@ -28,8 +29,8 @@
 	/**
 	 * @generated
 	 */
-	public NonFunctionalRequirementSubNonFunctionalRequirementsCreateCommand(CreateRelationshipRequest request,
-		EObject source, EObject target) {
+	public NonFunctionalRequirementSubNonFunctionalRequirementsCreateCommand(
+			CreateRelationshipRequest request, EObject source, EObject target) {
 		super(request.getLabel(), null, request);
 		this.source = source;
 		this.target = target;
@@ -42,26 +43,32 @@
 		if (source == null && target == null) {
 			return false;
 		}
-		if (source != null && false == source instanceof NonFunctionalRequirement) {
+		if (source != null
+				&& false == source instanceof NonFunctionalRequirement) {
 			return false;
 		}
-		if (target != null && false == target instanceof NonFunctionalRequirement) {
+		if (target != null
+				&& false == target instanceof NonFunctionalRequirement) {
 			return false;
 		}
 		if (getSource() == null) {
 			return true; // link creation is in progress; source is not defined yet
 		}
 		// target may be null here but it's possible to check constraint
-		return UrmlBaseItemSemanticEditPolicy.LinkConstraints
-			.canCreateNonFunctionalRequirementSubNonFunctionalRequirements_4043(getSource(), getTarget());
+		return UrmlBaseItemSemanticEditPolicy
+				.getLinkConstraints()
+				.canCreateNonFunctionalRequirementSubNonFunctionalRequirements_4043(
+						getSource(), getTarget());
 	}
 
 	/**
 	 * @generated
 	 */
-	protected CommandResult doExecuteWithResult(IProgressMonitor monitor, IAdaptable info) throws ExecutionException {
+	protected CommandResult doExecuteWithResult(IProgressMonitor monitor,
+			IAdaptable info) throws ExecutionException {
 		if (!canExecute()) {
-			throw new ExecutionException("Invalid arguments in create link command"); //$NON-NLS-1$
+			throw new ExecutionException(
+					"Invalid arguments in create link command"); //$NON-NLS-1$
 		}
 
 		if (getSource() != null && getTarget() != null) {
Index: src/org/unicase/ui/diagram/urml/edit/commands/GoalReference3CreateCommand.java
===================================================================
--- src/org/unicase/ui/diagram/urml/edit/commands/GoalReference3CreateCommand.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/edit/commands/GoalReference3CreateCommand.java	(working copy)
@@ -16,6 +16,7 @@
 import org.unicase.model.urml.goal.GoalFactory;
 import org.unicase.model.urml.goal.GoalReference;
 import org.unicase.ui.diagram.urml.edit.policies.UrmlBaseItemSemanticEditPolicy;
+import org.unicase.ui.diagram.urml.providers.ElementInitializers;
 import org.unicase.ui.diagram.urml.providers.UrmlElementTypes;
 
 /**
@@ -44,7 +45,8 @@
 	 * 
 	 * @generated NOT
 	 */
-	public GoalReference3CreateCommand(CreateRelationshipRequest request, EObject source, EObject target) {
+	public GoalReference3CreateCommand(CreateRelationshipRequest request,
+			EObject source, EObject target) {
 		super(request.getLabel(), null, request);
 		/* user code */
 		throw new UnsupportedOperationException();
@@ -54,8 +56,8 @@
 	/**
 	 * @generated NOT
 	 */
-	public GoalReference3CreateCommand(CreateRelationshipRequest request, EObject source, EObject target,
-		EObject eContainer) {
+	public GoalReference3CreateCommand(CreateRelationshipRequest request,
+			EObject source, EObject target, EObject eContainer) {
 		super(request.getLabel(), null, request);
 		this.source = source;
 		this.target = target;
@@ -64,7 +66,8 @@
 		// Find container element for the new link.
 		// Climb up by containment hierarchy starting from the source
 		// and return the first element that is instance of the container class.
-		for (EObject element = eContainer; element != null; element = element.eContainer()) {
+		for (EObject element = eContainer; element != null; element = element
+				.eContainer()) {
 			if (element instanceof MEDiagram) {
 				container = (MEDiagram) element;
 				super.setElementToEdit(container);
@@ -95,16 +98,19 @@
 		if (getContainer() == null) {
 			return false;
 		}
-		return UrmlBaseItemSemanticEditPolicy.LinkConstraints.canCreateGoalReference_4024(getContainer(), getSource(),
-			getTarget());
+		return UrmlBaseItemSemanticEditPolicy.getLinkConstraints()
+				.canCreateGoalReference_4024(getContainer(), getSource(),
+						getTarget());
 	}
 
 	/**
 	 * @generated NOT
 	 */
-	protected CommandResult doExecuteWithResult(IProgressMonitor monitor, IAdaptable info) throws ExecutionException {
+	protected CommandResult doExecuteWithResult(IProgressMonitor monitor,
+			IAdaptable info) throws ExecutionException {
 		if (!canExecute()) {
-			throw new ExecutionException("Invalid arguments in create link command"); //$NON-NLS-1$
+			throw new ExecutionException(
+					"Invalid arguments in create link command"); //$NON-NLS-1$
 		}
 
 		GoalReference newElement = GoalFactory.eINSTANCE.createGoalReference();
@@ -114,7 +120,7 @@
 		/* user code */
 		newElement.setSource(getSource());
 		newElement.setTarget(getTarget());
-		UrmlElementTypes.init_GoalReference_4024(newElement);
+		UrmlElementTypes.getInstance().init_GoalReference_4024(newElement);
 		doConfigure(newElement, monitor, info);
 		((CreateElementRequest) getRequest()).setNewElement(newElement);
 		return CommandResult.newOKCommandResult(newElement);
@@ -124,15 +130,22 @@
 	/**
 	 * @generated
 	 */
-	protected void doConfigure(GoalReference newElement, IProgressMonitor monitor, IAdaptable info)
-		throws ExecutionException {
-		IElementType elementType = ((CreateElementRequest) getRequest()).getElementType();
-		ConfigureRequest configureRequest = new ConfigureRequest(getEditingDomain(), newElement, elementType);
-		configureRequest.setClientContext(((CreateElementRequest) getRequest()).getClientContext());
+	protected void doConfigure(GoalReference newElement,
+			IProgressMonitor monitor, IAdaptable info)
+			throws ExecutionException {
+		IElementType elementType = ((CreateElementRequest) getRequest())
+				.getElementType();
+		ConfigureRequest configureRequest = new ConfigureRequest(
+				getEditingDomain(), newElement, elementType);
+		configureRequest.setClientContext(((CreateElementRequest) getRequest())
+				.getClientContext());
 		configureRequest.addParameters(getRequest().getParameters());
-		configureRequest.setParameter(CreateRelationshipRequest.SOURCE, getSource());
-		configureRequest.setParameter(CreateRelationshipRequest.TARGET, getTarget());
-		ICommand configureCommand = elementType.getEditCommand(configureRequest);
+		configureRequest.setParameter(CreateRelationshipRequest.SOURCE,
+				getSource());
+		configureRequest.setParameter(CreateRelationshipRequest.TARGET,
+				getTarget());
+		ICommand configureCommand = elementType
+				.getEditCommand(configureRequest);
 		if (configureCommand != null && configureCommand.canExecute()) {
 			configureCommand.execute(monitor, info);
 		}
@@ -176,7 +189,8 @@
 		// Find container element for the new link.
 		// Climb up by containment hierarchy starting from the source
 		// and return the first element that is instance of the container class.
-		for (EObject element = source; element != null; element = element.eContainer()) {
+		for (EObject element = source; element != null; element = element
+				.eContainer()) {
 			if (element instanceof MEDiagram) {
 				return (MEDiagram) element;
 			}
Index: src/org/unicase/ui/diagram/urml/edit/commands/AbstractFeatureExcludedFeaturesCreateCommand.java
===================================================================
--- src/org/unicase/ui/diagram/urml/edit/commands/AbstractFeatureExcludedFeaturesCreateCommand.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/edit/commands/AbstractFeatureExcludedFeaturesCreateCommand.java	(working copy)
@@ -13,7 +13,8 @@
 /**
  * @generated
  */
-public class AbstractFeatureExcludedFeaturesCreateCommand extends EditElementCommand {
+public class AbstractFeatureExcludedFeaturesCreateCommand extends
+		EditElementCommand {
 
 	/**
 	 * @generated
@@ -28,8 +29,8 @@
 	/**
 	 * @generated
 	 */
-	public AbstractFeatureExcludedFeaturesCreateCommand(CreateRelationshipRequest request, EObject source,
-		EObject target) {
+	public AbstractFeatureExcludedFeaturesCreateCommand(
+			CreateRelationshipRequest request, EObject source, EObject target) {
 		super(request.getLabel(), null, request);
 		this.source = source;
 		this.target = target;
@@ -52,16 +53,19 @@
 			return true; // link creation is in progress; source is not defined yet
 		}
 		// target may be null here but it's possible to check constraint
-		return UrmlBaseItemSemanticEditPolicy.LinkConstraints.canCreateAbstractFeatureExcludedFeatures_4038(
-			getSource(), getTarget());
+		return UrmlBaseItemSemanticEditPolicy.getLinkConstraints()
+				.canCreateAbstractFeatureExcludedFeatures_4038(getSource(),
+						getTarget());
 	}
 
 	/**
 	 * @generated
 	 */
-	protected CommandResult doExecuteWithResult(IProgressMonitor monitor, IAdaptable info) throws ExecutionException {
+	protected CommandResult doExecuteWithResult(IProgressMonitor monitor,
+			IAdaptable info) throws ExecutionException {
 		if (!canExecute()) {
-			throw new ExecutionException("Invalid arguments in create link command"); //$NON-NLS-1$
+			throw new ExecutionException(
+					"Invalid arguments in create link command"); //$NON-NLS-1$
 		}
 
 		if (getSource() != null && getTarget() != null) {
Index: src/org/unicase/ui/diagram/urml/edit/commands/GoalReference2CreateCommand.java
===================================================================
--- src/org/unicase/ui/diagram/urml/edit/commands/GoalReference2CreateCommand.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/edit/commands/GoalReference2CreateCommand.java	(working copy)
@@ -16,6 +16,7 @@
 import org.unicase.model.urml.goal.GoalFactory;
 import org.unicase.model.urml.goal.GoalReference;
 import org.unicase.ui.diagram.urml.edit.policies.UrmlBaseItemSemanticEditPolicy;
+import org.unicase.ui.diagram.urml.providers.ElementInitializers;
 import org.unicase.ui.diagram.urml.providers.UrmlElementTypes;
 
 /**
@@ -44,7 +45,8 @@
 	 * 
 	 * @generated NOT
 	 */
-	public GoalReference2CreateCommand(CreateRelationshipRequest request, EObject source, EObject target) {
+	public GoalReference2CreateCommand(CreateRelationshipRequest request,
+			EObject source, EObject target) {
 		super(request.getLabel(), null, request);
 		/* user code */
 		throw new UnsupportedOperationException();
@@ -54,8 +56,8 @@
 	/**
 	 * @generated NOT
 	 */
-	public GoalReference2CreateCommand(CreateRelationshipRequest request, EObject source, EObject target,
-		EObject eContainer) {
+	public GoalReference2CreateCommand(CreateRelationshipRequest request,
+			EObject source, EObject target, EObject eContainer) {
 		super(request.getLabel(), null, request);
 		this.source = source;
 		this.target = target;
@@ -64,7 +66,8 @@
 		// Find container element for the new link.
 		// Climb up by containment hierarchy starting from the source
 		// and return the first element that is instance of the container class.
-		for (EObject element = eContainer; element != null; element = element.eContainer()) {
+		for (EObject element = eContainer; element != null; element = element
+				.eContainer()) {
 			if (element instanceof MEDiagram) {
 				container = (MEDiagram) element;
 				super.setElementToEdit(container);
@@ -95,16 +98,19 @@
 		if (getContainer() == null) {
 			return false;
 		}
-		return UrmlBaseItemSemanticEditPolicy.LinkConstraints.canCreateGoalReference_4023(getContainer(), getSource(),
-			getTarget());
+		return UrmlBaseItemSemanticEditPolicy.getLinkConstraints()
+				.canCreateGoalReference_4023(getContainer(), getSource(),
+						getTarget());
 	}
 
 	/**
 	 * @generated NOT
 	 */
-	protected CommandResult doExecuteWithResult(IProgressMonitor monitor, IAdaptable info) throws ExecutionException {
+	protected CommandResult doExecuteWithResult(IProgressMonitor monitor,
+			IAdaptable info) throws ExecutionException {
 		if (!canExecute()) {
-			throw new ExecutionException("Invalid arguments in create link command"); //$NON-NLS-1$
+			throw new ExecutionException(
+					"Invalid arguments in create link command"); //$NON-NLS-1$
 		}
 
 		GoalReference newElement = GoalFactory.eINSTANCE.createGoalReference();
@@ -114,7 +120,7 @@
 		/* user code */
 		newElement.setSource(getSource());
 		newElement.setTarget(getTarget());
-		UrmlElementTypes.init_GoalReference_4023(newElement);
+		UrmlElementTypes.getInstance().init_GoalReference_4023(newElement);
 		doConfigure(newElement, monitor, info);
 		((CreateElementRequest) getRequest()).setNewElement(newElement);
 		return CommandResult.newOKCommandResult(newElement);
@@ -124,15 +130,22 @@
 	/**
 	 * @generated
 	 */
-	protected void doConfigure(GoalReference newElement, IProgressMonitor monitor, IAdaptable info)
-		throws ExecutionException {
-		IElementType elementType = ((CreateElementRequest) getRequest()).getElementType();
-		ConfigureRequest configureRequest = new ConfigureRequest(getEditingDomain(), newElement, elementType);
-		configureRequest.setClientContext(((CreateElementRequest) getRequest()).getClientContext());
+	protected void doConfigure(GoalReference newElement,
+			IProgressMonitor monitor, IAdaptable info)
+			throws ExecutionException {
+		IElementType elementType = ((CreateElementRequest) getRequest())
+				.getElementType();
+		ConfigureRequest configureRequest = new ConfigureRequest(
+				getEditingDomain(), newElement, elementType);
+		configureRequest.setClientContext(((CreateElementRequest) getRequest())
+				.getClientContext());
 		configureRequest.addParameters(getRequest().getParameters());
-		configureRequest.setParameter(CreateRelationshipRequest.SOURCE, getSource());
-		configureRequest.setParameter(CreateRelationshipRequest.TARGET, getTarget());
-		ICommand configureCommand = elementType.getEditCommand(configureRequest);
+		configureRequest.setParameter(CreateRelationshipRequest.SOURCE,
+				getSource());
+		configureRequest.setParameter(CreateRelationshipRequest.TARGET,
+				getTarget());
+		ICommand configureCommand = elementType
+				.getEditCommand(configureRequest);
 		if (configureCommand != null && configureCommand.canExecute()) {
 			configureCommand.execute(monitor, info);
 		}
@@ -176,7 +189,8 @@
 		// Find container element for the new link.
 		// Climb up by containment hierarchy starting from the source
 		// and return the first element that is instance of the container class.
-		for (EObject element = source; element != null; element = element.eContainer()) {
+		for (EObject element = source; element != null; element = element
+				.eContainer()) {
 			if (element instanceof MEDiagram) {
 				return (MEDiagram) element;
 			}
Index: src/org/unicase/ui/diagram/urml/edit/commands/VariationPointCreateCommand.java
===================================================================
--- src/org/unicase/ui/diagram/urml/edit/commands/VariationPointCreateCommand.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/edit/commands/VariationPointCreateCommand.java	(working copy)
@@ -33,7 +33,8 @@
 	 * @generated
 	 */
 	protected EObject getElementToEdit() {
-		EObject container = ((CreateElementRequest) getRequest()).getContainer();
+		EObject container = ((CreateElementRequest) getRequest())
+				.getContainer();
 		if (container instanceof View) {
 			container = ((View) container).getElement();
 		}
@@ -51,8 +52,10 @@
 	/**
 	 * @generated
 	 */
-	protected CommandResult doExecuteWithResult(IProgressMonitor monitor, IAdaptable info) throws ExecutionException {
-		VariationPoint newElement = FeatureFactory.eINSTANCE.createVariationPoint();
+	protected CommandResult doExecuteWithResult(IProgressMonitor monitor,
+			IAdaptable info) throws ExecutionException {
+		VariationPoint newElement = FeatureFactory.eINSTANCE
+				.createVariationPoint();
 
 		MEDiagram owner = (MEDiagram) getElementToEdit();
 		owner.getNewElements().add(newElement);
@@ -68,13 +71,18 @@
 	/**
 	 * @generated
 	 */
-	protected void doConfigure(VariationPoint newElement, IProgressMonitor monitor, IAdaptable info)
-		throws ExecutionException {
-		IElementType elementType = ((CreateElementRequest) getRequest()).getElementType();
-		ConfigureRequest configureRequest = new ConfigureRequest(getEditingDomain(), newElement, elementType);
-		configureRequest.setClientContext(((CreateElementRequest) getRequest()).getClientContext());
+	protected void doConfigure(VariationPoint newElement,
+			IProgressMonitor monitor, IAdaptable info)
+			throws ExecutionException {
+		IElementType elementType = ((CreateElementRequest) getRequest())
+				.getElementType();
+		ConfigureRequest configureRequest = new ConfigureRequest(
+				getEditingDomain(), newElement, elementType);
+		configureRequest.setClientContext(((CreateElementRequest) getRequest())
+				.getClientContext());
 		configureRequest.addParameters(getRequest().getParameters());
-		ICommand configureCommand = elementType.getEditCommand(configureRequest);
+		ICommand configureCommand = elementType
+				.getEditCommand(configureRequest);
 		if (configureCommand != null && configureCommand.canExecute()) {
 			configureCommand.execute(monitor, info);
 		}
Index: src/org/unicase/ui/diagram/urml/edit/commands/AssetTriggeredDangersReorientCommand.java
===================================================================
--- src/org/unicase/ui/diagram/urml/edit/commands/AssetTriggeredDangersReorientCommand.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/edit/commands/AssetTriggeredDangersReorientCommand.java	(working copy)
@@ -40,7 +40,8 @@
 	/**
 	 * @generated
 	 */
-	public AssetTriggeredDangersReorientCommand(ReorientReferenceRelationshipRequest request) {
+	public AssetTriggeredDangersReorientCommand(
+			ReorientReferenceRelationshipRequest request) {
 		super(request.getLabel(), null, request);
 		reorientDirection = request.getDirection();
 		referenceOwner = request.getReferenceOwner();
@@ -71,8 +72,9 @@
 		if (!(oldEnd instanceof Danger && newEnd instanceof Asset)) {
 			return false;
 		}
-		return UrmlBaseItemSemanticEditPolicy.LinkConstraints.canExistAssetTriggeredDangers_4017(getNewSource(),
-			getOldTarget());
+		return UrmlBaseItemSemanticEditPolicy.getLinkConstraints()
+				.canExistAssetTriggeredDangers_4017(getNewSource(),
+						getOldTarget());
 	}
 
 	/**
@@ -82,16 +84,19 @@
 		if (!(oldEnd instanceof Danger && newEnd instanceof Danger)) {
 			return false;
 		}
-		return UrmlBaseItemSemanticEditPolicy.LinkConstraints.canExistAssetTriggeredDangers_4017(getOldSource(),
-			getNewTarget());
+		return UrmlBaseItemSemanticEditPolicy.getLinkConstraints()
+				.canExistAssetTriggeredDangers_4017(getOldSource(),
+						getNewTarget());
 	}
 
 	/**
 	 * @generated
 	 */
-	protected CommandResult doExecuteWithResult(IProgressMonitor monitor, IAdaptable info) throws ExecutionException {
+	protected CommandResult doExecuteWithResult(IProgressMonitor monitor,
+			IAdaptable info) throws ExecutionException {
 		if (!canExecute()) {
-			throw new ExecutionException("Invalid arguments in reorient link command"); //$NON-NLS-1$
+			throw new ExecutionException(
+					"Invalid arguments in reorient link command"); //$NON-NLS-1$
 		}
 		if (reorientDirection == ReorientRelationshipRequest.REORIENT_SOURCE) {
 			return reorientSource();
Index: src/org/unicase/ui/diagram/urml/edit/commands/GoalCreateCommand.java
===================================================================
--- src/org/unicase/ui/diagram/urml/edit/commands/GoalCreateCommand.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/edit/commands/GoalCreateCommand.java	(working copy)
@@ -33,7 +33,8 @@
 	 * @generated
 	 */
 	protected EObject getElementToEdit() {
-		EObject container = ((CreateElementRequest) getRequest()).getContainer();
+		EObject container = ((CreateElementRequest) getRequest())
+				.getContainer();
 		if (container instanceof View) {
 			container = ((View) container).getElement();
 		}
@@ -51,7 +52,8 @@
 	/**
 	 * @generated
 	 */
-	protected CommandResult doExecuteWithResult(IProgressMonitor monitor, IAdaptable info) throws ExecutionException {
+	protected CommandResult doExecuteWithResult(IProgressMonitor monitor,
+			IAdaptable info) throws ExecutionException {
 		Goal newElement = GoalFactory.eINSTANCE.createGoal();
 
 		MEDiagram owner = (MEDiagram) getElementToEdit();
@@ -68,12 +70,17 @@
 	/**
 	 * @generated
 	 */
-	protected void doConfigure(Goal newElement, IProgressMonitor monitor, IAdaptable info) throws ExecutionException {
-		IElementType elementType = ((CreateElementRequest) getRequest()).getElementType();
-		ConfigureRequest configureRequest = new ConfigureRequest(getEditingDomain(), newElement, elementType);
-		configureRequest.setClientContext(((CreateElementRequest) getRequest()).getClientContext());
+	protected void doConfigure(Goal newElement, IProgressMonitor monitor,
+			IAdaptable info) throws ExecutionException {
+		IElementType elementType = ((CreateElementRequest) getRequest())
+				.getElementType();
+		ConfigureRequest configureRequest = new ConfigureRequest(
+				getEditingDomain(), newElement, elementType);
+		configureRequest.setClientContext(((CreateElementRequest) getRequest())
+				.getClientContext());
 		configureRequest.addParameters(getRequest().getParameters());
-		ICommand configureCommand = elementType.getEditCommand(configureRequest);
+		ICommand configureCommand = elementType
+				.getEditCommand(configureRequest);
 		if (configureCommand != null && configureCommand.canExecute()) {
 			configureCommand.execute(monitor, info);
 		}
Index: src/org/unicase/ui/diagram/urml/edit/commands/FunctionalRequirementSubFunctionalRequirementsCreateCommand.java
===================================================================
--- src/org/unicase/ui/diagram/urml/edit/commands/FunctionalRequirementSubFunctionalRequirementsCreateCommand.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/edit/commands/FunctionalRequirementSubFunctionalRequirementsCreateCommand.java	(working copy)
@@ -13,7 +13,8 @@
 /**
  * @generated
  */
-public class FunctionalRequirementSubFunctionalRequirementsCreateCommand extends EditElementCommand {
+public class FunctionalRequirementSubFunctionalRequirementsCreateCommand extends
+		EditElementCommand {
 
 	/**
 	 * @generated
@@ -28,8 +29,8 @@
 	/**
 	 * @generated
 	 */
-	public FunctionalRequirementSubFunctionalRequirementsCreateCommand(CreateRelationshipRequest request,
-		EObject source, EObject target) {
+	public FunctionalRequirementSubFunctionalRequirementsCreateCommand(
+			CreateRelationshipRequest request, EObject source, EObject target) {
 		super(request.getLabel(), null, request);
 		this.source = source;
 		this.target = target;
@@ -52,16 +53,19 @@
 			return true; // link creation is in progress; source is not defined yet
 		}
 		// target may be null here but it's possible to check constraint
-		return UrmlBaseItemSemanticEditPolicy.LinkConstraints
-			.canCreateFunctionalRequirementSubFunctionalRequirements_4044(getSource(), getTarget());
+		return UrmlBaseItemSemanticEditPolicy.getLinkConstraints()
+				.canCreateFunctionalRequirementSubFunctionalRequirements_4044(
+						getSource(), getTarget());
 	}
 
 	/**
 	 * @generated
 	 */
-	protected CommandResult doExecuteWithResult(IProgressMonitor monitor, IAdaptable info) throws ExecutionException {
+	protected CommandResult doExecuteWithResult(IProgressMonitor monitor,
+			IAdaptable info) throws ExecutionException {
 		if (!canExecute()) {
-			throw new ExecutionException("Invalid arguments in create link command"); //$NON-NLS-1$
+			throw new ExecutionException(
+					"Invalid arguments in create link command"); //$NON-NLS-1$
 		}
 
 		if (getSource() != null && getTarget() != null) {
Index: src/org/unicase/ui/diagram/urml/edit/commands/ActorCreateCommand.java
===================================================================
--- src/org/unicase/ui/diagram/urml/edit/commands/ActorCreateCommand.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/edit/commands/ActorCreateCommand.java	(working copy)
@@ -33,7 +33,8 @@
 	 * @generated
 	 */
 	protected EObject getElementToEdit() {
-		EObject container = ((CreateElementRequest) getRequest()).getContainer();
+		EObject container = ((CreateElementRequest) getRequest())
+				.getContainer();
 		if (container instanceof View) {
 			container = ((View) container).getElement();
 		}
@@ -51,7 +52,8 @@
 	/**
 	 * @generated
 	 */
-	protected CommandResult doExecuteWithResult(IProgressMonitor monitor, IAdaptable info) throws ExecutionException {
+	protected CommandResult doExecuteWithResult(IProgressMonitor monitor,
+			IAdaptable info) throws ExecutionException {
 		Actor newElement = UsecaseFactory.eINSTANCE.createActor();
 
 		MEDiagram owner = (MEDiagram) getElementToEdit();
@@ -68,12 +70,17 @@
 	/**
 	 * @generated
 	 */
-	protected void doConfigure(Actor newElement, IProgressMonitor monitor, IAdaptable info) throws ExecutionException {
-		IElementType elementType = ((CreateElementRequest) getRequest()).getElementType();
-		ConfigureRequest configureRequest = new ConfigureRequest(getEditingDomain(), newElement, elementType);
-		configureRequest.setClientContext(((CreateElementRequest) getRequest()).getClientContext());
+	protected void doConfigure(Actor newElement, IProgressMonitor monitor,
+			IAdaptable info) throws ExecutionException {
+		IElementType elementType = ((CreateElementRequest) getRequest())
+				.getElementType();
+		ConfigureRequest configureRequest = new ConfigureRequest(
+				getEditingDomain(), newElement, elementType);
+		configureRequest.setClientContext(((CreateElementRequest) getRequest())
+				.getClientContext());
 		configureRequest.addParameters(getRequest().getParameters());
-		ICommand configureCommand = elementType.getEditCommand(configureRequest);
+		ICommand configureCommand = elementType
+				.getEditCommand(configureRequest);
 		if (configureCommand != null && configureCommand.canExecute()) {
 			configureCommand.execute(monitor, info);
 		}
Index: src/org/unicase/ui/diagram/urml/edit/commands/UrmlModelElementAssociationsCreateCommand.java
===================================================================
--- src/org/unicase/ui/diagram/urml/edit/commands/UrmlModelElementAssociationsCreateCommand.java	(revision 0)
+++ src/org/unicase/ui/diagram/urml/edit/commands/UrmlModelElementAssociationsCreateCommand.java	(revision 0)
@@ -0,0 +1,98 @@
+package org.unicase.ui.diagram.urml.edit.commands;
+
+import org.eclipse.core.commands.ExecutionException;
+import org.eclipse.core.runtime.IAdaptable;
+import org.eclipse.core.runtime.IProgressMonitor;
+import org.eclipse.emf.ecore.EObject;
+import org.eclipse.gmf.runtime.common.core.command.CommandResult;
+import org.eclipse.gmf.runtime.emf.type.core.commands.EditElementCommand;
+import org.eclipse.gmf.runtime.emf.type.core.requests.CreateRelationshipRequest;
+import org.unicase.model.urml.UrmlModelElement;
+import org.unicase.ui.diagram.urml.edit.policies.UrmlBaseItemSemanticEditPolicy;
+
+/**
+ * @generated
+ */
+public class UrmlModelElementAssociationsCreateCommand extends
+		EditElementCommand {
+
+	/**
+	 * @generated
+	 */
+	private final EObject source;
+
+	/**
+	 * @generated
+	 */
+	private final EObject target;
+
+	/**
+	 * @generated
+	 */
+	public UrmlModelElementAssociationsCreateCommand(
+			CreateRelationshipRequest request, EObject source, EObject target) {
+		super(request.getLabel(), null, request);
+		this.source = source;
+		this.target = target;
+	}
+
+	/**
+	 * @generated
+	 */
+	public boolean canExecute() {
+		if (source == null && target == null) {
+			return false;
+		}
+		if (source != null && false == source instanceof UrmlModelElement) {
+			return false;
+		}
+		if (target != null && false == target instanceof UrmlModelElement) {
+			return false;
+		}
+		if (getSource() == null) {
+			return true; // link creation is in progress; source is not defined yet
+		}
+		// target may be null here but it's possible to check constraint
+		return UrmlBaseItemSemanticEditPolicy.getLinkConstraints()
+				.canCreateUrmlModelElementAssociations_4048(getSource(),
+						getTarget());
+	}
+
+	/**
+	 * @generated
+	 */
+	protected CommandResult doExecuteWithResult(IProgressMonitor monitor,
+			IAdaptable info) throws ExecutionException {
+		if (!canExecute()) {
+			throw new ExecutionException(
+					"Invalid arguments in create link command"); //$NON-NLS-1$
+		}
+
+		if (getSource() != null && getTarget() != null) {
+			getSource().getAssociations().add(getTarget());
+		}
+		return CommandResult.newOKCommandResult();
+
+	}
+
+	/**
+	 * @generated
+	 */
+	protected void setElementToEdit(EObject element) {
+		throw new UnsupportedOperationException();
+	}
+
+	/**
+	 * @generated
+	 */
+	protected UrmlModelElement getSource() {
+		return (UrmlModelElement) source;
+	}
+
+	/**
+	 * @generated
+	 */
+	protected UrmlModelElement getTarget() {
+		return (UrmlModelElement) target;
+	}
+}
Index: src/org/unicase/ui/diagram/urml/edit/commands/FunctionalRequirementSubFunctionalRequirementsReorientCommand.java
===================================================================
--- src/org/unicase/ui/diagram/urml/edit/commands/FunctionalRequirementSubFunctionalRequirementsReorientCommand.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/edit/commands/FunctionalRequirementSubFunctionalRequirementsReorientCommand.java	(working copy)
@@ -14,7 +14,8 @@
 /**
  * @generated
  */
-public class FunctionalRequirementSubFunctionalRequirementsReorientCommand extends EditElementCommand {
+public class FunctionalRequirementSubFunctionalRequirementsReorientCommand
+		extends EditElementCommand {
 
 	/**
 	 * @generated
@@ -39,7 +40,8 @@
 	/**
 	 * @generated
 	 */
-	public FunctionalRequirementSubFunctionalRequirementsReorientCommand(ReorientReferenceRelationshipRequest request) {
+	public FunctionalRequirementSubFunctionalRequirementsReorientCommand(
+			ReorientReferenceRelationshipRequest request) {
 		super(request.getLabel(), null, request);
 		reorientDirection = request.getDirection();
 		referenceOwner = request.getReferenceOwner();
@@ -70,8 +72,9 @@
 		if (!(oldEnd instanceof FunctionalRequirement && newEnd instanceof FunctionalRequirement)) {
 			return false;
 		}
-		return UrmlBaseItemSemanticEditPolicy.LinkConstraints
-			.canExistFunctionalRequirementSubFunctionalRequirements_4044(getNewSource(), getOldTarget());
+		return UrmlBaseItemSemanticEditPolicy.getLinkConstraints()
+				.canExistFunctionalRequirementSubFunctionalRequirements_4044(
+						getNewSource(), getOldTarget());
 	}
 
 	/**
@@ -81,16 +84,19 @@
 		if (!(oldEnd instanceof FunctionalRequirement && newEnd instanceof FunctionalRequirement)) {
 			return false;
 		}
-		return UrmlBaseItemSemanticEditPolicy.LinkConstraints
-			.canExistFunctionalRequirementSubFunctionalRequirements_4044(getOldSource(), getNewTarget());
+		return UrmlBaseItemSemanticEditPolicy.getLinkConstraints()
+				.canExistFunctionalRequirementSubFunctionalRequirements_4044(
+						getOldSource(), getNewTarget());
 	}
 
 	/**
 	 * @generated
 	 */
-	protected CommandResult doExecuteWithResult(IProgressMonitor monitor, IAdaptable info) throws ExecutionException {
+	protected CommandResult doExecuteWithResult(IProgressMonitor monitor,
+			IAdaptable info) throws ExecutionException {
 		if (!canExecute()) {
-			throw new ExecutionException("Invalid arguments in reorient link command"); //$NON-NLS-1$
+			throw new ExecutionException(
+					"Invalid arguments in reorient link command"); //$NON-NLS-1$
 		}
 		if (reorientDirection == ReorientRelationshipRequest.REORIENT_SOURCE) {
 			return reorientSource();
Index: src/org/unicase/ui/diagram/urml/navigator/UrmlDomainNavigatorItem.java
===================================================================
--- src/org/unicase/ui/diagram/urml/navigator/UrmlDomainNavigatorItem.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/navigator/UrmlDomainNavigatorItem.java	(working copy)
@@ -17,7 +17,8 @@
 	 * @generated
 	 */
 	static {
-		final Class[] supportedTypes = new Class[] { EObject.class, IPropertySource.class };
+		final Class[] supportedTypes = new Class[] { EObject.class,
+				IPropertySource.class };
 		Platform.getAdapterManager().registerAdapters(new IAdapterFactory() {
 
 			public Object getAdapter(Object adaptableObject, Class adapterType) {
@@ -28,7 +29,8 @@
 						return eObject;
 					}
 					if (adapterType == IPropertySource.class) {
-						return domainNavigatorItem.getPropertySourceProvider().getPropertySource(eObject);
+						return domainNavigatorItem.getPropertySourceProvider()
+								.getPropertySource(eObject);
 					}
 				}
 
@@ -59,7 +61,8 @@
 	/**
 	 * @generated
 	 */
-	public UrmlDomainNavigatorItem(EObject eObject, Object parent, IPropertySourceProvider propertySourceProvider) {
+	public UrmlDomainNavigatorItem(EObject eObject, Object parent,
+			IPropertySourceProvider propertySourceProvider) {
 		myParent = parent;
 		myEObject = eObject;
 		myPropertySourceProvider = propertySourceProvider;
@@ -91,8 +94,11 @@
 	 */
 	public boolean equals(Object obj) {
 		if (obj instanceof org.unicase.ui.diagram.urml.navigator.UrmlDomainNavigatorItem) {
-			return EcoreUtil.getURI(getEObject()).equals(
-				EcoreUtil.getURI(((org.unicase.ui.diagram.urml.navigator.UrmlDomainNavigatorItem) obj).getEObject()));
+			return EcoreUtil
+					.getURI(getEObject())
+					.equals(EcoreUtil
+							.getURI(((org.unicase.ui.diagram.urml.navigator.UrmlDomainNavigatorItem) obj)
+									.getEObject()));
 		}
 		return super.equals(obj);
 	}
Index: src/org/unicase/ui/diagram/urml/navigator/UrmlNavigatorLinkHelper.java
===================================================================
--- src/org/unicase/ui/diagram/urml/navigator/UrmlNavigatorLinkHelper.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/navigator/UrmlNavigatorLinkHelper.java	(working copy)
@@ -35,17 +35,18 @@
 	 */
 	private static IEditorInput getEditorInput(Diagram diagram) {
 		Resource diagramResource = diagram.eResource();
-		for (Iterator it = diagramResource.getContents().iterator(); it.hasNext();) {
-			EObject nextEObject = (EObject) it.next();
+		for (EObject nextEObject : diagramResource.getContents()) {
 			if (nextEObject == diagram) {
-				return new FileEditorInput(WorkspaceSynchronizer.getFile(diagramResource));
+				return new FileEditorInput(
+						WorkspaceSynchronizer.getFile(diagramResource));
 			}
 			if (nextEObject instanceof Diagram) {
 				break;
 			}
 		}
 		URI uri = EcoreUtil.getURI(diagram);
-		String editorName = uri.lastSegment() + "#" + diagram.eResource().getContents().indexOf(diagram); //$NON-NLS-1$
+		String editorName = uri.lastSegment() + '#'
+				+ diagram.eResource().getContents().indexOf(diagram);
 		IEditorInput editorInput = new URIEditorInput(uri, editorName);
 		return editorInput;
 	}
@@ -54,12 +55,15 @@
 	 * @generated
 	 */
 	public IStructuredSelection findSelection(IEditorInput anInput) {
-		IDiagramDocument document = UrmlDiagramEditorPlugin.getInstance().getDocumentProvider().getDiagramDocument(
-			anInput);
+		IDiagramDocument document = UrmlDiagramEditorPlugin.getInstance()
+				.getDocumentProvider().getDiagramDocument(anInput);
 		if (document == null) {
 			return StructuredSelection.EMPTY;
 		}
 		Diagram diagram = document.getDiagram();
+		if (diagram == null || diagram.eResource() == null) {
+			return StructuredSelection.EMPTY;
+		}
 		IFile file = WorkspaceSynchronizer.getFile(diagram.eResource());
 		if (file != null) {
 			UrmlNavigatorItem item = new UrmlNavigatorItem(diagram, file, false);
@@ -71,7 +75,8 @@
 	/**
 	 * @generated
 	 */
-	public void activateEditor(IWorkbenchPage aPage, IStructuredSelection aSelection) {
+	public void activateEditor(IWorkbenchPage aPage,
+			IStructuredSelection aSelection) {
 		if (aSelection == null || aSelection.isEmpty()) {
 			return;
 		}
@@ -79,14 +84,17 @@
 			return;
 		}
 
-		UrmlAbstractNavigatorItem abstractNavigatorItem = (UrmlAbstractNavigatorItem) aSelection.getFirstElement();
+		UrmlAbstractNavigatorItem abstractNavigatorItem = (UrmlAbstractNavigatorItem) aSelection
+				.getFirstElement();
 		View navigatorView = null;
 		if (abstractNavigatorItem instanceof UrmlNavigatorItem) {
-			navigatorView = ((UrmlNavigatorItem) abstractNavigatorItem).getView();
+			navigatorView = ((UrmlNavigatorItem) abstractNavigatorItem)
+					.getView();
 		} else if (abstractNavigatorItem instanceof UrmlNavigatorGroup) {
 			UrmlNavigatorGroup navigatorGroup = (UrmlNavigatorGroup) abstractNavigatorItem;
 			if (navigatorGroup.getParent() instanceof UrmlNavigatorItem) {
-				navigatorView = ((UrmlNavigatorItem) navigatorGroup.getParent()).getView();
+				navigatorView = ((UrmlNavigatorItem) navigatorGroup.getParent())
+						.getView();
 			}
 		}
 		if (navigatorView == null) {
@@ -100,13 +108,17 @@
 		aPage.bringToTop(editor);
 		if (editor instanceof DiagramEditor) {
 			DiagramEditor diagramEditor = (DiagramEditor) editor;
-			ResourceSet diagramEditorResourceSet = diagramEditor.getEditingDomain().getResourceSet();
-			EObject selectedView = diagramEditorResourceSet.getEObject(EcoreUtil.getURI(navigatorView), true);
+			ResourceSet diagramEditorResourceSet = diagramEditor
+					.getEditingDomain().getResourceSet();
+			EObject selectedView = diagramEditorResourceSet.getEObject(
+					EcoreUtil.getURI(navigatorView), true);
 			if (selectedView == null) {
 				return;
 			}
-			GraphicalViewer graphicalViewer = (GraphicalViewer) diagramEditor.getAdapter(GraphicalViewer.class);
-			EditPart selectedEditPart = (EditPart) graphicalViewer.getEditPartRegistry().get(selectedView);
+			GraphicalViewer graphicalViewer = (GraphicalViewer) diagramEditor
+					.getAdapter(GraphicalViewer.class);
+			EditPart selectedEditPart = (EditPart) graphicalViewer
+					.getEditPartRegistry().get(selectedView);
 			if (selectedEditPart != null) {
 				graphicalViewer.select(selectedEditPart);
 			}
Index: src/org/unicase/ui/diagram/urml/navigator/UrmlNavigatorItem.java
===================================================================
--- src/org/unicase/ui/diagram/urml/navigator/UrmlNavigatorItem.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/navigator/UrmlNavigatorItem.java	(working copy)
@@ -20,8 +20,9 @@
 
 			public Object getAdapter(Object adaptableObject, Class adapterType) {
 				if (adaptableObject instanceof org.unicase.ui.diagram.urml.navigator.UrmlNavigatorItem
-					&& (adapterType == View.class || adapterType == EObject.class)) {
-					return ((org.unicase.ui.diagram.urml.navigator.UrmlNavigatorItem) adaptableObject).getView();
+						&& (adapterType == View.class || adapterType == EObject.class)) {
+					return ((org.unicase.ui.diagram.urml.navigator.UrmlNavigatorItem) adaptableObject)
+							.getView();
 				}
 				return null;
 			}
@@ -70,8 +71,11 @@
 	 */
 	public boolean equals(Object obj) {
 		if (obj instanceof org.unicase.ui.diagram.urml.navigator.UrmlNavigatorItem) {
-			return EcoreUtil.getURI(getView()).equals(
-				EcoreUtil.getURI(((org.unicase.ui.diagram.urml.navigator.UrmlNavigatorItem) obj).getView()));
+			return EcoreUtil
+					.getURI(getView())
+					.equals(EcoreUtil
+							.getURI(((org.unicase.ui.diagram.urml.navigator.UrmlNavigatorItem) obj)
+									.getView()));
 		}
 		return super.equals(obj);
 	}
Index: src/org/unicase/ui/diagram/urml/navigator/UrmlNavigatorActionProvider.java
===================================================================
--- src/org/unicase/ui/diagram/urml/navigator/UrmlNavigatorActionProvider.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/navigator/UrmlNavigatorActionProvider.java	(working copy)
@@ -6,6 +6,7 @@
 import org.eclipse.emf.common.ui.URIEditorInput;
 import org.eclipse.emf.common.util.URI;
 import org.eclipse.emf.ecore.EObject;
+import org.eclipse.emf.ecore.resource.Resource;
 import org.eclipse.emf.ecore.util.EcoreUtil;
 import org.eclipse.emf.workspace.util.WorkspaceSynchronizer;
 import org.eclipse.gmf.runtime.notation.Diagram;
@@ -70,10 +71,12 @@
 		if (!myContribute) {
 			return;
 		}
-		IStructuredSelection selection = (IStructuredSelection) getContext().getSelection();
+		IStructuredSelection selection = (IStructuredSelection) getContext()
+				.getSelection();
 		myOpenDiagramAction.selectionChanged(selection);
 		if (myOpenDiagramAction.isEnabled()) {
-			actionBars.setGlobalActionHandler(ICommonActionConstants.OPEN, myOpenDiagramAction);
+			actionBars.setGlobalActionHandler(ICommonActionConstants.OPEN,
+					myOpenDiagramAction);
 		}
 	}
 
@@ -86,7 +89,7 @@
 	/**
 	 * @generated
 	 */
-	private class OpenDiagramAction extends Action {
+	private static class OpenDiagramAction extends Action {
 
 		/**
 		 * @generated
@@ -114,13 +117,16 @@
 			if (selection.size() == 1) {
 				Object selectedElement = selection.getFirstElement();
 				if (selectedElement instanceof UrmlNavigatorItem) {
-					selectedElement = ((UrmlNavigatorItem) selectedElement).getView();
+					selectedElement = ((UrmlNavigatorItem) selectedElement)
+							.getView();
 				} else if (selectedElement instanceof IAdaptable) {
-					selectedElement = ((IAdaptable) selectedElement).getAdapter(View.class);
+					selectedElement = ((IAdaptable) selectedElement)
+							.getAdapter(View.class);
 				}
 				if (selectedElement instanceof Diagram) {
 					Diagram diagram = (Diagram) selectedElement;
-					if (URMLDiagramEditPart.MODEL_ID.equals(UrmlVisualIDRegistry.getModelID(diagram))) {
+					if (URMLDiagramEditPart.MODEL_ID
+							.equals(UrmlVisualIDRegistry.getModelID(diagram))) {
 						myDiagram = diagram;
 					}
 				}
@@ -136,30 +142,33 @@
 				return;
 			}
 
-			IEditorInput editorInput = getEditorInput();
+			IEditorInput editorInput = getEditorInput(myDiagram);
 			IWorkbenchPage page = myViewerSite.getPage();
 			try {
 				page.openEditor(editorInput, UrmlDiagramEditor.ID);
 			} catch (PartInitException e) {
-				UrmlDiagramEditorPlugin.getInstance().logError("Exception while openning diagram", e); //$NON-NLS-1$
+				UrmlDiagramEditorPlugin.getInstance().logError(
+						"Exception while openning diagram", e); //$NON-NLS-1$
 			}
 		}
 
 		/**
 		 * @generated
 		 */
-		private IEditorInput getEditorInput() {
-			for (Iterator it = myDiagram.eResource().getContents().iterator(); it.hasNext();) {
-				EObject nextEObject = (EObject) it.next();
-				if (nextEObject == myDiagram) {
-					return new FileEditorInput(WorkspaceSynchronizer.getFile(myDiagram.eResource()));
+		private static IEditorInput getEditorInput(Diagram diagram) {
+			Resource diagramResource = diagram.eResource();
+			for (EObject nextEObject : diagramResource.getContents()) {
+				if (nextEObject == diagram) {
+					return new FileEditorInput(
+							WorkspaceSynchronizer.getFile(diagramResource));
 				}
 				if (nextEObject instanceof Diagram) {
 					break;
 				}
 			}
-			URI uri = EcoreUtil.getURI(myDiagram);
-			String editorName = uri.lastSegment() + "#" + myDiagram.eResource().getContents().indexOf(myDiagram); //$NON-NLS-1$
+			URI uri = EcoreUtil.getURI(diagram);
+			String editorName = uri.lastSegment() + '#'
+					+ diagram.eResource().getContents().indexOf(diagram);
 			IEditorInput editorInput = new URIEditorInput(uri, editorName);
 			return editorInput;
 		}
Index: src/org/unicase/ui/diagram/urml/navigator/UrmlNavigatorLabelProvider.java
===================================================================
--- src/org/unicase/ui/diagram/urml/navigator/UrmlNavigatorLabelProvider.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/navigator/UrmlNavigatorLabelProvider.java	(working copy)
@@ -80,8 +80,10 @@
 import org.unicase.ui.diagram.urml.edit.parts.StakeholderGoalsEditPart;
 import org.unicase.ui.diagram.urml.edit.parts.StakeholderNameEditPart;
 import org.unicase.ui.diagram.urml.edit.parts.SuggestsLabelEditPart;
+import org.unicase.ui.diagram.urml.edit.parts.TriggersLabel2EditPart;
 import org.unicase.ui.diagram.urml.edit.parts.TriggersLabelEditPart;
 import org.unicase.ui.diagram.urml.edit.parts.URMLDiagramEditPart;
+import org.unicase.ui.diagram.urml.edit.parts.UrmlModelElementAssociationsEditPart;
 import org.unicase.ui.diagram.urml.edit.parts.VariationPointEditPart;
 import org.unicase.ui.diagram.urml.edit.parts.VariationPointInstanceEditPart;
 import org.unicase.ui.diagram.urml.edit.parts.VariationPointInstanceNameEditPart;
@@ -97,16 +99,21 @@
 /**
  * @generated
  */
-public class UrmlNavigatorLabelProvider extends LabelProvider implements ICommonLabelProvider, ITreePathLabelProvider {
+public class UrmlNavigatorLabelProvider extends LabelProvider implements
+		ICommonLabelProvider, ITreePathLabelProvider {
 
 	/**
 	 * @generated
 	 */
 	static {
-		UrmlDiagramEditorPlugin.getInstance().getImageRegistry().put(
-			"Navigator?UnknownElement", ImageDescriptor.getMissingImageDescriptor()); //$NON-NLS-1$
-		UrmlDiagramEditorPlugin.getInstance().getImageRegistry().put(
-			"Navigator?ImageNotFound", ImageDescriptor.getMissingImageDescriptor()); //$NON-NLS-1$
+		UrmlDiagramEditorPlugin
+				.getInstance()
+				.getImageRegistry()
+				.put("Navigator?UnknownElement", ImageDescriptor.getMissingImageDescriptor()); //$NON-NLS-1$
+		UrmlDiagramEditorPlugin
+				.getInstance()
+				.getImageRegistry()
+				.put("Navigator?ImageNotFound", ImageDescriptor.getMissingImageDescriptor()); //$NON-NLS-1$
 	}
 
 	/**
@@ -114,7 +121,8 @@
 	 */
 	public void updateLabel(ViewerLabel label, TreePath elementPath) {
 		Object element = elementPath.getLastSegment();
-		if (element instanceof UrmlNavigatorItem && !isOwnView(((UrmlNavigatorItem) element).getView())) {
+		if (element instanceof UrmlNavigatorItem
+				&& !isOwnView(((UrmlNavigatorItem) element).getView())) {
 			return;
 		}
 		label.setText(getText(element));
@@ -127,7 +135,8 @@
 	public Image getImage(Object element) {
 		if (element instanceof UrmlNavigatorGroup) {
 			UrmlNavigatorGroup group = (UrmlNavigatorGroup) element;
-			return UrmlDiagramEditorPlugin.getInstance().getBundledImage(group.getIcon());
+			return UrmlDiagramEditorPlugin.getInstance().getBundledImage(
+					group.getIcon());
 		}
 
 		if (element instanceof UrmlNavigatorItem) {
@@ -146,117 +155,120 @@
 	 */
 	public Image getImage(View view) {
 		switch (UrmlVisualIDRegistry.getVisualID(view)) {
-		case URMLDiagramEditPart.VISUAL_ID:
+		case GoalRealizedFeaturesEditPart.VISUAL_ID:
 			return getImage(
-				"Navigator?Diagram?http://unicase.org/model/urml?URMLDiagram", UrmlElementTypes.URMLDiagram_1000); //$NON-NLS-1$
-		case StakeholderEditPart.VISUAL_ID:
+					"Navigator?Link?http://unicase.org/model/urml/goal?Goal?realizedFeatures", UrmlElementTypes.GoalRealizedFeatures_4004); //$NON-NLS-1$
+		case ProductVariationPointInstancesEditPart.VISUAL_ID:
 			return getImage(
-				"Navigator?TopLevelNode?http://unicase.org/model/urml?Stakeholder", UrmlElementTypes.Stakeholder_2002); //$NON-NLS-1$
+					"Navigator?Link?http://unicase.org/model/urml/feature?Product?variationPointInstances", UrmlElementTypes.ProductVariationPointInstances_4032); //$NON-NLS-1$
+		case ActorEditPart.VISUAL_ID:
+			return getImage(
+					"Navigator?TopLevelNode?http://unicase.org/model/urml/usecase?Actor", UrmlElementTypes.Actor_2010); //$NON-NLS-1$
 		case GoalEditPart.VISUAL_ID:
 			return getImage(
-				"Navigator?TopLevelNode?http://unicase.org/model/urml/goal?Goal", UrmlElementTypes.Goal_2001); //$NON-NLS-1$
-		case FunctionalRequirementEditPart.VISUAL_ID:
+					"Navigator?TopLevelNode?http://unicase.org/model/urml/goal?Goal", UrmlElementTypes.Goal_2001); //$NON-NLS-1$
+		case DangerHarmedAssetsEditPart.VISUAL_ID:
 			return getImage(
-				"Navigator?TopLevelNode?http://unicase.org/model/urml/requirement?FunctionalRequirement", UrmlElementTypes.FunctionalRequirement_2006); //$NON-NLS-1$
-		case FeatureEditPart.VISUAL_ID:
+					"Navigator?Link?http://unicase.org/model/urml/danger?Danger?harmedAssets", UrmlElementTypes.DangerHarmedAssets_4013); //$NON-NLS-1$
+		case StakeholderGoalsEditPart.VISUAL_ID:
 			return getImage(
-				"Navigator?TopLevelNode?http://unicase.org/model/urml/feature?Feature", UrmlElementTypes.Feature_2012); //$NON-NLS-1$
-		case ServiceEditPart.VISUAL_ID:
+					"Navigator?Link?http://unicase.org/model/urml?Stakeholder?goals", UrmlElementTypes.StakeholderGoals_4008); //$NON-NLS-1$
+		case FunctionalRequirementEditPart.VISUAL_ID:
 			return getImage(
-				"Navigator?TopLevelNode?http://unicase.org/model/urml/service?Service", UrmlElementTypes.Service_2007); //$NON-NLS-1$
-		case NonFunctionalRequirementEditPart.VISUAL_ID:
+					"Navigator?TopLevelNode?http://unicase.org/model/urml/requirement?FunctionalRequirement", UrmlElementTypes.FunctionalRequirement_2006); //$NON-NLS-1$
+		case VariationPointInstanceEditPart.VISUAL_ID:
 			return getImage(
-				"Navigator?TopLevelNode?http://unicase.org/model/urml/requirement?NonFunctionalRequirement", UrmlElementTypes.NonFunctionalRequirement_2008); //$NON-NLS-1$
-		case DangerEditPart.VISUAL_ID:
+					"Navigator?TopLevelNode?http://unicase.org/model/urml/feature?VariationPointInstance", UrmlElementTypes.VariationPointInstance_2014); //$NON-NLS-1$
+		case VariationPointInstanceSelectedFeaturesEditPart.VISUAL_ID:
 			return getImage(
-				"Navigator?TopLevelNode?http://unicase.org/model/urml/danger?Danger", UrmlElementTypes.Danger_2009); //$NON-NLS-1$
-		case ActorEditPart.VISUAL_ID:
+					"Navigator?Link?http://unicase.org/model/urml/feature?VariationPointInstance?selectedFeatures", UrmlElementTypes.VariationPointInstanceSelectedFeatures_4040); //$NON-NLS-1$
+		case VariationPointInstanceVariationPointEditPart.VISUAL_ID:
 			return getImage(
-				"Navigator?TopLevelNode?http://unicase.org/model/urml/usecase?Actor", UrmlElementTypes.Actor_2010); //$NON-NLS-1$
-		case ProceduralMitigationEditPart.VISUAL_ID:
+					"Navigator?Link?http://unicase.org/model/urml/feature?VariationPointInstance?variationPoint", UrmlElementTypes.VariationPointInstanceVariationPoint_4033); //$NON-NLS-1$
+		case RequirementImplementingServicesEditPart.VISUAL_ID:
 			return getImage(
-				"Navigator?TopLevelNode?http://unicase.org/model/urml/danger?ProceduralMitigation", UrmlElementTypes.ProceduralMitigation_2011); //$NON-NLS-1$
-		case VariationPointEditPart.VISUAL_ID:
+					"Navigator?Link?http://unicase.org/model/urml/requirement?Requirement?implementingServices", UrmlElementTypes.RequirementImplementingServices_4005); //$NON-NLS-1$
+		case ServiceEditPart.VISUAL_ID:
 			return getImage(
-				"Navigator?TopLevelNode?http://unicase.org/model/urml/feature?VariationPoint", UrmlElementTypes.VariationPoint_2013); //$NON-NLS-1$
-		case VariationPointInstanceEditPart.VISUAL_ID:
+					"Navigator?TopLevelNode?http://unicase.org/model/urml/service?Service", UrmlElementTypes.Service_2007); //$NON-NLS-1$
+		case StakeholderEditPart.VISUAL_ID:
 			return getImage(
-				"Navigator?TopLevelNode?http://unicase.org/model/urml/feature?VariationPointInstance", UrmlElementTypes.VariationPointInstance_2014); //$NON-NLS-1$
-		case ProductEditPart.VISUAL_ID:
+					"Navigator?TopLevelNode?http://unicase.org/model/urml?Stakeholder", UrmlElementTypes.Stakeholder_2002); //$NON-NLS-1$
+		case FunctionalRequirementSubFunctionalRequirementsEditPart.VISUAL_ID:
 			return getImage(
-				"Navigator?TopLevelNode?http://unicase.org/model/urml/feature?Product", UrmlElementTypes.Product_2015); //$NON-NLS-1$
-		case StakeholderGoalsEditPart.VISUAL_ID:
+					"Navigator?Link?http://unicase.org/model/urml/requirement?FunctionalRequirement?subFunctionalRequirements", UrmlElementTypes.FunctionalRequirementSubFunctionalRequirements_4044); //$NON-NLS-1$
+		case DangerEditPart.VISUAL_ID:
 			return getImage(
-				"Navigator?Link?http://unicase.org/model/urml?Stakeholder?goals", UrmlElementTypes.StakeholderGoals_4008); //$NON-NLS-1$
-		case AbstractFeatureSubFeaturesEditPart.VISUAL_ID:
+					"Navigator?TopLevelNode?http://unicase.org/model/urml/danger?Danger", UrmlElementTypes.Danger_2009); //$NON-NLS-1$
+		case ServiceSubServicesEditPart.VISUAL_ID:
 			return getImage(
-				"Navigator?Link?http://unicase.org/model/urml/feature?AbstractFeature?subFeatures", UrmlElementTypes.AbstractFeatureSubFeatures_4034); //$NON-NLS-1$
-		case AbstractFeatureDetailingFunctionalRequirementsEditPart.VISUAL_ID:
+					"Navigator?Link?http://unicase.org/model/urml/service?Service?subServices", UrmlElementTypes.ServiceSubServices_4022); //$NON-NLS-1$
+		case URMLDiagramEditPart.VISUAL_ID:
 			return getImage(
-				"Navigator?Link?http://unicase.org/model/urml/feature?AbstractFeature?detailingFunctionalRequirements", UrmlElementTypes.AbstractFeatureDetailingFunctionalRequirements_4035); //$NON-NLS-1$
-		case AbstractFeatureConstrainingNonFunctionalRequirementsEditPart.VISUAL_ID:
+					"Navigator?Diagram?http://unicase.org/model/urml?URMLDiagram", UrmlElementTypes.URMLDiagram_1000); //$NON-NLS-1$
+		case ProceduralMitigationEditPart.VISUAL_ID:
 			return getImage(
-				"Navigator?Link?http://unicase.org/model/urml/feature?AbstractFeature?constrainingNonFunctionalRequirements", UrmlElementTypes.AbstractFeatureConstrainingNonFunctionalRequirements_4036); //$NON-NLS-1$
-		case AbstractFeatureRequiredFeaturesEditPart.VISUAL_ID:
+					"Navigator?TopLevelNode?http://unicase.org/model/urml/danger?ProceduralMitigation", UrmlElementTypes.ProceduralMitigation_2011); //$NON-NLS-1$
+		case AssetTriggeredDangersEditPart.VISUAL_ID:
 			return getImage(
-				"Navigator?Link?http://unicase.org/model/urml/feature?AbstractFeature?requiredFeatures", UrmlElementTypes.AbstractFeatureRequiredFeatures_4045); //$NON-NLS-1$
-		case AbstractFeatureExcludedFeaturesEditPart.VISUAL_ID:
+					"Navigator?Link?http://unicase.org/model/urml/danger?Asset?triggeredDangers", UrmlElementTypes.AssetTriggeredDangers_4017); //$NON-NLS-1$
+		case FeatureEditPart.VISUAL_ID:
 			return getImage(
-				"Navigator?Link?http://unicase.org/model/urml/feature?AbstractFeature?excludedFeatures", UrmlElementTypes.AbstractFeatureExcludedFeatures_4038); //$NON-NLS-1$
-		case GoalRealizedFeaturesEditPart.VISUAL_ID:
+					"Navigator?TopLevelNode?http://unicase.org/model/urml/feature?Feature", UrmlElementTypes.Feature_2012); //$NON-NLS-1$
+		case GoalReference4EditPart.VISUAL_ID:
 			return getImage(
-				"Navigator?Link?http://unicase.org/model/urml/goal?Goal?realizedFeatures", UrmlElementTypes.GoalRealizedFeatures_4004); //$NON-NLS-1$
-		case GoalSubGoalsEditPart.VISUAL_ID:
+					"Navigator?Link?http://unicase.org/model/urml/goal?GoalReference", UrmlElementTypes.GoalReference_4025); //$NON-NLS-1$
+		case ProductEditPart.VISUAL_ID:
 			return getImage(
-				"Navigator?Link?http://unicase.org/model/urml/goal?Goal?subGoals", UrmlElementTypes.GoalSubGoals_4018); //$NON-NLS-1$
-		case GoalReferenceEditPart.VISUAL_ID:
+					"Navigator?TopLevelNode?http://unicase.org/model/urml/feature?Product", UrmlElementTypes.Product_2015); //$NON-NLS-1$
+		case ProductFeaturesEditPart.VISUAL_ID:
 			return getImage(
-				"Navigator?Link?http://unicase.org/model/urml/goal?GoalReference", UrmlElementTypes.GoalReference_4016); //$NON-NLS-1$
-		case GoalReference2EditPart.VISUAL_ID:
+					"Navigator?Link?http://unicase.org/model/urml/feature?Product?features", UrmlElementTypes.ProductFeatures_4047); //$NON-NLS-1$
+		case MitigationMitigatedDangersEditPart.VISUAL_ID:
 			return getImage(
-				"Navigator?Link?http://unicase.org/model/urml/goal?GoalReference", UrmlElementTypes.GoalReference_4023); //$NON-NLS-1$
-		case GoalReference3EditPart.VISUAL_ID:
+					"Navigator?Link?http://unicase.org/model/urml/danger?Mitigation?mitigatedDangers", UrmlElementTypes.MitigationMitigatedDangers_4012); //$NON-NLS-1$
+		case AbstractFeatureSubFeaturesEditPart.VISUAL_ID:
 			return getImage(
-				"Navigator?Link?http://unicase.org/model/urml/goal?GoalReference", UrmlElementTypes.GoalReference_4024); //$NON-NLS-1$
-		case GoalReference4EditPart.VISUAL_ID:
+					"Navigator?Link?http://unicase.org/model/urml/feature?AbstractFeature?subFeatures", UrmlElementTypes.AbstractFeatureSubFeatures_4034); //$NON-NLS-1$
+		case AbstractFeatureExcludedFeaturesEditPart.VISUAL_ID:
 			return getImage(
-				"Navigator?Link?http://unicase.org/model/urml/goal?GoalReference", UrmlElementTypes.GoalReference_4025); //$NON-NLS-1$
-		case RequirementImplementingServicesEditPart.VISUAL_ID:
+					"Navigator?Link?http://unicase.org/model/urml/feature?AbstractFeature?excludedFeatures", UrmlElementTypes.AbstractFeatureExcludedFeatures_4038); //$NON-NLS-1$
+		case AbstractFeatureRequiredFeaturesEditPart.VISUAL_ID:
 			return getImage(
-				"Navigator?Link?http://unicase.org/model/urml/requirement?Requirement?implementingServices", UrmlElementTypes.RequirementImplementingServices_4005); //$NON-NLS-1$
-		case NonFunctionalRequirementSubNonFunctionalRequirementsEditPart.VISUAL_ID:
+					"Navigator?Link?http://unicase.org/model/urml/feature?AbstractFeature?requiredFeatures", UrmlElementTypes.AbstractFeatureRequiredFeatures_4045); //$NON-NLS-1$
+		case GoalSubGoalsEditPart.VISUAL_ID:
 			return getImage(
-				"Navigator?Link?http://unicase.org/model/urml/requirement?NonFunctionalRequirement?subNonFunctionalRequirements", UrmlElementTypes.NonFunctionalRequirementSubNonFunctionalRequirements_4043); //$NON-NLS-1$
-		case FunctionalRequirementSubFunctionalRequirementsEditPart.VISUAL_ID:
+					"Navigator?Link?http://unicase.org/model/urml/goal?Goal?subGoals", UrmlElementTypes.GoalSubGoals_4018); //$NON-NLS-1$
+		case GoalReference2EditPart.VISUAL_ID:
 			return getImage(
-				"Navigator?Link?http://unicase.org/model/urml/requirement?FunctionalRequirement?subFunctionalRequirements", UrmlElementTypes.FunctionalRequirementSubFunctionalRequirements_4044); //$NON-NLS-1$
-		case MitigationMitigatedDangersEditPart.VISUAL_ID:
+					"Navigator?Link?http://unicase.org/model/urml/goal?GoalReference", UrmlElementTypes.GoalReference_4023); //$NON-NLS-1$
+		case GoalReferenceEditPart.VISUAL_ID:
 			return getImage(
-				"Navigator?Link?http://unicase.org/model/urml/danger?Mitigation?mitigatedDangers", UrmlElementTypes.MitigationMitigatedDangers_4012); //$NON-NLS-1$
-		case DangerHarmedAssetsEditPart.VISUAL_ID:
+					"Navigator?Link?http://unicase.org/model/urml/goal?GoalReference", UrmlElementTypes.GoalReference_4016); //$NON-NLS-1$
+		case VariationPointOptionalSubFeaturesEditPart.VISUAL_ID:
 			return getImage(
-				"Navigator?Link?http://unicase.org/model/urml/danger?Danger?harmedAssets", UrmlElementTypes.DangerHarmedAssets_4013); //$NON-NLS-1$
-		case AssetTriggeredDangersEditPart.VISUAL_ID:
+					"Navigator?Link?http://unicase.org/model/urml/feature?VariationPoint?optionalSubFeatures", UrmlElementTypes.VariationPointOptionalSubFeatures_4046); //$NON-NLS-1$
+		case AbstractFeatureConstrainingNonFunctionalRequirementsEditPart.VISUAL_ID:
 			return getImage(
-				"Navigator?Link?http://unicase.org/model/urml/danger?Asset?triggeredDangers", UrmlElementTypes.AssetTriggeredDangers_4017); //$NON-NLS-1$
-		case ServiceSubServicesEditPart.VISUAL_ID:
+					"Navigator?Link?http://unicase.org/model/urml/feature?AbstractFeature?constrainingNonFunctionalRequirements", UrmlElementTypes.AbstractFeatureConstrainingNonFunctionalRequirements_4036); //$NON-NLS-1$
+		case UrmlModelElementAssociationsEditPart.VISUAL_ID:
 			return getImage(
-				"Navigator?Link?http://unicase.org/model/urml/service?Service?subServices", UrmlElementTypes.ServiceSubServices_4022); //$NON-NLS-1$
-		case VariationPointOptionalSubFeaturesEditPart.VISUAL_ID:
+					"Navigator?Link?http://unicase.org/model/urml?UrmlModelElement?associations", UrmlElementTypes.UrmlModelElementAssociations_4048); //$NON-NLS-1$
+		case NonFunctionalRequirementSubNonFunctionalRequirementsEditPart.VISUAL_ID:
 			return getImage(
-				"Navigator?Link?http://unicase.org/model/urml/feature?VariationPoint?optionalSubFeatures", UrmlElementTypes.VariationPointOptionalSubFeatures_4046); //$NON-NLS-1$
-		case VariationPointInstanceVariationPointEditPart.VISUAL_ID:
+					"Navigator?Link?http://unicase.org/model/urml/requirement?NonFunctionalRequirement?subNonFunctionalRequirements", UrmlElementTypes.NonFunctionalRequirementSubNonFunctionalRequirements_4043); //$NON-NLS-1$
+		case AbstractFeatureDetailingFunctionalRequirementsEditPart.VISUAL_ID:
 			return getImage(
-				"Navigator?Link?http://unicase.org/model/urml/feature?VariationPointInstance?variationPoint", UrmlElementTypes.VariationPointInstanceVariationPoint_4033); //$NON-NLS-1$
-		case VariationPointInstanceSelectedFeaturesEditPart.VISUAL_ID:
+					"Navigator?Link?http://unicase.org/model/urml/feature?AbstractFeature?detailingFunctionalRequirements", UrmlElementTypes.AbstractFeatureDetailingFunctionalRequirements_4035); //$NON-NLS-1$
+		case GoalReference3EditPart.VISUAL_ID:
 			return getImage(
-				"Navigator?Link?http://unicase.org/model/urml/feature?VariationPointInstance?selectedFeatures", UrmlElementTypes.VariationPointInstanceSelectedFeatures_4040); //$NON-NLS-1$
-		case ProductVariationPointInstancesEditPart.VISUAL_ID:
+					"Navigator?Link?http://unicase.org/model/urml/goal?GoalReference", UrmlElementTypes.GoalReference_4024); //$NON-NLS-1$
+		case NonFunctionalRequirementEditPart.VISUAL_ID:
 			return getImage(
-				"Navigator?Link?http://unicase.org/model/urml/feature?Product?variationPointInstances", UrmlElementTypes.ProductVariationPointInstances_4032); //$NON-NLS-1$
-		case ProductFeaturesEditPart.VISUAL_ID:
+					"Navigator?TopLevelNode?http://unicase.org/model/urml/requirement?NonFunctionalRequirement", UrmlElementTypes.NonFunctionalRequirement_2008); //$NON-NLS-1$
+		case VariationPointEditPart.VISUAL_ID:
 			return getImage(
-				"Navigator?Link?http://unicase.org/model/urml/feature?Product?features", UrmlElementTypes.ProductFeatures_4047); //$NON-NLS-1$
+					"Navigator?TopLevelNode?http://unicase.org/model/urml/feature?VariationPoint", UrmlElementTypes.VariationPoint_2013); //$NON-NLS-1$
 		}
 		return getImage("Navigator?UnknownElement", null); //$NON-NLS-1$
 	}
@@ -265,9 +277,11 @@
 	 * @generated
 	 */
 	private Image getImage(String key, IElementType elementType) {
-		ImageRegistry imageRegistry = UrmlDiagramEditorPlugin.getInstance().getImageRegistry();
+		ImageRegistry imageRegistry = UrmlDiagramEditorPlugin.getInstance()
+				.getImageRegistry();
 		Image image = imageRegistry.get(key);
-		if (image == null && elementType != null && UrmlElementTypes.isKnownElementType(elementType)) {
+		if (image == null && elementType != null
+				&& UrmlElementTypes.isKnownElementType(elementType)) {
 			image = UrmlElementTypes.getImage(elementType);
 			imageRegistry.put(key, image);
 		}
@@ -307,80 +321,82 @@
 			return getUnresolvedDomainElementProxyText(view);
 		}
 		switch (UrmlVisualIDRegistry.getVisualID(view)) {
-		case URMLDiagramEditPart.VISUAL_ID:
-			return getURMLDiagram_1000Text(view);
-		case StakeholderEditPart.VISUAL_ID:
-			return getStakeholder_2002Text(view);
+		case GoalRealizedFeaturesEditPart.VISUAL_ID:
+			return getGoalRealizedFeatures_4004Text(view);
+		case ProductVariationPointInstancesEditPart.VISUAL_ID:
+			return getProductVariationPointInstances_4032Text(view);
+		case ActorEditPart.VISUAL_ID:
+			return getActor_2010Text(view);
 		case GoalEditPart.VISUAL_ID:
 			return getGoal_2001Text(view);
+		case DangerHarmedAssetsEditPart.VISUAL_ID:
+			return getDangerHarmedAssets_4013Text(view);
+		case StakeholderGoalsEditPart.VISUAL_ID:
+			return getStakeholderGoals_4008Text(view);
 		case FunctionalRequirementEditPart.VISUAL_ID:
 			return getFunctionalRequirement_2006Text(view);
-		case FeatureEditPart.VISUAL_ID:
-			return getFeature_2012Text(view);
+		case VariationPointInstanceEditPart.VISUAL_ID:
+			return getVariationPointInstance_2014Text(view);
+		case VariationPointInstanceSelectedFeaturesEditPart.VISUAL_ID:
+			return getVariationPointInstanceSelectedFeatures_4040Text(view);
+		case VariationPointInstanceVariationPointEditPart.VISUAL_ID:
+			return getVariationPointInstanceVariationPoint_4033Text(view);
+		case RequirementImplementingServicesEditPart.VISUAL_ID:
+			return getRequirementImplementingServices_4005Text(view);
 		case ServiceEditPart.VISUAL_ID:
 			return getService_2007Text(view);
-		case NonFunctionalRequirementEditPart.VISUAL_ID:
-			return getNonFunctionalRequirement_2008Text(view);
+		case StakeholderEditPart.VISUAL_ID:
+			return getStakeholder_2002Text(view);
+		case FunctionalRequirementSubFunctionalRequirementsEditPart.VISUAL_ID:
+			return getFunctionalRequirementSubFunctionalRequirements_4044Text(view);
 		case DangerEditPart.VISUAL_ID:
 			return getDanger_2009Text(view);
-		case ActorEditPart.VISUAL_ID:
-			return getActor_2010Text(view);
+		case ServiceSubServicesEditPart.VISUAL_ID:
+			return getServiceSubServices_4022Text(view);
+		case URMLDiagramEditPart.VISUAL_ID:
+			return getURMLDiagram_1000Text(view);
 		case ProceduralMitigationEditPart.VISUAL_ID:
 			return getProceduralMitigation_2011Text(view);
-		case VariationPointEditPart.VISUAL_ID:
-			return getVariationPoint_2013Text(view);
-		case VariationPointInstanceEditPart.VISUAL_ID:
-			return getVariationPointInstance_2014Text(view);
+		case AssetTriggeredDangersEditPart.VISUAL_ID:
+			return getAssetTriggeredDangers_4017Text(view);
+		case FeatureEditPart.VISUAL_ID:
+			return getFeature_2012Text(view);
+		case GoalReference4EditPart.VISUAL_ID:
+			return getGoalReference_4025Text(view);
 		case ProductEditPart.VISUAL_ID:
 			return getProduct_2015Text(view);
-		case StakeholderGoalsEditPart.VISUAL_ID:
-			return getStakeholderGoals_4008Text(view);
+		case ProductFeaturesEditPart.VISUAL_ID:
+			return getProductFeatures_4047Text(view);
+		case MitigationMitigatedDangersEditPart.VISUAL_ID:
+			return getMitigationMitigatedDangers_4012Text(view);
 		case AbstractFeatureSubFeaturesEditPart.VISUAL_ID:
 			return getAbstractFeatureSubFeatures_4034Text(view);
-		case AbstractFeatureDetailingFunctionalRequirementsEditPart.VISUAL_ID:
-			return getAbstractFeatureDetailingFunctionalRequirements_4035Text(view);
-		case AbstractFeatureConstrainingNonFunctionalRequirementsEditPart.VISUAL_ID:
-			return getAbstractFeatureConstrainingNonFunctionalRequirements_4036Text(view);
-		case AbstractFeatureRequiredFeaturesEditPart.VISUAL_ID:
-			return getAbstractFeatureRequiredFeatures_4045Text(view);
 		case AbstractFeatureExcludedFeaturesEditPart.VISUAL_ID:
 			return getAbstractFeatureExcludedFeatures_4038Text(view);
-		case GoalRealizedFeaturesEditPart.VISUAL_ID:
-			return getGoalRealizedFeatures_4004Text(view);
+		case AbstractFeatureRequiredFeaturesEditPart.VISUAL_ID:
+			return getAbstractFeatureRequiredFeatures_4045Text(view);
 		case GoalSubGoalsEditPart.VISUAL_ID:
 			return getGoalSubGoals_4018Text(view);
-		case GoalReferenceEditPart.VISUAL_ID:
-			return getGoalReference_4016Text(view);
 		case GoalReference2EditPart.VISUAL_ID:
 			return getGoalReference_4023Text(view);
-		case GoalReference3EditPart.VISUAL_ID:
-			return getGoalReference_4024Text(view);
-		case GoalReference4EditPart.VISUAL_ID:
-			return getGoalReference_4025Text(view);
-		case RequirementImplementingServicesEditPart.VISUAL_ID:
-			return getRequirementImplementingServices_4005Text(view);
-		case NonFunctionalRequirementSubNonFunctionalRequirementsEditPart.VISUAL_ID:
-			return getNonFunctionalRequirementSubNonFunctionalRequirements_4043Text(view);
-		case FunctionalRequirementSubFunctionalRequirementsEditPart.VISUAL_ID:
-			return getFunctionalRequirementSubFunctionalRequirements_4044Text(view);
-		case MitigationMitigatedDangersEditPart.VISUAL_ID:
-			return getMitigationMitigatedDangers_4012Text(view);
-		case DangerHarmedAssetsEditPart.VISUAL_ID:
-			return getDangerHarmedAssets_4013Text(view);
-		case AssetTriggeredDangersEditPart.VISUAL_ID:
-			return getAssetTriggeredDangers_4017Text(view);
-		case ServiceSubServicesEditPart.VISUAL_ID:
-			return getServiceSubServices_4022Text(view);
+		case GoalReferenceEditPart.VISUAL_ID:
+			return getGoalReference_4016Text(view);
 		case VariationPointOptionalSubFeaturesEditPart.VISUAL_ID:
 			return getVariationPointOptionalSubFeatures_4046Text(view);
-		case VariationPointInstanceVariationPointEditPart.VISUAL_ID:
-			return getVariationPointInstanceVariationPoint_4033Text(view);
-		case VariationPointInstanceSelectedFeaturesEditPart.VISUAL_ID:
-			return getVariationPointInstanceSelectedFeatures_4040Text(view);
-		case ProductVariationPointInstancesEditPart.VISUAL_ID:
-			return getProductVariationPointInstances_4032Text(view);
-		case ProductFeaturesEditPart.VISUAL_ID:
-			return getProductFeatures_4047Text(view);
+		case AbstractFeatureConstrainingNonFunctionalRequirementsEditPart.VISUAL_ID:
+			return getAbstractFeatureConstrainingNonFunctionalRequirements_4036Text(view);
+		case UrmlModelElementAssociationsEditPart.VISUAL_ID:
+			return getUrmlModelElementAssociations_4048Text(view);
+		case NonFunctionalRequirementSubNonFunctionalRequirementsEditPart.VISUAL_ID:
+			return getNonFunctionalRequirementSubNonFunctionalRequirements_4043Text(view);
+		case AbstractFeatureDetailingFunctionalRequirementsEditPart.VISUAL_ID:
+			return getAbstractFeatureDetailingFunctionalRequirements_4035Text(view);
+		case GoalReference3EditPart.VISUAL_ID:
+			return getGoalReference_4024Text(view);
+		case NonFunctionalRequirementEditPart.VISUAL_ID:
+			return getNonFunctionalRequirement_2008Text(view);
+		case VariationPointEditPart.VISUAL_ID:
+			return getVariationPoint_2013Text(view);
 		}
 		return getUnknownElementText(view);
 	}
@@ -393,7 +409,27 @@
 		if (domainModelElement != null) {
 			return domainModelElement.getName();
 		} else {
-			UrmlDiagramEditorPlugin.getInstance().logError("No domain element for view with visualID = " + 1000); //$NON-NLS-1$
+			UrmlDiagramEditorPlugin.getInstance().logError(
+					"No domain element for view with visualID = " + 1000); //$NON-NLS-1$
+			return ""; //$NON-NLS-1$
+		}
+	}
+
+	/**
+	 * @generated
+	 */
+	private String getUrmlModelElementAssociations_4048Text(View view) {
+		IParser parser = UrmlParserProvider.getParser(
+				UrmlElementTypes.UrmlModelElementAssociations_4048,
+				view.getElement() != null ? view.getElement() : view,
+				UrmlVisualIDRegistry.getType(TriggersLabel2EditPart.VISUAL_ID));
+		if (parser != null) {
+			return parser.getPrintString(new EObjectAdapter(
+					view.getElement() != null ? view.getElement() : view),
+					ParserOptions.NONE.intValue());
+		} else {
+			UrmlDiagramEditorPlugin.getInstance().logError(
+					"Parser was not found for label " + 6048); //$NON-NLS-1$
 			return ""; //$NON-NLS-1$
 		}
 	}
@@ -402,14 +438,18 @@
 	 * @generated
 	 */
 	private String getStakeholder_2002Text(View view) {
-		IParser parser = UrmlParserProvider.getParser(UrmlElementTypes.Stakeholder_2002,
-			view.getElement() != null ? view.getElement() : view, UrmlVisualIDRegistry
-				.getType(StakeholderNameEditPart.VISUAL_ID));
+		IParser parser = UrmlParserProvider
+				.getParser(UrmlElementTypes.Stakeholder_2002,
+						view.getElement() != null ? view.getElement() : view,
+						UrmlVisualIDRegistry
+								.getType(StakeholderNameEditPart.VISUAL_ID));
 		if (parser != null) {
-			return parser.getPrintString(new EObjectAdapter(view.getElement() != null ? view.getElement() : view),
-				ParserOptions.NONE.intValue());
+			return parser.getPrintString(new EObjectAdapter(
+					view.getElement() != null ? view.getElement() : view),
+					ParserOptions.NONE.intValue());
 		} else {
-			UrmlDiagramEditorPlugin.getInstance().logError("Parser was not found for label " + 5008); //$NON-NLS-1$
+			UrmlDiagramEditorPlugin.getInstance().logError(
+					"Parser was not found for label " + 5008); //$NON-NLS-1$
 			return ""; //$NON-NLS-1$
 		}
 	}
@@ -418,13 +458,17 @@
 	 * @generated
 	 */
 	private String getGoal_2001Text(View view) {
-		IParser parser = UrmlParserProvider.getParser(UrmlElementTypes.Goal_2001, view.getElement() != null ? view
-			.getElement() : view, UrmlVisualIDRegistry.getType(GoalNameEditPart.VISUAL_ID));
+		IParser parser = UrmlParserProvider.getParser(
+				UrmlElementTypes.Goal_2001,
+				view.getElement() != null ? view.getElement() : view,
+				UrmlVisualIDRegistry.getType(GoalNameEditPart.VISUAL_ID));
 		if (parser != null) {
-			return parser.getPrintString(new EObjectAdapter(view.getElement() != null ? view.getElement() : view),
-				ParserOptions.NONE.intValue());
+			return parser.getPrintString(new EObjectAdapter(
+					view.getElement() != null ? view.getElement() : view),
+					ParserOptions.NONE.intValue());
 		} else {
-			UrmlDiagramEditorPlugin.getInstance().logError("Parser was not found for label " + 5009); //$NON-NLS-1$
+			UrmlDiagramEditorPlugin.getInstance().logError(
+					"Parser was not found for label " + 5009); //$NON-NLS-1$
 			return ""; //$NON-NLS-1$
 		}
 	}
@@ -433,14 +477,18 @@
 	 * @generated
 	 */
 	private String getFunctionalRequirement_2006Text(View view) {
-		IParser parser = UrmlParserProvider.getParser(UrmlElementTypes.FunctionalRequirement_2006,
-			view.getElement() != null ? view.getElement() : view, UrmlVisualIDRegistry
-				.getType(FunctionalRequirementNameEditPart.VISUAL_ID));
+		IParser parser = UrmlParserProvider.getParser(
+				UrmlElementTypes.FunctionalRequirement_2006,
+				view.getElement() != null ? view.getElement() : view,
+				UrmlVisualIDRegistry
+						.getType(FunctionalRequirementNameEditPart.VISUAL_ID));
 		if (parser != null) {
-			return parser.getPrintString(new EObjectAdapter(view.getElement() != null ? view.getElement() : view),
-				ParserOptions.NONE.intValue());
+			return parser.getPrintString(new EObjectAdapter(
+					view.getElement() != null ? view.getElement() : view),
+					ParserOptions.NONE.intValue());
 		} else {
-			UrmlDiagramEditorPlugin.getInstance().logError("Parser was not found for label " + 5010); //$NON-NLS-1$
+			UrmlDiagramEditorPlugin.getInstance().logError(
+					"Parser was not found for label " + 5010); //$NON-NLS-1$
 			return ""; //$NON-NLS-1$
 		}
 	}
@@ -449,13 +497,17 @@
 	 * @generated
 	 */
 	private String getFeature_2012Text(View view) {
-		IParser parser = UrmlParserProvider.getParser(UrmlElementTypes.Feature_2012, view.getElement() != null ? view
-			.getElement() : view, UrmlVisualIDRegistry.getType(FeatureNameEditPart.VISUAL_ID));
+		IParser parser = UrmlParserProvider.getParser(
+				UrmlElementTypes.Feature_2012,
+				view.getElement() != null ? view.getElement() : view,
+				UrmlVisualIDRegistry.getType(FeatureNameEditPart.VISUAL_ID));
 		if (parser != null) {
-			return parser.getPrintString(new EObjectAdapter(view.getElement() != null ? view.getElement() : view),
-				ParserOptions.NONE.intValue());
+			return parser.getPrintString(new EObjectAdapter(
+					view.getElement() != null ? view.getElement() : view),
+					ParserOptions.NONE.intValue());
 		} else {
-			UrmlDiagramEditorPlugin.getInstance().logError("Parser was not found for label " + 5011); //$NON-NLS-1$
+			UrmlDiagramEditorPlugin.getInstance().logError(
+					"Parser was not found for label " + 5011); //$NON-NLS-1$
 			return ""; //$NON-NLS-1$
 		}
 	}
@@ -464,13 +516,17 @@
 	 * @generated
 	 */
 	private String getService_2007Text(View view) {
-		IParser parser = UrmlParserProvider.getParser(UrmlElementTypes.Service_2007, view.getElement() != null ? view
-			.getElement() : view, UrmlVisualIDRegistry.getType(ServiceNameEditPart.VISUAL_ID));
+		IParser parser = UrmlParserProvider.getParser(
+				UrmlElementTypes.Service_2007,
+				view.getElement() != null ? view.getElement() : view,
+				UrmlVisualIDRegistry.getType(ServiceNameEditPart.VISUAL_ID));
 		if (parser != null) {
-			return parser.getPrintString(new EObjectAdapter(view.getElement() != null ? view.getElement() : view),
-				ParserOptions.NONE.intValue());
+			return parser.getPrintString(new EObjectAdapter(
+					view.getElement() != null ? view.getElement() : view),
+					ParserOptions.NONE.intValue());
 		} else {
-			UrmlDiagramEditorPlugin.getInstance().logError("Parser was not found for label " + 5002); //$NON-NLS-1$
+			UrmlDiagramEditorPlugin.getInstance().logError(
+					"Parser was not found for label " + 5002); //$NON-NLS-1$
 			return ""; //$NON-NLS-1$
 		}
 	}
@@ -479,14 +535,19 @@
 	 * @generated
 	 */
 	private String getNonFunctionalRequirement_2008Text(View view) {
-		IParser parser = UrmlParserProvider.getParser(UrmlElementTypes.NonFunctionalRequirement_2008,
-			view.getElement() != null ? view.getElement() : view, UrmlVisualIDRegistry
-				.getType(NonFunctionalRequirementNameEditPart.VISUAL_ID));
+		IParser parser = UrmlParserProvider
+				.getParser(
+						UrmlElementTypes.NonFunctionalRequirement_2008,
+						view.getElement() != null ? view.getElement() : view,
+						UrmlVisualIDRegistry
+								.getType(NonFunctionalRequirementNameEditPart.VISUAL_ID));
 		if (parser != null) {
-			return parser.getPrintString(new EObjectAdapter(view.getElement() != null ? view.getElement() : view),
-				ParserOptions.NONE.intValue());
+			return parser.getPrintString(new EObjectAdapter(
+					view.getElement() != null ? view.getElement() : view),
+					ParserOptions.NONE.intValue());
 		} else {
-			UrmlDiagramEditorPlugin.getInstance().logError("Parser was not found for label " + 5003); //$NON-NLS-1$
+			UrmlDiagramEditorPlugin.getInstance().logError(
+					"Parser was not found for label " + 5003); //$NON-NLS-1$
 			return ""; //$NON-NLS-1$
 		}
 	}
@@ -495,13 +556,17 @@
 	 * @generated
 	 */
 	private String getDanger_2009Text(View view) {
-		IParser parser = UrmlParserProvider.getParser(UrmlElementTypes.Danger_2009, view.getElement() != null ? view
-			.getElement() : view, UrmlVisualIDRegistry.getType(DangerNameEditPart.VISUAL_ID));
+		IParser parser = UrmlParserProvider.getParser(
+				UrmlElementTypes.Danger_2009,
+				view.getElement() != null ? view.getElement() : view,
+				UrmlVisualIDRegistry.getType(DangerNameEditPart.VISUAL_ID));
 		if (parser != null) {
-			return parser.getPrintString(new EObjectAdapter(view.getElement() != null ? view.getElement() : view),
-				ParserOptions.NONE.intValue());
+			return parser.getPrintString(new EObjectAdapter(
+					view.getElement() != null ? view.getElement() : view),
+					ParserOptions.NONE.intValue());
 		} else {
-			UrmlDiagramEditorPlugin.getInstance().logError("Parser was not found for label " + 5004); //$NON-NLS-1$
+			UrmlDiagramEditorPlugin.getInstance().logError(
+					"Parser was not found for label " + 5004); //$NON-NLS-1$
 			return ""; //$NON-NLS-1$
 		}
 	}
@@ -510,13 +575,17 @@
 	 * @generated
 	 */
 	private String getActor_2010Text(View view) {
-		IParser parser = UrmlParserProvider.getParser(UrmlElementTypes.Actor_2010, view.getElement() != null ? view
-			.getElement() : view, UrmlVisualIDRegistry.getType(ActorNameEditPart.VISUAL_ID));
+		IParser parser = UrmlParserProvider.getParser(
+				UrmlElementTypes.Actor_2010,
+				view.getElement() != null ? view.getElement() : view,
+				UrmlVisualIDRegistry.getType(ActorNameEditPart.VISUAL_ID));
 		if (parser != null) {
-			return parser.getPrintString(new EObjectAdapter(view.getElement() != null ? view.getElement() : view),
-				ParserOptions.NONE.intValue());
+			return parser.getPrintString(new EObjectAdapter(
+					view.getElement() != null ? view.getElement() : view),
+					ParserOptions.NONE.intValue());
 		} else {
-			UrmlDiagramEditorPlugin.getInstance().logError("Parser was not found for label " + 5005); //$NON-NLS-1$
+			UrmlDiagramEditorPlugin.getInstance().logError(
+					"Parser was not found for label " + 5005); //$NON-NLS-1$
 			return ""; //$NON-NLS-1$
 		}
 	}
@@ -525,14 +594,18 @@
 	 * @generated
 	 */
 	private String getProceduralMitigation_2011Text(View view) {
-		IParser parser = UrmlParserProvider.getParser(UrmlElementTypes.ProceduralMitigation_2011,
-			view.getElement() != null ? view.getElement() : view, UrmlVisualIDRegistry
-				.getType(ProceduralMitigationNameEditPart.VISUAL_ID));
+		IParser parser = UrmlParserProvider.getParser(
+				UrmlElementTypes.ProceduralMitigation_2011,
+				view.getElement() != null ? view.getElement() : view,
+				UrmlVisualIDRegistry
+						.getType(ProceduralMitigationNameEditPart.VISUAL_ID));
 		if (parser != null) {
-			return parser.getPrintString(new EObjectAdapter(view.getElement() != null ? view.getElement() : view),
-				ParserOptions.NONE.intValue());
+			return parser.getPrintString(new EObjectAdapter(
+					view.getElement() != null ? view.getElement() : view),
+					ParserOptions.NONE.intValue());
 		} else {
-			UrmlDiagramEditorPlugin.getInstance().logError("Parser was not found for label " + 5006); //$NON-NLS-1$
+			UrmlDiagramEditorPlugin.getInstance().logError(
+					"Parser was not found for label " + 5006); //$NON-NLS-1$
 			return ""; //$NON-NLS-1$
 		}
 	}
@@ -541,14 +614,18 @@
 	 * @generated
 	 */
 	private String getVariationPoint_2013Text(View view) {
-		IParser parser = UrmlParserProvider.getParser(UrmlElementTypes.VariationPoint_2013,
-			view.getElement() != null ? view.getElement() : view, UrmlVisualIDRegistry
-				.getType(VariationPointNameEditPart.VISUAL_ID));
+		IParser parser = UrmlParserProvider.getParser(
+				UrmlElementTypes.VariationPoint_2013,
+				view.getElement() != null ? view.getElement() : view,
+				UrmlVisualIDRegistry
+						.getType(VariationPointNameEditPart.VISUAL_ID));
 		if (parser != null) {
-			return parser.getPrintString(new EObjectAdapter(view.getElement() != null ? view.getElement() : view),
-				ParserOptions.NONE.intValue());
+			return parser.getPrintString(new EObjectAdapter(
+					view.getElement() != null ? view.getElement() : view),
+					ParserOptions.NONE.intValue());
 		} else {
-			UrmlDiagramEditorPlugin.getInstance().logError("Parser was not found for label " + 5012); //$NON-NLS-1$
+			UrmlDiagramEditorPlugin.getInstance().logError(
+					"Parser was not found for label " + 5012); //$NON-NLS-1$
 			return ""; //$NON-NLS-1$
 		}
 	}
@@ -557,14 +634,18 @@
 	 * @generated
 	 */
 	private String getVariationPointInstance_2014Text(View view) {
-		IParser parser = UrmlParserProvider.getParser(UrmlElementTypes.VariationPointInstance_2014,
-			view.getElement() != null ? view.getElement() : view, UrmlVisualIDRegistry
-				.getType(VariationPointInstanceNameEditPart.VISUAL_ID));
+		IParser parser = UrmlParserProvider.getParser(
+				UrmlElementTypes.VariationPointInstance_2014,
+				view.getElement() != null ? view.getElement() : view,
+				UrmlVisualIDRegistry
+						.getType(VariationPointInstanceNameEditPart.VISUAL_ID));
 		if (parser != null) {
-			return parser.getPrintString(new EObjectAdapter(view.getElement() != null ? view.getElement() : view),
-				ParserOptions.NONE.intValue());
+			return parser.getPrintString(new EObjectAdapter(
+					view.getElement() != null ? view.getElement() : view),
+					ParserOptions.NONE.intValue());
 		} else {
-			UrmlDiagramEditorPlugin.getInstance().logError("Parser was not found for label " + 5013); //$NON-NLS-1$
+			UrmlDiagramEditorPlugin.getInstance().logError(
+					"Parser was not found for label " + 5013); //$NON-NLS-1$
 			return ""; //$NON-NLS-1$
 		}
 	}
@@ -573,13 +654,17 @@
 	 * @generated
 	 */
 	private String getProduct_2015Text(View view) {
-		IParser parser = UrmlParserProvider.getParser(UrmlElementTypes.Product_2015, view.getElement() != null ? view
-			.getElement() : view, UrmlVisualIDRegistry.getType(ProductNameEditPart.VISUAL_ID));
+		IParser parser = UrmlParserProvider.getParser(
+				UrmlElementTypes.Product_2015,
+				view.getElement() != null ? view.getElement() : view,
+				UrmlVisualIDRegistry.getType(ProductNameEditPart.VISUAL_ID));
 		if (parser != null) {
-			return parser.getPrintString(new EObjectAdapter(view.getElement() != null ? view.getElement() : view),
-				ParserOptions.NONE.intValue());
+			return parser.getPrintString(new EObjectAdapter(
+					view.getElement() != null ? view.getElement() : view),
+					ParserOptions.NONE.intValue());
 		} else {
-			UrmlDiagramEditorPlugin.getInstance().logError("Parser was not found for label " + 5014); //$NON-NLS-1$
+			UrmlDiagramEditorPlugin.getInstance().logError(
+					"Parser was not found for label " + 5014); //$NON-NLS-1$
 			return ""; //$NON-NLS-1$
 		}
 	}
@@ -588,14 +673,17 @@
 	 * @generated
 	 */
 	private String getStakeholderGoals_4008Text(View view) {
-		IParser parser = UrmlParserProvider.getParser(UrmlElementTypes.StakeholderGoals_4008,
-			view.getElement() != null ? view.getElement() : view, UrmlVisualIDRegistry
-				.getType(ExpressesLabelEditPart.VISUAL_ID));
+		IParser parser = UrmlParserProvider.getParser(
+				UrmlElementTypes.StakeholderGoals_4008,
+				view.getElement() != null ? view.getElement() : view,
+				UrmlVisualIDRegistry.getType(ExpressesLabelEditPart.VISUAL_ID));
 		if (parser != null) {
-			return parser.getPrintString(new EObjectAdapter(view.getElement() != null ? view.getElement() : view),
-				ParserOptions.NONE.intValue());
+			return parser.getPrintString(new EObjectAdapter(
+					view.getElement() != null ? view.getElement() : view),
+					ParserOptions.NONE.intValue());
 		} else {
-			UrmlDiagramEditorPlugin.getInstance().logError("Parser was not found for label " + 6001); //$NON-NLS-1$
+			UrmlDiagramEditorPlugin.getInstance().logError(
+					"Parser was not found for label " + 6001); //$NON-NLS-1$
 			return ""; //$NON-NLS-1$
 		}
 	}
@@ -604,14 +692,18 @@
 	 * @generated
 	 */
 	private String getAbstractFeatureSubFeatures_4034Text(View view) {
-		IParser parser = UrmlParserProvider.getParser(UrmlElementTypes.AbstractFeatureSubFeatures_4034, view
-			.getElement() != null ? view.getElement() : view, UrmlVisualIDRegistry
-			.getType(IsRefinedLabel2EditPart.VISUAL_ID));
+		IParser parser = UrmlParserProvider
+				.getParser(UrmlElementTypes.AbstractFeatureSubFeatures_4034,
+						view.getElement() != null ? view.getElement() : view,
+						UrmlVisualIDRegistry
+								.getType(IsRefinedLabel2EditPart.VISUAL_ID));
 		if (parser != null) {
-			return parser.getPrintString(new EObjectAdapter(view.getElement() != null ? view.getElement() : view),
-				ParserOptions.NONE.intValue());
+			return parser.getPrintString(new EObjectAdapter(
+					view.getElement() != null ? view.getElement() : view),
+					ParserOptions.NONE.intValue());
 		} else {
-			UrmlDiagramEditorPlugin.getInstance().logError("Parser was not found for label " + 6034); //$NON-NLS-1$
+			UrmlDiagramEditorPlugin.getInstance().logError(
+					"Parser was not found for label " + 6034); //$NON-NLS-1$
 			return ""; //$NON-NLS-1$
 		}
 	}
@@ -619,15 +711,21 @@
 	/**
 	 * @generated
 	 */
-	private String getAbstractFeatureDetailingFunctionalRequirements_4035Text(View view) {
-		IParser parser = UrmlParserProvider.getParser(
-			UrmlElementTypes.AbstractFeatureDetailingFunctionalRequirements_4035, view.getElement() != null ? view
-				.getElement() : view, UrmlVisualIDRegistry.getType(IsDetailedLabelEditPart.VISUAL_ID));
+	private String getAbstractFeatureDetailingFunctionalRequirements_4035Text(
+			View view) {
+		IParser parser = UrmlParserProvider
+				.getParser(
+						UrmlElementTypes.AbstractFeatureDetailingFunctionalRequirements_4035,
+						view.getElement() != null ? view.getElement() : view,
+						UrmlVisualIDRegistry
+								.getType(IsDetailedLabelEditPart.VISUAL_ID));
 		if (parser != null) {
-			return parser.getPrintString(new EObjectAdapter(view.getElement() != null ? view.getElement() : view),
-				ParserOptions.NONE.intValue());
+			return parser.getPrintString(new EObjectAdapter(
+					view.getElement() != null ? view.getElement() : view),
+					ParserOptions.NONE.intValue());
 		} else {
-			UrmlDiagramEditorPlugin.getInstance().logError("Parser was not found for label " + 6035); //$NON-NLS-1$
+			UrmlDiagramEditorPlugin.getInstance().logError(
+					"Parser was not found for label " + 6035); //$NON-NLS-1$
 			return ""; //$NON-NLS-1$
 		}
 	}
@@ -635,16 +733,21 @@
 	/**
 	 * @generated
 	 */
-	private String getAbstractFeatureConstrainingNonFunctionalRequirements_4036Text(View view) {
-		IParser parser = UrmlParserProvider.getParser(
-			UrmlElementTypes.AbstractFeatureConstrainingNonFunctionalRequirements_4036,
-			view.getElement() != null ? view.getElement() : view, UrmlVisualIDRegistry
-				.getType(IsConstraintLabelEditPart.VISUAL_ID));
+	private String getAbstractFeatureConstrainingNonFunctionalRequirements_4036Text(
+			View view) {
+		IParser parser = UrmlParserProvider
+				.getParser(
+						UrmlElementTypes.AbstractFeatureConstrainingNonFunctionalRequirements_4036,
+						view.getElement() != null ? view.getElement() : view,
+						UrmlVisualIDRegistry
+								.getType(IsConstraintLabelEditPart.VISUAL_ID));
 		if (parser != null) {
-			return parser.getPrintString(new EObjectAdapter(view.getElement() != null ? view.getElement() : view),
-				ParserOptions.NONE.intValue());
+			return parser.getPrintString(new EObjectAdapter(
+					view.getElement() != null ? view.getElement() : view),
+					ParserOptions.NONE.intValue());
 		} else {
-			UrmlDiagramEditorPlugin.getInstance().logError("Parser was not found for label " + 6036); //$NON-NLS-1$
+			UrmlDiagramEditorPlugin.getInstance().logError(
+					"Parser was not found for label " + 6036); //$NON-NLS-1$
 			return ""; //$NON-NLS-1$
 		}
 	}
@@ -653,14 +756,17 @@
 	 * @generated
 	 */
 	private String getAbstractFeatureRequiredFeatures_4045Text(View view) {
-		IParser parser = UrmlParserProvider.getParser(UrmlElementTypes.AbstractFeatureRequiredFeatures_4045, view
-			.getElement() != null ? view.getElement() : view, UrmlVisualIDRegistry
-			.getType(RequiresLabelEditPart.VISUAL_ID));
+		IParser parser = UrmlParserProvider.getParser(
+				UrmlElementTypes.AbstractFeatureRequiredFeatures_4045,
+				view.getElement() != null ? view.getElement() : view,
+				UrmlVisualIDRegistry.getType(RequiresLabelEditPart.VISUAL_ID));
 		if (parser != null) {
-			return parser.getPrintString(new EObjectAdapter(view.getElement() != null ? view.getElement() : view),
-				ParserOptions.NONE.intValue());
+			return parser.getPrintString(new EObjectAdapter(
+					view.getElement() != null ? view.getElement() : view),
+					ParserOptions.NONE.intValue());
 		} else {
-			UrmlDiagramEditorPlugin.getInstance().logError("Parser was not found for label " + 6045); //$NON-NLS-1$
+			UrmlDiagramEditorPlugin.getInstance().logError(
+					"Parser was not found for label " + 6045); //$NON-NLS-1$
 			return ""; //$NON-NLS-1$
 		}
 	}
@@ -669,14 +775,17 @@
 	 * @generated
 	 */
 	private String getAbstractFeatureExcludedFeatures_4038Text(View view) {
-		IParser parser = UrmlParserProvider.getParser(UrmlElementTypes.AbstractFeatureExcludedFeatures_4038, view
-			.getElement() != null ? view.getElement() : view, UrmlVisualIDRegistry
-			.getType(ExcludesLabelEditPart.VISUAL_ID));
+		IParser parser = UrmlParserProvider.getParser(
+				UrmlElementTypes.AbstractFeatureExcludedFeatures_4038,
+				view.getElement() != null ? view.getElement() : view,
+				UrmlVisualIDRegistry.getType(ExcludesLabelEditPart.VISUAL_ID));
 		if (parser != null) {
-			return parser.getPrintString(new EObjectAdapter(view.getElement() != null ? view.getElement() : view),
-				ParserOptions.NONE.intValue());
+			return parser.getPrintString(new EObjectAdapter(
+					view.getElement() != null ? view.getElement() : view),
+					ParserOptions.NONE.intValue());
 		} else {
-			UrmlDiagramEditorPlugin.getInstance().logError("Parser was not found for label " + 6038); //$NON-NLS-1$
+			UrmlDiagramEditorPlugin.getInstance().logError(
+					"Parser was not found for label " + 6038); //$NON-NLS-1$
 			return ""; //$NON-NLS-1$
 		}
 	}
@@ -685,14 +794,17 @@
 	 * @generated
 	 */
 	private String getGoalRealizedFeatures_4004Text(View view) {
-		IParser parser = UrmlParserProvider.getParser(UrmlElementTypes.GoalRealizedFeatures_4004,
-			view.getElement() != null ? view.getElement() : view, UrmlVisualIDRegistry
-				.getType(MotivatesLabelEditPart.VISUAL_ID));
+		IParser parser = UrmlParserProvider.getParser(
+				UrmlElementTypes.GoalRealizedFeatures_4004,
+				view.getElement() != null ? view.getElement() : view,
+				UrmlVisualIDRegistry.getType(MotivatesLabelEditPart.VISUAL_ID));
 		if (parser != null) {
-			return parser.getPrintString(new EObjectAdapter(view.getElement() != null ? view.getElement() : view),
-				ParserOptions.NONE.intValue());
+			return parser.getPrintString(new EObjectAdapter(
+					view.getElement() != null ? view.getElement() : view),
+					ParserOptions.NONE.intValue());
 		} else {
-			UrmlDiagramEditorPlugin.getInstance().logError("Parser was not found for label " + 6004); //$NON-NLS-1$
+			UrmlDiagramEditorPlugin.getInstance().logError(
+					"Parser was not found for label " + 6004); //$NON-NLS-1$
 			return ""; //$NON-NLS-1$
 		}
 	}
@@ -701,14 +813,17 @@
 	 * @generated
 	 */
 	private String getGoalSubGoals_4018Text(View view) {
-		IParser parser = UrmlParserProvider.getParser(UrmlElementTypes.GoalSubGoals_4018,
-			view.getElement() != null ? view.getElement() : view, UrmlVisualIDRegistry
-				.getType(IsRefinedLabelEditPart.VISUAL_ID));
+		IParser parser = UrmlParserProvider.getParser(
+				UrmlElementTypes.GoalSubGoals_4018,
+				view.getElement() != null ? view.getElement() : view,
+				UrmlVisualIDRegistry.getType(IsRefinedLabelEditPart.VISUAL_ID));
 		if (parser != null) {
-			return parser.getPrintString(new EObjectAdapter(view.getElement() != null ? view.getElement() : view),
-				ParserOptions.NONE.intValue());
+			return parser.getPrintString(new EObjectAdapter(
+					view.getElement() != null ? view.getElement() : view),
+					ParserOptions.NONE.intValue());
 		} else {
-			UrmlDiagramEditorPlugin.getInstance().logError("Parser was not found for label " + 6014); //$NON-NLS-1$
+			UrmlDiagramEditorPlugin.getInstance().logError(
+					"Parser was not found for label " + 6014); //$NON-NLS-1$
 			return ""; //$NON-NLS-1$
 		}
 	}
@@ -717,14 +832,18 @@
 	 * @generated
 	 */
 	private String getGoalReference_4016Text(View view) {
-		IParser parser = UrmlParserProvider.getParser(UrmlElementTypes.GoalReference_4016,
-			view.getElement() != null ? view.getElement() : view, UrmlVisualIDRegistry
-				.getType(IsDetailedLabel2EditPart.VISUAL_ID));
+		IParser parser = UrmlParserProvider.getParser(
+				UrmlElementTypes.GoalReference_4016,
+				view.getElement() != null ? view.getElement() : view,
+				UrmlVisualIDRegistry
+						.getType(IsDetailedLabel2EditPart.VISUAL_ID));
 		if (parser != null) {
-			return parser.getPrintString(new EObjectAdapter(view.getElement() != null ? view.getElement() : view),
-				ParserOptions.NONE.intValue());
+			return parser.getPrintString(new EObjectAdapter(
+					view.getElement() != null ? view.getElement() : view),
+					ParserOptions.NONE.intValue());
 		} else {
-			UrmlDiagramEditorPlugin.getInstance().logError("Parser was not found for label " + 6013); //$NON-NLS-1$
+			UrmlDiagramEditorPlugin.getInstance().logError(
+					"Parser was not found for label " + 6013); //$NON-NLS-1$
 			return ""; //$NON-NLS-1$
 		}
 	}
@@ -733,14 +852,18 @@
 	 * @generated
 	 */
 	private String getGoalReference_4023Text(View view) {
-		IParser parser = UrmlParserProvider.getParser(UrmlElementTypes.GoalReference_4023,
-			view.getElement() != null ? view.getElement() : view, UrmlVisualIDRegistry
-				.getType(GoalReferenceWeightEditPart.VISUAL_ID));
+		IParser parser = UrmlParserProvider.getParser(
+				UrmlElementTypes.GoalReference_4023,
+				view.getElement() != null ? view.getElement() : view,
+				UrmlVisualIDRegistry
+						.getType(GoalReferenceWeightEditPart.VISUAL_ID));
 		if (parser != null) {
-			return parser.getPrintString(new EObjectAdapter(view.getElement() != null ? view.getElement() : view),
-				ParserOptions.NONE.intValue());
+			return parser.getPrintString(new EObjectAdapter(
+					view.getElement() != null ? view.getElement() : view),
+					ParserOptions.NONE.intValue());
 		} else {
-			UrmlDiagramEditorPlugin.getInstance().logError("Parser was not found for label " + 6019); //$NON-NLS-1$
+			UrmlDiagramEditorPlugin.getInstance().logError(
+					"Parser was not found for label " + 6019); //$NON-NLS-1$
 			return ""; //$NON-NLS-1$
 		}
 	}
@@ -749,14 +872,18 @@
 	 * @generated
 	 */
 	private String getGoalReference_4024Text(View view) {
-		IParser parser = UrmlParserProvider.getParser(UrmlElementTypes.GoalReference_4024,
-			view.getElement() != null ? view.getElement() : view, UrmlVisualIDRegistry
-				.getType(GoalReferenceWeight2EditPart.VISUAL_ID));
+		IParser parser = UrmlParserProvider.getParser(
+				UrmlElementTypes.GoalReference_4024,
+				view.getElement() != null ? view.getElement() : view,
+				UrmlVisualIDRegistry
+						.getType(GoalReferenceWeight2EditPart.VISUAL_ID));
 		if (parser != null) {
-			return parser.getPrintString(new EObjectAdapter(view.getElement() != null ? view.getElement() : view),
-				ParserOptions.NONE.intValue());
+			return parser.getPrintString(new EObjectAdapter(
+					view.getElement() != null ? view.getElement() : view),
+					ParserOptions.NONE.intValue());
 		} else {
-			UrmlDiagramEditorPlugin.getInstance().logError("Parser was not found for label " + 6020); //$NON-NLS-1$
+			UrmlDiagramEditorPlugin.getInstance().logError(
+					"Parser was not found for label " + 6020); //$NON-NLS-1$
 			return ""; //$NON-NLS-1$
 		}
 	}
@@ -765,14 +892,18 @@
 	 * @generated
 	 */
 	private String getGoalReference_4025Text(View view) {
-		IParser parser = UrmlParserProvider.getParser(UrmlElementTypes.GoalReference_4025,
-			view.getElement() != null ? view.getElement() : view, UrmlVisualIDRegistry
-				.getType(GoalReferenceWeight3EditPart.VISUAL_ID));
+		IParser parser = UrmlParserProvider.getParser(
+				UrmlElementTypes.GoalReference_4025,
+				view.getElement() != null ? view.getElement() : view,
+				UrmlVisualIDRegistry
+						.getType(GoalReferenceWeight3EditPart.VISUAL_ID));
 		if (parser != null) {
-			return parser.getPrintString(new EObjectAdapter(view.getElement() != null ? view.getElement() : view),
-				ParserOptions.NONE.intValue());
+			return parser.getPrintString(new EObjectAdapter(
+					view.getElement() != null ? view.getElement() : view),
+					ParserOptions.NONE.intValue());
 		} else {
-			UrmlDiagramEditorPlugin.getInstance().logError("Parser was not found for label " + 6021); //$NON-NLS-1$
+			UrmlDiagramEditorPlugin.getInstance().logError(
+					"Parser was not found for label " + 6021); //$NON-NLS-1$
 			return ""; //$NON-NLS-1$
 		}
 	}
@@ -781,14 +912,18 @@
 	 * @generated
 	 */
 	private String getRequirementImplementingServices_4005Text(View view) {
-		IParser parser = UrmlParserProvider.getParser(UrmlElementTypes.RequirementImplementingServices_4005, view
-			.getElement() != null ? view.getElement() : view, UrmlVisualIDRegistry
-			.getType(IsImplementedLabelEditPart.VISUAL_ID));
+		IParser parser = UrmlParserProvider.getParser(
+				UrmlElementTypes.RequirementImplementingServices_4005, view
+						.getElement() != null ? view.getElement() : view,
+				UrmlVisualIDRegistry
+						.getType(IsImplementedLabelEditPart.VISUAL_ID));
 		if (parser != null) {
-			return parser.getPrintString(new EObjectAdapter(view.getElement() != null ? view.getElement() : view),
-				ParserOptions.NONE.intValue());
+			return parser.getPrintString(new EObjectAdapter(
+					view.getElement() != null ? view.getElement() : view),
+					ParserOptions.NONE.intValue());
 		} else {
-			UrmlDiagramEditorPlugin.getInstance().logError("Parser was not found for label " + 6007); //$NON-NLS-1$
+			UrmlDiagramEditorPlugin.getInstance().logError(
+					"Parser was not found for label " + 6007); //$NON-NLS-1$
 			return ""; //$NON-NLS-1$
 		}
 	}
@@ -796,16 +931,21 @@
 	/**
 	 * @generated
 	 */
-	private String getNonFunctionalRequirementSubNonFunctionalRequirements_4043Text(View view) {
-		IParser parser = UrmlParserProvider.getParser(
-			UrmlElementTypes.NonFunctionalRequirementSubNonFunctionalRequirements_4043,
-			view.getElement() != null ? view.getElement() : view, UrmlVisualIDRegistry
-				.getType(IsRefinedLabel3EditPart.VISUAL_ID));
+	private String getNonFunctionalRequirementSubNonFunctionalRequirements_4043Text(
+			View view) {
+		IParser parser = UrmlParserProvider
+				.getParser(
+						UrmlElementTypes.NonFunctionalRequirementSubNonFunctionalRequirements_4043,
+						view.getElement() != null ? view.getElement() : view,
+						UrmlVisualIDRegistry
+								.getType(IsRefinedLabel3EditPart.VISUAL_ID));
 		if (parser != null) {
-			return parser.getPrintString(new EObjectAdapter(view.getElement() != null ? view.getElement() : view),
-				ParserOptions.NONE.intValue());
+			return parser.getPrintString(new EObjectAdapter(
+					view.getElement() != null ? view.getElement() : view),
+					ParserOptions.NONE.intValue());
 		} else {
-			UrmlDiagramEditorPlugin.getInstance().logError("Parser was not found for label " + 6043); //$NON-NLS-1$
+			UrmlDiagramEditorPlugin.getInstance().logError(
+					"Parser was not found for label " + 6043); //$NON-NLS-1$
 			return ""; //$NON-NLS-1$
 		}
 	}
@@ -813,15 +953,21 @@
 	/**
 	 * @generated
 	 */
-	private String getFunctionalRequirementSubFunctionalRequirements_4044Text(View view) {
-		IParser parser = UrmlParserProvider.getParser(
-			UrmlElementTypes.FunctionalRequirementSubFunctionalRequirements_4044, view.getElement() != null ? view
-				.getElement() : view, UrmlVisualIDRegistry.getType(IsRefinedLabel4EditPart.VISUAL_ID));
+	private String getFunctionalRequirementSubFunctionalRequirements_4044Text(
+			View view) {
+		IParser parser = UrmlParserProvider
+				.getParser(
+						UrmlElementTypes.FunctionalRequirementSubFunctionalRequirements_4044,
+						view.getElement() != null ? view.getElement() : view,
+						UrmlVisualIDRegistry
+								.getType(IsRefinedLabel4EditPart.VISUAL_ID));
 		if (parser != null) {
-			return parser.getPrintString(new EObjectAdapter(view.getElement() != null ? view.getElement() : view),
-				ParserOptions.NONE.intValue());
+			return parser.getPrintString(new EObjectAdapter(
+					view.getElement() != null ? view.getElement() : view),
+					ParserOptions.NONE.intValue());
 		} else {
-			UrmlDiagramEditorPlugin.getInstance().logError("Parser was not found for label " + 6044); //$NON-NLS-1$
+			UrmlDiagramEditorPlugin.getInstance().logError(
+					"Parser was not found for label " + 6044); //$NON-NLS-1$
 			return ""; //$NON-NLS-1$
 		}
 	}
@@ -830,14 +976,17 @@
 	 * @generated
 	 */
 	private String getMitigationMitigatedDangers_4012Text(View view) {
-		IParser parser = UrmlParserProvider.getParser(UrmlElementTypes.MitigationMitigatedDangers_4012, view
-			.getElement() != null ? view.getElement() : view, UrmlVisualIDRegistry
-			.getType(MitigatesLabelEditPart.VISUAL_ID));
+		IParser parser = UrmlParserProvider.getParser(
+				UrmlElementTypes.MitigationMitigatedDangers_4012,
+				view.getElement() != null ? view.getElement() : view,
+				UrmlVisualIDRegistry.getType(MitigatesLabelEditPart.VISUAL_ID));
 		if (parser != null) {
-			return parser.getPrintString(new EObjectAdapter(view.getElement() != null ? view.getElement() : view),
-				ParserOptions.NONE.intValue());
+			return parser.getPrintString(new EObjectAdapter(
+					view.getElement() != null ? view.getElement() : view),
+					ParserOptions.NONE.intValue());
 		} else {
-			UrmlDiagramEditorPlugin.getInstance().logError("Parser was not found for label " + 6009); //$NON-NLS-1$
+			UrmlDiagramEditorPlugin.getInstance().logError(
+					"Parser was not found for label " + 6009); //$NON-NLS-1$
 			return ""; //$NON-NLS-1$
 		}
 	}
@@ -846,14 +995,17 @@
 	 * @generated
 	 */
 	private String getDangerHarmedAssets_4013Text(View view) {
-		IParser parser = UrmlParserProvider.getParser(UrmlElementTypes.DangerHarmedAssets_4013,
-			view.getElement() != null ? view.getElement() : view, UrmlVisualIDRegistry
-				.getType(HarmsLabelEditPart.VISUAL_ID));
+		IParser parser = UrmlParserProvider.getParser(
+				UrmlElementTypes.DangerHarmedAssets_4013,
+				view.getElement() != null ? view.getElement() : view,
+				UrmlVisualIDRegistry.getType(HarmsLabelEditPart.VISUAL_ID));
 		if (parser != null) {
-			return parser.getPrintString(new EObjectAdapter(view.getElement() != null ? view.getElement() : view),
-				ParserOptions.NONE.intValue());
+			return parser.getPrintString(new EObjectAdapter(
+					view.getElement() != null ? view.getElement() : view),
+					ParserOptions.NONE.intValue());
 		} else {
-			UrmlDiagramEditorPlugin.getInstance().logError("Parser was not found for label " + 6010); //$NON-NLS-1$
+			UrmlDiagramEditorPlugin.getInstance().logError(
+					"Parser was not found for label " + 6010); //$NON-NLS-1$
 			return ""; //$NON-NLS-1$
 		}
 	}
@@ -862,14 +1014,17 @@
 	 * @generated
 	 */
 	private String getAssetTriggeredDangers_4017Text(View view) {
-		IParser parser = UrmlParserProvider.getParser(UrmlElementTypes.AssetTriggeredDangers_4017,
-			view.getElement() != null ? view.getElement() : view, UrmlVisualIDRegistry
-				.getType(TriggersLabelEditPart.VISUAL_ID));
+		IParser parser = UrmlParserProvider.getParser(
+				UrmlElementTypes.AssetTriggeredDangers_4017,
+				view.getElement() != null ? view.getElement() : view,
+				UrmlVisualIDRegistry.getType(TriggersLabelEditPart.VISUAL_ID));
 		if (parser != null) {
-			return parser.getPrintString(new EObjectAdapter(view.getElement() != null ? view.getElement() : view),
-				ParserOptions.NONE.intValue());
+			return parser.getPrintString(new EObjectAdapter(
+					view.getElement() != null ? view.getElement() : view),
+					ParserOptions.NONE.intValue());
 		} else {
-			UrmlDiagramEditorPlugin.getInstance().logError("Parser was not found for label " + 6012); //$NON-NLS-1$
+			UrmlDiagramEditorPlugin.getInstance().logError(
+					"Parser was not found for label " + 6012); //$NON-NLS-1$
 			return ""; //$NON-NLS-1$
 		}
 	}
@@ -878,14 +1033,18 @@
 	 * @generated
 	 */
 	private String getServiceSubServices_4022Text(View view) {
-		IParser parser = UrmlParserProvider.getParser(UrmlElementTypes.ServiceSubServices_4022,
-			view.getElement() != null ? view.getElement() : view, UrmlVisualIDRegistry
-				.getType(MotivatesLabel2EditPart.VISUAL_ID));
+		IParser parser = UrmlParserProvider
+				.getParser(UrmlElementTypes.ServiceSubServices_4022, view
+						.getElement() != null ? view.getElement() : view,
+						UrmlVisualIDRegistry
+								.getType(MotivatesLabel2EditPart.VISUAL_ID));
 		if (parser != null) {
-			return parser.getPrintString(new EObjectAdapter(view.getElement() != null ? view.getElement() : view),
-				ParserOptions.NONE.intValue());
+			return parser.getPrintString(new EObjectAdapter(
+					view.getElement() != null ? view.getElement() : view),
+					ParserOptions.NONE.intValue());
 		} else {
-			UrmlDiagramEditorPlugin.getInstance().logError("Parser was not found for label " + 6018); //$NON-NLS-1$
+			UrmlDiagramEditorPlugin.getInstance().logError(
+					"Parser was not found for label " + 6018); //$NON-NLS-1$
 			return ""; //$NON-NLS-1$
 		}
 	}
@@ -894,14 +1053,17 @@
 	 * @generated
 	 */
 	private String getVariationPointOptionalSubFeatures_4046Text(View view) {
-		IParser parser = UrmlParserProvider.getParser(UrmlElementTypes.VariationPointOptionalSubFeatures_4046, view
-			.getElement() != null ? view.getElement() : view, UrmlVisualIDRegistry
-			.getType(SuggestsLabelEditPart.VISUAL_ID));
+		IParser parser = UrmlParserProvider.getParser(
+				UrmlElementTypes.VariationPointOptionalSubFeatures_4046,
+				view.getElement() != null ? view.getElement() : view,
+				UrmlVisualIDRegistry.getType(SuggestsLabelEditPart.VISUAL_ID));
 		if (parser != null) {
-			return parser.getPrintString(new EObjectAdapter(view.getElement() != null ? view.getElement() : view),
-				ParserOptions.NONE.intValue());
+			return parser.getPrintString(new EObjectAdapter(
+					view.getElement() != null ? view.getElement() : view),
+					ParserOptions.NONE.intValue());
 		} else {
-			UrmlDiagramEditorPlugin.getInstance().logError("Parser was not found for label " + 6046); //$NON-NLS-1$
+			UrmlDiagramEditorPlugin.getInstance().logError(
+					"Parser was not found for label " + 6046); //$NON-NLS-1$
 			return ""; //$NON-NLS-1$
 		}
 	}
@@ -910,14 +1072,18 @@
 	 * @generated
 	 */
 	private String getVariationPointInstanceVariationPoint_4033Text(View view) {
-		IParser parser = UrmlParserProvider.getParser(UrmlElementTypes.VariationPointInstanceVariationPoint_4033, view
-			.getElement() != null ? view.getElement() : view, UrmlVisualIDRegistry
-			.getType(InstantiateLabelEditPart.VISUAL_ID));
+		IParser parser = UrmlParserProvider.getParser(
+				UrmlElementTypes.VariationPointInstanceVariationPoint_4033,
+				view.getElement() != null ? view.getElement() : view,
+				UrmlVisualIDRegistry
+						.getType(InstantiateLabelEditPart.VISUAL_ID));
 		if (parser != null) {
-			return parser.getPrintString(new EObjectAdapter(view.getElement() != null ? view.getElement() : view),
-				ParserOptions.NONE.intValue());
+			return parser.getPrintString(new EObjectAdapter(
+					view.getElement() != null ? view.getElement() : view),
+					ParserOptions.NONE.intValue());
 		} else {
-			UrmlDiagramEditorPlugin.getInstance().logError("Parser was not found for label " + 6033); //$NON-NLS-1$
+			UrmlDiagramEditorPlugin.getInstance().logError(
+					"Parser was not found for label " + 6033); //$NON-NLS-1$
 			return ""; //$NON-NLS-1$
 		}
 	}
@@ -926,14 +1092,17 @@
 	 * @generated
 	 */
 	private String getVariationPointInstanceSelectedFeatures_4040Text(View view) {
-		IParser parser = UrmlParserProvider.getParser(UrmlElementTypes.VariationPointInstanceSelectedFeatures_4040,
-			view.getElement() != null ? view.getElement() : view, UrmlVisualIDRegistry
-				.getType(SelectLabelEditPart.VISUAL_ID));
+		IParser parser = UrmlParserProvider.getParser(
+				UrmlElementTypes.VariationPointInstanceSelectedFeatures_4040,
+				view.getElement() != null ? view.getElement() : view,
+				UrmlVisualIDRegistry.getType(SelectLabelEditPart.VISUAL_ID));
 		if (parser != null) {
-			return parser.getPrintString(new EObjectAdapter(view.getElement() != null ? view.getElement() : view),
-				ParserOptions.NONE.intValue());
+			return parser.getPrintString(new EObjectAdapter(
+					view.getElement() != null ? view.getElement() : view),
+					ParserOptions.NONE.intValue());
 		} else {
-			UrmlDiagramEditorPlugin.getInstance().logError("Parser was not found for label " + 6040); //$NON-NLS-1$
+			UrmlDiagramEditorPlugin.getInstance().logError(
+					"Parser was not found for label " + 6040); //$NON-NLS-1$
 			return ""; //$NON-NLS-1$
 		}
 	}
@@ -942,14 +1111,17 @@
 	 * @generated
 	 */
 	private String getProductVariationPointInstances_4032Text(View view) {
-		IParser parser = UrmlParserProvider.getParser(UrmlElementTypes.ProductVariationPointInstances_4032, view
-			.getElement() != null ? view.getElement() : view, UrmlVisualIDRegistry
-			.getType(CombineLabelEditPart.VISUAL_ID));
+		IParser parser = UrmlParserProvider.getParser(
+				UrmlElementTypes.ProductVariationPointInstances_4032,
+				view.getElement() != null ? view.getElement() : view,
+				UrmlVisualIDRegistry.getType(CombineLabelEditPart.VISUAL_ID));
 		if (parser != null) {
-			return parser.getPrintString(new EObjectAdapter(view.getElement() != null ? view.getElement() : view),
-				ParserOptions.NONE.intValue());
+			return parser.getPrintString(new EObjectAdapter(
+					view.getElement() != null ? view.getElement() : view),
+					ParserOptions.NONE.intValue());
 		} else {
-			UrmlDiagramEditorPlugin.getInstance().logError("Parser was not found for label " + 6032); //$NON-NLS-1$
+			UrmlDiagramEditorPlugin.getInstance().logError(
+					"Parser was not found for label " + 6032); //$NON-NLS-1$
 			return ""; //$NON-NLS-1$
 		}
 	}
@@ -958,14 +1130,18 @@
 	 * @generated
 	 */
 	private String getProductFeatures_4047Text(View view) {
-		IParser parser = UrmlParserProvider.getParser(UrmlElementTypes.ProductFeatures_4047,
-			view.getElement() != null ? view.getElement() : view, UrmlVisualIDRegistry
-				.getType(ConsistsOfLabelEditPart.VISUAL_ID));
+		IParser parser = UrmlParserProvider
+				.getParser(UrmlElementTypes.ProductFeatures_4047, view
+						.getElement() != null ? view.getElement() : view,
+						UrmlVisualIDRegistry
+								.getType(ConsistsOfLabelEditPart.VISUAL_ID));
 		if (parser != null) {
-			return parser.getPrintString(new EObjectAdapter(view.getElement() != null ? view.getElement() : view),
-				ParserOptions.NONE.intValue());
+			return parser.getPrintString(new EObjectAdapter(
+					view.getElement() != null ? view.getElement() : view),
+					ParserOptions.NONE.intValue());
 		} else {
-			UrmlDiagramEditorPlugin.getInstance().logError("Parser was not found for label " + 6047); //$NON-NLS-1$
+			UrmlDiagramEditorPlugin.getInstance().logError(
+					"Parser was not found for label " + 6047); //$NON-NLS-1$
 			return ""; //$NON-NLS-1$
 		}
 	}
@@ -1013,7 +1189,8 @@
 	 * @generated
 	 */
 	private boolean isOwnView(View view) {
-		return URMLDiagramEditPart.MODEL_ID.equals(UrmlVisualIDRegistry.getModelID(view));
+		return URMLDiagramEditPart.MODEL_ID.equals(UrmlVisualIDRegistry
+				.getModelID(view));
 	}
 
 }
Index: src/org/unicase/ui/diagram/urml/navigator/UrmlAbstractNavigatorItem.java
===================================================================
--- src/org/unicase/ui/diagram/urml/navigator/UrmlAbstractNavigatorItem.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/navigator/UrmlAbstractNavigatorItem.java	(working copy)
@@ -20,20 +20,23 @@
 				return "org.unicase.ui.diagram.urmlDiagram"; //$NON-NLS-1$
 			}
 		};
-		Platform.getAdapterManager().registerAdapters(new IAdapterFactory() {
+		Platform.getAdapterManager().registerAdapters(
+				new IAdapterFactory() {
 
-			public Object getAdapter(Object adaptableObject, Class adapterType) {
-				if (adaptableObject instanceof org.unicase.ui.diagram.urml.navigator.UrmlAbstractNavigatorItem
-					&& adapterType == ITabbedPropertySheetPageContributor.class) {
-					return propertySheetPageContributor;
-				}
-				return null;
-			}
+					public Object getAdapter(Object adaptableObject,
+							Class adapterType) {
+						if (adaptableObject instanceof org.unicase.ui.diagram.urml.navigator.UrmlAbstractNavigatorItem
+								&& adapterType == ITabbedPropertySheetPageContributor.class) {
+							return propertySheetPageContributor;
+						}
+						return null;
+					}
 
-			public Class[] getAdapterList() {
-				return supportedTypes;
-			}
-		}, org.unicase.ui.diagram.urml.navigator.UrmlAbstractNavigatorItem.class);
+					public Class[] getAdapterList() {
+						return supportedTypes;
+					}
+				},
+				org.unicase.ui.diagram.urml.navigator.UrmlAbstractNavigatorItem.class);
 	}
 
 	/**
Index: src/org/unicase/ui/diagram/urml/navigator/UrmlDomainNavigatorLabelProvider.java
===================================================================
--- src/org/unicase/ui/diagram/urml/navigator/UrmlDomainNavigatorLabelProvider.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/navigator/UrmlDomainNavigatorLabelProvider.java	(working copy)
@@ -17,7 +17,8 @@
 	 * @generated
 	 */
 	private AdapterFactoryLabelProvider myAdapterFactoryLabelProvider = new AdapterFactoryLabelProvider(
-		UrmlDiagramEditorPlugin.getInstance().getItemProvidersAdapterFactory());
+			UrmlDiagramEditorPlugin.getInstance()
+					.getItemProvidersAdapterFactory());
 
 	/**
 	 * @generated
@@ -30,7 +31,8 @@
 	 */
 	public Image getImage(Object element) {
 		if (element instanceof UrmlDomainNavigatorItem) {
-			return myAdapterFactoryLabelProvider.getImage(((UrmlDomainNavigatorItem) element).getEObject());
+			return myAdapterFactoryLabelProvider
+					.getImage(((UrmlDomainNavigatorItem) element).getEObject());
 		}
 		return null;
 	}
@@ -40,7 +42,8 @@
 	 */
 	public String getText(Object element) {
 		if (element instanceof UrmlDomainNavigatorItem) {
-			return myAdapterFactoryLabelProvider.getText(((UrmlDomainNavigatorItem) element).getEObject());
+			return myAdapterFactoryLabelProvider
+					.getText(((UrmlDomainNavigatorItem) element).getEObject());
 		}
 		return null;
 	}
Index: src/org/unicase/ui/diagram/urml/navigator/UrmlDomainNavigatorContentProvider.java
===================================================================
--- src/org/unicase/ui/diagram/urml/navigator/UrmlDomainNavigatorContentProvider.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/navigator/UrmlDomainNavigatorContentProvider.java	(working copy)
@@ -23,7 +23,8 @@
 /**
  * @generated
  */
-public class UrmlDomainNavigatorContentProvider implements ICommonContentProvider {
+public class UrmlDomainNavigatorContentProvider implements
+		ICommonContentProvider {
 
 	/**
 	 * @generated
@@ -59,9 +60,11 @@
 	 * @generated
 	 */
 	public UrmlDomainNavigatorContentProvider() {
-		myAdapterFctoryContentProvier = new AdapterFactoryContentProvider(UrmlDiagramEditorPlugin.getInstance()
-			.getItemProvidersAdapterFactory());
-		TransactionalEditingDomain editingDomain = GMFEditingDomainFactory.INSTANCE.createEditingDomain();
+		myAdapterFctoryContentProvier = new AdapterFactoryContentProvider(
+				UrmlDiagramEditorPlugin.getInstance()
+						.getItemProvidersAdapterFactory());
+		TransactionalEditingDomain editingDomain = GMFEditingDomainFactory.INSTANCE
+				.createEditingDomain();
 		myEditingDomain = (AdapterFactoryEditingDomain) editingDomain;
 		myEditingDomain.setResourceToReadOnlyMap(new HashMap() {
 			public Object get(Object key) {
@@ -78,43 +81,30 @@
 				}
 			}
 		};
-		myWorkspaceSynchronizer = new WorkspaceSynchronizer(editingDomain, new WorkspaceSynchronizer.Delegate() {
-			public void dispose() {
-			}
+		myWorkspaceSynchronizer = new WorkspaceSynchronizer(editingDomain,
+				new WorkspaceSynchronizer.Delegate() {
+					public void dispose() {
+					}
 
-			public boolean handleResourceChanged(final Resource resource) {
-				for (Iterator it = myEditingDomain.getResourceSet().getResources().iterator(); it.hasNext();) {
-					Resource nextResource = (Resource) it.next();
-					nextResource.unload();
-				}
-				if (myViewer != null) {
-					myViewer.getControl().getDisplay().asyncExec(myViewerRefreshRunnable);
-				}
-				return true;
-			}
+					public boolean handleResourceChanged(final Resource resource) {
+						unloadAllResources();
+						asyncRefresh();
+						return true;
+					}
 
-			public boolean handleResourceDeleted(Resource resource) {
-				for (Iterator it = myEditingDomain.getResourceSet().getResources().iterator(); it.hasNext();) {
-					Resource nextResource = (Resource) it.next();
-					nextResource.unload();
-				}
-				if (myViewer != null) {
-					myViewer.getControl().getDisplay().asyncExec(myViewerRefreshRunnable);
-				}
-				return true;
-			}
+					public boolean handleResourceDeleted(Resource resource) {
+						unloadAllResources();
+						asyncRefresh();
+						return true;
+					}
 
-			public boolean handleResourceMoved(Resource resource, final URI newURI) {
-				for (Iterator it = myEditingDomain.getResourceSet().getResources().iterator(); it.hasNext();) {
-					Resource nextResource = (Resource) it.next();
-					nextResource.unload();
-				}
-				if (myViewer != null) {
-					myViewer.getControl().getDisplay().asyncExec(myViewerRefreshRunnable);
-				}
-				return true;
-			}
-		});
+					public boolean handleResourceMoved(Resource resource,
+							final URI newURI) {
+						unloadAllResources();
+						asyncRefresh();
+						return true;
+					}
+				});
 	}
 
 	/**
@@ -124,10 +114,8 @@
 		myWorkspaceSynchronizer.dispose();
 		myWorkspaceSynchronizer = null;
 		myViewerRefreshRunnable = null;
-		for (Iterator it = myEditingDomain.getResourceSet().getResources().iterator(); it.hasNext();) {
-			Resource resource = (Resource) it.next();
-			resource.unload();
-		}
+		myViewer = null;
+		unloadAllResources();
 		((TransactionalEditingDomain) myEditingDomain).dispose();
 		myEditingDomain = null;
 	}
@@ -142,6 +130,26 @@
 	/**
 	 * @generated
 	 */
+	void unloadAllResources() {
+		for (Resource nextResource : myEditingDomain.getResourceSet()
+				.getResources()) {
+			nextResource.unload();
+		}
+	}
+
+	/**
+	 * @generated
+	 */
+	void asyncRefresh() {
+		if (myViewer != null && !myViewer.getControl().isDisposed()) {
+			myViewer.getControl().getDisplay()
+					.asyncExec(myViewerRefreshRunnable);
+		}
+	}
+
+	/**
+	 * @generated
+	 */
 	public Object[] getElements(Object inputElement) {
 		return getChildren(inputElement);
 	}
@@ -170,14 +178,19 @@
 	public Object[] getChildren(Object parentElement) {
 		if (parentElement instanceof IFile) {
 			IFile file = (IFile) parentElement;
-			URI fileURI = URI.createPlatformResourceURI(file.getFullPath().toString(), true);
-			Resource resource = myEditingDomain.getResourceSet().getResource(fileURI, true);
-			return wrapEObjects(myAdapterFctoryContentProvier.getChildren(resource), parentElement);
+			URI fileURI = URI.createPlatformResourceURI(file.getFullPath()
+					.toString(), true);
+			Resource resource = myEditingDomain.getResourceSet().getResource(
+					fileURI, true);
+			return wrapEObjects(
+					myAdapterFctoryContentProvier.getChildren(resource),
+					parentElement);
 		}
 
 		if (parentElement instanceof UrmlDomainNavigatorItem) {
-			return wrapEObjects(myAdapterFctoryContentProvier.getChildren(((UrmlDomainNavigatorItem) parentElement)
-				.getEObject()), parentElement);
+			return wrapEObjects(
+					myAdapterFctoryContentProvier.getChildren(((UrmlDomainNavigatorItem) parentElement)
+							.getEObject()), parentElement);
 		}
 		return EMPTY_ARRAY;
 	}
@@ -189,8 +202,8 @@
 		Collection result = new ArrayList();
 		for (int i = 0; i < objects.length; i++) {
 			if (objects[i] instanceof EObject) {
-				result.add(new UrmlDomainNavigatorItem((EObject) objects[i], parentElement,
-					myAdapterFctoryContentProvier));
+				result.add(new UrmlDomainNavigatorItem((EObject) objects[i],
+						parentElement, myAdapterFctoryContentProvier));
 			}
 		}
 		return result.toArray();
Index: src/org/unicase/ui/diagram/urml/navigator/UrmlNavigatorContentProvider.java
===================================================================
--- src/org/unicase/ui/diagram/urml/navigator/UrmlNavigatorContentProvider.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/navigator/UrmlNavigatorContentProvider.java	(working copy)
@@ -6,8 +6,10 @@
 import java.util.HashMap;
 import java.util.Iterator;
 
+import java.util.LinkedList;
 import org.eclipse.core.resources.IFile;
 import org.eclipse.emf.common.util.URI;
+import org.eclipse.emf.ecore.EObject;
 import org.eclipse.emf.ecore.resource.Resource;
 import org.eclipse.emf.edit.domain.AdapterFactoryEditingDomain;
 import org.eclipse.emf.transaction.TransactionalEditingDomain;
@@ -15,6 +17,7 @@
 import org.eclipse.gmf.runtime.emf.core.GMFEditingDomainFactory;
 import org.eclipse.gmf.runtime.notation.Diagram;
 import org.eclipse.gmf.runtime.notation.Edge;
+import org.eclipse.gmf.runtime.notation.Node;
 import org.eclipse.gmf.runtime.notation.View;
 import org.eclipse.jface.viewers.Viewer;
 import org.eclipse.ui.IMemento;
@@ -52,6 +55,7 @@
 import org.unicase.ui.diagram.urml.edit.parts.StakeholderEditPart;
 import org.unicase.ui.diagram.urml.edit.parts.StakeholderGoalsEditPart;
 import org.unicase.ui.diagram.urml.edit.parts.URMLDiagramEditPart;
+import org.unicase.ui.diagram.urml.edit.parts.UrmlModelElementAssociationsEditPart;
 import org.unicase.ui.diagram.urml.edit.parts.VariationPointEditPart;
 import org.unicase.ui.diagram.urml.edit.parts.VariationPointInstanceEditPart;
 import org.unicase.ui.diagram.urml.edit.parts.VariationPointInstanceSelectedFeaturesEditPart;
@@ -93,8 +97,10 @@
 	/**
 	 * @generated
 	 */
+	@SuppressWarnings({ "unchecked", "serial", "rawtypes" })
 	public UrmlNavigatorContentProvider() {
-		TransactionalEditingDomain editingDomain = GMFEditingDomainFactory.INSTANCE.createEditingDomain();
+		TransactionalEditingDomain editingDomain = GMFEditingDomainFactory.INSTANCE
+				.createEditingDomain();
 		myEditingDomain = (AdapterFactoryEditingDomain) editingDomain;
 		myEditingDomain.setResourceToReadOnlyMap(new HashMap() {
 			public Object get(Object key) {
@@ -111,43 +117,30 @@
 				}
 			}
 		};
-		myWorkspaceSynchronizer = new WorkspaceSynchronizer(editingDomain, new WorkspaceSynchronizer.Delegate() {
-			public void dispose() {
-			}
+		myWorkspaceSynchronizer = new WorkspaceSynchronizer(editingDomain,
+				new WorkspaceSynchronizer.Delegate() {
+					public void dispose() {
+					}
 
-			public boolean handleResourceChanged(final Resource resource) {
-				for (Iterator it = myEditingDomain.getResourceSet().getResources().iterator(); it.hasNext();) {
-					Resource nextResource = (Resource) it.next();
-					nextResource.unload();
-				}
-				if (myViewer != null) {
-					myViewer.getControl().getDisplay().asyncExec(myViewerRefreshRunnable);
-				}
-				return true;
-			}
+					public boolean handleResourceChanged(final Resource resource) {
+						unloadAllResources();
+						asyncRefresh();
+						return true;
+					}
 
-			public boolean handleResourceDeleted(Resource resource) {
-				for (Iterator it = myEditingDomain.getResourceSet().getResources().iterator(); it.hasNext();) {
-					Resource nextResource = (Resource) it.next();
-					nextResource.unload();
-				}
-				if (myViewer != null) {
-					myViewer.getControl().getDisplay().asyncExec(myViewerRefreshRunnable);
-				}
-				return true;
-			}
+					public boolean handleResourceDeleted(Resource resource) {
+						unloadAllResources();
+						asyncRefresh();
+						return true;
+					}
 
-			public boolean handleResourceMoved(Resource resource, final URI newURI) {
-				for (Iterator it = myEditingDomain.getResourceSet().getResources().iterator(); it.hasNext();) {
-					Resource nextResource = (Resource) it.next();
-					nextResource.unload();
-				}
-				if (myViewer != null) {
-					myViewer.getControl().getDisplay().asyncExec(myViewerRefreshRunnable);
-				}
-				return true;
-			}
-		});
+					public boolean handleResourceMoved(Resource resource,
+							final URI newURI) {
+						unloadAllResources();
+						asyncRefresh();
+						return true;
+					}
+				});
 	}
 
 	/**
@@ -157,10 +150,8 @@
 		myWorkspaceSynchronizer.dispose();
 		myWorkspaceSynchronizer = null;
 		myViewerRefreshRunnable = null;
-		for (Iterator it = myEditingDomain.getResourceSet().getResources().iterator(); it.hasNext();) {
-			Resource resource = (Resource) it.next();
-			resource.unload();
-		}
+		myViewer = null;
+		unloadAllResources();
 		((TransactionalEditingDomain) myEditingDomain).dispose();
 		myEditingDomain = null;
 	}
@@ -175,6 +166,26 @@
 	/**
 	 * @generated
 	 */
+	void unloadAllResources() {
+		for (Resource nextResource : myEditingDomain.getResourceSet()
+				.getResources()) {
+			nextResource.unload();
+		}
+	}
+
+	/**
+	 * @generated
+	 */
+	void asyncRefresh() {
+		if (myViewer != null && !myViewer.getControl().isDisposed()) {
+			myViewer.getControl().getDisplay()
+					.asyncExec(myViewerRefreshRunnable);
+		}
+	}
+
+	/**
+	 * @generated
+	 */
 	public Object[] getElements(Object inputElement) {
 		return getChildren(inputElement);
 	}
@@ -203,11 +214,21 @@
 	public Object[] getChildren(Object parentElement) {
 		if (parentElement instanceof IFile) {
 			IFile file = (IFile) parentElement;
-			URI fileURI = URI.createPlatformResourceURI(file.getFullPath().toString(), true);
-			Resource resource = myEditingDomain.getResourceSet().getResource(fileURI, true);
-			Collection result = new ArrayList();
-			result.addAll(createNavigatorItems(selectViewsByType(resource.getContents(), URMLDiagramEditPart.MODEL_ID),
-				file, false));
+			URI fileURI = URI.createPlatformResourceURI(file.getFullPath()
+					.toString(), true);
+			Resource resource = myEditingDomain.getResourceSet().getResource(
+					fileURI, true);
+			ArrayList<UrmlNavigatorItem> result = new ArrayList<UrmlNavigatorItem>();
+			ArrayList<View> topViews = new ArrayList<View>(resource
+					.getContents().size());
+			for (EObject o : resource.getContents()) {
+				if (o instanceof View) {
+					topViews.add((View) o);
+				}
+			}
+			result.addAll(createNavigatorItems(
+					selectViewsByType(topViews, URMLDiagramEditPart.MODEL_ID),
+					file, false));
 			return result.toArray();
 		}
 
@@ -233,182 +254,98 @@
 	private Object[] getViewChildren(View view, Object parentElement) {
 		switch (UrmlVisualIDRegistry.getVisualID(view)) {
 
-		case URMLDiagramEditPart.VISUAL_ID: {
-			Collection result = new ArrayList();
-			UrmlNavigatorGroup links = new UrmlNavigatorGroup(Messages.NavigatorGroupName_URMLDiagram_1000_links,
-				"icons/linksNavigatorGroup.gif", parentElement); //$NON-NLS-1$
-			Collection connectedViews = getChildrenByType(Collections.singleton(view), UrmlVisualIDRegistry
-				.getType(StakeholderEditPart.VISUAL_ID));
-			result.addAll(createNavigatorItems(connectedViews, parentElement, false));
-			connectedViews = getChildrenByType(Collections.singleton(view), UrmlVisualIDRegistry
-				.getType(GoalEditPart.VISUAL_ID));
-			result.addAll(createNavigatorItems(connectedViews, parentElement, false));
-			connectedViews = getChildrenByType(Collections.singleton(view), UrmlVisualIDRegistry
-				.getType(FunctionalRequirementEditPart.VISUAL_ID));
-			result.addAll(createNavigatorItems(connectedViews, parentElement, false));
-			connectedViews = getChildrenByType(Collections.singleton(view), UrmlVisualIDRegistry
-				.getType(FeatureEditPart.VISUAL_ID));
-			result.addAll(createNavigatorItems(connectedViews, parentElement, false));
-			connectedViews = getChildrenByType(Collections.singleton(view), UrmlVisualIDRegistry
-				.getType(ServiceEditPart.VISUAL_ID));
-			result.addAll(createNavigatorItems(connectedViews, parentElement, false));
-			connectedViews = getChildrenByType(Collections.singleton(view), UrmlVisualIDRegistry
-				.getType(NonFunctionalRequirementEditPart.VISUAL_ID));
-			result.addAll(createNavigatorItems(connectedViews, parentElement, false));
-			connectedViews = getChildrenByType(Collections.singleton(view), UrmlVisualIDRegistry
-				.getType(DangerEditPart.VISUAL_ID));
-			result.addAll(createNavigatorItems(connectedViews, parentElement, false));
-			connectedViews = getChildrenByType(Collections.singleton(view), UrmlVisualIDRegistry
-				.getType(ActorEditPart.VISUAL_ID));
-			result.addAll(createNavigatorItems(connectedViews, parentElement, false));
-			connectedViews = getChildrenByType(Collections.singleton(view), UrmlVisualIDRegistry
-				.getType(ProceduralMitigationEditPart.VISUAL_ID));
-			result.addAll(createNavigatorItems(connectedViews, parentElement, false));
-			connectedViews = getChildrenByType(Collections.singleton(view), UrmlVisualIDRegistry
-				.getType(VariationPointEditPart.VISUAL_ID));
-			result.addAll(createNavigatorItems(connectedViews, parentElement, false));
-			connectedViews = getChildrenByType(Collections.singleton(view), UrmlVisualIDRegistry
-				.getType(VariationPointInstanceEditPart.VISUAL_ID));
-			result.addAll(createNavigatorItems(connectedViews, parentElement, false));
-			connectedViews = getChildrenByType(Collections.singleton(view), UrmlVisualIDRegistry
-				.getType(ProductEditPart.VISUAL_ID));
-			result.addAll(createNavigatorItems(connectedViews, parentElement, false));
-			connectedViews = getDiagramLinksByType(Collections.singleton(view), UrmlVisualIDRegistry
-				.getType(StakeholderGoalsEditPart.VISUAL_ID));
-			links.addChildren(createNavigatorItems(connectedViews, links, false));
-			connectedViews = getDiagramLinksByType(Collections.singleton(view), UrmlVisualIDRegistry
-				.getType(AbstractFeatureSubFeaturesEditPart.VISUAL_ID));
-			links.addChildren(createNavigatorItems(connectedViews, links, false));
-			connectedViews = getDiagramLinksByType(Collections.singleton(view), UrmlVisualIDRegistry
-				.getType(AbstractFeatureDetailingFunctionalRequirementsEditPart.VISUAL_ID));
-			links.addChildren(createNavigatorItems(connectedViews, links, false));
-			connectedViews = getDiagramLinksByType(Collections.singleton(view), UrmlVisualIDRegistry
-				.getType(AbstractFeatureConstrainingNonFunctionalRequirementsEditPart.VISUAL_ID));
-			links.addChildren(createNavigatorItems(connectedViews, links, false));
-			connectedViews = getDiagramLinksByType(Collections.singleton(view), UrmlVisualIDRegistry
-				.getType(AbstractFeatureRequiredFeaturesEditPart.VISUAL_ID));
-			links.addChildren(createNavigatorItems(connectedViews, links, false));
-			connectedViews = getDiagramLinksByType(Collections.singleton(view), UrmlVisualIDRegistry
-				.getType(AbstractFeatureExcludedFeaturesEditPart.VISUAL_ID));
-			links.addChildren(createNavigatorItems(connectedViews, links, false));
-			connectedViews = getDiagramLinksByType(Collections.singleton(view), UrmlVisualIDRegistry
-				.getType(GoalRealizedFeaturesEditPart.VISUAL_ID));
-			links.addChildren(createNavigatorItems(connectedViews, links, false));
-			connectedViews = getDiagramLinksByType(Collections.singleton(view), UrmlVisualIDRegistry
-				.getType(GoalSubGoalsEditPart.VISUAL_ID));
-			links.addChildren(createNavigatorItems(connectedViews, links, false));
-			connectedViews = getDiagramLinksByType(Collections.singleton(view), UrmlVisualIDRegistry
-				.getType(GoalReferenceEditPart.VISUAL_ID));
-			links.addChildren(createNavigatorItems(connectedViews, links, false));
-			connectedViews = getDiagramLinksByType(Collections.singleton(view), UrmlVisualIDRegistry
-				.getType(GoalReference2EditPart.VISUAL_ID));
-			links.addChildren(createNavigatorItems(connectedViews, links, false));
-			connectedViews = getDiagramLinksByType(Collections.singleton(view), UrmlVisualIDRegistry
-				.getType(GoalReference3EditPart.VISUAL_ID));
-			links.addChildren(createNavigatorItems(connectedViews, links, false));
-			connectedViews = getDiagramLinksByType(Collections.singleton(view), UrmlVisualIDRegistry
-				.getType(GoalReference4EditPart.VISUAL_ID));
-			links.addChildren(createNavigatorItems(connectedViews, links, false));
-			connectedViews = getDiagramLinksByType(Collections.singleton(view), UrmlVisualIDRegistry
-				.getType(RequirementImplementingServicesEditPart.VISUAL_ID));
-			links.addChildren(createNavigatorItems(connectedViews, links, false));
-			connectedViews = getDiagramLinksByType(Collections.singleton(view), UrmlVisualIDRegistry
-				.getType(NonFunctionalRequirementSubNonFunctionalRequirementsEditPart.VISUAL_ID));
-			links.addChildren(createNavigatorItems(connectedViews, links, false));
-			connectedViews = getDiagramLinksByType(Collections.singleton(view), UrmlVisualIDRegistry
-				.getType(FunctionalRequirementSubFunctionalRequirementsEditPart.VISUAL_ID));
-			links.addChildren(createNavigatorItems(connectedViews, links, false));
-			connectedViews = getDiagramLinksByType(Collections.singleton(view), UrmlVisualIDRegistry
-				.getType(MitigationMitigatedDangersEditPart.VISUAL_ID));
-			links.addChildren(createNavigatorItems(connectedViews, links, false));
-			connectedViews = getDiagramLinksByType(Collections.singleton(view), UrmlVisualIDRegistry
-				.getType(DangerHarmedAssetsEditPart.VISUAL_ID));
-			links.addChildren(createNavigatorItems(connectedViews, links, false));
-			connectedViews = getDiagramLinksByType(Collections.singleton(view), UrmlVisualIDRegistry
-				.getType(AssetTriggeredDangersEditPart.VISUAL_ID));
-			links.addChildren(createNavigatorItems(connectedViews, links, false));
-			connectedViews = getDiagramLinksByType(Collections.singleton(view), UrmlVisualIDRegistry
-				.getType(ServiceSubServicesEditPart.VISUAL_ID));
-			links.addChildren(createNavigatorItems(connectedViews, links, false));
-			connectedViews = getDiagramLinksByType(Collections.singleton(view), UrmlVisualIDRegistry
-				.getType(VariationPointOptionalSubFeaturesEditPart.VISUAL_ID));
-			links.addChildren(createNavigatorItems(connectedViews, links, false));
-			connectedViews = getDiagramLinksByType(Collections.singleton(view), UrmlVisualIDRegistry
-				.getType(VariationPointInstanceVariationPointEditPart.VISUAL_ID));
-			links.addChildren(createNavigatorItems(connectedViews, links, false));
-			connectedViews = getDiagramLinksByType(Collections.singleton(view), UrmlVisualIDRegistry
-				.getType(VariationPointInstanceSelectedFeaturesEditPart.VISUAL_ID));
-			links.addChildren(createNavigatorItems(connectedViews, links, false));
-			connectedViews = getDiagramLinksByType(Collections.singleton(view), UrmlVisualIDRegistry
-				.getType(ProductVariationPointInstancesEditPart.VISUAL_ID));
-			links.addChildren(createNavigatorItems(connectedViews, links, false));
-			connectedViews = getDiagramLinksByType(Collections.singleton(view), UrmlVisualIDRegistry
-				.getType(ProductFeaturesEditPart.VISUAL_ID));
-			links.addChildren(createNavigatorItems(connectedViews, links, false));
-			if (!links.isEmpty()) {
-				result.add(links);
+		case GoalRealizedFeaturesEditPart.VISUAL_ID: {
+			LinkedList<UrmlAbstractNavigatorItem> result = new LinkedList<UrmlAbstractNavigatorItem>();
+			Edge sv = (Edge) view;
+			UrmlNavigatorGroup target = new UrmlNavigatorGroup(
+					Messages.NavigatorGroupName_GoalRealizedFeatures_4004_target,
+					"icons/linkTargetNavigatorGroup.gif", parentElement); //$NON-NLS-1$
+			UrmlNavigatorGroup source = new UrmlNavigatorGroup(
+					Messages.NavigatorGroupName_GoalRealizedFeatures_4004_source,
+					"icons/linkSourceNavigatorGroup.gif", parentElement); //$NON-NLS-1$
+			Collection<View> connectedViews;
+			connectedViews = getLinksTargetByType(Collections.singleton(sv),
+					UrmlVisualIDRegistry.getType(FeatureEditPart.VISUAL_ID));
+			target.addChildren(createNavigatorItems(connectedViews, target,
+					true));
+			connectedViews = getLinksTargetByType(Collections.singleton(sv),
+					UrmlVisualIDRegistry
+							.getType(VariationPointEditPart.VISUAL_ID));
+			target.addChildren(createNavigatorItems(connectedViews, target,
+					true));
+			connectedViews = getLinksSourceByType(Collections.singleton(sv),
+					UrmlVisualIDRegistry.getType(GoalEditPart.VISUAL_ID));
+			source.addChildren(createNavigatorItems(connectedViews, source,
+					true));
+			if (!target.isEmpty()) {
+				result.add(target);
+			}
+			if (!source.isEmpty()) {
+				result.add(source);
 			}
 			return result.toArray();
 		}
 
-		case StakeholderEditPart.VISUAL_ID: {
-			Collection result = new ArrayList();
-			UrmlNavigatorGroup outgoinglinks = new UrmlNavigatorGroup(
-				Messages.NavigatorGroupName_Stakeholder_2002_outgoinglinks,
-				"icons/outgoingLinksNavigatorGroup.gif", parentElement); //$NON-NLS-1$
-			Collection connectedViews = getOutgoingLinksByType(Collections.singleton(view), UrmlVisualIDRegistry
-				.getType(StakeholderGoalsEditPart.VISUAL_ID));
-			outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
-			if (!outgoinglinks.isEmpty()) {
-				result.add(outgoinglinks);
+		case ProductVariationPointInstancesEditPart.VISUAL_ID: {
+			LinkedList<UrmlAbstractNavigatorItem> result = new LinkedList<UrmlAbstractNavigatorItem>();
+			Edge sv = (Edge) view;
+			UrmlNavigatorGroup target = new UrmlNavigatorGroup(
+					Messages.NavigatorGroupName_ProductVariationPointInstances_4032_target,
+					"icons/linkTargetNavigatorGroup.gif", parentElement); //$NON-NLS-1$
+			UrmlNavigatorGroup source = new UrmlNavigatorGroup(
+					Messages.NavigatorGroupName_ProductVariationPointInstances_4032_source,
+					"icons/linkSourceNavigatorGroup.gif", parentElement); //$NON-NLS-1$
+			Collection<View> connectedViews;
+			connectedViews = getLinksTargetByType(Collections.singleton(sv),
+					UrmlVisualIDRegistry
+							.getType(VariationPointInstanceEditPart.VISUAL_ID));
+			target.addChildren(createNavigatorItems(connectedViews, target,
+					true));
+			connectedViews = getLinksSourceByType(Collections.singleton(sv),
+					UrmlVisualIDRegistry.getType(ProductEditPart.VISUAL_ID));
+			source.addChildren(createNavigatorItems(connectedViews, source,
+					true));
+			if (!target.isEmpty()) {
+				result.add(target);
+			}
+			if (!source.isEmpty()) {
+				result.add(source);
 			}
 			return result.toArray();
 		}
 
-		case GoalEditPart.VISUAL_ID: {
-			Collection result = new ArrayList();
+		case ActorEditPart.VISUAL_ID: {
+			LinkedList<UrmlAbstractNavigatorItem> result = new LinkedList<UrmlAbstractNavigatorItem>();
+			Node sv = (Node) view;
 			UrmlNavigatorGroup incominglinks = new UrmlNavigatorGroup(
-				Messages.NavigatorGroupName_Goal_2001_incominglinks,
-				"icons/incomingLinksNavigatorGroup.gif", parentElement); //$NON-NLS-1$
+					Messages.NavigatorGroupName_Actor_2010_incominglinks,
+					"icons/incomingLinksNavigatorGroup.gif", parentElement); //$NON-NLS-1$
 			UrmlNavigatorGroup outgoinglinks = new UrmlNavigatorGroup(
-				Messages.NavigatorGroupName_Goal_2001_outgoinglinks,
-				"icons/outgoingLinksNavigatorGroup.gif", parentElement); //$NON-NLS-1$
-			Collection connectedViews = getIncomingLinksByType(Collections.singleton(view), UrmlVisualIDRegistry
-				.getType(StakeholderGoalsEditPart.VISUAL_ID));
-			incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
-			connectedViews = getOutgoingLinksByType(Collections.singleton(view), UrmlVisualIDRegistry
-				.getType(GoalRealizedFeaturesEditPart.VISUAL_ID));
-			outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
-			connectedViews = getIncomingLinksByType(Collections.singleton(view), UrmlVisualIDRegistry
-				.getType(GoalSubGoalsEditPart.VISUAL_ID));
-			incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
-			connectedViews = getOutgoingLinksByType(Collections.singleton(view), UrmlVisualIDRegistry
-				.getType(GoalSubGoalsEditPart.VISUAL_ID));
-			outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
-			connectedViews = getIncomingLinksByType(Collections.singleton(view), UrmlVisualIDRegistry
-				.getType(GoalReferenceEditPart.VISUAL_ID));
-			incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
-			connectedViews = getOutgoingLinksByType(Collections.singleton(view), UrmlVisualIDRegistry
-				.getType(GoalReferenceEditPart.VISUAL_ID));
-			outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
-			connectedViews = getIncomingLinksByType(Collections.singleton(view), UrmlVisualIDRegistry
-				.getType(GoalReference2EditPart.VISUAL_ID));
-			incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
-			connectedViews = getOutgoingLinksByType(Collections.singleton(view), UrmlVisualIDRegistry
-				.getType(GoalReference2EditPart.VISUAL_ID));
-			outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
-			connectedViews = getIncomingLinksByType(Collections.singleton(view), UrmlVisualIDRegistry
-				.getType(GoalReference3EditPart.VISUAL_ID));
-			incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
-			connectedViews = getOutgoingLinksByType(Collections.singleton(view), UrmlVisualIDRegistry
-				.getType(GoalReference3EditPart.VISUAL_ID));
-			outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
-			connectedViews = getIncomingLinksByType(Collections.singleton(view), UrmlVisualIDRegistry
-				.getType(GoalReference4EditPart.VISUAL_ID));
-			incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
-			connectedViews = getOutgoingLinksByType(Collections.singleton(view), UrmlVisualIDRegistry
-				.getType(GoalReference4EditPart.VISUAL_ID));
-			outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
+					Messages.NavigatorGroupName_Actor_2010_outgoinglinks,
+					"icons/outgoingLinksNavigatorGroup.gif", parentElement); //$NON-NLS-1$
+			Collection<View> connectedViews;
+			connectedViews = getIncomingLinksByType(Collections.singleton(sv),
+					UrmlVisualIDRegistry
+							.getType(DangerHarmedAssetsEditPart.VISUAL_ID));
+			incominglinks.addChildren(createNavigatorItems(connectedViews,
+					incominglinks, true));
+			connectedViews = getOutgoingLinksByType(Collections.singleton(sv),
+					UrmlVisualIDRegistry
+							.getType(AssetTriggeredDangersEditPart.VISUAL_ID));
+			outgoinglinks.addChildren(createNavigatorItems(connectedViews,
+					outgoinglinks, true));
+			connectedViews = getIncomingLinksByType(
+					Collections.singleton(sv),
+					UrmlVisualIDRegistry
+							.getType(UrmlModelElementAssociationsEditPart.VISUAL_ID));
+			incominglinks.addChildren(createNavigatorItems(connectedViews,
+					incominglinks, true));
+			connectedViews = getOutgoingLinksByType(
+					Collections.singleton(sv),
+					UrmlVisualIDRegistry
+							.getType(UrmlModelElementAssociationsEditPart.VISUAL_ID));
+			outgoinglinks.addChildren(createNavigatorItems(connectedViews,
+					outgoinglinks, true));
 			if (!incominglinks.isEmpty()) {
 				result.add(incominglinks);
 			}
@@ -418,29 +355,88 @@
 			return result.toArray();
 		}
 
-		case FunctionalRequirementEditPart.VISUAL_ID: {
-			Collection result = new ArrayList();
+		case GoalEditPart.VISUAL_ID: {
+			LinkedList<UrmlAbstractNavigatorItem> result = new LinkedList<UrmlAbstractNavigatorItem>();
+			Node sv = (Node) view;
 			UrmlNavigatorGroup incominglinks = new UrmlNavigatorGroup(
-				Messages.NavigatorGroupName_FunctionalRequirement_2006_incominglinks,
-				"icons/incomingLinksNavigatorGroup.gif", parentElement); //$NON-NLS-1$
+					Messages.NavigatorGroupName_Goal_2001_incominglinks,
+					"icons/incomingLinksNavigatorGroup.gif", parentElement); //$NON-NLS-1$
 			UrmlNavigatorGroup outgoinglinks = new UrmlNavigatorGroup(
-				Messages.NavigatorGroupName_FunctionalRequirement_2006_outgoinglinks,
-				"icons/outgoingLinksNavigatorGroup.gif", parentElement); //$NON-NLS-1$
-			Collection connectedViews = getIncomingLinksByType(Collections.singleton(view), UrmlVisualIDRegistry
-				.getType(AbstractFeatureDetailingFunctionalRequirementsEditPart.VISUAL_ID));
-			incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
-			connectedViews = getOutgoingLinksByType(Collections.singleton(view), UrmlVisualIDRegistry
-				.getType(RequirementImplementingServicesEditPart.VISUAL_ID));
-			outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
-			connectedViews = getIncomingLinksByType(Collections.singleton(view), UrmlVisualIDRegistry
-				.getType(FunctionalRequirementSubFunctionalRequirementsEditPart.VISUAL_ID));
-			incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
-			connectedViews = getOutgoingLinksByType(Collections.singleton(view), UrmlVisualIDRegistry
-				.getType(FunctionalRequirementSubFunctionalRequirementsEditPart.VISUAL_ID));
-			outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
-			connectedViews = getOutgoingLinksByType(Collections.singleton(view), UrmlVisualIDRegistry
-				.getType(MitigationMitigatedDangersEditPart.VISUAL_ID));
-			outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
+					Messages.NavigatorGroupName_Goal_2001_outgoinglinks,
+					"icons/outgoingLinksNavigatorGroup.gif", parentElement); //$NON-NLS-1$
+			Collection<View> connectedViews;
+			connectedViews = getIncomingLinksByType(Collections.singleton(sv),
+					UrmlVisualIDRegistry
+							.getType(StakeholderGoalsEditPart.VISUAL_ID));
+			incominglinks.addChildren(createNavigatorItems(connectedViews,
+					incominglinks, true));
+			connectedViews = getOutgoingLinksByType(Collections.singleton(sv),
+					UrmlVisualIDRegistry
+							.getType(GoalRealizedFeaturesEditPart.VISUAL_ID));
+			outgoinglinks.addChildren(createNavigatorItems(connectedViews,
+					outgoinglinks, true));
+			connectedViews = getIncomingLinksByType(Collections.singleton(sv),
+					UrmlVisualIDRegistry
+							.getType(GoalSubGoalsEditPart.VISUAL_ID));
+			incominglinks.addChildren(createNavigatorItems(connectedViews,
+					incominglinks, true));
+			connectedViews = getOutgoingLinksByType(Collections.singleton(sv),
+					UrmlVisualIDRegistry
+							.getType(GoalSubGoalsEditPart.VISUAL_ID));
+			outgoinglinks.addChildren(createNavigatorItems(connectedViews,
+					outgoinglinks, true));
+			connectedViews = getIncomingLinksByType(Collections.singleton(sv),
+					UrmlVisualIDRegistry
+							.getType(GoalReferenceEditPart.VISUAL_ID));
+			incominglinks.addChildren(createNavigatorItems(connectedViews,
+					incominglinks, true));
+			connectedViews = getOutgoingLinksByType(Collections.singleton(sv),
+					UrmlVisualIDRegistry
+							.getType(GoalReferenceEditPart.VISUAL_ID));
+			outgoinglinks.addChildren(createNavigatorItems(connectedViews,
+					outgoinglinks, true));
+			connectedViews = getIncomingLinksByType(Collections.singleton(sv),
+					UrmlVisualIDRegistry
+							.getType(GoalReference2EditPart.VISUAL_ID));
+			incominglinks.addChildren(createNavigatorItems(connectedViews,
+					incominglinks, true));
+			connectedViews = getOutgoingLinksByType(Collections.singleton(sv),
+					UrmlVisualIDRegistry
+							.getType(GoalReference2EditPart.VISUAL_ID));
+			outgoinglinks.addChildren(createNavigatorItems(connectedViews,
+					outgoinglinks, true));
+			connectedViews = getIncomingLinksByType(Collections.singleton(sv),
+					UrmlVisualIDRegistry
+							.getType(GoalReference3EditPart.VISUAL_ID));
+			incominglinks.addChildren(createNavigatorItems(connectedViews,
+					incominglinks, true));
+			connectedViews = getOutgoingLinksByType(Collections.singleton(sv),
+					UrmlVisualIDRegistry
+							.getType(GoalReference3EditPart.VISUAL_ID));
+			outgoinglinks.addChildren(createNavigatorItems(connectedViews,
+					outgoinglinks, true));
+			connectedViews = getIncomingLinksByType(Collections.singleton(sv),
+					UrmlVisualIDRegistry
+							.getType(GoalReference4EditPart.VISUAL_ID));
+			incominglinks.addChildren(createNavigatorItems(connectedViews,
+					incominglinks, true));
+			connectedViews = getOutgoingLinksByType(Collections.singleton(sv),
+					UrmlVisualIDRegistry
+							.getType(GoalReference4EditPart.VISUAL_ID));
+			outgoinglinks.addChildren(createNavigatorItems(connectedViews,
+					outgoinglinks, true));
+			connectedViews = getIncomingLinksByType(
+					Collections.singleton(sv),
+					UrmlVisualIDRegistry
+							.getType(UrmlModelElementAssociationsEditPart.VISUAL_ID));
+			incominglinks.addChildren(createNavigatorItems(connectedViews,
+					incominglinks, true));
+			connectedViews = getOutgoingLinksByType(
+					Collections.singleton(sv),
+					UrmlVisualIDRegistry
+							.getType(UrmlModelElementAssociationsEditPart.VISUAL_ID));
+			outgoinglinks.addChildren(createNavigatorItems(connectedViews,
+					outgoinglinks, true));
 			if (!incominglinks.isEmpty()) {
 				result.add(incominglinks);
 			}
@@ -450,114 +446,116 @@
 			return result.toArray();
 		}
 
-		case FeatureEditPart.VISUAL_ID: {
-			Collection result = new ArrayList();
-			UrmlNavigatorGroup incominglinks = new UrmlNavigatorGroup(
-				Messages.NavigatorGroupName_Feature_2012_incominglinks,
-				"icons/incomingLinksNavigatorGroup.gif", parentElement); //$NON-NLS-1$
-			UrmlNavigatorGroup outgoinglinks = new UrmlNavigatorGroup(
-				Messages.NavigatorGroupName_Feature_2012_outgoinglinks,
-				"icons/outgoingLinksNavigatorGroup.gif", parentElement); //$NON-NLS-1$
-			Collection connectedViews = getIncomingLinksByType(Collections.singleton(view), UrmlVisualIDRegistry
-				.getType(AbstractFeatureSubFeaturesEditPart.VISUAL_ID));
-			incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
-			connectedViews = getOutgoingLinksByType(Collections.singleton(view), UrmlVisualIDRegistry
-				.getType(AbstractFeatureSubFeaturesEditPart.VISUAL_ID));
-			outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
-			connectedViews = getOutgoingLinksByType(Collections.singleton(view), UrmlVisualIDRegistry
-				.getType(AbstractFeatureDetailingFunctionalRequirementsEditPart.VISUAL_ID));
-			outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
-			connectedViews = getOutgoingLinksByType(Collections.singleton(view), UrmlVisualIDRegistry
-				.getType(AbstractFeatureConstrainingNonFunctionalRequirementsEditPart.VISUAL_ID));
-			outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
-			connectedViews = getIncomingLinksByType(Collections.singleton(view), UrmlVisualIDRegistry
-				.getType(AbstractFeatureRequiredFeaturesEditPart.VISUAL_ID));
-			incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
-			connectedViews = getOutgoingLinksByType(Collections.singleton(view), UrmlVisualIDRegistry
-				.getType(AbstractFeatureRequiredFeaturesEditPart.VISUAL_ID));
-			outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
-			connectedViews = getIncomingLinksByType(Collections.singleton(view), UrmlVisualIDRegistry
-				.getType(AbstractFeatureExcludedFeaturesEditPart.VISUAL_ID));
-			incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
-			connectedViews = getOutgoingLinksByType(Collections.singleton(view), UrmlVisualIDRegistry
-				.getType(AbstractFeatureExcludedFeaturesEditPart.VISUAL_ID));
-			outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
-			connectedViews = getIncomingLinksByType(Collections.singleton(view), UrmlVisualIDRegistry
-				.getType(GoalRealizedFeaturesEditPart.VISUAL_ID));
-			incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
-			connectedViews = getIncomingLinksByType(Collections.singleton(view), UrmlVisualIDRegistry
-				.getType(VariationPointOptionalSubFeaturesEditPart.VISUAL_ID));
-			incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
-			connectedViews = getIncomingLinksByType(Collections.singleton(view), UrmlVisualIDRegistry
-				.getType(VariationPointInstanceSelectedFeaturesEditPart.VISUAL_ID));
-			incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
-			connectedViews = getIncomingLinksByType(Collections.singleton(view), UrmlVisualIDRegistry
-				.getType(ProductFeaturesEditPart.VISUAL_ID));
-			incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
-			if (!incominglinks.isEmpty()) {
-				result.add(incominglinks);
+		case DangerHarmedAssetsEditPart.VISUAL_ID: {
+			LinkedList<UrmlAbstractNavigatorItem> result = new LinkedList<UrmlAbstractNavigatorItem>();
+			Edge sv = (Edge) view;
+			UrmlNavigatorGroup target = new UrmlNavigatorGroup(
+					Messages.NavigatorGroupName_DangerHarmedAssets_4013_target,
+					"icons/linkTargetNavigatorGroup.gif", parentElement); //$NON-NLS-1$
+			UrmlNavigatorGroup source = new UrmlNavigatorGroup(
+					Messages.NavigatorGroupName_DangerHarmedAssets_4013_source,
+					"icons/linkSourceNavigatorGroup.gif", parentElement); //$NON-NLS-1$
+			Collection<View> connectedViews;
+			connectedViews = getLinksTargetByType(Collections.singleton(sv),
+					UrmlVisualIDRegistry.getType(ServiceEditPart.VISUAL_ID));
+			target.addChildren(createNavigatorItems(connectedViews, target,
+					true));
+			connectedViews = getLinksTargetByType(Collections.singleton(sv),
+					UrmlVisualIDRegistry.getType(ActorEditPart.VISUAL_ID));
+			target.addChildren(createNavigatorItems(connectedViews, target,
+					true));
+			connectedViews = getLinksSourceByType(Collections.singleton(sv),
+					UrmlVisualIDRegistry.getType(DangerEditPart.VISUAL_ID));
+			source.addChildren(createNavigatorItems(connectedViews, source,
+					true));
+			if (!target.isEmpty()) {
+				result.add(target);
 			}
-			if (!outgoinglinks.isEmpty()) {
-				result.add(outgoinglinks);
+			if (!source.isEmpty()) {
+				result.add(source);
 			}
 			return result.toArray();
 		}
 
-		case ServiceEditPart.VISUAL_ID: {
-			Collection result = new ArrayList();
-			UrmlNavigatorGroup incominglinks = new UrmlNavigatorGroup(
-				Messages.NavigatorGroupName_Service_2007_incominglinks,
-				"icons/incomingLinksNavigatorGroup.gif", parentElement); //$NON-NLS-1$
-			UrmlNavigatorGroup outgoinglinks = new UrmlNavigatorGroup(
-				Messages.NavigatorGroupName_Service_2007_outgoinglinks,
-				"icons/outgoingLinksNavigatorGroup.gif", parentElement); //$NON-NLS-1$
-			Collection connectedViews = getIncomingLinksByType(Collections.singleton(view), UrmlVisualIDRegistry
-				.getType(RequirementImplementingServicesEditPart.VISUAL_ID));
-			incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
-			connectedViews = getIncomingLinksByType(Collections.singleton(view), UrmlVisualIDRegistry
-				.getType(DangerHarmedAssetsEditPart.VISUAL_ID));
-			incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
-			connectedViews = getOutgoingLinksByType(Collections.singleton(view), UrmlVisualIDRegistry
-				.getType(AssetTriggeredDangersEditPart.VISUAL_ID));
-			outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
-			connectedViews = getIncomingLinksByType(Collections.singleton(view), UrmlVisualIDRegistry
-				.getType(ServiceSubServicesEditPart.VISUAL_ID));
-			incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
-			connectedViews = getOutgoingLinksByType(Collections.singleton(view), UrmlVisualIDRegistry
-				.getType(ServiceSubServicesEditPart.VISUAL_ID));
-			outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
-			if (!incominglinks.isEmpty()) {
-				result.add(incominglinks);
+		case StakeholderGoalsEditPart.VISUAL_ID: {
+			LinkedList<UrmlAbstractNavigatorItem> result = new LinkedList<UrmlAbstractNavigatorItem>();
+			Edge sv = (Edge) view;
+			UrmlNavigatorGroup target = new UrmlNavigatorGroup(
+					Messages.NavigatorGroupName_StakeholderGoals_4008_target,
+					"icons/linkTargetNavigatorGroup.gif", parentElement); //$NON-NLS-1$
+			UrmlNavigatorGroup source = new UrmlNavigatorGroup(
+					Messages.NavigatorGroupName_StakeholderGoals_4008_source,
+					"icons/linkSourceNavigatorGroup.gif", parentElement); //$NON-NLS-1$
+			Collection<View> connectedViews;
+			connectedViews = getLinksTargetByType(Collections.singleton(sv),
+					UrmlVisualIDRegistry.getType(GoalEditPart.VISUAL_ID));
+			target.addChildren(createNavigatorItems(connectedViews, target,
+					true));
+			connectedViews = getLinksSourceByType(Collections.singleton(sv),
+					UrmlVisualIDRegistry.getType(StakeholderEditPart.VISUAL_ID));
+			source.addChildren(createNavigatorItems(connectedViews, source,
+					true));
+			if (!target.isEmpty()) {
+				result.add(target);
 			}
-			if (!outgoinglinks.isEmpty()) {
-				result.add(outgoinglinks);
+			if (!source.isEmpty()) {
+				result.add(source);
 			}
 			return result.toArray();
 		}
 
-		case NonFunctionalRequirementEditPart.VISUAL_ID: {
-			Collection result = new ArrayList();
+		case FunctionalRequirementEditPart.VISUAL_ID: {
+			LinkedList<UrmlAbstractNavigatorItem> result = new LinkedList<UrmlAbstractNavigatorItem>();
+			Node sv = (Node) view;
 			UrmlNavigatorGroup incominglinks = new UrmlNavigatorGroup(
-				Messages.NavigatorGroupName_NonFunctionalRequirement_2008_incominglinks,
-				"icons/incomingLinksNavigatorGroup.gif", parentElement); //$NON-NLS-1$
+					Messages.NavigatorGroupName_FunctionalRequirement_2006_incominglinks,
+					"icons/incomingLinksNavigatorGroup.gif", parentElement); //$NON-NLS-1$
 			UrmlNavigatorGroup outgoinglinks = new UrmlNavigatorGroup(
-				Messages.NavigatorGroupName_NonFunctionalRequirement_2008_outgoinglinks,
-				"icons/outgoingLinksNavigatorGroup.gif", parentElement); //$NON-NLS-1$
-			Collection connectedViews = getIncomingLinksByType(Collections.singleton(view), UrmlVisualIDRegistry
-				.getType(AbstractFeatureConstrainingNonFunctionalRequirementsEditPart.VISUAL_ID));
-			incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
-			connectedViews = getOutgoingLinksByType(Collections.singleton(view), UrmlVisualIDRegistry
-				.getType(RequirementImplementingServicesEditPart.VISUAL_ID));
-			outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
-			connectedViews = getIncomingLinksByType(Collections.singleton(view), UrmlVisualIDRegistry
-				.getType(NonFunctionalRequirementSubNonFunctionalRequirementsEditPart.VISUAL_ID));
-			incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
-			connectedViews = getOutgoingLinksByType(Collections.singleton(view), UrmlVisualIDRegistry
-				.getType(NonFunctionalRequirementSubNonFunctionalRequirementsEditPart.VISUAL_ID));
-			outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
-			connectedViews = getOutgoingLinksByType(Collections.singleton(view), UrmlVisualIDRegistry
-				.getType(MitigationMitigatedDangersEditPart.VISUAL_ID));
-			outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
+					Messages.NavigatorGroupName_FunctionalRequirement_2006_outgoinglinks,
+					"icons/outgoingLinksNavigatorGroup.gif", parentElement); //$NON-NLS-1$
+			Collection<View> connectedViews;
+			connectedViews = getIncomingLinksByType(
+					Collections.singleton(sv),
+					UrmlVisualIDRegistry
+							.getType(AbstractFeatureDetailingFunctionalRequirementsEditPart.VISUAL_ID));
+			incominglinks.addChildren(createNavigatorItems(connectedViews,
+					incominglinks, true));
+			connectedViews = getOutgoingLinksByType(
+					Collections.singleton(sv),
+					UrmlVisualIDRegistry
+							.getType(RequirementImplementingServicesEditPart.VISUAL_ID));
+			outgoinglinks.addChildren(createNavigatorItems(connectedViews,
+					outgoinglinks, true));
+			connectedViews = getIncomingLinksByType(
+					Collections.singleton(sv),
+					UrmlVisualIDRegistry
+							.getType(FunctionalRequirementSubFunctionalRequirementsEditPart.VISUAL_ID));
+			incominglinks.addChildren(createNavigatorItems(connectedViews,
+					incominglinks, true));
+			connectedViews = getOutgoingLinksByType(
+					Collections.singleton(sv),
+					UrmlVisualIDRegistry
+							.getType(FunctionalRequirementSubFunctionalRequirementsEditPart.VISUAL_ID));
+			outgoinglinks.addChildren(createNavigatorItems(connectedViews,
+					outgoinglinks, true));
+			connectedViews = getOutgoingLinksByType(
+					Collections.singleton(sv),
+					UrmlVisualIDRegistry
+							.getType(MitigationMitigatedDangersEditPart.VISUAL_ID));
+			outgoinglinks.addChildren(createNavigatorItems(connectedViews,
+					outgoinglinks, true));
+			connectedViews = getIncomingLinksByType(
+					Collections.singleton(sv),
+					UrmlVisualIDRegistry
+							.getType(UrmlModelElementAssociationsEditPart.VISUAL_ID));
+			incominglinks.addChildren(createNavigatorItems(connectedViews,
+					incominglinks, true));
+			connectedViews = getOutgoingLinksByType(
+					Collections.singleton(sv),
+					UrmlVisualIDRegistry
+							.getType(UrmlModelElementAssociationsEditPart.VISUAL_ID));
+			outgoinglinks.addChildren(createNavigatorItems(connectedViews,
+					outgoinglinks, true));
 			if (!incominglinks.isEmpty()) {
 				result.add(incominglinks);
 			}
@@ -567,116 +565,199 @@
 			return result.toArray();
 		}
 
-		case DangerEditPart.VISUAL_ID: {
-			Collection result = new ArrayList();
-			UrmlNavigatorGroup incominglinks = new UrmlNavigatorGroup(
-				Messages.NavigatorGroupName_Danger_2009_incominglinks,
-				"icons/incomingLinksNavigatorGroup.gif", parentElement); //$NON-NLS-1$
+		case VariationPointInstanceEditPart.VISUAL_ID: {
+			LinkedList<UrmlAbstractNavigatorItem> result = new LinkedList<UrmlAbstractNavigatorItem>();
+			Node sv = (Node) view;
 			UrmlNavigatorGroup outgoinglinks = new UrmlNavigatorGroup(
-				Messages.NavigatorGroupName_Danger_2009_outgoinglinks,
-				"icons/outgoingLinksNavigatorGroup.gif", parentElement); //$NON-NLS-1$
-			Collection connectedViews = getIncomingLinksByType(Collections.singleton(view), UrmlVisualIDRegistry
-				.getType(MitigationMitigatedDangersEditPart.VISUAL_ID));
-			incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
-			connectedViews = getOutgoingLinksByType(Collections.singleton(view), UrmlVisualIDRegistry
-				.getType(DangerHarmedAssetsEditPart.VISUAL_ID));
-			outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
-			connectedViews = getIncomingLinksByType(Collections.singleton(view), UrmlVisualIDRegistry
-				.getType(AssetTriggeredDangersEditPart.VISUAL_ID));
-			incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
+					Messages.NavigatorGroupName_VariationPointInstance_2014_outgoinglinks,
+					"icons/outgoingLinksNavigatorGroup.gif", parentElement); //$NON-NLS-1$
+			UrmlNavigatorGroup incominglinks = new UrmlNavigatorGroup(
+					Messages.NavigatorGroupName_VariationPointInstance_2014_incominglinks,
+					"icons/incomingLinksNavigatorGroup.gif", parentElement); //$NON-NLS-1$
+			Collection<View> connectedViews;
+			connectedViews = getOutgoingLinksByType(
+					Collections.singleton(sv),
+					UrmlVisualIDRegistry
+							.getType(VariationPointInstanceVariationPointEditPart.VISUAL_ID));
+			outgoinglinks.addChildren(createNavigatorItems(connectedViews,
+					outgoinglinks, true));
+			connectedViews = getOutgoingLinksByType(
+					Collections.singleton(sv),
+					UrmlVisualIDRegistry
+							.getType(VariationPointInstanceSelectedFeaturesEditPart.VISUAL_ID));
+			outgoinglinks.addChildren(createNavigatorItems(connectedViews,
+					outgoinglinks, true));
+			connectedViews = getIncomingLinksByType(
+					Collections.singleton(sv),
+					UrmlVisualIDRegistry
+							.getType(ProductVariationPointInstancesEditPart.VISUAL_ID));
+			incominglinks.addChildren(createNavigatorItems(connectedViews,
+					incominglinks, true));
+			connectedViews = getIncomingLinksByType(
+					Collections.singleton(sv),
+					UrmlVisualIDRegistry
+							.getType(UrmlModelElementAssociationsEditPart.VISUAL_ID));
+			incominglinks.addChildren(createNavigatorItems(connectedViews,
+					incominglinks, true));
+			connectedViews = getOutgoingLinksByType(
+					Collections.singleton(sv),
+					UrmlVisualIDRegistry
+							.getType(UrmlModelElementAssociationsEditPart.VISUAL_ID));
+			outgoinglinks.addChildren(createNavigatorItems(connectedViews,
+					outgoinglinks, true));
+			if (!outgoinglinks.isEmpty()) {
+				result.add(outgoinglinks);
+			}
 			if (!incominglinks.isEmpty()) {
 				result.add(incominglinks);
 			}
-			if (!outgoinglinks.isEmpty()) {
-				result.add(outgoinglinks);
+			return result.toArray();
+		}
+
+		case VariationPointInstanceSelectedFeaturesEditPart.VISUAL_ID: {
+			LinkedList<UrmlAbstractNavigatorItem> result = new LinkedList<UrmlAbstractNavigatorItem>();
+			Edge sv = (Edge) view;
+			UrmlNavigatorGroup target = new UrmlNavigatorGroup(
+					Messages.NavigatorGroupName_VariationPointInstanceSelectedFeatures_4040_target,
+					"icons/linkTargetNavigatorGroup.gif", parentElement); //$NON-NLS-1$
+			UrmlNavigatorGroup source = new UrmlNavigatorGroup(
+					Messages.NavigatorGroupName_VariationPointInstanceSelectedFeatures_4040_source,
+					"icons/linkSourceNavigatorGroup.gif", parentElement); //$NON-NLS-1$
+			Collection<View> connectedViews;
+			connectedViews = getLinksTargetByType(Collections.singleton(sv),
+					UrmlVisualIDRegistry.getType(FeatureEditPart.VISUAL_ID));
+			target.addChildren(createNavigatorItems(connectedViews, target,
+					true));
+			connectedViews = getLinksTargetByType(Collections.singleton(sv),
+					UrmlVisualIDRegistry
+							.getType(VariationPointEditPart.VISUAL_ID));
+			target.addChildren(createNavigatorItems(connectedViews, target,
+					true));
+			connectedViews = getLinksSourceByType(Collections.singleton(sv),
+					UrmlVisualIDRegistry
+							.getType(VariationPointInstanceEditPart.VISUAL_ID));
+			source.addChildren(createNavigatorItems(connectedViews, source,
+					true));
+			if (!target.isEmpty()) {
+				result.add(target);
+			}
+			if (!source.isEmpty()) {
+				result.add(source);
 			}
 			return result.toArray();
 		}
 
-		case ActorEditPart.VISUAL_ID: {
-			Collection result = new ArrayList();
-			UrmlNavigatorGroup incominglinks = new UrmlNavigatorGroup(
-				Messages.NavigatorGroupName_Actor_2010_incominglinks,
-				"icons/incomingLinksNavigatorGroup.gif", parentElement); //$NON-NLS-1$
-			UrmlNavigatorGroup outgoinglinks = new UrmlNavigatorGroup(
-				Messages.NavigatorGroupName_Actor_2010_outgoinglinks,
-				"icons/outgoingLinksNavigatorGroup.gif", parentElement); //$NON-NLS-1$
-			Collection connectedViews = getIncomingLinksByType(Collections.singleton(view), UrmlVisualIDRegistry
-				.getType(DangerHarmedAssetsEditPart.VISUAL_ID));
-			incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
-			connectedViews = getOutgoingLinksByType(Collections.singleton(view), UrmlVisualIDRegistry
-				.getType(AssetTriggeredDangersEditPart.VISUAL_ID));
-			outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
-			if (!incominglinks.isEmpty()) {
-				result.add(incominglinks);
+		case VariationPointInstanceVariationPointEditPart.VISUAL_ID: {
+			LinkedList<UrmlAbstractNavigatorItem> result = new LinkedList<UrmlAbstractNavigatorItem>();
+			Edge sv = (Edge) view;
+			UrmlNavigatorGroup target = new UrmlNavigatorGroup(
+					Messages.NavigatorGroupName_VariationPointInstanceVariationPoint_4033_target,
+					"icons/linkTargetNavigatorGroup.gif", parentElement); //$NON-NLS-1$
+			UrmlNavigatorGroup source = new UrmlNavigatorGroup(
+					Messages.NavigatorGroupName_VariationPointInstanceVariationPoint_4033_source,
+					"icons/linkSourceNavigatorGroup.gif", parentElement); //$NON-NLS-1$
+			Collection<View> connectedViews;
+			connectedViews = getLinksTargetByType(Collections.singleton(sv),
+					UrmlVisualIDRegistry
+							.getType(VariationPointEditPart.VISUAL_ID));
+			target.addChildren(createNavigatorItems(connectedViews, target,
+					true));
+			connectedViews = getLinksSourceByType(Collections.singleton(sv),
+					UrmlVisualIDRegistry
+							.getType(VariationPointInstanceEditPart.VISUAL_ID));
+			source.addChildren(createNavigatorItems(connectedViews, source,
+					true));
+			if (!target.isEmpty()) {
+				result.add(target);
 			}
-			if (!outgoinglinks.isEmpty()) {
-				result.add(outgoinglinks);
+			if (!source.isEmpty()) {
+				result.add(source);
 			}
 			return result.toArray();
 		}
 
-		case ProceduralMitigationEditPart.VISUAL_ID: {
-			Collection result = new ArrayList();
-			UrmlNavigatorGroup outgoinglinks = new UrmlNavigatorGroup(
-				Messages.NavigatorGroupName_ProceduralMitigation_2011_outgoinglinks,
-				"icons/outgoingLinksNavigatorGroup.gif", parentElement); //$NON-NLS-1$
-			Collection connectedViews = getOutgoingLinksByType(Collections.singleton(view), UrmlVisualIDRegistry
-				.getType(MitigationMitigatedDangersEditPart.VISUAL_ID));
-			outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
-			if (!outgoinglinks.isEmpty()) {
-				result.add(outgoinglinks);
+		case RequirementImplementingServicesEditPart.VISUAL_ID: {
+			LinkedList<UrmlAbstractNavigatorItem> result = new LinkedList<UrmlAbstractNavigatorItem>();
+			Edge sv = (Edge) view;
+			UrmlNavigatorGroup target = new UrmlNavigatorGroup(
+					Messages.NavigatorGroupName_RequirementImplementingServices_4005_target,
+					"icons/linkTargetNavigatorGroup.gif", parentElement); //$NON-NLS-1$
+			UrmlNavigatorGroup source = new UrmlNavigatorGroup(
+					Messages.NavigatorGroupName_RequirementImplementingServices_4005_source,
+					"icons/linkSourceNavigatorGroup.gif", parentElement); //$NON-NLS-1$
+			Collection<View> connectedViews;
+			connectedViews = getLinksTargetByType(Collections.singleton(sv),
+					UrmlVisualIDRegistry.getType(ServiceEditPart.VISUAL_ID));
+			target.addChildren(createNavigatorItems(connectedViews, target,
+					true));
+			connectedViews = getLinksSourceByType(Collections.singleton(sv),
+					UrmlVisualIDRegistry
+							.getType(FunctionalRequirementEditPart.VISUAL_ID));
+			source.addChildren(createNavigatorItems(connectedViews, source,
+					true));
+			connectedViews = getLinksSourceByType(
+					Collections.singleton(sv),
+					UrmlVisualIDRegistry
+							.getType(NonFunctionalRequirementEditPart.VISUAL_ID));
+			source.addChildren(createNavigatorItems(connectedViews, source,
+					true));
+			if (!target.isEmpty()) {
+				result.add(target);
+			}
+			if (!source.isEmpty()) {
+				result.add(source);
 			}
 			return result.toArray();
 		}
 
-		case VariationPointEditPart.VISUAL_ID: {
-			Collection result = new ArrayList();
+		case ServiceEditPart.VISUAL_ID: {
+			LinkedList<UrmlAbstractNavigatorItem> result = new LinkedList<UrmlAbstractNavigatorItem>();
+			Node sv = (Node) view;
 			UrmlNavigatorGroup incominglinks = new UrmlNavigatorGroup(
-				Messages.NavigatorGroupName_VariationPoint_2013_incominglinks,
-				"icons/incomingLinksNavigatorGroup.gif", parentElement); //$NON-NLS-1$
+					Messages.NavigatorGroupName_Service_2007_incominglinks,
+					"icons/incomingLinksNavigatorGroup.gif", parentElement); //$NON-NLS-1$
 			UrmlNavigatorGroup outgoinglinks = new UrmlNavigatorGroup(
-				Messages.NavigatorGroupName_VariationPoint_2013_outgoinglinks,
-				"icons/outgoingLinksNavigatorGroup.gif", parentElement); //$NON-NLS-1$
-			Collection connectedViews = getIncomingLinksByType(Collections.singleton(view), UrmlVisualIDRegistry
-				.getType(AbstractFeatureSubFeaturesEditPart.VISUAL_ID));
-			incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
-			connectedViews = getOutgoingLinksByType(Collections.singleton(view), UrmlVisualIDRegistry
-				.getType(AbstractFeatureSubFeaturesEditPart.VISUAL_ID));
-			outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
-			connectedViews = getOutgoingLinksByType(Collections.singleton(view), UrmlVisualIDRegistry
-				.getType(AbstractFeatureDetailingFunctionalRequirementsEditPart.VISUAL_ID));
-			outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
-			connectedViews = getOutgoingLinksByType(Collections.singleton(view), UrmlVisualIDRegistry
-				.getType(AbstractFeatureConstrainingNonFunctionalRequirementsEditPart.VISUAL_ID));
-			outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
-			connectedViews = getIncomingLinksByType(Collections.singleton(view), UrmlVisualIDRegistry
-				.getType(AbstractFeatureRequiredFeaturesEditPart.VISUAL_ID));
-			incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
-			connectedViews = getOutgoingLinksByType(Collections.singleton(view), UrmlVisualIDRegistry
-				.getType(AbstractFeatureRequiredFeaturesEditPart.VISUAL_ID));
-			outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
-			connectedViews = getIncomingLinksByType(Collections.singleton(view), UrmlVisualIDRegistry
-				.getType(AbstractFeatureExcludedFeaturesEditPart.VISUAL_ID));
-			incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
-			connectedViews = getOutgoingLinksByType(Collections.singleton(view), UrmlVisualIDRegistry
-				.getType(AbstractFeatureExcludedFeaturesEditPart.VISUAL_ID));
-			outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
-			connectedViews = getIncomingLinksByType(Collections.singleton(view), UrmlVisualIDRegistry
-				.getType(GoalRealizedFeaturesEditPart.VISUAL_ID));
-			incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
-			connectedViews = getIncomingLinksByType(Collections.singleton(view), UrmlVisualIDRegistry
-				.getType(VariationPointOptionalSubFeaturesEditPart.VISUAL_ID));
-			incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
-			connectedViews = getOutgoingLinksByType(Collections.singleton(view), UrmlVisualIDRegistry
-				.getType(VariationPointOptionalSubFeaturesEditPart.VISUAL_ID));
-			outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
-			connectedViews = getIncomingLinksByType(Collections.singleton(view), UrmlVisualIDRegistry
-				.getType(VariationPointInstanceVariationPointEditPart.VISUAL_ID));
-			incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
-			connectedViews = getIncomingLinksByType(Collections.singleton(view), UrmlVisualIDRegistry
-				.getType(VariationPointInstanceSelectedFeaturesEditPart.VISUAL_ID));
-			incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
+					Messages.NavigatorGroupName_Service_2007_outgoinglinks,
+					"icons/outgoingLinksNavigatorGroup.gif", parentElement); //$NON-NLS-1$
+			Collection<View> connectedViews;
+			connectedViews = getIncomingLinksByType(
+					Collections.singleton(sv),
+					UrmlVisualIDRegistry
+							.getType(RequirementImplementingServicesEditPart.VISUAL_ID));
+			incominglinks.addChildren(createNavigatorItems(connectedViews,
+					incominglinks, true));
+			connectedViews = getIncomingLinksByType(Collections.singleton(sv),
+					UrmlVisualIDRegistry
+							.getType(DangerHarmedAssetsEditPart.VISUAL_ID));
+			incominglinks.addChildren(createNavigatorItems(connectedViews,
+					incominglinks, true));
+			connectedViews = getOutgoingLinksByType(Collections.singleton(sv),
+					UrmlVisualIDRegistry
+							.getType(AssetTriggeredDangersEditPart.VISUAL_ID));
+			outgoinglinks.addChildren(createNavigatorItems(connectedViews,
+					outgoinglinks, true));
+			connectedViews = getIncomingLinksByType(Collections.singleton(sv),
+					UrmlVisualIDRegistry
+							.getType(ServiceSubServicesEditPart.VISUAL_ID));
+			incominglinks.addChildren(createNavigatorItems(connectedViews,
+					incominglinks, true));
+			connectedViews = getOutgoingLinksByType(Collections.singleton(sv),
+					UrmlVisualIDRegistry
+							.getType(ServiceSubServicesEditPart.VISUAL_ID));
+			outgoinglinks.addChildren(createNavigatorItems(connectedViews,
+					outgoinglinks, true));
+			connectedViews = getIncomingLinksByType(
+					Collections.singleton(sv),
+					UrmlVisualIDRegistry
+							.getType(UrmlModelElementAssociationsEditPart.VISUAL_ID));
+			incominglinks.addChildren(createNavigatorItems(connectedViews,
+					incominglinks, true));
+			connectedViews = getOutgoingLinksByType(
+					Collections.singleton(sv),
+					UrmlVisualIDRegistry
+							.getType(UrmlModelElementAssociationsEditPart.VISUAL_ID));
+			outgoinglinks.addChildren(createNavigatorItems(connectedViews,
+					outgoinglinks, true));
 			if (!incominglinks.isEmpty()) {
 				result.add(incominglinks);
 			}
@@ -686,23 +767,33 @@
 			return result.toArray();
 		}
 
-		case VariationPointInstanceEditPart.VISUAL_ID: {
-			Collection result = new ArrayList();
+		case StakeholderEditPart.VISUAL_ID: {
+			LinkedList<UrmlAbstractNavigatorItem> result = new LinkedList<UrmlAbstractNavigatorItem>();
+			Node sv = (Node) view;
 			UrmlNavigatorGroup outgoinglinks = new UrmlNavigatorGroup(
-				Messages.NavigatorGroupName_VariationPointInstance_2014_outgoinglinks,
-				"icons/outgoingLinksNavigatorGroup.gif", parentElement); //$NON-NLS-1$
+					Messages.NavigatorGroupName_Stakeholder_2002_outgoinglinks,
+					"icons/outgoingLinksNavigatorGroup.gif", parentElement); //$NON-NLS-1$
 			UrmlNavigatorGroup incominglinks = new UrmlNavigatorGroup(
-				Messages.NavigatorGroupName_VariationPointInstance_2014_incominglinks,
-				"icons/incomingLinksNavigatorGroup.gif", parentElement); //$NON-NLS-1$
-			Collection connectedViews = getOutgoingLinksByType(Collections.singleton(view), UrmlVisualIDRegistry
-				.getType(VariationPointInstanceVariationPointEditPart.VISUAL_ID));
-			outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
-			connectedViews = getOutgoingLinksByType(Collections.singleton(view), UrmlVisualIDRegistry
-				.getType(VariationPointInstanceSelectedFeaturesEditPart.VISUAL_ID));
-			outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
-			connectedViews = getIncomingLinksByType(Collections.singleton(view), UrmlVisualIDRegistry
-				.getType(ProductVariationPointInstancesEditPart.VISUAL_ID));
-			incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
+					Messages.NavigatorGroupName_Stakeholder_2002_incominglinks,
+					"icons/incomingLinksNavigatorGroup.gif", parentElement); //$NON-NLS-1$
+			Collection<View> connectedViews;
+			connectedViews = getOutgoingLinksByType(Collections.singleton(sv),
+					UrmlVisualIDRegistry
+							.getType(StakeholderGoalsEditPart.VISUAL_ID));
+			outgoinglinks.addChildren(createNavigatorItems(connectedViews,
+					outgoinglinks, true));
+			connectedViews = getIncomingLinksByType(
+					Collections.singleton(sv),
+					UrmlVisualIDRegistry
+							.getType(UrmlModelElementAssociationsEditPart.VISUAL_ID));
+			incominglinks.addChildren(createNavigatorItems(connectedViews,
+					incominglinks, true));
+			connectedViews = getOutgoingLinksByType(
+					Collections.singleton(sv),
+					UrmlVisualIDRegistry
+							.getType(UrmlModelElementAssociationsEditPart.VISUAL_ID));
+			outgoinglinks.addChildren(createNavigatorItems(connectedViews,
+					outgoinglinks, true));
 			if (!outgoinglinks.isEmpty()) {
 				result.add(outgoinglinks);
 			}
@@ -712,37 +803,26 @@
 			return result.toArray();
 		}
 
-		case ProductEditPart.VISUAL_ID: {
-			Collection result = new ArrayList();
-			UrmlNavigatorGroup outgoinglinks = new UrmlNavigatorGroup(
-				Messages.NavigatorGroupName_Product_2015_outgoinglinks,
-				"icons/outgoingLinksNavigatorGroup.gif", parentElement); //$NON-NLS-1$
-			Collection connectedViews = getOutgoingLinksByType(Collections.singleton(view), UrmlVisualIDRegistry
-				.getType(ProductVariationPointInstancesEditPart.VISUAL_ID));
-			outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
-			connectedViews = getOutgoingLinksByType(Collections.singleton(view), UrmlVisualIDRegistry
-				.getType(ProductFeaturesEditPart.VISUAL_ID));
-			outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
-			if (!outgoinglinks.isEmpty()) {
-				result.add(outgoinglinks);
-			}
-			return result.toArray();
-		}
-
-		case StakeholderGoalsEditPart.VISUAL_ID: {
-			Collection result = new ArrayList();
+		case FunctionalRequirementSubFunctionalRequirementsEditPart.VISUAL_ID: {
+			LinkedList<UrmlAbstractNavigatorItem> result = new LinkedList<UrmlAbstractNavigatorItem>();
+			Edge sv = (Edge) view;
 			UrmlNavigatorGroup target = new UrmlNavigatorGroup(
-				Messages.NavigatorGroupName_StakeholderGoals_4008_target,
-				"icons/linkTargetNavigatorGroup.gif", parentElement); //$NON-NLS-1$
+					Messages.NavigatorGroupName_FunctionalRequirementSubFunctionalRequirements_4044_target,
+					"icons/linkTargetNavigatorGroup.gif", parentElement); //$NON-NLS-1$
 			UrmlNavigatorGroup source = new UrmlNavigatorGroup(
-				Messages.NavigatorGroupName_StakeholderGoals_4008_source,
-				"icons/linkSourceNavigatorGroup.gif", parentElement); //$NON-NLS-1$
-			Collection connectedViews = getLinksTargetByType(Collections.singleton(view), UrmlVisualIDRegistry
-				.getType(GoalEditPart.VISUAL_ID));
-			target.addChildren(createNavigatorItems(connectedViews, target, true));
-			connectedViews = getLinksSourceByType(Collections.singleton(view), UrmlVisualIDRegistry
-				.getType(StakeholderEditPart.VISUAL_ID));
-			source.addChildren(createNavigatorItems(connectedViews, source, true));
+					Messages.NavigatorGroupName_FunctionalRequirementSubFunctionalRequirements_4044_source,
+					"icons/linkSourceNavigatorGroup.gif", parentElement); //$NON-NLS-1$
+			Collection<View> connectedViews;
+			connectedViews = getLinksTargetByType(Collections.singleton(sv),
+					UrmlVisualIDRegistry
+							.getType(FunctionalRequirementEditPart.VISUAL_ID));
+			target.addChildren(createNavigatorItems(connectedViews, target,
+					true));
+			connectedViews = getLinksSourceByType(Collections.singleton(sv),
+					UrmlVisualIDRegistry
+							.getType(FunctionalRequirementEditPart.VISUAL_ID));
+			source.addChildren(createNavigatorItems(connectedViews, source,
+					true));
 			if (!target.isEmpty()) {
 				result.add(target);
 			}
@@ -752,52 +832,71 @@
 			return result.toArray();
 		}
 
-		case AbstractFeatureSubFeaturesEditPart.VISUAL_ID: {
-			Collection result = new ArrayList();
-			UrmlNavigatorGroup target = new UrmlNavigatorGroup(
-				Messages.NavigatorGroupName_AbstractFeatureSubFeatures_4034_target,
-				"icons/linkTargetNavigatorGroup.gif", parentElement); //$NON-NLS-1$
-			UrmlNavigatorGroup source = new UrmlNavigatorGroup(
-				Messages.NavigatorGroupName_AbstractFeatureSubFeatures_4034_source,
-				"icons/linkSourceNavigatorGroup.gif", parentElement); //$NON-NLS-1$
-			Collection connectedViews = getLinksTargetByType(Collections.singleton(view), UrmlVisualIDRegistry
-				.getType(FeatureEditPart.VISUAL_ID));
-			target.addChildren(createNavigatorItems(connectedViews, target, true));
-			connectedViews = getLinksTargetByType(Collections.singleton(view), UrmlVisualIDRegistry
-				.getType(VariationPointEditPart.VISUAL_ID));
-			target.addChildren(createNavigatorItems(connectedViews, target, true));
-			connectedViews = getLinksSourceByType(Collections.singleton(view), UrmlVisualIDRegistry
-				.getType(FeatureEditPart.VISUAL_ID));
-			source.addChildren(createNavigatorItems(connectedViews, source, true));
-			connectedViews = getLinksSourceByType(Collections.singleton(view), UrmlVisualIDRegistry
-				.getType(VariationPointEditPart.VISUAL_ID));
-			source.addChildren(createNavigatorItems(connectedViews, source, true));
-			if (!target.isEmpty()) {
-				result.add(target);
+		case DangerEditPart.VISUAL_ID: {
+			LinkedList<UrmlAbstractNavigatorItem> result = new LinkedList<UrmlAbstractNavigatorItem>();
+			Node sv = (Node) view;
+			UrmlNavigatorGroup incominglinks = new UrmlNavigatorGroup(
+					Messages.NavigatorGroupName_Danger_2009_incominglinks,
+					"icons/incomingLinksNavigatorGroup.gif", parentElement); //$NON-NLS-1$
+			UrmlNavigatorGroup outgoinglinks = new UrmlNavigatorGroup(
+					Messages.NavigatorGroupName_Danger_2009_outgoinglinks,
+					"icons/outgoingLinksNavigatorGroup.gif", parentElement); //$NON-NLS-1$
+			Collection<View> connectedViews;
+			connectedViews = getIncomingLinksByType(
+					Collections.singleton(sv),
+					UrmlVisualIDRegistry
+							.getType(MitigationMitigatedDangersEditPart.VISUAL_ID));
+			incominglinks.addChildren(createNavigatorItems(connectedViews,
+					incominglinks, true));
+			connectedViews = getOutgoingLinksByType(Collections.singleton(sv),
+					UrmlVisualIDRegistry
+							.getType(DangerHarmedAssetsEditPart.VISUAL_ID));
+			outgoinglinks.addChildren(createNavigatorItems(connectedViews,
+					outgoinglinks, true));
+			connectedViews = getIncomingLinksByType(Collections.singleton(sv),
+					UrmlVisualIDRegistry
+							.getType(AssetTriggeredDangersEditPart.VISUAL_ID));
+			incominglinks.addChildren(createNavigatorItems(connectedViews,
+					incominglinks, true));
+			connectedViews = getIncomingLinksByType(
+					Collections.singleton(sv),
+					UrmlVisualIDRegistry
+							.getType(UrmlModelElementAssociationsEditPart.VISUAL_ID));
+			incominglinks.addChildren(createNavigatorItems(connectedViews,
+					incominglinks, true));
+			connectedViews = getOutgoingLinksByType(
+					Collections.singleton(sv),
+					UrmlVisualIDRegistry
+							.getType(UrmlModelElementAssociationsEditPart.VISUAL_ID));
+			outgoinglinks.addChildren(createNavigatorItems(connectedViews,
+					outgoinglinks, true));
+			if (!incominglinks.isEmpty()) {
+				result.add(incominglinks);
 			}
-			if (!source.isEmpty()) {
-				result.add(source);
+			if (!outgoinglinks.isEmpty()) {
+				result.add(outgoinglinks);
 			}
 			return result.toArray();
 		}
 
-		case AbstractFeatureDetailingFunctionalRequirementsEditPart.VISUAL_ID: {
-			Collection result = new ArrayList();
+		case ServiceSubServicesEditPart.VISUAL_ID: {
+			LinkedList<UrmlAbstractNavigatorItem> result = new LinkedList<UrmlAbstractNavigatorItem>();
+			Edge sv = (Edge) view;
 			UrmlNavigatorGroup target = new UrmlNavigatorGroup(
-				Messages.NavigatorGroupName_AbstractFeatureDetailingFunctionalRequirements_4035_target,
-				"icons/linkTargetNavigatorGroup.gif", parentElement); //$NON-NLS-1$
+					Messages.NavigatorGroupName_ServiceSubServices_4022_target,
+					"icons/linkTargetNavigatorGroup.gif", parentElement); //$NON-NLS-1$
 			UrmlNavigatorGroup source = new UrmlNavigatorGroup(
-				Messages.NavigatorGroupName_AbstractFeatureDetailingFunctionalRequirements_4035_source,
-				"icons/linkSourceNavigatorGroup.gif", parentElement); //$NON-NLS-1$
-			Collection connectedViews = getLinksTargetByType(Collections.singleton(view), UrmlVisualIDRegistry
-				.getType(FunctionalRequirementEditPart.VISUAL_ID));
-			target.addChildren(createNavigatorItems(connectedViews, target, true));
-			connectedViews = getLinksSourceByType(Collections.singleton(view), UrmlVisualIDRegistry
-				.getType(FeatureEditPart.VISUAL_ID));
-			source.addChildren(createNavigatorItems(connectedViews, source, true));
-			connectedViews = getLinksSourceByType(Collections.singleton(view), UrmlVisualIDRegistry
-				.getType(VariationPointEditPart.VISUAL_ID));
-			source.addChildren(createNavigatorItems(connectedViews, source, true));
+					Messages.NavigatorGroupName_ServiceSubServices_4022_source,
+					"icons/linkSourceNavigatorGroup.gif", parentElement); //$NON-NLS-1$
+			Collection<View> connectedViews;
+			connectedViews = getLinksTargetByType(Collections.singleton(sv),
+					UrmlVisualIDRegistry.getType(ServiceEditPart.VISUAL_ID));
+			target.addChildren(createNavigatorItems(connectedViews, target,
+					true));
+			connectedViews = getLinksSourceByType(Collections.singleton(sv),
+					UrmlVisualIDRegistry.getType(ServiceEditPart.VISUAL_ID));
+			source.addChildren(createNavigatorItems(connectedViews, source,
+					true));
 			if (!target.isEmpty()) {
 				result.add(target);
 			}
@@ -807,52 +906,246 @@
 			return result.toArray();
 		}
 
-		case AbstractFeatureConstrainingNonFunctionalRequirementsEditPart.VISUAL_ID: {
-			Collection result = new ArrayList();
-			UrmlNavigatorGroup target = new UrmlNavigatorGroup(
-				Messages.NavigatorGroupName_AbstractFeatureConstrainingNonFunctionalRequirements_4036_target,
-				"icons/linkTargetNavigatorGroup.gif", parentElement); //$NON-NLS-1$
-			UrmlNavigatorGroup source = new UrmlNavigatorGroup(
-				Messages.NavigatorGroupName_AbstractFeatureConstrainingNonFunctionalRequirements_4036_source,
-				"icons/linkSourceNavigatorGroup.gif", parentElement); //$NON-NLS-1$
-			Collection connectedViews = getLinksTargetByType(Collections.singleton(view), UrmlVisualIDRegistry
-				.getType(NonFunctionalRequirementEditPart.VISUAL_ID));
-			target.addChildren(createNavigatorItems(connectedViews, target, true));
-			connectedViews = getLinksSourceByType(Collections.singleton(view), UrmlVisualIDRegistry
-				.getType(FeatureEditPart.VISUAL_ID));
-			source.addChildren(createNavigatorItems(connectedViews, source, true));
-			connectedViews = getLinksSourceByType(Collections.singleton(view), UrmlVisualIDRegistry
-				.getType(VariationPointEditPart.VISUAL_ID));
-			source.addChildren(createNavigatorItems(connectedViews, source, true));
-			if (!target.isEmpty()) {
-				result.add(target);
+		case URMLDiagramEditPart.VISUAL_ID: {
+			LinkedList<UrmlAbstractNavigatorItem> result = new LinkedList<UrmlAbstractNavigatorItem>();
+			Diagram sv = (Diagram) view;
+			UrmlNavigatorGroup links = new UrmlNavigatorGroup(
+					Messages.NavigatorGroupName_URMLDiagram_1000_links,
+					"icons/linksNavigatorGroup.gif", parentElement); //$NON-NLS-1$
+			Collection<View> connectedViews;
+			connectedViews = getChildrenByType(Collections.singleton(sv),
+					UrmlVisualIDRegistry.getType(StakeholderEditPart.VISUAL_ID));
+			result.addAll(createNavigatorItems(connectedViews, parentElement,
+					false));
+			connectedViews = getChildrenByType(Collections.singleton(sv),
+					UrmlVisualIDRegistry.getType(GoalEditPart.VISUAL_ID));
+			result.addAll(createNavigatorItems(connectedViews, parentElement,
+					false));
+			connectedViews = getChildrenByType(Collections.singleton(sv),
+					UrmlVisualIDRegistry
+							.getType(FunctionalRequirementEditPart.VISUAL_ID));
+			result.addAll(createNavigatorItems(connectedViews, parentElement,
+					false));
+			connectedViews = getChildrenByType(Collections.singleton(sv),
+					UrmlVisualIDRegistry.getType(FeatureEditPart.VISUAL_ID));
+			result.addAll(createNavigatorItems(connectedViews, parentElement,
+					false));
+			connectedViews = getChildrenByType(Collections.singleton(sv),
+					UrmlVisualIDRegistry.getType(ServiceEditPart.VISUAL_ID));
+			result.addAll(createNavigatorItems(connectedViews, parentElement,
+					false));
+			connectedViews = getChildrenByType(
+					Collections.singleton(sv),
+					UrmlVisualIDRegistry
+							.getType(NonFunctionalRequirementEditPart.VISUAL_ID));
+			result.addAll(createNavigatorItems(connectedViews, parentElement,
+					false));
+			connectedViews = getChildrenByType(Collections.singleton(sv),
+					UrmlVisualIDRegistry.getType(DangerEditPart.VISUAL_ID));
+			result.addAll(createNavigatorItems(connectedViews, parentElement,
+					false));
+			connectedViews = getChildrenByType(Collections.singleton(sv),
+					UrmlVisualIDRegistry.getType(ActorEditPart.VISUAL_ID));
+			result.addAll(createNavigatorItems(connectedViews, parentElement,
+					false));
+			connectedViews = getChildrenByType(Collections.singleton(sv),
+					UrmlVisualIDRegistry
+							.getType(ProceduralMitigationEditPart.VISUAL_ID));
+			result.addAll(createNavigatorItems(connectedViews, parentElement,
+					false));
+			connectedViews = getChildrenByType(Collections.singleton(sv),
+					UrmlVisualIDRegistry
+							.getType(VariationPointEditPart.VISUAL_ID));
+			result.addAll(createNavigatorItems(connectedViews, parentElement,
+					false));
+			connectedViews = getChildrenByType(Collections.singleton(sv),
+					UrmlVisualIDRegistry
+							.getType(VariationPointInstanceEditPart.VISUAL_ID));
+			result.addAll(createNavigatorItems(connectedViews, parentElement,
+					false));
+			connectedViews = getChildrenByType(Collections.singleton(sv),
+					UrmlVisualIDRegistry.getType(ProductEditPart.VISUAL_ID));
+			result.addAll(createNavigatorItems(connectedViews, parentElement,
+					false));
+			connectedViews = getDiagramLinksByType(Collections.singleton(sv),
+					UrmlVisualIDRegistry
+							.getType(StakeholderGoalsEditPart.VISUAL_ID));
+			links.addChildren(createNavigatorItems(connectedViews, links, false));
+			connectedViews = getDiagramLinksByType(
+					Collections.singleton(sv),
+					UrmlVisualIDRegistry
+							.getType(AbstractFeatureSubFeaturesEditPart.VISUAL_ID));
+			links.addChildren(createNavigatorItems(connectedViews, links, false));
+			connectedViews = getDiagramLinksByType(
+					Collections.singleton(sv),
+					UrmlVisualIDRegistry
+							.getType(AbstractFeatureDetailingFunctionalRequirementsEditPart.VISUAL_ID));
+			links.addChildren(createNavigatorItems(connectedViews, links, false));
+			connectedViews = getDiagramLinksByType(
+					Collections.singleton(sv),
+					UrmlVisualIDRegistry
+							.getType(AbstractFeatureConstrainingNonFunctionalRequirementsEditPart.VISUAL_ID));
+			links.addChildren(createNavigatorItems(connectedViews, links, false));
+			connectedViews = getDiagramLinksByType(
+					Collections.singleton(sv),
+					UrmlVisualIDRegistry
+							.getType(AbstractFeatureRequiredFeaturesEditPart.VISUAL_ID));
+			links.addChildren(createNavigatorItems(connectedViews, links, false));
+			connectedViews = getDiagramLinksByType(
+					Collections.singleton(sv),
+					UrmlVisualIDRegistry
+							.getType(AbstractFeatureExcludedFeaturesEditPart.VISUAL_ID));
+			links.addChildren(createNavigatorItems(connectedViews, links, false));
+			connectedViews = getDiagramLinksByType(Collections.singleton(sv),
+					UrmlVisualIDRegistry
+							.getType(GoalRealizedFeaturesEditPart.VISUAL_ID));
+			links.addChildren(createNavigatorItems(connectedViews, links, false));
+			connectedViews = getDiagramLinksByType(Collections.singleton(sv),
+					UrmlVisualIDRegistry
+							.getType(GoalSubGoalsEditPart.VISUAL_ID));
+			links.addChildren(createNavigatorItems(connectedViews, links, false));
+			connectedViews = getDiagramLinksByType(Collections.singleton(sv),
+					UrmlVisualIDRegistry
+							.getType(GoalReferenceEditPart.VISUAL_ID));
+			links.addChildren(createNavigatorItems(connectedViews, links, false));
+			connectedViews = getDiagramLinksByType(Collections.singleton(sv),
+					UrmlVisualIDRegistry
+							.getType(GoalReference2EditPart.VISUAL_ID));
+			links.addChildren(createNavigatorItems(connectedViews, links, false));
+			connectedViews = getDiagramLinksByType(Collections.singleton(sv),
+					UrmlVisualIDRegistry
+							.getType(GoalReference3EditPart.VISUAL_ID));
+			links.addChildren(createNavigatorItems(connectedViews, links, false));
+			connectedViews = getDiagramLinksByType(Collections.singleton(sv),
+					UrmlVisualIDRegistry
+							.getType(GoalReference4EditPart.VISUAL_ID));
+			links.addChildren(createNavigatorItems(connectedViews, links, false));
+			connectedViews = getDiagramLinksByType(
+					Collections.singleton(sv),
+					UrmlVisualIDRegistry
+							.getType(RequirementImplementingServicesEditPart.VISUAL_ID));
+			links.addChildren(createNavigatorItems(connectedViews, links, false));
+			connectedViews = getDiagramLinksByType(
+					Collections.singleton(sv),
+					UrmlVisualIDRegistry
+							.getType(NonFunctionalRequirementSubNonFunctionalRequirementsEditPart.VISUAL_ID));
+			links.addChildren(createNavigatorItems(connectedViews, links, false));
+			connectedViews = getDiagramLinksByType(
+					Collections.singleton(sv),
+					UrmlVisualIDRegistry
+							.getType(FunctionalRequirementSubFunctionalRequirementsEditPart.VISUAL_ID));
+			links.addChildren(createNavigatorItems(connectedViews, links, false));
+			connectedViews = getDiagramLinksByType(
+					Collections.singleton(sv),
+					UrmlVisualIDRegistry
+							.getType(MitigationMitigatedDangersEditPart.VISUAL_ID));
+			links.addChildren(createNavigatorItems(connectedViews, links, false));
+			connectedViews = getDiagramLinksByType(Collections.singleton(sv),
+					UrmlVisualIDRegistry
+							.getType(DangerHarmedAssetsEditPart.VISUAL_ID));
+			links.addChildren(createNavigatorItems(connectedViews, links, false));
+			connectedViews = getDiagramLinksByType(Collections.singleton(sv),
+					UrmlVisualIDRegistry
+							.getType(AssetTriggeredDangersEditPart.VISUAL_ID));
+			links.addChildren(createNavigatorItems(connectedViews, links, false));
+			connectedViews = getDiagramLinksByType(Collections.singleton(sv),
+					UrmlVisualIDRegistry
+							.getType(ServiceSubServicesEditPart.VISUAL_ID));
+			links.addChildren(createNavigatorItems(connectedViews, links, false));
+			connectedViews = getDiagramLinksByType(
+					Collections.singleton(sv),
+					UrmlVisualIDRegistry
+							.getType(VariationPointOptionalSubFeaturesEditPart.VISUAL_ID));
+			links.addChildren(createNavigatorItems(connectedViews, links, false));
+			connectedViews = getDiagramLinksByType(
+					Collections.singleton(sv),
+					UrmlVisualIDRegistry
+							.getType(VariationPointInstanceVariationPointEditPart.VISUAL_ID));
+			links.addChildren(createNavigatorItems(connectedViews, links, false));
+			connectedViews = getDiagramLinksByType(
+					Collections.singleton(sv),
+					UrmlVisualIDRegistry
+							.getType(VariationPointInstanceSelectedFeaturesEditPart.VISUAL_ID));
+			links.addChildren(createNavigatorItems(connectedViews, links, false));
+			connectedViews = getDiagramLinksByType(
+					Collections.singleton(sv),
+					UrmlVisualIDRegistry
+							.getType(ProductVariationPointInstancesEditPart.VISUAL_ID));
+			links.addChildren(createNavigatorItems(connectedViews, links, false));
+			connectedViews = getDiagramLinksByType(Collections.singleton(sv),
+					UrmlVisualIDRegistry
+							.getType(ProductFeaturesEditPart.VISUAL_ID));
+			links.addChildren(createNavigatorItems(connectedViews, links, false));
+			connectedViews = getDiagramLinksByType(
+					Collections.singleton(sv),
+					UrmlVisualIDRegistry
+							.getType(UrmlModelElementAssociationsEditPart.VISUAL_ID));
+			links.addChildren(createNavigatorItems(connectedViews, links, false));
+			if (!links.isEmpty()) {
+				result.add(links);
 			}
-			if (!source.isEmpty()) {
-				result.add(source);
+			return result.toArray();
+		}
+
+		case ProceduralMitigationEditPart.VISUAL_ID: {
+			LinkedList<UrmlAbstractNavigatorItem> result = new LinkedList<UrmlAbstractNavigatorItem>();
+			Node sv = (Node) view;
+			UrmlNavigatorGroup outgoinglinks = new UrmlNavigatorGroup(
+					Messages.NavigatorGroupName_ProceduralMitigation_2011_outgoinglinks,
+					"icons/outgoingLinksNavigatorGroup.gif", parentElement); //$NON-NLS-1$
+			UrmlNavigatorGroup incominglinks = new UrmlNavigatorGroup(
+					Messages.NavigatorGroupName_ProceduralMitigation_2011_incominglinks,
+					"icons/incomingLinksNavigatorGroup.gif", parentElement); //$NON-NLS-1$
+			Collection<View> connectedViews;
+			connectedViews = getOutgoingLinksByType(
+					Collections.singleton(sv),
+					UrmlVisualIDRegistry
+							.getType(MitigationMitigatedDangersEditPart.VISUAL_ID));
+			outgoinglinks.addChildren(createNavigatorItems(connectedViews,
+					outgoinglinks, true));
+			connectedViews = getIncomingLinksByType(
+					Collections.singleton(sv),
+					UrmlVisualIDRegistry
+							.getType(UrmlModelElementAssociationsEditPart.VISUAL_ID));
+			incominglinks.addChildren(createNavigatorItems(connectedViews,
+					incominglinks, true));
+			connectedViews = getOutgoingLinksByType(
+					Collections.singleton(sv),
+					UrmlVisualIDRegistry
+							.getType(UrmlModelElementAssociationsEditPart.VISUAL_ID));
+			outgoinglinks.addChildren(createNavigatorItems(connectedViews,
+					outgoinglinks, true));
+			if (!outgoinglinks.isEmpty()) {
+				result.add(outgoinglinks);
+			}
+			if (!incominglinks.isEmpty()) {
+				result.add(incominglinks);
 			}
 			return result.toArray();
 		}
 
-		case AbstractFeatureRequiredFeaturesEditPart.VISUAL_ID: {
-			Collection result = new ArrayList();
+		case AssetTriggeredDangersEditPart.VISUAL_ID: {
+			LinkedList<UrmlAbstractNavigatorItem> result = new LinkedList<UrmlAbstractNavigatorItem>();
+			Edge sv = (Edge) view;
 			UrmlNavigatorGroup target = new UrmlNavigatorGroup(
-				Messages.NavigatorGroupName_AbstractFeatureRequiredFeatures_4045_target,
-				"icons/linkTargetNavigatorGroup.gif", parentElement); //$NON-NLS-1$
+					Messages.NavigatorGroupName_AssetTriggeredDangers_4017_target,
+					"icons/linkTargetNavigatorGroup.gif", parentElement); //$NON-NLS-1$
 			UrmlNavigatorGroup source = new UrmlNavigatorGroup(
-				Messages.NavigatorGroupName_AbstractFeatureRequiredFeatures_4045_source,
-				"icons/linkSourceNavigatorGroup.gif", parentElement); //$NON-NLS-1$
-			Collection connectedViews = getLinksTargetByType(Collections.singleton(view), UrmlVisualIDRegistry
-				.getType(FeatureEditPart.VISUAL_ID));
-			target.addChildren(createNavigatorItems(connectedViews, target, true));
-			connectedViews = getLinksTargetByType(Collections.singleton(view), UrmlVisualIDRegistry
-				.getType(VariationPointEditPart.VISUAL_ID));
-			target.addChildren(createNavigatorItems(connectedViews, target, true));
-			connectedViews = getLinksSourceByType(Collections.singleton(view), UrmlVisualIDRegistry
-				.getType(FeatureEditPart.VISUAL_ID));
-			source.addChildren(createNavigatorItems(connectedViews, source, true));
-			connectedViews = getLinksSourceByType(Collections.singleton(view), UrmlVisualIDRegistry
-				.getType(VariationPointEditPart.VISUAL_ID));
-			source.addChildren(createNavigatorItems(connectedViews, source, true));
+					Messages.NavigatorGroupName_AssetTriggeredDangers_4017_source,
+					"icons/linkSourceNavigatorGroup.gif", parentElement); //$NON-NLS-1$
+			Collection<View> connectedViews;
+			connectedViews = getLinksTargetByType(Collections.singleton(sv),
+					UrmlVisualIDRegistry.getType(DangerEditPart.VISUAL_ID));
+			target.addChildren(createNavigatorItems(connectedViews, target,
+					true));
+			connectedViews = getLinksSourceByType(Collections.singleton(sv),
+					UrmlVisualIDRegistry.getType(ServiceEditPart.VISUAL_ID));
+			source.addChildren(createNavigatorItems(connectedViews, source,
+					true));
+			connectedViews = getLinksSourceByType(Collections.singleton(sv),
+					UrmlVisualIDRegistry.getType(ActorEditPart.VISUAL_ID));
+			source.addChildren(createNavigatorItems(connectedViews, source,
+					true));
 			if (!target.isEmpty()) {
 				result.add(target);
 			}
@@ -862,94 +1155,206 @@
 			return result.toArray();
 		}
 
-		case AbstractFeatureExcludedFeaturesEditPart.VISUAL_ID: {
-			Collection result = new ArrayList();
-			UrmlNavigatorGroup target = new UrmlNavigatorGroup(
-				Messages.NavigatorGroupName_AbstractFeatureExcludedFeatures_4038_target,
-				"icons/linkTargetNavigatorGroup.gif", parentElement); //$NON-NLS-1$
-			UrmlNavigatorGroup source = new UrmlNavigatorGroup(
-				Messages.NavigatorGroupName_AbstractFeatureExcludedFeatures_4038_source,
-				"icons/linkSourceNavigatorGroup.gif", parentElement); //$NON-NLS-1$
-			Collection connectedViews = getLinksTargetByType(Collections.singleton(view), UrmlVisualIDRegistry
-				.getType(FeatureEditPart.VISUAL_ID));
-			target.addChildren(createNavigatorItems(connectedViews, target, true));
-			connectedViews = getLinksTargetByType(Collections.singleton(view), UrmlVisualIDRegistry
-				.getType(VariationPointEditPart.VISUAL_ID));
-			target.addChildren(createNavigatorItems(connectedViews, target, true));
-			connectedViews = getLinksSourceByType(Collections.singleton(view), UrmlVisualIDRegistry
-				.getType(FeatureEditPart.VISUAL_ID));
-			source.addChildren(createNavigatorItems(connectedViews, source, true));
-			connectedViews = getLinksSourceByType(Collections.singleton(view), UrmlVisualIDRegistry
-				.getType(VariationPointEditPart.VISUAL_ID));
-			source.addChildren(createNavigatorItems(connectedViews, source, true));
-			if (!target.isEmpty()) {
-				result.add(target);
+		case FeatureEditPart.VISUAL_ID: {
+			LinkedList<UrmlAbstractNavigatorItem> result = new LinkedList<UrmlAbstractNavigatorItem>();
+			Node sv = (Node) view;
+			UrmlNavigatorGroup incominglinks = new UrmlNavigatorGroup(
+					Messages.NavigatorGroupName_Feature_2012_incominglinks,
+					"icons/incomingLinksNavigatorGroup.gif", parentElement); //$NON-NLS-1$
+			UrmlNavigatorGroup outgoinglinks = new UrmlNavigatorGroup(
+					Messages.NavigatorGroupName_Feature_2012_outgoinglinks,
+					"icons/outgoingLinksNavigatorGroup.gif", parentElement); //$NON-NLS-1$
+			Collection<View> connectedViews;
+			connectedViews = getIncomingLinksByType(
+					Collections.singleton(sv),
+					UrmlVisualIDRegistry
+							.getType(AbstractFeatureSubFeaturesEditPart.VISUAL_ID));
+			incominglinks.addChildren(createNavigatorItems(connectedViews,
+					incominglinks, true));
+			connectedViews = getOutgoingLinksByType(
+					Collections.singleton(sv),
+					UrmlVisualIDRegistry
+							.getType(AbstractFeatureSubFeaturesEditPart.VISUAL_ID));
+			outgoinglinks.addChildren(createNavigatorItems(connectedViews,
+					outgoinglinks, true));
+			connectedViews = getOutgoingLinksByType(
+					Collections.singleton(sv),
+					UrmlVisualIDRegistry
+							.getType(AbstractFeatureDetailingFunctionalRequirementsEditPart.VISUAL_ID));
+			outgoinglinks.addChildren(createNavigatorItems(connectedViews,
+					outgoinglinks, true));
+			connectedViews = getOutgoingLinksByType(
+					Collections.singleton(sv),
+					UrmlVisualIDRegistry
+							.getType(AbstractFeatureConstrainingNonFunctionalRequirementsEditPart.VISUAL_ID));
+			outgoinglinks.addChildren(createNavigatorItems(connectedViews,
+					outgoinglinks, true));
+			connectedViews = getIncomingLinksByType(
+					Collections.singleton(sv),
+					UrmlVisualIDRegistry
+							.getType(AbstractFeatureRequiredFeaturesEditPart.VISUAL_ID));
+			incominglinks.addChildren(createNavigatorItems(connectedViews,
+					incominglinks, true));
+			connectedViews = getOutgoingLinksByType(
+					Collections.singleton(sv),
+					UrmlVisualIDRegistry
+							.getType(AbstractFeatureRequiredFeaturesEditPart.VISUAL_ID));
+			outgoinglinks.addChildren(createNavigatorItems(connectedViews,
+					outgoinglinks, true));
+			connectedViews = getIncomingLinksByType(
+					Collections.singleton(sv),
+					UrmlVisualIDRegistry
+							.getType(AbstractFeatureExcludedFeaturesEditPart.VISUAL_ID));
+			incominglinks.addChildren(createNavigatorItems(connectedViews,
+					incominglinks, true));
+			connectedViews = getOutgoingLinksByType(
+					Collections.singleton(sv),
+					UrmlVisualIDRegistry
+							.getType(AbstractFeatureExcludedFeaturesEditPart.VISUAL_ID));
+			outgoinglinks.addChildren(createNavigatorItems(connectedViews,
+					outgoinglinks, true));
+			connectedViews = getIncomingLinksByType(Collections.singleton(sv),
+					UrmlVisualIDRegistry
+							.getType(GoalRealizedFeaturesEditPart.VISUAL_ID));
+			incominglinks.addChildren(createNavigatorItems(connectedViews,
+					incominglinks, true));
+			connectedViews = getIncomingLinksByType(
+					Collections.singleton(sv),
+					UrmlVisualIDRegistry
+							.getType(VariationPointOptionalSubFeaturesEditPart.VISUAL_ID));
+			incominglinks.addChildren(createNavigatorItems(connectedViews,
+					incominglinks, true));
+			connectedViews = getIncomingLinksByType(
+					Collections.singleton(sv),
+					UrmlVisualIDRegistry
+							.getType(VariationPointInstanceSelectedFeaturesEditPart.VISUAL_ID));
+			incominglinks.addChildren(createNavigatorItems(connectedViews,
+					incominglinks, true));
+			connectedViews = getIncomingLinksByType(Collections.singleton(sv),
+					UrmlVisualIDRegistry
+							.getType(ProductFeaturesEditPart.VISUAL_ID));
+			incominglinks.addChildren(createNavigatorItems(connectedViews,
+					incominglinks, true));
+			connectedViews = getIncomingLinksByType(
+					Collections.singleton(sv),
+					UrmlVisualIDRegistry
+							.getType(UrmlModelElementAssociationsEditPart.VISUAL_ID));
+			incominglinks.addChildren(createNavigatorItems(connectedViews,
+					incominglinks, true));
+			connectedViews = getOutgoingLinksByType(
+					Collections.singleton(sv),
+					UrmlVisualIDRegistry
+							.getType(UrmlModelElementAssociationsEditPart.VISUAL_ID));
+			outgoinglinks.addChildren(createNavigatorItems(connectedViews,
+					outgoinglinks, true));
+			if (!incominglinks.isEmpty()) {
+				result.add(incominglinks);
 			}
-			if (!source.isEmpty()) {
-				result.add(source);
+			if (!outgoinglinks.isEmpty()) {
+				result.add(outgoinglinks);
 			}
 			return result.toArray();
 		}
 
-		case GoalRealizedFeaturesEditPart.VISUAL_ID: {
-			Collection result = new ArrayList();
+		case GoalReference4EditPart.VISUAL_ID: {
+			LinkedList<UrmlAbstractNavigatorItem> result = new LinkedList<UrmlAbstractNavigatorItem>();
+			Edge sv = (Edge) view;
 			UrmlNavigatorGroup target = new UrmlNavigatorGroup(
-				Messages.NavigatorGroupName_GoalRealizedFeatures_4004_target,
-				"icons/linkTargetNavigatorGroup.gif", parentElement); //$NON-NLS-1$
+					Messages.NavigatorGroupName_GoalReference_4025_target,
+					"icons/linkTargetNavigatorGroup.gif", parentElement); //$NON-NLS-1$
 			UrmlNavigatorGroup source = new UrmlNavigatorGroup(
-				Messages.NavigatorGroupName_GoalRealizedFeatures_4004_source,
-				"icons/linkSourceNavigatorGroup.gif", parentElement); //$NON-NLS-1$
-			Collection connectedViews = getLinksTargetByType(Collections.singleton(view), UrmlVisualIDRegistry
-				.getType(FeatureEditPart.VISUAL_ID));
-			target.addChildren(createNavigatorItems(connectedViews, target, true));
-			connectedViews = getLinksTargetByType(Collections.singleton(view), UrmlVisualIDRegistry
-				.getType(VariationPointEditPart.VISUAL_ID));
-			target.addChildren(createNavigatorItems(connectedViews, target, true));
-			connectedViews = getLinksSourceByType(Collections.singleton(view), UrmlVisualIDRegistry
-				.getType(GoalEditPart.VISUAL_ID));
-			source.addChildren(createNavigatorItems(connectedViews, source, true));
+					Messages.NavigatorGroupName_GoalReference_4025_source,
+					"icons/linkSourceNavigatorGroup.gif", parentElement); //$NON-NLS-1$
+			UrmlNavigatorGroup incominglinks = new UrmlNavigatorGroup(
+					Messages.NavigatorGroupName_GoalReference_4025_incominglinks,
+					"icons/incomingLinksNavigatorGroup.gif", parentElement); //$NON-NLS-1$
+			UrmlNavigatorGroup outgoinglinks = new UrmlNavigatorGroup(
+					Messages.NavigatorGroupName_GoalReference_4025_outgoinglinks,
+					"icons/outgoingLinksNavigatorGroup.gif", parentElement); //$NON-NLS-1$
+			Collection<View> connectedViews;
+			connectedViews = getLinksTargetByType(Collections.singleton(sv),
+					UrmlVisualIDRegistry.getType(GoalEditPart.VISUAL_ID));
+			target.addChildren(createNavigatorItems(connectedViews, target,
+					true));
+			connectedViews = getLinksSourceByType(Collections.singleton(sv),
+					UrmlVisualIDRegistry.getType(GoalEditPart.VISUAL_ID));
+			source.addChildren(createNavigatorItems(connectedViews, source,
+					true));
 			if (!target.isEmpty()) {
 				result.add(target);
 			}
 			if (!source.isEmpty()) {
 				result.add(source);
 			}
+			if (!incominglinks.isEmpty()) {
+				result.add(incominglinks);
+			}
+			if (!outgoinglinks.isEmpty()) {
+				result.add(outgoinglinks);
+			}
 			return result.toArray();
 		}
 
-		case GoalSubGoalsEditPart.VISUAL_ID: {
-			Collection result = new ArrayList();
-			UrmlNavigatorGroup target = new UrmlNavigatorGroup(Messages.NavigatorGroupName_GoalSubGoals_4018_target,
-				"icons/linkTargetNavigatorGroup.gif", parentElement); //$NON-NLS-1$
-			UrmlNavigatorGroup source = new UrmlNavigatorGroup(Messages.NavigatorGroupName_GoalSubGoals_4018_source,
-				"icons/linkSourceNavigatorGroup.gif", parentElement); //$NON-NLS-1$
-			Collection connectedViews = getLinksTargetByType(Collections.singleton(view), UrmlVisualIDRegistry
-				.getType(GoalEditPart.VISUAL_ID));
-			target.addChildren(createNavigatorItems(connectedViews, target, true));
-			connectedViews = getLinksSourceByType(Collections.singleton(view), UrmlVisualIDRegistry
-				.getType(GoalEditPart.VISUAL_ID));
-			source.addChildren(createNavigatorItems(connectedViews, source, true));
-			if (!target.isEmpty()) {
-				result.add(target);
+		case ProductEditPart.VISUAL_ID: {
+			LinkedList<UrmlAbstractNavigatorItem> result = new LinkedList<UrmlAbstractNavigatorItem>();
+			Node sv = (Node) view;
+			UrmlNavigatorGroup outgoinglinks = new UrmlNavigatorGroup(
+					Messages.NavigatorGroupName_Product_2015_outgoinglinks,
+					"icons/outgoingLinksNavigatorGroup.gif", parentElement); //$NON-NLS-1$
+			UrmlNavigatorGroup incominglinks = new UrmlNavigatorGroup(
+					Messages.NavigatorGroupName_Product_2015_incominglinks,
+					"icons/incomingLinksNavigatorGroup.gif", parentElement); //$NON-NLS-1$
+			Collection<View> connectedViews;
+			connectedViews = getOutgoingLinksByType(
+					Collections.singleton(sv),
+					UrmlVisualIDRegistry
+							.getType(ProductVariationPointInstancesEditPart.VISUAL_ID));
+			outgoinglinks.addChildren(createNavigatorItems(connectedViews,
+					outgoinglinks, true));
+			connectedViews = getOutgoingLinksByType(Collections.singleton(sv),
+					UrmlVisualIDRegistry
+							.getType(ProductFeaturesEditPart.VISUAL_ID));
+			outgoinglinks.addChildren(createNavigatorItems(connectedViews,
+					outgoinglinks, true));
+			connectedViews = getIncomingLinksByType(
+					Collections.singleton(sv),
+					UrmlVisualIDRegistry
+							.getType(UrmlModelElementAssociationsEditPart.VISUAL_ID));
+			incominglinks.addChildren(createNavigatorItems(connectedViews,
+					incominglinks, true));
+			connectedViews = getOutgoingLinksByType(
+					Collections.singleton(sv),
+					UrmlVisualIDRegistry
+							.getType(UrmlModelElementAssociationsEditPart.VISUAL_ID));
+			outgoinglinks.addChildren(createNavigatorItems(connectedViews,
+					outgoinglinks, true));
+			if (!outgoinglinks.isEmpty()) {
+				result.add(outgoinglinks);
 			}
-			if (!source.isEmpty()) {
-				result.add(source);
+			if (!incominglinks.isEmpty()) {
+				result.add(incominglinks);
 			}
 			return result.toArray();
 		}
 
-		case GoalReferenceEditPart.VISUAL_ID: {
-			Collection result = new ArrayList();
-			UrmlNavigatorGroup target = new UrmlNavigatorGroup(Messages.NavigatorGroupName_GoalReference_4016_target,
-				"icons/linkTargetNavigatorGroup.gif", parentElement); //$NON-NLS-1$
-			UrmlNavigatorGroup source = new UrmlNavigatorGroup(Messages.NavigatorGroupName_GoalReference_4016_source,
-				"icons/linkSourceNavigatorGroup.gif", parentElement); //$NON-NLS-1$
-			Collection connectedViews = getLinksTargetByType(Collections.singleton(view), UrmlVisualIDRegistry
-				.getType(GoalEditPart.VISUAL_ID));
-			target.addChildren(createNavigatorItems(connectedViews, target, true));
-			connectedViews = getLinksSourceByType(Collections.singleton(view), UrmlVisualIDRegistry
-				.getType(GoalEditPart.VISUAL_ID));
-			source.addChildren(createNavigatorItems(connectedViews, source, true));
+		case ProductFeaturesEditPart.VISUAL_ID: {
+			LinkedList<UrmlAbstractNavigatorItem> result = new LinkedList<UrmlAbstractNavigatorItem>();
+			Edge sv = (Edge) view;
+			UrmlNavigatorGroup target = new UrmlNavigatorGroup(
+					Messages.NavigatorGroupName_ProductFeatures_4047_target,
+					"icons/linkTargetNavigatorGroup.gif", parentElement); //$NON-NLS-1$
+			UrmlNavigatorGroup source = new UrmlNavigatorGroup(
+					Messages.NavigatorGroupName_ProductFeatures_4047_source,
+					"icons/linkSourceNavigatorGroup.gif", parentElement); //$NON-NLS-1$
+			Collection<View> connectedViews;
+			connectedViews = getLinksTargetByType(Collections.singleton(sv),
+					UrmlVisualIDRegistry.getType(FeatureEditPart.VISUAL_ID));
+			target.addChildren(createNavigatorItems(connectedViews, target,
+					true));
+			connectedViews = getLinksSourceByType(Collections.singleton(sv),
+					UrmlVisualIDRegistry.getType(ProductEditPart.VISUAL_ID));
+			source.addChildren(createNavigatorItems(connectedViews, source,
+					true));
 			if (!target.isEmpty()) {
 				result.add(target);
 			}
@@ -959,18 +1364,36 @@
 			return result.toArray();
 		}
 
-		case GoalReference2EditPart.VISUAL_ID: {
-			Collection result = new ArrayList();
-			UrmlNavigatorGroup target = new UrmlNavigatorGroup(Messages.NavigatorGroupName_GoalReference_4023_target,
-				"icons/linkTargetNavigatorGroup.gif", parentElement); //$NON-NLS-1$
-			UrmlNavigatorGroup source = new UrmlNavigatorGroup(Messages.NavigatorGroupName_GoalReference_4023_source,
-				"icons/linkSourceNavigatorGroup.gif", parentElement); //$NON-NLS-1$
-			Collection connectedViews = getLinksTargetByType(Collections.singleton(view), UrmlVisualIDRegistry
-				.getType(GoalEditPart.VISUAL_ID));
-			target.addChildren(createNavigatorItems(connectedViews, target, true));
-			connectedViews = getLinksSourceByType(Collections.singleton(view), UrmlVisualIDRegistry
-				.getType(GoalEditPart.VISUAL_ID));
-			source.addChildren(createNavigatorItems(connectedViews, source, true));
+		case MitigationMitigatedDangersEditPart.VISUAL_ID: {
+			LinkedList<UrmlAbstractNavigatorItem> result = new LinkedList<UrmlAbstractNavigatorItem>();
+			Edge sv = (Edge) view;
+			UrmlNavigatorGroup target = new UrmlNavigatorGroup(
+					Messages.NavigatorGroupName_MitigationMitigatedDangers_4012_target,
+					"icons/linkTargetNavigatorGroup.gif", parentElement); //$NON-NLS-1$
+			UrmlNavigatorGroup source = new UrmlNavigatorGroup(
+					Messages.NavigatorGroupName_MitigationMitigatedDangers_4012_source,
+					"icons/linkSourceNavigatorGroup.gif", parentElement); //$NON-NLS-1$
+			Collection<View> connectedViews;
+			connectedViews = getLinksTargetByType(Collections.singleton(sv),
+					UrmlVisualIDRegistry.getType(DangerEditPart.VISUAL_ID));
+			target.addChildren(createNavigatorItems(connectedViews, target,
+					true));
+			connectedViews = getLinksSourceByType(Collections.singleton(sv),
+					UrmlVisualIDRegistry
+							.getType(FunctionalRequirementEditPart.VISUAL_ID));
+			source.addChildren(createNavigatorItems(connectedViews, source,
+					true));
+			connectedViews = getLinksSourceByType(
+					Collections.singleton(sv),
+					UrmlVisualIDRegistry
+							.getType(NonFunctionalRequirementEditPart.VISUAL_ID));
+			source.addChildren(createNavigatorItems(connectedViews, source,
+					true));
+			connectedViews = getLinksSourceByType(Collections.singleton(sv),
+					UrmlVisualIDRegistry
+							.getType(ProceduralMitigationEditPart.VISUAL_ID));
+			source.addChildren(createNavigatorItems(connectedViews, source,
+					true));
 			if (!target.isEmpty()) {
 				result.add(target);
 			}
@@ -980,18 +1403,34 @@
 			return result.toArray();
 		}
 
-		case GoalReference3EditPart.VISUAL_ID: {
-			Collection result = new ArrayList();
-			UrmlNavigatorGroup target = new UrmlNavigatorGroup(Messages.NavigatorGroupName_GoalReference_4024_target,
-				"icons/linkTargetNavigatorGroup.gif", parentElement); //$NON-NLS-1$
-			UrmlNavigatorGroup source = new UrmlNavigatorGroup(Messages.NavigatorGroupName_GoalReference_4024_source,
-				"icons/linkSourceNavigatorGroup.gif", parentElement); //$NON-NLS-1$
-			Collection connectedViews = getLinksTargetByType(Collections.singleton(view), UrmlVisualIDRegistry
-				.getType(GoalEditPart.VISUAL_ID));
-			target.addChildren(createNavigatorItems(connectedViews, target, true));
-			connectedViews = getLinksSourceByType(Collections.singleton(view), UrmlVisualIDRegistry
-				.getType(GoalEditPart.VISUAL_ID));
-			source.addChildren(createNavigatorItems(connectedViews, source, true));
+		case AbstractFeatureSubFeaturesEditPart.VISUAL_ID: {
+			LinkedList<UrmlAbstractNavigatorItem> result = new LinkedList<UrmlAbstractNavigatorItem>();
+			Edge sv = (Edge) view;
+			UrmlNavigatorGroup target = new UrmlNavigatorGroup(
+					Messages.NavigatorGroupName_AbstractFeatureSubFeatures_4034_target,
+					"icons/linkTargetNavigatorGroup.gif", parentElement); //$NON-NLS-1$
+			UrmlNavigatorGroup source = new UrmlNavigatorGroup(
+					Messages.NavigatorGroupName_AbstractFeatureSubFeatures_4034_source,
+					"icons/linkSourceNavigatorGroup.gif", parentElement); //$NON-NLS-1$
+			Collection<View> connectedViews;
+			connectedViews = getLinksTargetByType(Collections.singleton(sv),
+					UrmlVisualIDRegistry.getType(FeatureEditPart.VISUAL_ID));
+			target.addChildren(createNavigatorItems(connectedViews, target,
+					true));
+			connectedViews = getLinksTargetByType(Collections.singleton(sv),
+					UrmlVisualIDRegistry
+							.getType(VariationPointEditPart.VISUAL_ID));
+			target.addChildren(createNavigatorItems(connectedViews, target,
+					true));
+			connectedViews = getLinksSourceByType(Collections.singleton(sv),
+					UrmlVisualIDRegistry.getType(FeatureEditPart.VISUAL_ID));
+			source.addChildren(createNavigatorItems(connectedViews, source,
+					true));
+			connectedViews = getLinksSourceByType(Collections.singleton(sv),
+					UrmlVisualIDRegistry
+							.getType(VariationPointEditPart.VISUAL_ID));
+			source.addChildren(createNavigatorItems(connectedViews, source,
+					true));
 			if (!target.isEmpty()) {
 				result.add(target);
 			}
@@ -1001,18 +1440,34 @@
 			return result.toArray();
 		}
 
-		case GoalReference4EditPart.VISUAL_ID: {
-			Collection result = new ArrayList();
-			UrmlNavigatorGroup target = new UrmlNavigatorGroup(Messages.NavigatorGroupName_GoalReference_4025_target,
-				"icons/linkTargetNavigatorGroup.gif", parentElement); //$NON-NLS-1$
-			UrmlNavigatorGroup source = new UrmlNavigatorGroup(Messages.NavigatorGroupName_GoalReference_4025_source,
-				"icons/linkSourceNavigatorGroup.gif", parentElement); //$NON-NLS-1$
-			Collection connectedViews = getLinksTargetByType(Collections.singleton(view), UrmlVisualIDRegistry
-				.getType(GoalEditPart.VISUAL_ID));
-			target.addChildren(createNavigatorItems(connectedViews, target, true));
-			connectedViews = getLinksSourceByType(Collections.singleton(view), UrmlVisualIDRegistry
-				.getType(GoalEditPart.VISUAL_ID));
-			source.addChildren(createNavigatorItems(connectedViews, source, true));
+		case AbstractFeatureExcludedFeaturesEditPart.VISUAL_ID: {
+			LinkedList<UrmlAbstractNavigatorItem> result = new LinkedList<UrmlAbstractNavigatorItem>();
+			Edge sv = (Edge) view;
+			UrmlNavigatorGroup target = new UrmlNavigatorGroup(
+					Messages.NavigatorGroupName_AbstractFeatureExcludedFeatures_4038_target,
+					"icons/linkTargetNavigatorGroup.gif", parentElement); //$NON-NLS-1$
+			UrmlNavigatorGroup source = new UrmlNavigatorGroup(
+					Messages.NavigatorGroupName_AbstractFeatureExcludedFeatures_4038_source,
+					"icons/linkSourceNavigatorGroup.gif", parentElement); //$NON-NLS-1$
+			Collection<View> connectedViews;
+			connectedViews = getLinksTargetByType(Collections.singleton(sv),
+					UrmlVisualIDRegistry.getType(FeatureEditPart.VISUAL_ID));
+			target.addChildren(createNavigatorItems(connectedViews, target,
+					true));
+			connectedViews = getLinksTargetByType(Collections.singleton(sv),
+					UrmlVisualIDRegistry
+							.getType(VariationPointEditPart.VISUAL_ID));
+			target.addChildren(createNavigatorItems(connectedViews, target,
+					true));
+			connectedViews = getLinksSourceByType(Collections.singleton(sv),
+					UrmlVisualIDRegistry.getType(FeatureEditPart.VISUAL_ID));
+			source.addChildren(createNavigatorItems(connectedViews, source,
+					true));
+			connectedViews = getLinksSourceByType(Collections.singleton(sv),
+					UrmlVisualIDRegistry
+							.getType(VariationPointEditPart.VISUAL_ID));
+			source.addChildren(createNavigatorItems(connectedViews, source,
+					true));
 			if (!target.isEmpty()) {
 				result.add(target);
 			}
@@ -1022,23 +1477,34 @@
 			return result.toArray();
 		}
 
-		case RequirementImplementingServicesEditPart.VISUAL_ID: {
-			Collection result = new ArrayList();
+		case AbstractFeatureRequiredFeaturesEditPart.VISUAL_ID: {
+			LinkedList<UrmlAbstractNavigatorItem> result = new LinkedList<UrmlAbstractNavigatorItem>();
+			Edge sv = (Edge) view;
 			UrmlNavigatorGroup target = new UrmlNavigatorGroup(
-				Messages.NavigatorGroupName_RequirementImplementingServices_4005_target,
-				"icons/linkTargetNavigatorGroup.gif", parentElement); //$NON-NLS-1$
+					Messages.NavigatorGroupName_AbstractFeatureRequiredFeatures_4045_target,
+					"icons/linkTargetNavigatorGroup.gif", parentElement); //$NON-NLS-1$
 			UrmlNavigatorGroup source = new UrmlNavigatorGroup(
-				Messages.NavigatorGroupName_RequirementImplementingServices_4005_source,
-				"icons/linkSourceNavigatorGroup.gif", parentElement); //$NON-NLS-1$
-			Collection connectedViews = getLinksTargetByType(Collections.singleton(view), UrmlVisualIDRegistry
-				.getType(ServiceEditPart.VISUAL_ID));
-			target.addChildren(createNavigatorItems(connectedViews, target, true));
-			connectedViews = getLinksSourceByType(Collections.singleton(view), UrmlVisualIDRegistry
-				.getType(FunctionalRequirementEditPart.VISUAL_ID));
-			source.addChildren(createNavigatorItems(connectedViews, source, true));
-			connectedViews = getLinksSourceByType(Collections.singleton(view), UrmlVisualIDRegistry
-				.getType(NonFunctionalRequirementEditPart.VISUAL_ID));
-			source.addChildren(createNavigatorItems(connectedViews, source, true));
+					Messages.NavigatorGroupName_AbstractFeatureRequiredFeatures_4045_source,
+					"icons/linkSourceNavigatorGroup.gif", parentElement); //$NON-NLS-1$
+			Collection<View> connectedViews;
+			connectedViews = getLinksTargetByType(Collections.singleton(sv),
+					UrmlVisualIDRegistry.getType(FeatureEditPart.VISUAL_ID));
+			target.addChildren(createNavigatorItems(connectedViews, target,
+					true));
+			connectedViews = getLinksTargetByType(Collections.singleton(sv),
+					UrmlVisualIDRegistry
+							.getType(VariationPointEditPart.VISUAL_ID));
+			target.addChildren(createNavigatorItems(connectedViews, target,
+					true));
+			connectedViews = getLinksSourceByType(Collections.singleton(sv),
+					UrmlVisualIDRegistry.getType(FeatureEditPart.VISUAL_ID));
+			source.addChildren(createNavigatorItems(connectedViews, source,
+					true));
+			connectedViews = getLinksSourceByType(Collections.singleton(sv),
+					UrmlVisualIDRegistry
+							.getType(VariationPointEditPart.VISUAL_ID));
+			source.addChildren(createNavigatorItems(connectedViews, source,
+					true));
 			if (!target.isEmpty()) {
 				result.add(target);
 			}
@@ -1048,20 +1514,24 @@
 			return result.toArray();
 		}
 
-		case NonFunctionalRequirementSubNonFunctionalRequirementsEditPart.VISUAL_ID: {
-			Collection result = new ArrayList();
+		case GoalSubGoalsEditPart.VISUAL_ID: {
+			LinkedList<UrmlAbstractNavigatorItem> result = new LinkedList<UrmlAbstractNavigatorItem>();
+			Edge sv = (Edge) view;
 			UrmlNavigatorGroup target = new UrmlNavigatorGroup(
-				Messages.NavigatorGroupName_NonFunctionalRequirementSubNonFunctionalRequirements_4043_target,
-				"icons/linkTargetNavigatorGroup.gif", parentElement); //$NON-NLS-1$
+					Messages.NavigatorGroupName_GoalSubGoals_4018_target,
+					"icons/linkTargetNavigatorGroup.gif", parentElement); //$NON-NLS-1$
 			UrmlNavigatorGroup source = new UrmlNavigatorGroup(
-				Messages.NavigatorGroupName_NonFunctionalRequirementSubNonFunctionalRequirements_4043_source,
-				"icons/linkSourceNavigatorGroup.gif", parentElement); //$NON-NLS-1$
-			Collection connectedViews = getLinksTargetByType(Collections.singleton(view), UrmlVisualIDRegistry
-				.getType(NonFunctionalRequirementEditPart.VISUAL_ID));
-			target.addChildren(createNavigatorItems(connectedViews, target, true));
-			connectedViews = getLinksSourceByType(Collections.singleton(view), UrmlVisualIDRegistry
-				.getType(NonFunctionalRequirementEditPart.VISUAL_ID));
-			source.addChildren(createNavigatorItems(connectedViews, source, true));
+					Messages.NavigatorGroupName_GoalSubGoals_4018_source,
+					"icons/linkSourceNavigatorGroup.gif", parentElement); //$NON-NLS-1$
+			Collection<View> connectedViews;
+			connectedViews = getLinksTargetByType(Collections.singleton(sv),
+					UrmlVisualIDRegistry.getType(GoalEditPart.VISUAL_ID));
+			target.addChildren(createNavigatorItems(connectedViews, target,
+					true));
+			connectedViews = getLinksSourceByType(Collections.singleton(sv),
+					UrmlVisualIDRegistry.getType(GoalEditPart.VISUAL_ID));
+			source.addChildren(createNavigatorItems(connectedViews, source,
+					true));
 			if (!target.isEmpty()) {
 				result.add(target);
 			}
@@ -1071,75 +1541,108 @@
 			return result.toArray();
 		}
 
-		case FunctionalRequirementSubFunctionalRequirementsEditPart.VISUAL_ID: {
-			Collection result = new ArrayList();
+		case GoalReference2EditPart.VISUAL_ID: {
+			LinkedList<UrmlAbstractNavigatorItem> result = new LinkedList<UrmlAbstractNavigatorItem>();
+			Edge sv = (Edge) view;
 			UrmlNavigatorGroup target = new UrmlNavigatorGroup(
-				Messages.NavigatorGroupName_FunctionalRequirementSubFunctionalRequirements_4044_target,
-				"icons/linkTargetNavigatorGroup.gif", parentElement); //$NON-NLS-1$
+					Messages.NavigatorGroupName_GoalReference_4023_target,
+					"icons/linkTargetNavigatorGroup.gif", parentElement); //$NON-NLS-1$
 			UrmlNavigatorGroup source = new UrmlNavigatorGroup(
-				Messages.NavigatorGroupName_FunctionalRequirementSubFunctionalRequirements_4044_source,
-				"icons/linkSourceNavigatorGroup.gif", parentElement); //$NON-NLS-1$
-			Collection connectedViews = getLinksTargetByType(Collections.singleton(view), UrmlVisualIDRegistry
-				.getType(FunctionalRequirementEditPart.VISUAL_ID));
-			target.addChildren(createNavigatorItems(connectedViews, target, true));
-			connectedViews = getLinksSourceByType(Collections.singleton(view), UrmlVisualIDRegistry
-				.getType(FunctionalRequirementEditPart.VISUAL_ID));
-			source.addChildren(createNavigatorItems(connectedViews, source, true));
+					Messages.NavigatorGroupName_GoalReference_4023_source,
+					"icons/linkSourceNavigatorGroup.gif", parentElement); //$NON-NLS-1$
+			UrmlNavigatorGroup incominglinks = new UrmlNavigatorGroup(
+					Messages.NavigatorGroupName_GoalReference_4023_incominglinks,
+					"icons/incomingLinksNavigatorGroup.gif", parentElement); //$NON-NLS-1$
+			UrmlNavigatorGroup outgoinglinks = new UrmlNavigatorGroup(
+					Messages.NavigatorGroupName_GoalReference_4023_outgoinglinks,
+					"icons/outgoingLinksNavigatorGroup.gif", parentElement); //$NON-NLS-1$
+			Collection<View> connectedViews;
+			connectedViews = getLinksTargetByType(Collections.singleton(sv),
+					UrmlVisualIDRegistry.getType(GoalEditPart.VISUAL_ID));
+			target.addChildren(createNavigatorItems(connectedViews, target,
+					true));
+			connectedViews = getLinksSourceByType(Collections.singleton(sv),
+					UrmlVisualIDRegistry.getType(GoalEditPart.VISUAL_ID));
+			source.addChildren(createNavigatorItems(connectedViews, source,
+					true));
 			if (!target.isEmpty()) {
 				result.add(target);
 			}
 			if (!source.isEmpty()) {
 				result.add(source);
 			}
+			if (!incominglinks.isEmpty()) {
+				result.add(incominglinks);
+			}
+			if (!outgoinglinks.isEmpty()) {
+				result.add(outgoinglinks);
+			}
 			return result.toArray();
 		}
 
-		case MitigationMitigatedDangersEditPart.VISUAL_ID: {
-			Collection result = new ArrayList();
+		case GoalReferenceEditPart.VISUAL_ID: {
+			LinkedList<UrmlAbstractNavigatorItem> result = new LinkedList<UrmlAbstractNavigatorItem>();
+			Edge sv = (Edge) view;
 			UrmlNavigatorGroup target = new UrmlNavigatorGroup(
-				Messages.NavigatorGroupName_MitigationMitigatedDangers_4012_target,
-				"icons/linkTargetNavigatorGroup.gif", parentElement); //$NON-NLS-1$
+					Messages.NavigatorGroupName_GoalReference_4016_target,
+					"icons/linkTargetNavigatorGroup.gif", parentElement); //$NON-NLS-1$
 			UrmlNavigatorGroup source = new UrmlNavigatorGroup(
-				Messages.NavigatorGroupName_MitigationMitigatedDangers_4012_source,
-				"icons/linkSourceNavigatorGroup.gif", parentElement); //$NON-NLS-1$
-			Collection connectedViews = getLinksTargetByType(Collections.singleton(view), UrmlVisualIDRegistry
-				.getType(DangerEditPart.VISUAL_ID));
-			target.addChildren(createNavigatorItems(connectedViews, target, true));
-			connectedViews = getLinksSourceByType(Collections.singleton(view), UrmlVisualIDRegistry
-				.getType(FunctionalRequirementEditPart.VISUAL_ID));
-			source.addChildren(createNavigatorItems(connectedViews, source, true));
-			connectedViews = getLinksSourceByType(Collections.singleton(view), UrmlVisualIDRegistry
-				.getType(NonFunctionalRequirementEditPart.VISUAL_ID));
-			source.addChildren(createNavigatorItems(connectedViews, source, true));
-			connectedViews = getLinksSourceByType(Collections.singleton(view), UrmlVisualIDRegistry
-				.getType(ProceduralMitigationEditPart.VISUAL_ID));
-			source.addChildren(createNavigatorItems(connectedViews, source, true));
+					Messages.NavigatorGroupName_GoalReference_4016_source,
+					"icons/linkSourceNavigatorGroup.gif", parentElement); //$NON-NLS-1$
+			UrmlNavigatorGroup incominglinks = new UrmlNavigatorGroup(
+					Messages.NavigatorGroupName_GoalReference_4016_incominglinks,
+					"icons/incomingLinksNavigatorGroup.gif", parentElement); //$NON-NLS-1$
+			UrmlNavigatorGroup outgoinglinks = new UrmlNavigatorGroup(
+					Messages.NavigatorGroupName_GoalReference_4016_outgoinglinks,
+					"icons/outgoingLinksNavigatorGroup.gif", parentElement); //$NON-NLS-1$
+			Collection<View> connectedViews;
+			connectedViews = getLinksTargetByType(Collections.singleton(sv),
+					UrmlVisualIDRegistry.getType(GoalEditPart.VISUAL_ID));
+			target.addChildren(createNavigatorItems(connectedViews, target,
+					true));
+			connectedViews = getLinksSourceByType(Collections.singleton(sv),
+					UrmlVisualIDRegistry.getType(GoalEditPart.VISUAL_ID));
+			source.addChildren(createNavigatorItems(connectedViews, source,
+					true));
 			if (!target.isEmpty()) {
 				result.add(target);
 			}
 			if (!source.isEmpty()) {
 				result.add(source);
 			}
+			if (!incominglinks.isEmpty()) {
+				result.add(incominglinks);
+			}
+			if (!outgoinglinks.isEmpty()) {
+				result.add(outgoinglinks);
+			}
 			return result.toArray();
 		}
 
-		case DangerHarmedAssetsEditPart.VISUAL_ID: {
-			Collection result = new ArrayList();
+		case VariationPointOptionalSubFeaturesEditPart.VISUAL_ID: {
+			LinkedList<UrmlAbstractNavigatorItem> result = new LinkedList<UrmlAbstractNavigatorItem>();
+			Edge sv = (Edge) view;
 			UrmlNavigatorGroup target = new UrmlNavigatorGroup(
-				Messages.NavigatorGroupName_DangerHarmedAssets_4013_target,
-				"icons/linkTargetNavigatorGroup.gif", parentElement); //$NON-NLS-1$
+					Messages.NavigatorGroupName_VariationPointOptionalSubFeatures_4046_target,
+					"icons/linkTargetNavigatorGroup.gif", parentElement); //$NON-NLS-1$
 			UrmlNavigatorGroup source = new UrmlNavigatorGroup(
-				Messages.NavigatorGroupName_DangerHarmedAssets_4013_source,
-				"icons/linkSourceNavigatorGroup.gif", parentElement); //$NON-NLS-1$
-			Collection connectedViews = getLinksTargetByType(Collections.singleton(view), UrmlVisualIDRegistry
-				.getType(ServiceEditPart.VISUAL_ID));
-			target.addChildren(createNavigatorItems(connectedViews, target, true));
-			connectedViews = getLinksTargetByType(Collections.singleton(view), UrmlVisualIDRegistry
-				.getType(ActorEditPart.VISUAL_ID));
-			target.addChildren(createNavigatorItems(connectedViews, target, true));
-			connectedViews = getLinksSourceByType(Collections.singleton(view), UrmlVisualIDRegistry
-				.getType(DangerEditPart.VISUAL_ID));
-			source.addChildren(createNavigatorItems(connectedViews, source, true));
+					Messages.NavigatorGroupName_VariationPointOptionalSubFeatures_4046_source,
+					"icons/linkSourceNavigatorGroup.gif", parentElement); //$NON-NLS-1$
+			Collection<View> connectedViews;
+			connectedViews = getLinksTargetByType(Collections.singleton(sv),
+					UrmlVisualIDRegistry.getType(FeatureEditPart.VISUAL_ID));
+			target.addChildren(createNavigatorItems(connectedViews, target,
+					true));
+			connectedViews = getLinksTargetByType(Collections.singleton(sv),
+					UrmlVisualIDRegistry
+							.getType(VariationPointEditPart.VISUAL_ID));
+			target.addChildren(createNavigatorItems(connectedViews, target,
+					true));
+			connectedViews = getLinksSourceByType(Collections.singleton(sv),
+					UrmlVisualIDRegistry
+							.getType(VariationPointEditPart.VISUAL_ID));
+			source.addChildren(createNavigatorItems(connectedViews, source,
+					true));
 			if (!target.isEmpty()) {
 				result.add(target);
 			}
@@ -1149,23 +1652,31 @@
 			return result.toArray();
 		}
 
-		case AssetTriggeredDangersEditPart.VISUAL_ID: {
-			Collection result = new ArrayList();
+		case AbstractFeatureConstrainingNonFunctionalRequirementsEditPart.VISUAL_ID: {
+			LinkedList<UrmlAbstractNavigatorItem> result = new LinkedList<UrmlAbstractNavigatorItem>();
+			Edge sv = (Edge) view;
 			UrmlNavigatorGroup target = new UrmlNavigatorGroup(
-				Messages.NavigatorGroupName_AssetTriggeredDangers_4017_target,
-				"icons/linkTargetNavigatorGroup.gif", parentElement); //$NON-NLS-1$
+					Messages.NavigatorGroupName_AbstractFeatureConstrainingNonFunctionalRequirements_4036_target,
+					"icons/linkTargetNavigatorGroup.gif", parentElement); //$NON-NLS-1$
 			UrmlNavigatorGroup source = new UrmlNavigatorGroup(
-				Messages.NavigatorGroupName_AssetTriggeredDangers_4017_source,
-				"icons/linkSourceNavigatorGroup.gif", parentElement); //$NON-NLS-1$
-			Collection connectedViews = getLinksTargetByType(Collections.singleton(view), UrmlVisualIDRegistry
-				.getType(DangerEditPart.VISUAL_ID));
-			target.addChildren(createNavigatorItems(connectedViews, target, true));
-			connectedViews = getLinksSourceByType(Collections.singleton(view), UrmlVisualIDRegistry
-				.getType(ServiceEditPart.VISUAL_ID));
-			source.addChildren(createNavigatorItems(connectedViews, source, true));
-			connectedViews = getLinksSourceByType(Collections.singleton(view), UrmlVisualIDRegistry
-				.getType(ActorEditPart.VISUAL_ID));
-			source.addChildren(createNavigatorItems(connectedViews, source, true));
+					Messages.NavigatorGroupName_AbstractFeatureConstrainingNonFunctionalRequirements_4036_source,
+					"icons/linkSourceNavigatorGroup.gif", parentElement); //$NON-NLS-1$
+			Collection<View> connectedViews;
+			connectedViews = getLinksTargetByType(
+					Collections.singleton(sv),
+					UrmlVisualIDRegistry
+							.getType(NonFunctionalRequirementEditPart.VISUAL_ID));
+			target.addChildren(createNavigatorItems(connectedViews, target,
+					true));
+			connectedViews = getLinksSourceByType(Collections.singleton(sv),
+					UrmlVisualIDRegistry.getType(FeatureEditPart.VISUAL_ID));
+			source.addChildren(createNavigatorItems(connectedViews, source,
+					true));
+			connectedViews = getLinksSourceByType(Collections.singleton(sv),
+					UrmlVisualIDRegistry
+							.getType(VariationPointEditPart.VISUAL_ID));
+			source.addChildren(createNavigatorItems(connectedViews, source,
+					true));
 			if (!target.isEmpty()) {
 				result.add(target);
 			}
@@ -1175,20 +1686,124 @@
 			return result.toArray();
 		}
 
-		case ServiceSubServicesEditPart.VISUAL_ID: {
-			Collection result = new ArrayList();
+		case UrmlModelElementAssociationsEditPart.VISUAL_ID: {
+			LinkedList<UrmlAbstractNavigatorItem> result = new LinkedList<UrmlAbstractNavigatorItem>();
+			Edge sv = (Edge) view;
 			UrmlNavigatorGroup target = new UrmlNavigatorGroup(
-				Messages.NavigatorGroupName_ServiceSubServices_4022_target,
-				"icons/linkTargetNavigatorGroup.gif", parentElement); //$NON-NLS-1$
+					Messages.NavigatorGroupName_UrmlModelElementAssociations_4048_target,
+					"icons/linkTargetNavigatorGroup.gif", parentElement); //$NON-NLS-1$
 			UrmlNavigatorGroup source = new UrmlNavigatorGroup(
-				Messages.NavigatorGroupName_ServiceSubServices_4022_source,
-				"icons/linkSourceNavigatorGroup.gif", parentElement); //$NON-NLS-1$
-			Collection connectedViews = getLinksTargetByType(Collections.singleton(view), UrmlVisualIDRegistry
-				.getType(ServiceEditPart.VISUAL_ID));
-			target.addChildren(createNavigatorItems(connectedViews, target, true));
-			connectedViews = getLinksSourceByType(Collections.singleton(view), UrmlVisualIDRegistry
-				.getType(ServiceEditPart.VISUAL_ID));
-			source.addChildren(createNavigatorItems(connectedViews, source, true));
+					Messages.NavigatorGroupName_UrmlModelElementAssociations_4048_source,
+					"icons/linkSourceNavigatorGroup.gif", parentElement); //$NON-NLS-1$
+			Collection<View> connectedViews;
+			connectedViews = getLinksTargetByType(Collections.singleton(sv),
+					UrmlVisualIDRegistry.getType(StakeholderEditPart.VISUAL_ID));
+			target.addChildren(createNavigatorItems(connectedViews, target,
+					true));
+			connectedViews = getLinksTargetByType(Collections.singleton(sv),
+					UrmlVisualIDRegistry.getType(GoalEditPart.VISUAL_ID));
+			target.addChildren(createNavigatorItems(connectedViews, target,
+					true));
+			connectedViews = getLinksTargetByType(Collections.singleton(sv),
+					UrmlVisualIDRegistry
+							.getType(FunctionalRequirementEditPart.VISUAL_ID));
+			target.addChildren(createNavigatorItems(connectedViews, target,
+					true));
+			connectedViews = getLinksTargetByType(Collections.singleton(sv),
+					UrmlVisualIDRegistry.getType(FeatureEditPart.VISUAL_ID));
+			target.addChildren(createNavigatorItems(connectedViews, target,
+					true));
+			connectedViews = getLinksTargetByType(Collections.singleton(sv),
+					UrmlVisualIDRegistry.getType(ServiceEditPart.VISUAL_ID));
+			target.addChildren(createNavigatorItems(connectedViews, target,
+					true));
+			connectedViews = getLinksTargetByType(
+					Collections.singleton(sv),
+					UrmlVisualIDRegistry
+							.getType(NonFunctionalRequirementEditPart.VISUAL_ID));
+			target.addChildren(createNavigatorItems(connectedViews, target,
+					true));
+			connectedViews = getLinksTargetByType(Collections.singleton(sv),
+					UrmlVisualIDRegistry.getType(DangerEditPart.VISUAL_ID));
+			target.addChildren(createNavigatorItems(connectedViews, target,
+					true));
+			connectedViews = getLinksTargetByType(Collections.singleton(sv),
+					UrmlVisualIDRegistry.getType(ActorEditPart.VISUAL_ID));
+			target.addChildren(createNavigatorItems(connectedViews, target,
+					true));
+			connectedViews = getLinksTargetByType(Collections.singleton(sv),
+					UrmlVisualIDRegistry
+							.getType(ProceduralMitigationEditPart.VISUAL_ID));
+			target.addChildren(createNavigatorItems(connectedViews, target,
+					true));
+			connectedViews = getLinksTargetByType(Collections.singleton(sv),
+					UrmlVisualIDRegistry
+							.getType(VariationPointEditPart.VISUAL_ID));
+			target.addChildren(createNavigatorItems(connectedViews, target,
+					true));
+			connectedViews = getLinksTargetByType(Collections.singleton(sv),
+					UrmlVisualIDRegistry
+							.getType(VariationPointInstanceEditPart.VISUAL_ID));
+			target.addChildren(createNavigatorItems(connectedViews, target,
+					true));
+			connectedViews = getLinksTargetByType(Collections.singleton(sv),
+					UrmlVisualIDRegistry.getType(ProductEditPart.VISUAL_ID));
+			target.addChildren(createNavigatorItems(connectedViews, target,
+					true));
+			connectedViews = getLinksSourceByType(Collections.singleton(sv),
+					UrmlVisualIDRegistry.getType(StakeholderEditPart.VISUAL_ID));
+			source.addChildren(createNavigatorItems(connectedViews, source,
+					true));
+			connectedViews = getLinksSourceByType(Collections.singleton(sv),
+					UrmlVisualIDRegistry.getType(GoalEditPart.VISUAL_ID));
+			source.addChildren(createNavigatorItems(connectedViews, source,
+					true));
+			connectedViews = getLinksSourceByType(Collections.singleton(sv),
+					UrmlVisualIDRegistry
+							.getType(FunctionalRequirementEditPart.VISUAL_ID));
+			source.addChildren(createNavigatorItems(connectedViews, source,
+					true));
+			connectedViews = getLinksSourceByType(Collections.singleton(sv),
+					UrmlVisualIDRegistry.getType(FeatureEditPart.VISUAL_ID));
+			source.addChildren(createNavigatorItems(connectedViews, source,
+					true));
+			connectedViews = getLinksSourceByType(Collections.singleton(sv),
+					UrmlVisualIDRegistry.getType(ServiceEditPart.VISUAL_ID));
+			source.addChildren(createNavigatorItems(connectedViews, source,
+					true));
+			connectedViews = getLinksSourceByType(
+					Collections.singleton(sv),
+					UrmlVisualIDRegistry
+							.getType(NonFunctionalRequirementEditPart.VISUAL_ID));
+			source.addChildren(createNavigatorItems(connectedViews, source,
+					true));
+			connectedViews = getLinksSourceByType(Collections.singleton(sv),
+					UrmlVisualIDRegistry.getType(DangerEditPart.VISUAL_ID));
+			source.addChildren(createNavigatorItems(connectedViews, source,
+					true));
+			connectedViews = getLinksSourceByType(Collections.singleton(sv),
+					UrmlVisualIDRegistry.getType(ActorEditPart.VISUAL_ID));
+			source.addChildren(createNavigatorItems(connectedViews, source,
+					true));
+			connectedViews = getLinksSourceByType(Collections.singleton(sv),
+					UrmlVisualIDRegistry
+							.getType(ProceduralMitigationEditPart.VISUAL_ID));
+			source.addChildren(createNavigatorItems(connectedViews, source,
+					true));
+			connectedViews = getLinksSourceByType(Collections.singleton(sv),
+					UrmlVisualIDRegistry
+							.getType(VariationPointEditPart.VISUAL_ID));
+			source.addChildren(createNavigatorItems(connectedViews, source,
+					true));
+			connectedViews = getLinksSourceByType(Collections.singleton(sv),
+					UrmlVisualIDRegistry
+							.getType(VariationPointInstanceEditPart.VISUAL_ID));
+			source.addChildren(createNavigatorItems(connectedViews, source,
+					true));
+			connectedViews = getLinksSourceByType(Collections.singleton(sv),
+					UrmlVisualIDRegistry.getType(ProductEditPart.VISUAL_ID));
+			source.addChildren(createNavigatorItems(connectedViews, source,
+					true));
 			if (!target.isEmpty()) {
 				result.add(target);
 			}
@@ -1198,23 +1813,28 @@
 			return result.toArray();
 		}
 
-		case VariationPointOptionalSubFeaturesEditPart.VISUAL_ID: {
-			Collection result = new ArrayList();
+		case NonFunctionalRequirementSubNonFunctionalRequirementsEditPart.VISUAL_ID: {
+			LinkedList<UrmlAbstractNavigatorItem> result = new LinkedList<UrmlAbstractNavigatorItem>();
+			Edge sv = (Edge) view;
 			UrmlNavigatorGroup target = new UrmlNavigatorGroup(
-				Messages.NavigatorGroupName_VariationPointOptionalSubFeatures_4046_target,
-				"icons/linkTargetNavigatorGroup.gif", parentElement); //$NON-NLS-1$
+					Messages.NavigatorGroupName_NonFunctionalRequirementSubNonFunctionalRequirements_4043_target,
+					"icons/linkTargetNavigatorGroup.gif", parentElement); //$NON-NLS-1$
 			UrmlNavigatorGroup source = new UrmlNavigatorGroup(
-				Messages.NavigatorGroupName_VariationPointOptionalSubFeatures_4046_source,
-				"icons/linkSourceNavigatorGroup.gif", parentElement); //$NON-NLS-1$
-			Collection connectedViews = getLinksTargetByType(Collections.singleton(view), UrmlVisualIDRegistry
-				.getType(FeatureEditPart.VISUAL_ID));
-			target.addChildren(createNavigatorItems(connectedViews, target, true));
-			connectedViews = getLinksTargetByType(Collections.singleton(view), UrmlVisualIDRegistry
-				.getType(VariationPointEditPart.VISUAL_ID));
-			target.addChildren(createNavigatorItems(connectedViews, target, true));
-			connectedViews = getLinksSourceByType(Collections.singleton(view), UrmlVisualIDRegistry
-				.getType(VariationPointEditPart.VISUAL_ID));
-			source.addChildren(createNavigatorItems(connectedViews, source, true));
+					Messages.NavigatorGroupName_NonFunctionalRequirementSubNonFunctionalRequirements_4043_source,
+					"icons/linkSourceNavigatorGroup.gif", parentElement); //$NON-NLS-1$
+			Collection<View> connectedViews;
+			connectedViews = getLinksTargetByType(
+					Collections.singleton(sv),
+					UrmlVisualIDRegistry
+							.getType(NonFunctionalRequirementEditPart.VISUAL_ID));
+			target.addChildren(createNavigatorItems(connectedViews, target,
+					true));
+			connectedViews = getLinksSourceByType(
+					Collections.singleton(sv),
+					UrmlVisualIDRegistry
+							.getType(NonFunctionalRequirementEditPart.VISUAL_ID));
+			source.addChildren(createNavigatorItems(connectedViews, source,
+					true));
 			if (!target.isEmpty()) {
 				result.add(target);
 			}
@@ -1224,20 +1844,30 @@
 			return result.toArray();
 		}
 
-		case VariationPointInstanceVariationPointEditPart.VISUAL_ID: {
-			Collection result = new ArrayList();
+		case AbstractFeatureDetailingFunctionalRequirementsEditPart.VISUAL_ID: {
+			LinkedList<UrmlAbstractNavigatorItem> result = new LinkedList<UrmlAbstractNavigatorItem>();
+			Edge sv = (Edge) view;
 			UrmlNavigatorGroup target = new UrmlNavigatorGroup(
-				Messages.NavigatorGroupName_VariationPointInstanceVariationPoint_4033_target,
-				"icons/linkTargetNavigatorGroup.gif", parentElement); //$NON-NLS-1$
+					Messages.NavigatorGroupName_AbstractFeatureDetailingFunctionalRequirements_4035_target,
+					"icons/linkTargetNavigatorGroup.gif", parentElement); //$NON-NLS-1$
 			UrmlNavigatorGroup source = new UrmlNavigatorGroup(
-				Messages.NavigatorGroupName_VariationPointInstanceVariationPoint_4033_source,
-				"icons/linkSourceNavigatorGroup.gif", parentElement); //$NON-NLS-1$
-			Collection connectedViews = getLinksTargetByType(Collections.singleton(view), UrmlVisualIDRegistry
-				.getType(VariationPointEditPart.VISUAL_ID));
-			target.addChildren(createNavigatorItems(connectedViews, target, true));
-			connectedViews = getLinksSourceByType(Collections.singleton(view), UrmlVisualIDRegistry
-				.getType(VariationPointInstanceEditPart.VISUAL_ID));
-			source.addChildren(createNavigatorItems(connectedViews, source, true));
+					Messages.NavigatorGroupName_AbstractFeatureDetailingFunctionalRequirements_4035_source,
+					"icons/linkSourceNavigatorGroup.gif", parentElement); //$NON-NLS-1$
+			Collection<View> connectedViews;
+			connectedViews = getLinksTargetByType(Collections.singleton(sv),
+					UrmlVisualIDRegistry
+							.getType(FunctionalRequirementEditPart.VISUAL_ID));
+			target.addChildren(createNavigatorItems(connectedViews, target,
+					true));
+			connectedViews = getLinksSourceByType(Collections.singleton(sv),
+					UrmlVisualIDRegistry.getType(FeatureEditPart.VISUAL_ID));
+			source.addChildren(createNavigatorItems(connectedViews, source,
+					true));
+			connectedViews = getLinksSourceByType(Collections.singleton(sv),
+					UrmlVisualIDRegistry
+							.getType(VariationPointEditPart.VISUAL_ID));
+			source.addChildren(createNavigatorItems(connectedViews, source,
+					true));
 			if (!target.isEmpty()) {
 				result.add(target);
 			}
@@ -1247,72 +1877,210 @@
 			return result.toArray();
 		}
 
-		case VariationPointInstanceSelectedFeaturesEditPart.VISUAL_ID: {
-			Collection result = new ArrayList();
+		case GoalReference3EditPart.VISUAL_ID: {
+			LinkedList<UrmlAbstractNavigatorItem> result = new LinkedList<UrmlAbstractNavigatorItem>();
+			Edge sv = (Edge) view;
 			UrmlNavigatorGroup target = new UrmlNavigatorGroup(
-				Messages.NavigatorGroupName_VariationPointInstanceSelectedFeatures_4040_target,
-				"icons/linkTargetNavigatorGroup.gif", parentElement); //$NON-NLS-1$
+					Messages.NavigatorGroupName_GoalReference_4024_target,
+					"icons/linkTargetNavigatorGroup.gif", parentElement); //$NON-NLS-1$
 			UrmlNavigatorGroup source = new UrmlNavigatorGroup(
-				Messages.NavigatorGroupName_VariationPointInstanceSelectedFeatures_4040_source,
-				"icons/linkSourceNavigatorGroup.gif", parentElement); //$NON-NLS-1$
-			Collection connectedViews = getLinksTargetByType(Collections.singleton(view), UrmlVisualIDRegistry
-				.getType(FeatureEditPart.VISUAL_ID));
-			target.addChildren(createNavigatorItems(connectedViews, target, true));
-			connectedViews = getLinksTargetByType(Collections.singleton(view), UrmlVisualIDRegistry
-				.getType(VariationPointEditPart.VISUAL_ID));
-			target.addChildren(createNavigatorItems(connectedViews, target, true));
-			connectedViews = getLinksSourceByType(Collections.singleton(view), UrmlVisualIDRegistry
-				.getType(VariationPointInstanceEditPart.VISUAL_ID));
-			source.addChildren(createNavigatorItems(connectedViews, source, true));
+					Messages.NavigatorGroupName_GoalReference_4024_source,
+					"icons/linkSourceNavigatorGroup.gif", parentElement); //$NON-NLS-1$
+			UrmlNavigatorGroup incominglinks = new UrmlNavigatorGroup(
+					Messages.NavigatorGroupName_GoalReference_4024_incominglinks,
+					"icons/incomingLinksNavigatorGroup.gif", parentElement); //$NON-NLS-1$
+			UrmlNavigatorGroup outgoinglinks = new UrmlNavigatorGroup(
+					Messages.NavigatorGroupName_GoalReference_4024_outgoinglinks,
+					"icons/outgoingLinksNavigatorGroup.gif", parentElement); //$NON-NLS-1$
+			Collection<View> connectedViews;
+			connectedViews = getLinksTargetByType(Collections.singleton(sv),
+					UrmlVisualIDRegistry.getType(GoalEditPart.VISUAL_ID));
+			target.addChildren(createNavigatorItems(connectedViews, target,
+					true));
+			connectedViews = getLinksSourceByType(Collections.singleton(sv),
+					UrmlVisualIDRegistry.getType(GoalEditPart.VISUAL_ID));
+			source.addChildren(createNavigatorItems(connectedViews, source,
+					true));
 			if (!target.isEmpty()) {
 				result.add(target);
 			}
 			if (!source.isEmpty()) {
 				result.add(source);
 			}
+			if (!incominglinks.isEmpty()) {
+				result.add(incominglinks);
+			}
+			if (!outgoinglinks.isEmpty()) {
+				result.add(outgoinglinks);
+			}
 			return result.toArray();
 		}
 
-		case ProductVariationPointInstancesEditPart.VISUAL_ID: {
-			Collection result = new ArrayList();
-			UrmlNavigatorGroup target = new UrmlNavigatorGroup(
-				Messages.NavigatorGroupName_ProductVariationPointInstances_4032_target,
-				"icons/linkTargetNavigatorGroup.gif", parentElement); //$NON-NLS-1$
-			UrmlNavigatorGroup source = new UrmlNavigatorGroup(
-				Messages.NavigatorGroupName_ProductVariationPointInstances_4032_source,
-				"icons/linkSourceNavigatorGroup.gif", parentElement); //$NON-NLS-1$
-			Collection connectedViews = getLinksTargetByType(Collections.singleton(view), UrmlVisualIDRegistry
-				.getType(VariationPointInstanceEditPart.VISUAL_ID));
-			target.addChildren(createNavigatorItems(connectedViews, target, true));
-			connectedViews = getLinksSourceByType(Collections.singleton(view), UrmlVisualIDRegistry
-				.getType(ProductEditPart.VISUAL_ID));
-			source.addChildren(createNavigatorItems(connectedViews, source, true));
-			if (!target.isEmpty()) {
-				result.add(target);
+		case NonFunctionalRequirementEditPart.VISUAL_ID: {
+			LinkedList<UrmlAbstractNavigatorItem> result = new LinkedList<UrmlAbstractNavigatorItem>();
+			Node sv = (Node) view;
+			UrmlNavigatorGroup incominglinks = new UrmlNavigatorGroup(
+					Messages.NavigatorGroupName_NonFunctionalRequirement_2008_incominglinks,
+					"icons/incomingLinksNavigatorGroup.gif", parentElement); //$NON-NLS-1$
+			UrmlNavigatorGroup outgoinglinks = new UrmlNavigatorGroup(
+					Messages.NavigatorGroupName_NonFunctionalRequirement_2008_outgoinglinks,
+					"icons/outgoingLinksNavigatorGroup.gif", parentElement); //$NON-NLS-1$
+			Collection<View> connectedViews;
+			connectedViews = getIncomingLinksByType(
+					Collections.singleton(sv),
+					UrmlVisualIDRegistry
+							.getType(AbstractFeatureConstrainingNonFunctionalRequirementsEditPart.VISUAL_ID));
+			incominglinks.addChildren(createNavigatorItems(connectedViews,
+					incominglinks, true));
+			connectedViews = getOutgoingLinksByType(
+					Collections.singleton(sv),
+					UrmlVisualIDRegistry
+							.getType(RequirementImplementingServicesEditPart.VISUAL_ID));
+			outgoinglinks.addChildren(createNavigatorItems(connectedViews,
+					outgoinglinks, true));
+			connectedViews = getIncomingLinksByType(
+					Collections.singleton(sv),
+					UrmlVisualIDRegistry
+							.getType(NonFunctionalRequirementSubNonFunctionalRequirementsEditPart.VISUAL_ID));
+			incominglinks.addChildren(createNavigatorItems(connectedViews,
+					incominglinks, true));
+			connectedViews = getOutgoingLinksByType(
+					Collections.singleton(sv),
+					UrmlVisualIDRegistry
+							.getType(NonFunctionalRequirementSubNonFunctionalRequirementsEditPart.VISUAL_ID));
+			outgoinglinks.addChildren(createNavigatorItems(connectedViews,
+					outgoinglinks, true));
+			connectedViews = getOutgoingLinksByType(
+					Collections.singleton(sv),
+					UrmlVisualIDRegistry
+							.getType(MitigationMitigatedDangersEditPart.VISUAL_ID));
+			outgoinglinks.addChildren(createNavigatorItems(connectedViews,
+					outgoinglinks, true));
+			connectedViews = getIncomingLinksByType(
+					Collections.singleton(sv),
+					UrmlVisualIDRegistry
+							.getType(UrmlModelElementAssociationsEditPart.VISUAL_ID));
+			incominglinks.addChildren(createNavigatorItems(connectedViews,
+					incominglinks, true));
+			connectedViews = getOutgoingLinksByType(
+					Collections.singleton(sv),
+					UrmlVisualIDRegistry
+							.getType(UrmlModelElementAssociationsEditPart.VISUAL_ID));
+			outgoinglinks.addChildren(createNavigatorItems(connectedViews,
+					outgoinglinks, true));
+			if (!incominglinks.isEmpty()) {
+				result.add(incominglinks);
 			}
-			if (!source.isEmpty()) {
-				result.add(source);
+			if (!outgoinglinks.isEmpty()) {
+				result.add(outgoinglinks);
 			}
 			return result.toArray();
 		}
 
-		case ProductFeaturesEditPart.VISUAL_ID: {
-			Collection result = new ArrayList();
-			UrmlNavigatorGroup target = new UrmlNavigatorGroup(Messages.NavigatorGroupName_ProductFeatures_4047_target,
-				"icons/linkTargetNavigatorGroup.gif", parentElement); //$NON-NLS-1$
-			UrmlNavigatorGroup source = new UrmlNavigatorGroup(Messages.NavigatorGroupName_ProductFeatures_4047_source,
-				"icons/linkSourceNavigatorGroup.gif", parentElement); //$NON-NLS-1$
-			Collection connectedViews = getLinksTargetByType(Collections.singleton(view), UrmlVisualIDRegistry
-				.getType(FeatureEditPart.VISUAL_ID));
-			target.addChildren(createNavigatorItems(connectedViews, target, true));
-			connectedViews = getLinksSourceByType(Collections.singleton(view), UrmlVisualIDRegistry
-				.getType(ProductEditPart.VISUAL_ID));
-			source.addChildren(createNavigatorItems(connectedViews, source, true));
-			if (!target.isEmpty()) {
-				result.add(target);
+		case VariationPointEditPart.VISUAL_ID: {
+			LinkedList<UrmlAbstractNavigatorItem> result = new LinkedList<UrmlAbstractNavigatorItem>();
+			Node sv = (Node) view;
+			UrmlNavigatorGroup incominglinks = new UrmlNavigatorGroup(
+					Messages.NavigatorGroupName_VariationPoint_2013_incominglinks,
+					"icons/incomingLinksNavigatorGroup.gif", parentElement); //$NON-NLS-1$
+			UrmlNavigatorGroup outgoinglinks = new UrmlNavigatorGroup(
+					Messages.NavigatorGroupName_VariationPoint_2013_outgoinglinks,
+					"icons/outgoingLinksNavigatorGroup.gif", parentElement); //$NON-NLS-1$
+			Collection<View> connectedViews;
+			connectedViews = getIncomingLinksByType(
+					Collections.singleton(sv),
+					UrmlVisualIDRegistry
+							.getType(AbstractFeatureSubFeaturesEditPart.VISUAL_ID));
+			incominglinks.addChildren(createNavigatorItems(connectedViews,
+					incominglinks, true));
+			connectedViews = getOutgoingLinksByType(
+					Collections.singleton(sv),
+					UrmlVisualIDRegistry
+							.getType(AbstractFeatureSubFeaturesEditPart.VISUAL_ID));
+			outgoinglinks.addChildren(createNavigatorItems(connectedViews,
+					outgoinglinks, true));
+			connectedViews = getOutgoingLinksByType(
+					Collections.singleton(sv),
+					UrmlVisualIDRegistry
+							.getType(AbstractFeatureDetailingFunctionalRequirementsEditPart.VISUAL_ID));
+			outgoinglinks.addChildren(createNavigatorItems(connectedViews,
+					outgoinglinks, true));
+			connectedViews = getOutgoingLinksByType(
+					Collections.singleton(sv),
+					UrmlVisualIDRegistry
+							.getType(AbstractFeatureConstrainingNonFunctionalRequirementsEditPart.VISUAL_ID));
+			outgoinglinks.addChildren(createNavigatorItems(connectedViews,
+					outgoinglinks, true));
+			connectedViews = getIncomingLinksByType(
+					Collections.singleton(sv),
+					UrmlVisualIDRegistry
+							.getType(AbstractFeatureRequiredFeaturesEditPart.VISUAL_ID));
+			incominglinks.addChildren(createNavigatorItems(connectedViews,
+					incominglinks, true));
+			connectedViews = getOutgoingLinksByType(
+					Collections.singleton(sv),
+					UrmlVisualIDRegistry
+							.getType(AbstractFeatureRequiredFeaturesEditPart.VISUAL_ID));
+			outgoinglinks.addChildren(createNavigatorItems(connectedViews,
+					outgoinglinks, true));
+			connectedViews = getIncomingLinksByType(
+					Collections.singleton(sv),
+					UrmlVisualIDRegistry
+							.getType(AbstractFeatureExcludedFeaturesEditPart.VISUAL_ID));
+			incominglinks.addChildren(createNavigatorItems(connectedViews,
+					incominglinks, true));
+			connectedViews = getOutgoingLinksByType(
+					Collections.singleton(sv),
+					UrmlVisualIDRegistry
+							.getType(AbstractFeatureExcludedFeaturesEditPart.VISUAL_ID));
+			outgoinglinks.addChildren(createNavigatorItems(connectedViews,
+					outgoinglinks, true));
+			connectedViews = getIncomingLinksByType(Collections.singleton(sv),
+					UrmlVisualIDRegistry
+							.getType(GoalRealizedFeaturesEditPart.VISUAL_ID));
+			incominglinks.addChildren(createNavigatorItems(connectedViews,
+					incominglinks, true));
+			connectedViews = getIncomingLinksByType(
+					Collections.singleton(sv),
+					UrmlVisualIDRegistry
+							.getType(VariationPointOptionalSubFeaturesEditPart.VISUAL_ID));
+			incominglinks.addChildren(createNavigatorItems(connectedViews,
+					incominglinks, true));
+			connectedViews = getOutgoingLinksByType(
+					Collections.singleton(sv),
+					UrmlVisualIDRegistry
+							.getType(VariationPointOptionalSubFeaturesEditPart.VISUAL_ID));
+			outgoinglinks.addChildren(createNavigatorItems(connectedViews,
+					outgoinglinks, true));
+			connectedViews = getIncomingLinksByType(
+					Collections.singleton(sv),
+					UrmlVisualIDRegistry
+							.getType(VariationPointInstanceVariationPointEditPart.VISUAL_ID));
+			incominglinks.addChildren(createNavigatorItems(connectedViews,
+					incominglinks, true));
+			connectedViews = getIncomingLinksByType(
+					Collections.singleton(sv),
+					UrmlVisualIDRegistry
+							.getType(VariationPointInstanceSelectedFeaturesEditPart.VISUAL_ID));
+			incominglinks.addChildren(createNavigatorItems(connectedViews,
+					incominglinks, true));
+			connectedViews = getIncomingLinksByType(
+					Collections.singleton(sv),
+					UrmlVisualIDRegistry
+							.getType(UrmlModelElementAssociationsEditPart.VISUAL_ID));
+			incominglinks.addChildren(createNavigatorItems(connectedViews,
+					incominglinks, true));
+			connectedViews = getOutgoingLinksByType(
+					Collections.singleton(sv),
+					UrmlVisualIDRegistry
+							.getType(UrmlModelElementAssociationsEditPart.VISUAL_ID));
+			outgoinglinks.addChildren(createNavigatorItems(connectedViews,
+					outgoinglinks, true));
+			if (!incominglinks.isEmpty()) {
+				result.add(incominglinks);
 			}
-			if (!source.isEmpty()) {
-				result.add(source);
+			if (!outgoinglinks.isEmpty()) {
+				result.add(outgoinglinks);
 			}
 			return result.toArray();
 		}
@@ -1323,12 +2091,13 @@
 	/**
 	 * @generated
 	 */
-	private Collection getLinksSourceByType(Collection edges, String type) {
-		Collection result = new ArrayList();
-		for (Iterator it = edges.iterator(); it.hasNext();) {
-			Edge nextEdge = (Edge) it.next();
+	private Collection<View> getLinksSourceByType(Collection<Edge> edges,
+			String type) {
+		LinkedList<View> result = new LinkedList<View>();
+		for (Edge nextEdge : edges) {
 			View nextEdgeSource = nextEdge.getSource();
-			if (type.equals(nextEdgeSource.getType()) && isOwnView(nextEdgeSource)) {
+			if (type.equals(nextEdgeSource.getType())
+					&& isOwnView(nextEdgeSource)) {
 				result.add(nextEdgeSource);
 			}
 		}
@@ -1338,12 +2107,13 @@
 	/**
 	 * @generated
 	 */
-	private Collection getLinksTargetByType(Collection edges, String type) {
-		Collection result = new ArrayList();
-		for (Iterator it = edges.iterator(); it.hasNext();) {
-			Edge nextEdge = (Edge) it.next();
+	private Collection<View> getLinksTargetByType(Collection<Edge> edges,
+			String type) {
+		LinkedList<View> result = new LinkedList<View>();
+		for (Edge nextEdge : edges) {
 			View nextEdgeTarget = nextEdge.getTarget();
-			if (type.equals(nextEdgeTarget.getType()) && isOwnView(nextEdgeTarget)) {
+			if (type.equals(nextEdgeTarget.getType())
+					&& isOwnView(nextEdgeTarget)) {
 				result.add(nextEdgeTarget);
 			}
 		}
@@ -1353,10 +2123,10 @@
 	/**
 	 * @generated
 	 */
-	private Collection getOutgoingLinksByType(Collection nodes, String type) {
-		Collection result = new ArrayList();
-		for (Iterator it = nodes.iterator(); it.hasNext();) {
-			View nextNode = (View) it.next();
+	private Collection<View> getOutgoingLinksByType(
+			Collection<? extends View> nodes, String type) {
+		LinkedList<View> result = new LinkedList<View>();
+		for (View nextNode : nodes) {
 			result.addAll(selectViewsByType(nextNode.getSourceEdges(), type));
 		}
 		return result;
@@ -1365,10 +2135,10 @@
 	/**
 	 * @generated
 	 */
-	private Collection getIncomingLinksByType(Collection nodes, String type) {
-		Collection result = new ArrayList();
-		for (Iterator it = nodes.iterator(); it.hasNext();) {
-			View nextNode = (View) it.next();
+	private Collection<View> getIncomingLinksByType(
+			Collection<? extends View> nodes, String type) {
+		LinkedList<View> result = new LinkedList<View>();
+		for (View nextNode : nodes) {
 			result.addAll(selectViewsByType(nextNode.getTargetEdges(), type));
 		}
 		return result;
@@ -1377,10 +2147,10 @@
 	/**
 	 * @generated
 	 */
-	private Collection getChildrenByType(Collection nodes, String type) {
-		Collection result = new ArrayList();
-		for (Iterator it = nodes.iterator(); it.hasNext();) {
-			View nextNode = (View) it.next();
+	private Collection<View> getChildrenByType(
+			Collection<? extends View> nodes, String type) {
+		LinkedList<View> result = new LinkedList<View>();
+		for (View nextNode : nodes) {
 			result.addAll(selectViewsByType(nextNode.getChildren(), type));
 		}
 		return result;
@@ -1389,10 +2159,10 @@
 	/**
 	 * @generated
 	 */
-	private Collection getDiagramLinksByType(Collection diagrams, String type) {
-		Collection result = new ArrayList();
-		for (Iterator it = diagrams.iterator(); it.hasNext();) {
-			Diagram nextDiagram = (Diagram) it.next();
+	private Collection<View> getDiagramLinksByType(
+			Collection<Diagram> diagrams, String type) {
+		ArrayList<View> result = new ArrayList<View>();
+		for (Diagram nextDiagram : diagrams) {
 			result.addAll(selectViewsByType(nextDiagram.getEdges(), type));
 		}
 		return result;
@@ -1401,10 +2171,10 @@
 	/**
 	 * @generated
 	 */
-	private Collection selectViewsByType(Collection views, String type) {
-		Collection result = new ArrayList();
-		for (Iterator it = views.iterator(); it.hasNext();) {
-			View nextView = (View) it.next();
+	private Collection<View> selectViewsByType(Collection<View> views,
+			String type) {
+		ArrayList<View> result = new ArrayList<View>();
+		for (View nextView : views) {
 			if (type.equals(nextView.getType()) && isOwnView(nextView)) {
 				result.add(nextView);
 			}
@@ -1416,16 +2186,19 @@
 	 * @generated
 	 */
 	private boolean isOwnView(View view) {
-		return URMLDiagramEditPart.MODEL_ID.equals(UrmlVisualIDRegistry.getModelID(view));
+		return URMLDiagramEditPart.MODEL_ID.equals(UrmlVisualIDRegistry
+				.getModelID(view));
 	}
 
 	/**
 	 * @generated
 	 */
-	private Collection createNavigatorItems(Collection views, Object parent, boolean isLeafs) {
-		Collection result = new ArrayList();
-		for (Iterator it = views.iterator(); it.hasNext();) {
-			result.add(new UrmlNavigatorItem((View) it.next(), parent, isLeafs));
+	private Collection<UrmlNavigatorItem> createNavigatorItems(
+			Collection<View> views, Object parent, boolean isLeafs) {
+		ArrayList<UrmlNavigatorItem> result = new ArrayList<UrmlNavigatorItem>(
+				views.size());
+		for (View nextView : views) {
+			result.add(new UrmlNavigatorItem(nextView, parent, isLeafs));
 		}
 		return result;
 	}
Index: src/org/unicase/ui/diagram/urml/navigator/UrmlNavigatorSorter.java
===================================================================
--- src/org/unicase/ui/diagram/urml/navigator/UrmlNavigatorSorter.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/navigator/UrmlNavigatorSorter.java	(working copy)
@@ -11,7 +11,7 @@
 	/**
 	 * @generated
 	 */
-	private static final int GROUP_CATEGORY = 4049;
+	private static final int GROUP_CATEGORY = 4050;
 
 	/**
 	 * @generated
Index: src/org/unicase/ui/diagram/urml/expressions/UrmlOCLFactory.java
===================================================================
--- src/org/unicase/ui/diagram/urml/expressions/UrmlOCLFactory.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/expressions/UrmlOCLFactory.java	(working copy)
@@ -7,17 +7,22 @@
 
 import org.eclipse.core.runtime.IStatus;
 import org.eclipse.emf.ecore.EClassifier;
+import org.eclipse.emf.ecore.EParameter;
+import org.eclipse.emf.ecore.EcorePackage;
 import org.eclipse.ocl.Environment;
 import org.eclipse.ocl.EvaluationEnvironment;
 import org.eclipse.ocl.ParserException;
 import org.eclipse.ocl.Query;
 import org.eclipse.ocl.ecore.EcoreFactory;
+import org.eclipse.ocl.ecore.OCL.Helper;
 import org.eclipse.ocl.expressions.OCLExpression;
 import org.eclipse.ocl.expressions.OperationCallExp;
 import org.eclipse.ocl.expressions.Variable;
 import org.eclipse.ocl.helper.OCLHelper;
+import org.eclipse.ocl.options.ParsingOptions;
 import org.eclipse.ocl.utilities.AbstractVisitor;
 import org.eclipse.ocl.utilities.PredefinedType;
+import org.unicase.ui.diagram.urml.part.UrmlDiagramEditorPlugin;
 
 /**
  * @generated
@@ -27,21 +32,64 @@
 	/**
 	 * @generated
 	 */
-	private UrmlOCLFactory() {
+	private final UrmlAbstractExpression[] expressions;
+
+	/**
+	 * @generated
+	 */
+	protected UrmlOCLFactory() {
+		this.expressions = new UrmlAbstractExpression[8];
 	}
 
 	/**
 	 * @generated
 	 */
-	public static UrmlAbstractExpression getExpression(String body, EClassifier context, Map environment) {
+	public static UrmlAbstractExpression getExpression(int index,
+			EClassifier context, Map<String, EClassifier> environment) {
+		UrmlOCLFactory cached = UrmlDiagramEditorPlugin.getInstance()
+				.getUrmlOCLFactory();
+		if (cached == null) {
+			UrmlDiagramEditorPlugin.getInstance().setUrmlOCLFactory(
+					cached = new UrmlOCLFactory());
+		}
+		if (index < 0 || index >= cached.expressions.length) {
+			throw new IllegalArgumentException();
+		}
+		if (cached.expressions[index] == null) {
+			final String[] exprBodies = new String[] {
+					"self.weight = GoalReferenceType::PLUS_PLUS", //$NON-NLS-1$
+					"GoalReferenceType::PLUS_PLUS", //$NON-NLS-1$
+					"self.weight = GoalReferenceType::PLUS", //$NON-NLS-1$
+					"GoalReferenceType::PLUS", //$NON-NLS-1$
+					"self.weight = GoalReferenceType::MINUS", //$NON-NLS-1$
+					"GoalReferenceType::MINUS", //$NON-NLS-1$
+					"self.weight = GoalReferenceType::MINUS_MINUS", //$NON-NLS-1$
+					"GoalReferenceType::MINUS_MINUS", //$NON-NLS-1$
+			};
+			cached.expressions[index] = getExpression(
+					exprBodies[index],
+					context,
+					environment == null ? Collections
+							.<String, EClassifier> emptyMap() : environment);
+		}
+		return cached.expressions[index];
+	}
+
+	/**
+	 * @generated
+	 */
+	public static UrmlAbstractExpression getExpression(String body,
+			EClassifier context, Map<String, EClassifier> environment) {
 		return new Expression(body, context, environment);
 	}
 
 	/**
 	 * @generated
 	 */
-	public static UrmlAbstractExpression getExpression(String body, EClassifier context) {
-		return getExpression(body, context, Collections.EMPTY_MAP);
+	public static UrmlAbstractExpression getExpression(String body,
+			EClassifier context) {
+		return getExpression(body, context,
+				Collections.<String, EClassifier> emptyMap());
 	}
 
 	/**
@@ -52,116 +100,80 @@
 		/**
 		 * @generated
 		 */
-		private WeakReference queryRef;
+		private final org.eclipse.ocl.ecore.OCL oclInstance;
 
 		/**
 		 * @generated
 		 */
-		private final org.eclipse.ocl.ecore.OCL oclInstance;
+		private org.eclipse.ocl.ecore.OCLExpression oclExpression;
 
 		/**
 		 * @generated
 		 */
-		public Expression(String body, EClassifier context, Map environment) {
+		public Expression(String body, EClassifier context,
+				Map<String, EClassifier> environment) {
 			super(body, context);
 			oclInstance = org.eclipse.ocl.ecore.OCL.newInstance();
 			initCustomEnv(oclInstance.getEnvironment(), environment);
-		}
-
-		/**
-		 * @generated
-		 */
-		protected Query getQuery() {
-			Query oclQuery = null;
-			if (this.queryRef != null) {
-				oclQuery = (Query) this.queryRef.get();
-			}
-			if (oclQuery == null) {
-				OCLHelper oclHelper = oclInstance.createOCLHelper();
-				oclHelper.setContext(context());
-				try {
-					OCLExpression oclExpression = oclHelper.createQuery(body());
-					oclQuery = oclInstance.createQuery(oclExpression);
-					this.queryRef = new WeakReference(oclQuery);
-					setStatus(IStatus.OK, null, null);
-				} catch (ParserException e) {
-					setStatus(IStatus.ERROR, e.getMessage(), e);
-				}
+			Helper oclHelper = oclInstance.createOCLHelper();
+			oclHelper.setContext(context());
+			try {
+				oclExpression = oclHelper.createQuery(body());
+				setStatus(IStatus.OK, null, null);
+			} catch (ParserException e) {
+				setStatus(IStatus.ERROR, e.getMessage(), e);
 			}
-			return oclQuery;
 		}
 
 		/**
 		 * @generated
 		 */
+		@SuppressWarnings("rawtypes")
 		protected Object doEvaluate(Object context, Map env) {
-			Query oclQuery = getQuery();
-			if (oclQuery == null) {
+			if (oclExpression == null) {
 				return null;
 			}
-			EvaluationEnvironment evalEnv = oclQuery.getEvaluationEnvironment();
-			// init environment
-			for (Iterator it = env.entrySet().iterator(); it.hasNext();) {
-				Map.Entry nextEntry = (Map.Entry) it.next();
-				evalEnv.replace((String) nextEntry.getKey(), nextEntry.getValue());
+			// on the first call, both evalEnvironment and extentMap are clear, for later we have finally, below.
+			EvaluationEnvironment<?, ?, ?, ?, ?> evalEnv = oclInstance
+					.getEvaluationEnvironment();
+			// initialize environment
+			for (Object nextKey : env.keySet()) {
+				evalEnv.replace((String) nextKey, env.get(nextKey));
 			}
 			try {
-				initExtentMap(context);
-				Object result = oclQuery.evaluate(context);
-				return (result != oclInstance.getEnvironment().getOCLStandardLibrary().getOclInvalid()) ? result : null;
+				Object result = oclInstance.evaluate(context, oclExpression);
+				return oclInstance.isInvalid(result) ? null : result;
 			} finally {
 				evalEnv.clear();
-				oclQuery.getExtentMap().clear();
+				oclInstance.setExtentMap(null); // clear allInstances cache, and get the oclInstance ready for the next call
 			}
 		}
 
 		/**
 		 * @generated
 		 */
-		private void initExtentMap(Object context) {
-			if (!getStatus().isOK() || context == null) {
-				return;
-			}
-			final Query queryToInit = getQuery();
-			final Object extentContext = context;
-			queryToInit.getExtentMap().clear();
-			if (queryToInit.queryText() != null
-				&& queryToInit.queryText().indexOf(PredefinedType.ALL_INSTANCES_NAME) >= 0) {
-				AbstractVisitor visitior = new AbstractVisitor() {
-
-					private boolean usesAllInstances = false;
-
-					public Object visitOperationCallExp(OperationCallExp oc) {
-						if (!usesAllInstances) {
-							usesAllInstances = PredefinedType.ALL_INSTANCES == oc.getOperationCode();
-							if (usesAllInstances) {
-								queryToInit.getExtentMap().putAll(
-									oclInstance.getEvaluationEnvironment().createExtentMap(extentContext));
-							}
-						}
-						return super.visitOperationCallExp(oc);
-					}
-				};
-				queryToInit.getExpression().accept(visitior);
+		private static void initCustomEnv(
+				Environment<?, EClassifier, ?, ?, ?, EParameter, ?, ?, ?, ?, ?, ?> ecoreEnv,
+				Map<String, EClassifier> environment) {
+			// Use EObject as implicit root class for any object, to allow eContainer() and other EObject operations from OCL expressions
+			ParsingOptions.setOption(ecoreEnv,
+					ParsingOptions.implicitRootClass(ecoreEnv),
+					EcorePackage.eINSTANCE.getEObject());
+			for (String varName : environment.keySet()) {
+				EClassifier varType = environment.get(varName);
+				ecoreEnv.addElement(varName,
+						createVar(ecoreEnv, varName, varType), false);
 			}
 		}
 
 		/**
 		 * @generated
 		 */
-		private static void initCustomEnv(Environment ecoreEnv, Map environment) {
-			for (Iterator it = environment.keySet().iterator(); it.hasNext();) {
-				String varName = (String) it.next();
-				EClassifier varType = (EClassifier) environment.get(varName);
-				ecoreEnv.addElement(varName, createVar(ecoreEnv, varName, varType), false);
-			}
-		}
-
-		/**
-		 * @generated
-		 */
-		private static Variable createVar(Environment ecoreEnv, String name, EClassifier type) {
-			Variable var = EcoreFactory.eINSTANCE.createVariable();
+		private static org.eclipse.ocl.ecore.Variable createVar(
+				Environment<?, EClassifier, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?> ecoreEnv,
+				String name, EClassifier type) {
+			org.eclipse.ocl.ecore.Variable var = EcoreFactory.eINSTANCE
+					.createVariable();
 			var.setName(name);
 			var.setType(ecoreEnv.getUMLReflection().getOCLType(type));
 			return var;
Index: src/org/unicase/ui/diagram/urml/expressions/UrmlAbstractExpression.java
===================================================================
--- src/org/unicase/ui/diagram/urml/expressions/UrmlAbstractExpression.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/expressions/UrmlAbstractExpression.java	(working copy)
@@ -29,10 +29,13 @@
 	 */
 	protected void setStatus(int severity, String message, Throwable throwable) {
 		String pluginID = UrmlDiagramEditorPlugin.ID;
-		this.status = new Status(severity, pluginID, -1, (message != null) ? message : "", throwable); //$NON-NLS-1$
+		this.status = new Status(severity, pluginID, -1,
+				(message != null) ? message : "", throwable); //$NON-NLS-1$
 		if (!this.status.isOK()) {
-			UrmlDiagramEditorPlugin.getInstance().logError(
-				"Expression problem:" + message + "body:" + body(), throwable); //$NON-NLS-1$ //$NON-NLS-2$
+			UrmlDiagramEditorPlugin
+					.getInstance()
+					.logError(
+							"Expression problem:" + message + "body:" + body(), throwable); //$NON-NLS-1$ //$NON-NLS-2$
 		}
 	}
 
@@ -78,6 +81,7 @@
 	/**
 	 * @generated
 	 */
+	@SuppressWarnings("rawtypes")
 	protected abstract Object doEvaluate(Object context, Map env);
 
 	/**
@@ -90,12 +94,14 @@
 	/**
 	 * @generated
 	 */
+	@SuppressWarnings("rawtypes")
 	public Object evaluate(Object context, Map env) {
 		if (context().isInstance(context)) {
 			try {
 				return doEvaluate(context, env);
 			} catch (Exception e) {
-				UrmlDiagramEditorPlugin.getInstance().logError("Expression evaluation failure: " + body(), e); //$NON-NLS-1$
+				UrmlDiagramEditorPlugin.getInstance().logError(
+						"Expression evaluation failure: " + body(), e); //$NON-NLS-1$
 			}
 		}
 		return null;
@@ -111,16 +117,18 @@
 		if (targetType instanceof EEnum) {
 			if (value instanceof EEnumLiteral) {
 				EEnumLiteral literal = (EEnumLiteral) value;
-				return (literal.getInstance() != null) ? literal.getInstance() : literal;
+				return (literal.getInstance() != null) ? literal.getInstance()
+						: literal;
 			}
 		}
-		if (false == value instanceof Number || targetType == null || targetType.getInstanceClass() == null) {
+		if (false == value instanceof Number || targetType == null
+				|| targetType.getInstanceClass() == null) {
 			return value;
 		}
-		Class targetClass = targetType.getInstanceClass();
+		Class<?> targetClass = targetType.getInstanceClass();
 		Number num = (Number) value;
-		Class valClass = value.getClass();
-		Class targetWrapperClass = targetClass;
+		Class<?> valClass = value.getClass();
+		Class<?> targetWrapperClass = targetClass;
 		if (targetClass.isPrimitive()) {
 			targetWrapperClass = EcoreUtil.wrapperClassFor(targetClass);
 		}
Index: src/org/unicase/ui/diagram/urml/parsers/AbstractParser.java
===================================================================
--- src/org/unicase/ui/diagram/urml/parsers/AbstractParser.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/parsers/AbstractParser.java	(working copy)
@@ -73,7 +73,8 @@
 			throw new IllegalArgumentException();
 		}
 		this.features = features;
-		if (editableFeatures == null || Arrays.asList(editableFeatures).contains(null)) {
+		if (editableFeatures == null
+				|| Arrays.asList(editableFeatures).contains(null)) {
 			throw new IllegalArgumentException();
 		}
 		this.editableFeatures = editableFeatures;
@@ -189,18 +190,23 @@
 	/**
 	 * @generated
 	 */
-	protected ICommand getParseCommand(IAdaptable adapter, Object[] values, int flags) {
-		if (values == null || validateNewValues(values).getCode() != IParserEditStatus.EDITABLE) {
+	protected ICommand getParseCommand(IAdaptable adapter, Object[] values,
+			int flags) {
+		if (values == null
+				|| validateNewValues(values).getCode() != IParserEditStatus.EDITABLE) {
 			return UnexecutableCommand.INSTANCE;
 		}
 		EObject element = (EObject) adapter.getAdapter(EObject.class);
-		TransactionalEditingDomain editingDomain = TransactionUtil.getEditingDomain(element);
+		TransactionalEditingDomain editingDomain = TransactionUtil
+				.getEditingDomain(element);
 		if (editingDomain == null) {
 			return UnexecutableCommand.INSTANCE;
 		}
-		CompositeTransactionalCommand command = new CompositeTransactionalCommand(editingDomain, "Set Values"); //$NON-NLS-1$
+		CompositeTransactionalCommand command = new CompositeTransactionalCommand(
+				editingDomain, "Set Values"); //$NON-NLS-1$
 		for (int i = 0; i < values.length; i++) {
-			command.compose(getModificationCommand(element, editableFeatures[i], values[i]));
+			command.compose(getModificationCommand(element,
+					editableFeatures[i], values[i]));
 		}
 		return command;
 	}
@@ -208,7 +214,8 @@
 	/**
 	 * @generated
 	 */
-	protected ICommand getModificationCommand(EObject element, EAttribute feature, Object value) {
+	protected ICommand getModificationCommand(EObject element,
+			EAttribute feature, Object value) {
 		value = getValidNewValue(feature, value);
 		if (value instanceof InvalidValue) {
 			return UnexecutableCommand.INSTANCE;
@@ -227,7 +234,8 @@
 		for (int i = 0; i < values.length; i++) {
 			Object value = getValidNewValue(editableFeatures[i], values[i]);
 			if (value instanceof InvalidValue) {
-				return new ParserEditStatus(UrmlDiagramEditorPlugin.ID, IParserEditStatus.UNEDITABLE, value.toString());
+				return new ParserEditStatus(UrmlDiagramEditorPlugin.ID,
+						IParserEditStatus.UNEDITABLE, value.toString());
 			}
 		}
 		return ParserEditStatus.EDITABLE_STATUS;
@@ -246,7 +254,9 @@
 				} else if (value instanceof String) {
 					value = Boolean.valueOf((String) value);
 				} else {
-					value = new InvalidValue(NLS.bind(Messages.AbstractParser_UnexpectedValueType, iClass.getName()));
+					value = new InvalidValue(NLS.bind(
+							Messages.AbstractParser_UnexpectedValueType,
+							iClass.getName()));
 				}
 			} else if (Character.TYPE.equals(iClass)) {
 				if (value instanceof Character) {
@@ -259,7 +269,9 @@
 						value = new Character(s.charAt(0));
 					}
 				} else {
-					value = new InvalidValue(NLS.bind(Messages.AbstractParser_UnexpectedValueType, iClass.getName()));
+					value = new InvalidValue(NLS.bind(
+							Messages.AbstractParser_UnexpectedValueType,
+							iClass.getName()));
 				}
 			} else if (Byte.TYPE.equals(iClass)) {
 				if (value instanceof Byte) {
@@ -274,12 +286,16 @@
 						try {
 							value = Byte.valueOf(s);
 						} catch (NumberFormatException nfe) {
-							value = new InvalidValue(NLS.bind(Messages.AbstractParser_WrongStringConversion, iClass
-								.getName()));
+							value = new InvalidValue(
+									NLS.bind(
+											Messages.AbstractParser_WrongStringConversion,
+											iClass.getName()));
 						}
 					}
 				} else {
-					value = new InvalidValue(NLS.bind(Messages.AbstractParser_UnexpectedValueType, iClass.getName()));
+					value = new InvalidValue(NLS.bind(
+							Messages.AbstractParser_UnexpectedValueType,
+							iClass.getName()));
 				}
 			} else if (Short.TYPE.equals(iClass)) {
 				if (value instanceof Short) {
@@ -294,12 +310,16 @@
 						try {
 							value = Short.valueOf(s);
 						} catch (NumberFormatException nfe) {
-							value = new InvalidValue(NLS.bind(Messages.AbstractParser_WrongStringConversion, iClass
-								.getName()));
+							value = new InvalidValue(
+									NLS.bind(
+											Messages.AbstractParser_WrongStringConversion,
+											iClass.getName()));
 						}
 					}
 				} else {
-					value = new InvalidValue(NLS.bind(Messages.AbstractParser_UnexpectedValueType, iClass.getName()));
+					value = new InvalidValue(NLS.bind(
+							Messages.AbstractParser_UnexpectedValueType,
+							iClass.getName()));
 				}
 			} else if (Integer.TYPE.equals(iClass)) {
 				if (value instanceof Integer) {
@@ -314,12 +334,16 @@
 						try {
 							value = Integer.valueOf(s);
 						} catch (NumberFormatException nfe) {
-							value = new InvalidValue(NLS.bind(Messages.AbstractParser_WrongStringConversion, iClass
-								.getName()));
+							value = new InvalidValue(
+									NLS.bind(
+											Messages.AbstractParser_WrongStringConversion,
+											iClass.getName()));
 						}
 					}
 				} else {
-					value = new InvalidValue(NLS.bind(Messages.AbstractParser_UnexpectedValueType, iClass.getName()));
+					value = new InvalidValue(NLS.bind(
+							Messages.AbstractParser_UnexpectedValueType,
+							iClass.getName()));
 				}
 			} else if (Long.TYPE.equals(iClass)) {
 				if (value instanceof Long) {
@@ -334,12 +358,16 @@
 						try {
 							value = Long.valueOf(s);
 						} catch (NumberFormatException nfe) {
-							value = new InvalidValue(NLS.bind(Messages.AbstractParser_WrongStringConversion, iClass
-								.getName()));
+							value = new InvalidValue(
+									NLS.bind(
+											Messages.AbstractParser_WrongStringConversion,
+											iClass.getName()));
 						}
 					}
 				} else {
-					value = new InvalidValue(NLS.bind(Messages.AbstractParser_UnexpectedValueType, iClass.getName()));
+					value = new InvalidValue(NLS.bind(
+							Messages.AbstractParser_UnexpectedValueType,
+							iClass.getName()));
 				}
 			} else if (Float.TYPE.equals(iClass)) {
 				if (value instanceof Float) {
@@ -354,12 +382,16 @@
 						try {
 							value = Float.valueOf(s);
 						} catch (NumberFormatException nfe) {
-							value = new InvalidValue(NLS.bind(Messages.AbstractParser_WrongStringConversion, iClass
-								.getName()));
+							value = new InvalidValue(
+									NLS.bind(
+											Messages.AbstractParser_WrongStringConversion,
+											iClass.getName()));
 						}
 					}
 				} else {
-					value = new InvalidValue(NLS.bind(Messages.AbstractParser_UnexpectedValueType, iClass.getName()));
+					value = new InvalidValue(NLS.bind(
+							Messages.AbstractParser_UnexpectedValueType,
+							iClass.getName()));
 				}
 			} else if (Double.TYPE.equals(iClass)) {
 				if (value instanceof Double) {
@@ -374,24 +406,31 @@
 						try {
 							value = Double.valueOf(s);
 						} catch (NumberFormatException nfe) {
-							value = new InvalidValue(NLS.bind(Messages.AbstractParser_WrongStringConversion, iClass
-								.getName()));
+							value = new InvalidValue(
+									NLS.bind(
+											Messages.AbstractParser_WrongStringConversion,
+											iClass.getName()));
 						}
 					}
 				} else {
-					value = new InvalidValue(NLS.bind(Messages.AbstractParser_UnexpectedValueType, iClass.getName()));
+					value = new InvalidValue(NLS.bind(
+							Messages.AbstractParser_UnexpectedValueType,
+							iClass.getName()));
 				}
 			} else if (type instanceof EEnum) {
 				if (value instanceof String) {
-					EEnumLiteral literal = ((EEnum) type).getEEnumLiteralByLiteral((String) value);
+					EEnumLiteral literal = ((EEnum) type)
+							.getEEnumLiteralByLiteral((String) value);
 					if (literal == null) {
-						value = new InvalidValue(NLS.bind(Messages.AbstractParser_UnknownLiteral, value));
+						value = new InvalidValue(NLS.bind(
+								Messages.AbstractParser_UnknownLiteral, value));
 					} else {
 						value = literal.getInstance();
 					}
 				} else {
-					value = new InvalidValue(NLS.bind(Messages.AbstractParser_UnexpectedValueType, String.class
-						.getName()));
+					value = new InvalidValue(NLS.bind(
+							Messages.AbstractParser_UnexpectedValueType,
+							String.class.getName()));
 				}
 			}
 		}
Index: src/org/unicase/ui/diagram/urml/parsers/MessageFormatParser.java
===================================================================
--- src/org/unicase/ui/diagram/urml/parsers/MessageFormatParser.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/parsers/MessageFormatParser.java	(working copy)
@@ -54,7 +54,8 @@
 	/**
 	 * @generated
 	 */
-	public MessageFormatParser(EAttribute[] features, EAttribute[] editableFeatures) {
+	public MessageFormatParser(EAttribute[] features,
+			EAttribute[] editableFeatures) {
 		super(features, editableFeatures);
 	}
 
@@ -98,7 +99,9 @@
 	 */
 	protected MessageFormat getViewProcessor() {
 		if (viewProcessor == null) {
-			viewProcessor = new MessageFormat(getViewPattern() == null ? getDefaultPattern() : getViewPattern());
+			viewProcessor = new MessageFormat(
+					getViewPattern() == null ? getDefaultPattern()
+							: getViewPattern());
 		}
 		return viewProcessor;
 	}
@@ -108,8 +111,9 @@
 	 */
 	protected MessageFormat getEditorProcessor() {
 		if (editorProcessor == null) {
-			editorProcessor = new MessageFormat(getEditorPattern() == null ? getDefaultEditablePattern()
-				: getEditorPattern());
+			editorProcessor = new MessageFormat(
+					getEditorPattern() == null ? getDefaultEditablePattern()
+							: getEditorPattern());
 		}
 		return editorProcessor;
 	}
@@ -146,7 +150,9 @@
 	 */
 	protected MessageFormat getEditProcessor() {
 		if (editProcessor == null) {
-			editProcessor = new MessageFormat(getEditPattern() == null ? getDefaultEditablePattern() : getEditPattern());
+			editProcessor = new MessageFormat(
+					getEditPattern() == null ? getDefaultEditablePattern()
+							: getEditPattern());
 		}
 		return editProcessor;
 	}
@@ -156,19 +162,22 @@
 	 */
 	public String getEditString(IAdaptable adapter, int flags) {
 		EObject element = (EObject) adapter.getAdapter(EObject.class);
-		return getEditorProcessor().format(getEditableValues(element), new StringBuffer(), new FieldPosition(0))
-			.toString();
+		return getEditorProcessor().format(getEditableValues(element),
+				new StringBuffer(), new FieldPosition(0)).toString();
 	}
 
 	/**
 	 * @generated
 	 */
-	public IParserEditStatus isValidEditString(IAdaptable adapter, String editString) {
+	public IParserEditStatus isValidEditString(IAdaptable adapter,
+			String editString) {
 		ParsePosition pos = new ParsePosition(0);
 		Object[] values = getEditProcessor().parse(editString, pos);
 		if (values == null) {
-			return new ParserEditStatus(UrmlDiagramEditorPlugin.ID, IParserEditStatus.UNEDITABLE, NLS.bind(
-				Messages.MessageFormatParser_InvalidInputError, new Integer(pos.getErrorIndex())));
+			return new ParserEditStatus(UrmlDiagramEditorPlugin.ID,
+					IParserEditStatus.UNEDITABLE, NLS.bind(
+							Messages.MessageFormatParser_InvalidInputError,
+							new Integer(pos.getErrorIndex())));
 		}
 		return validateNewValues(values);
 	}
@@ -176,8 +185,10 @@
 	/**
 	 * @generated
 	 */
-	public ICommand getParseCommand(IAdaptable adapter, String newString, int flags) {
-		Object[] values = getEditProcessor().parse(newString, new ParsePosition(0));
+	public ICommand getParseCommand(IAdaptable adapter, String newString,
+			int flags) {
+		Object[] values = getEditProcessor().parse(newString,
+				new ParsePosition(0));
 		return getParseCommand(adapter, values, flags);
 	}
 
@@ -186,7 +197,8 @@
 	 */
 	public String getPrintString(IAdaptable adapter, int flags) {
 		EObject element = (EObject) adapter.getAdapter(EObject.class);
-		return getViewProcessor().format(getValues(element), new StringBuffer(), new FieldPosition(0)).toString();
+		return getViewProcessor().format(getValues(element),
+				new StringBuffer(), new FieldPosition(0)).toString();
 	}
 
 }
Index: src/org/unicase/ui/diagram/urml/providers/UrmlParserProvider.java
===================================================================
--- src/org/unicase/ui/diagram/urml/providers/UrmlParserProvider.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/providers/UrmlParserProvider.java	(working copy)
@@ -36,7 +36,8 @@
 /**
  * @generated
  */
-public class UrmlParserProvider extends AbstractProvider implements IParserProvider {
+public class UrmlParserProvider extends AbstractProvider implements
+		IParserProvider {
 
 	/**
 	 * @generated
@@ -48,7 +49,8 @@
 	 */
 	private IParser getStakeholderName_5008Parser() {
 		if (stakeholderName_5008Parser == null) {
-			EAttribute[] features = new EAttribute[] { ModelPackage.eINSTANCE.getUnicaseModelElement_Name() };
+			EAttribute[] features = new EAttribute[] { ModelPackage.eINSTANCE
+					.getUnicaseModelElement_Name() };
 			MessageFormatParser parser = new MessageFormatParser(features);
 			stakeholderName_5008Parser = parser;
 		}
@@ -65,7 +67,8 @@
 	 */
 	private IParser getGoalName_5009Parser() {
 		if (goalName_5009Parser == null) {
-			EAttribute[] features = new EAttribute[] { ModelPackage.eINSTANCE.getUnicaseModelElement_Name() };
+			EAttribute[] features = new EAttribute[] { ModelPackage.eINSTANCE
+					.getUnicaseModelElement_Name() };
 			MessageFormatParser parser = new MessageFormatParser(features);
 			goalName_5009Parser = parser;
 		}
@@ -82,7 +85,8 @@
 	 */
 	private IParser getFunctionalRequirementName_5010Parser() {
 		if (functionalRequirementName_5010Parser == null) {
-			EAttribute[] features = new EAttribute[] { ModelPackage.eINSTANCE.getUnicaseModelElement_Name() };
+			EAttribute[] features = new EAttribute[] { ModelPackage.eINSTANCE
+					.getUnicaseModelElement_Name() };
 			MessageFormatParser parser = new MessageFormatParser(features);
 			functionalRequirementName_5010Parser = parser;
 		}
@@ -99,7 +103,8 @@
 	 */
 	private IParser getFeatureName_5011Parser() {
 		if (featureName_5011Parser == null) {
-			EAttribute[] features = new EAttribute[] { ModelPackage.eINSTANCE.getUnicaseModelElement_Name() };
+			EAttribute[] features = new EAttribute[] { ModelPackage.eINSTANCE
+					.getUnicaseModelElement_Name() };
 			MessageFormatParser parser = new MessageFormatParser(features);
 			featureName_5011Parser = parser;
 		}
@@ -116,7 +121,8 @@
 	 */
 	private IParser getServiceName_5002Parser() {
 		if (serviceName_5002Parser == null) {
-			EAttribute[] features = new EAttribute[] { ModelPackage.eINSTANCE.getUnicaseModelElement_Name() };
+			EAttribute[] features = new EAttribute[] { ModelPackage.eINSTANCE
+					.getUnicaseModelElement_Name() };
 			MessageFormatParser parser = new MessageFormatParser(features);
 			serviceName_5002Parser = parser;
 		}
@@ -133,7 +139,8 @@
 	 */
 	private IParser getNonFunctionalRequirementName_5003Parser() {
 		if (nonFunctionalRequirementName_5003Parser == null) {
-			EAttribute[] features = new EAttribute[] { ModelPackage.eINSTANCE.getUnicaseModelElement_Name() };
+			EAttribute[] features = new EAttribute[] { ModelPackage.eINSTANCE
+					.getUnicaseModelElement_Name() };
 			MessageFormatParser parser = new MessageFormatParser(features);
 			nonFunctionalRequirementName_5003Parser = parser;
 		}
@@ -150,7 +157,8 @@
 	 */
 	private IParser getDangerName_5004Parser() {
 		if (dangerName_5004Parser == null) {
-			EAttribute[] features = new EAttribute[] { ModelPackage.eINSTANCE.getUnicaseModelElement_Name() };
+			EAttribute[] features = new EAttribute[] { ModelPackage.eINSTANCE
+					.getUnicaseModelElement_Name() };
 			MessageFormatParser parser = new MessageFormatParser(features);
 			dangerName_5004Parser = parser;
 		}
@@ -167,7 +175,8 @@
 	 */
 	private IParser getActorName_5005Parser() {
 		if (actorName_5005Parser == null) {
-			EAttribute[] features = new EAttribute[] { ModelPackage.eINSTANCE.getUnicaseModelElement_Name() };
+			EAttribute[] features = new EAttribute[] { ModelPackage.eINSTANCE
+					.getUnicaseModelElement_Name() };
 			MessageFormatParser parser = new MessageFormatParser(features);
 			actorName_5005Parser = parser;
 		}
@@ -184,7 +193,8 @@
 	 */
 	private IParser getProceduralMitigationName_5006Parser() {
 		if (proceduralMitigationName_5006Parser == null) {
-			EAttribute[] features = new EAttribute[] { ModelPackage.eINSTANCE.getUnicaseModelElement_Name() };
+			EAttribute[] features = new EAttribute[] { ModelPackage.eINSTANCE
+					.getUnicaseModelElement_Name() };
 			MessageFormatParser parser = new MessageFormatParser(features);
 			proceduralMitigationName_5006Parser = parser;
 		}
@@ -201,7 +211,8 @@
 	 */
 	private IParser getVariationPointName_5012Parser() {
 		if (variationPointName_5012Parser == null) {
-			EAttribute[] features = new EAttribute[] { ModelPackage.eINSTANCE.getUnicaseModelElement_Name() };
+			EAttribute[] features = new EAttribute[] { ModelPackage.eINSTANCE
+					.getUnicaseModelElement_Name() };
 			MessageFormatParser parser = new MessageFormatParser(features);
 			variationPointName_5012Parser = parser;
 		}
@@ -218,7 +229,8 @@
 	 */
 	private IParser getVariationPointInstanceName_5013Parser() {
 		if (variationPointInstanceName_5013Parser == null) {
-			EAttribute[] features = new EAttribute[] { ModelPackage.eINSTANCE.getUnicaseModelElement_Name() };
+			EAttribute[] features = new EAttribute[] { ModelPackage.eINSTANCE
+					.getUnicaseModelElement_Name() };
 			MessageFormatParser parser = new MessageFormatParser(features);
 			variationPointInstanceName_5013Parser = parser;
 		}
@@ -235,7 +247,8 @@
 	 */
 	private IParser getProductName_5014Parser() {
 		if (productName_5014Parser == null) {
-			EAttribute[] features = new EAttribute[] { ModelPackage.eINSTANCE.getUnicaseModelElement_Name() };
+			EAttribute[] features = new EAttribute[] { ModelPackage.eINSTANCE
+					.getUnicaseModelElement_Name() };
 			MessageFormatParser parser = new MessageFormatParser(features);
 			productName_5014Parser = parser;
 		}
@@ -252,7 +265,8 @@
 	 */
 	private IParser getGoalReferenceWeight_6013Parser() {
 		if (goalReferenceWeight_6013Parser == null) {
-			EAttribute[] features = new EAttribute[] { GoalPackage.eINSTANCE.getGoalReference_Weight() };
+			EAttribute[] features = new EAttribute[] { GoalPackage.eINSTANCE
+					.getGoalReference_Weight() };
 			MessageFormatParser parser = new MessageFormatParser(features);
 			goalReferenceWeight_6013Parser = parser;
 		}
@@ -269,7 +283,8 @@
 	 */
 	private IParser getGoalReferenceWeight_6019Parser() {
 		if (goalReferenceWeight_6019Parser == null) {
-			EAttribute[] features = new EAttribute[] { GoalPackage.eINSTANCE.getGoalReference_Weight() };
+			EAttribute[] features = new EAttribute[] { GoalPackage.eINSTANCE
+					.getGoalReference_Weight() };
 			MessageFormatParser parser = new MessageFormatParser(features);
 			goalReferenceWeight_6019Parser = parser;
 		}
@@ -286,7 +301,8 @@
 	 */
 	private IParser getGoalReferenceWeight_6020Parser() {
 		if (goalReferenceWeight_6020Parser == null) {
-			EAttribute[] features = new EAttribute[] { GoalPackage.eINSTANCE.getGoalReference_Weight() };
+			EAttribute[] features = new EAttribute[] { GoalPackage.eINSTANCE
+					.getGoalReference_Weight() };
 			MessageFormatParser parser = new MessageFormatParser(features);
 			goalReferenceWeight_6020Parser = parser;
 		}
@@ -303,7 +319,8 @@
 	 */
 	private IParser getGoalReferenceWeight_6021Parser() {
 		if (goalReferenceWeight_6021Parser == null) {
-			EAttribute[] features = new EAttribute[] { GoalPackage.eINSTANCE.getGoalReference_Weight() };
+			EAttribute[] features = new EAttribute[] { GoalPackage.eINSTANCE
+					.getGoalReference_Weight() };
 			MessageFormatParser parser = new MessageFormatParser(features);
 			goalReferenceWeight_6021Parser = parser;
 		}
@@ -356,8 +373,10 @@
 	 * 
 	 * @generated
 	 */
-	public static IParser getParser(IElementType type, EObject object, String parserHint) {
-		return ParserService.getInstance().getParser(new HintAdapter(type, object, parserHint));
+	public static IParser getParser(IElementType type, EObject object,
+			String parserHint) {
+		return ParserService.getInstance().getParser(
+				new HintAdapter(type, object, parserHint));
 	}
 
 	/**
Index: src/org/unicase/ui/diagram/urml/providers/UrmlEditPartProvider.java
===================================================================
--- src/org/unicase/ui/diagram/urml/providers/UrmlEditPartProvider.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/providers/UrmlEditPartProvider.java	(working copy)
@@ -121,7 +121,8 @@
 	public synchronized boolean provides(IOperation operation) {
 		if (operation instanceof CreateGraphicEditPartOperation) {
 			View view = ((IEditPartOperation) operation).getView();
-			if (!URMLDiagramEditPart.MODEL_ID.equals(UrmlVisualIDRegistry.getModelID(view))) {
+			if (!URMLDiagramEditPart.MODEL_ID.equals(UrmlVisualIDRegistry
+					.getModelID(view))) {
 				return false;
 			}
 			if (isAllowCaching() && getCachedPart(view) != null) {
Index: src/org/unicase/ui/diagram/urml/providers/UrmlViewProvider.java
===================================================================
--- src/org/unicase/ui/diagram/urml/providers/UrmlViewProvider.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/providers/UrmlViewProvider.java	(working copy)
@@ -109,8 +109,10 @@
 import org.unicase.ui.diagram.urml.edit.parts.StakeholderGoalsEditPart;
 import org.unicase.ui.diagram.urml.edit.parts.StakeholderNameEditPart;
 import org.unicase.ui.diagram.urml.edit.parts.SuggestsLabelEditPart;
+import org.unicase.ui.diagram.urml.edit.parts.TriggersLabel2EditPart;
 import org.unicase.ui.diagram.urml.edit.parts.TriggersLabelEditPart;
 import org.unicase.ui.diagram.urml.edit.parts.URMLDiagramEditPart;
+import org.unicase.ui.diagram.urml.edit.parts.UrmlModelElementAssociationsEditPart;
 import org.unicase.ui.diagram.urml.edit.parts.VariationPointEditPart;
 import org.unicase.ui.diagram.urml.edit.parts.VariationPointInstanceEditPart;
 import org.unicase.ui.diagram.urml.edit.parts.VariationPointInstanceNameEditPart;
@@ -148,9 +150,10 @@
 	 */
 	protected boolean provides(CreateViewForKindOperation op) {
 		/*
-		 * if (op.getViewKind() == Node.class) return getNodeViewClass(op.getSemanticAdapter(), op.getContainerView(),
-		 * op.getSemanticHint()) != null; if (op.getViewKind() == Edge.class) return
-		 * getEdgeViewClass(op.getSemanticAdapter(), op.getContainerView(), op.getSemanticHint()) != null;
+		 if (op.getViewKind() == Node.class)
+		 return getNodeViewClass(op.getSemanticAdapter(), op.getContainerView(), op.getSemanticHint()) != null;
+		 if (op.getViewKind() == Edge.class)
+		 return getEdgeViewClass(op.getSemanticAdapter(), op.getContainerView(), op.getSemanticHint()) != null;
 		 */
 		return true;
 	}
@@ -160,7 +163,9 @@
 	 */
 	protected boolean provides(CreateDiagramViewOperation op) {
 		return URMLDiagramEditPart.MODEL_ID.equals(op.getSemanticHint())
-			&& UrmlVisualIDRegistry.getDiagramVisualID(getSemanticElement(op.getSemanticAdapter())) != -1;
+				&& UrmlVisualIDRegistry
+						.getDiagramVisualID(getSemanticElement(op
+								.getSemanticAdapter())) != -1;
 	}
 
 	/**
@@ -170,7 +175,8 @@
 		if (op.getContainerView() == null) {
 			return false;
 		}
-		IElementType elementType = getSemanticElementType(op.getSemanticAdapter());
+		IElementType elementType = getSemanticElementType(op
+				.getSemanticAdapter());
 		EObject domainElement = getSemanticElement(op.getSemanticAdapter());
 		int visualID;
 		if (op.getSemanticHint() == null) {
@@ -180,23 +186,28 @@
 			if (elementType != null || domainElement == null) {
 				return false;
 			}
-			visualID = UrmlVisualIDRegistry.getNodeVisualID(op.getContainerView(), domainElement);
+			visualID = UrmlVisualIDRegistry.getNodeVisualID(
+					op.getContainerView(), domainElement);
 		} else {
 			visualID = UrmlVisualIDRegistry.getVisualID(op.getSemanticHint());
 			if (elementType != null) {
-				if (!UrmlElementTypes.isKnownElementType(elementType) || (!(elementType instanceof IHintedType))) {
+				if (!UrmlElementTypes.isKnownElementType(elementType)
+						|| (!(elementType instanceof IHintedType))) {
 					return false; // foreign element type
 				}
-				String elementTypeHint = ((IHintedType) elementType).getSemanticHint();
+				String elementTypeHint = ((IHintedType) elementType)
+						.getSemanticHint();
 				if (!op.getSemanticHint().equals(elementTypeHint)) {
 					return false; // if semantic hint is specified it should be the same as in element type
 				}
 				if (domainElement != null
-					&& visualID != UrmlVisualIDRegistry.getNodeVisualID(op.getContainerView(), domainElement)) {
+						&& visualID != UrmlVisualIDRegistry.getNodeVisualID(
+								op.getContainerView(), domainElement)) {
 					return false; // visual id for node EClass should match visual id from element type
 				}
 			} else {
-				if (!URMLDiagramEditPart.MODEL_ID.equals(UrmlVisualIDRegistry.getModelID(op.getContainerView()))) {
+				if (!URMLDiagramEditPart.MODEL_ID.equals(UrmlVisualIDRegistry
+						.getModelID(op.getContainerView()))) {
 					return false; // foreign diagram
 				}
 				switch (visualID) {
@@ -213,7 +224,9 @@
 				case VariationPointInstanceEditPart.VISUAL_ID:
 				case ProductEditPart.VISUAL_ID:
 					if (domainElement == null
-						|| visualID != UrmlVisualIDRegistry.getNodeVisualID(op.getContainerView(), domainElement)) {
+							|| visualID != UrmlVisualIDRegistry
+									.getNodeVisualID(op.getContainerView(),
+											domainElement)) {
 						return false; // visual id in semantic hint should match visual id for domain element
 					}
 					break;
@@ -222,29 +235,41 @@
 				}
 			}
 		}
-		return StakeholderEditPart.VISUAL_ID == visualID || GoalEditPart.VISUAL_ID == visualID
-			|| FunctionalRequirementEditPart.VISUAL_ID == visualID || FeatureEditPart.VISUAL_ID == visualID
-			|| ServiceEditPart.VISUAL_ID == visualID || NonFunctionalRequirementEditPart.VISUAL_ID == visualID
-			|| DangerEditPart.VISUAL_ID == visualID || ActorEditPart.VISUAL_ID == visualID
-			|| ProceduralMitigationEditPart.VISUAL_ID == visualID || VariationPointEditPart.VISUAL_ID == visualID
-			|| VariationPointInstanceEditPart.VISUAL_ID == visualID || ProductEditPart.VISUAL_ID == visualID;
+		return StakeholderEditPart.VISUAL_ID == visualID
+				|| GoalEditPart.VISUAL_ID == visualID
+				|| FunctionalRequirementEditPart.VISUAL_ID == visualID
+				|| FeatureEditPart.VISUAL_ID == visualID
+				|| ServiceEditPart.VISUAL_ID == visualID
+				|| NonFunctionalRequirementEditPart.VISUAL_ID == visualID
+				|| DangerEditPart.VISUAL_ID == visualID
+				|| ActorEditPart.VISUAL_ID == visualID
+				|| ProceduralMitigationEditPart.VISUAL_ID == visualID
+				|| VariationPointEditPart.VISUAL_ID == visualID
+				|| VariationPointInstanceEditPart.VISUAL_ID == visualID
+				|| ProductEditPart.VISUAL_ID == visualID;
 	}
 
 	/**
 	 * @generated
 	 */
 	protected boolean provides(CreateEdgeViewOperation op) {
-		IElementType elementType = getSemanticElementType(op.getSemanticAdapter());
-		if (!UrmlElementTypes.isKnownElementType(elementType) || (!(elementType instanceof IHintedType))) {
+		IElementType elementType = getSemanticElementType(op
+				.getSemanticAdapter());
+		if (!UrmlElementTypes.isKnownElementType(elementType)
+				|| (!(elementType instanceof IHintedType))) {
 			return false; // foreign element type
 		}
 		String elementTypeHint = ((IHintedType) elementType).getSemanticHint();
-		if (elementTypeHint == null || (op.getSemanticHint() != null && !elementTypeHint.equals(op.getSemanticHint()))) {
+		if (elementTypeHint == null
+				|| (op.getSemanticHint() != null && !elementTypeHint.equals(op
+						.getSemanticHint()))) {
 			return false; // our hint is visual id and must be specified, and it should be the same as in element type
 		}
 		int visualID = UrmlVisualIDRegistry.getVisualID(elementTypeHint);
 		EObject domainElement = getSemanticElement(op.getSemanticAdapter());
-		if (domainElement != null && visualID != UrmlVisualIDRegistry.getLinkWithClassVisualID(domainElement)) {
+		if (domainElement != null
+				&& visualID != UrmlVisualIDRegistry
+						.getLinkWithClassVisualID(domainElement)) {
 			return false; // visual id for link EClass should match visual id from element type
 		}
 		return true;
@@ -253,7 +278,8 @@
 	/**
 	 * @generated
 	 */
-	public Diagram createDiagram(IAdaptable semanticAdapter, String diagramKind, PreferencesHint preferencesHint) {
+	public Diagram createDiagram(IAdaptable semanticAdapter,
+			String diagramKind, PreferencesHint preferencesHint) {
 		Diagram diagram = NotationFactory.eINSTANCE.createDiagram();
 		diagram.getStyles().add(NotationFactory.eINSTANCE.createDiagramStyle());
 		diagram.setType(URMLDiagramEditPart.MODEL_ID);
@@ -265,40 +291,54 @@
 	/**
 	 * @generated
 	 */
-	public Node createNode(IAdaptable semanticAdapter, View containerView, String semanticHint, int index,
-		boolean persisted, PreferencesHint preferencesHint) {
+	public Node createNode(IAdaptable semanticAdapter, View containerView,
+			String semanticHint, int index, boolean persisted,
+			PreferencesHint preferencesHint) {
 		final EObject domainElement = getSemanticElement(semanticAdapter);
 		final int visualID;
 		if (semanticHint == null) {
-			visualID = UrmlVisualIDRegistry.getNodeVisualID(containerView, domainElement);
+			visualID = UrmlVisualIDRegistry.getNodeVisualID(containerView,
+					domainElement);
 		} else {
 			visualID = UrmlVisualIDRegistry.getVisualID(semanticHint);
 		}
 		switch (visualID) {
 		case StakeholderEditPart.VISUAL_ID:
-			return createStakeholder_2002(domainElement, containerView, index, persisted, preferencesHint);
+			return createStakeholder_2002(domainElement, containerView, index,
+					persisted, preferencesHint);
 		case GoalEditPart.VISUAL_ID:
-			return createGoal_2001(domainElement, containerView, index, persisted, preferencesHint);
+			return createGoal_2001(domainElement, containerView, index,
+					persisted, preferencesHint);
 		case FunctionalRequirementEditPart.VISUAL_ID:
-			return createFunctionalRequirement_2006(domainElement, containerView, index, persisted, preferencesHint);
+			return createFunctionalRequirement_2006(domainElement,
+					containerView, index, persisted, preferencesHint);
 		case FeatureEditPart.VISUAL_ID:
-			return createFeature_2012(domainElement, containerView, index, persisted, preferencesHint);
+			return createFeature_2012(domainElement, containerView, index,
+					persisted, preferencesHint);
 		case ServiceEditPart.VISUAL_ID:
-			return createService_2007(domainElement, containerView, index, persisted, preferencesHint);
+			return createService_2007(domainElement, containerView, index,
+					persisted, preferencesHint);
 		case NonFunctionalRequirementEditPart.VISUAL_ID:
-			return createNonFunctionalRequirement_2008(domainElement, containerView, index, persisted, preferencesHint);
+			return createNonFunctionalRequirement_2008(domainElement,
+					containerView, index, persisted, preferencesHint);
 		case DangerEditPart.VISUAL_ID:
-			return createDanger_2009(domainElement, containerView, index, persisted, preferencesHint);
+			return createDanger_2009(domainElement, containerView, index,
+					persisted, preferencesHint);
 		case ActorEditPart.VISUAL_ID:
-			return createActor_2010(domainElement, containerView, index, persisted, preferencesHint);
+			return createActor_2010(domainElement, containerView, index,
+					persisted, preferencesHint);
 		case ProceduralMitigationEditPart.VISUAL_ID:
-			return createProceduralMitigation_2011(domainElement, containerView, index, persisted, preferencesHint);
+			return createProceduralMitigation_2011(domainElement,
+					containerView, index, persisted, preferencesHint);
 		case VariationPointEditPart.VISUAL_ID:
-			return createVariationPoint_2013(domainElement, containerView, index, persisted, preferencesHint);
+			return createVariationPoint_2013(domainElement, containerView,
+					index, persisted, preferencesHint);
 		case VariationPointInstanceEditPart.VISUAL_ID:
-			return createVariationPointInstance_2014(domainElement, containerView, index, persisted, preferencesHint);
+			return createVariationPointInstance_2014(domainElement,
+					containerView, index, persisted, preferencesHint);
 		case ProductEditPart.VISUAL_ID:
-			return createProduct_2015(domainElement, containerView, index, persisted, preferencesHint);
+			return createProduct_2015(domainElement, containerView, index,
+					persisted, preferencesHint);
 		}
 		// can't happen, provided #provides(CreateNodeViewOperation) is correct
 		return null;
@@ -307,67 +347,91 @@
 	/**
 	 * @generated
 	 */
-	public Edge createEdge(IAdaptable semanticAdapter, View containerView, String semanticHint, int index,
-		boolean persisted, PreferencesHint preferencesHint) {
+	public Edge createEdge(IAdaptable semanticAdapter, View containerView,
+			String semanticHint, int index, boolean persisted,
+			PreferencesHint preferencesHint) {
 		IElementType elementType = getSemanticElementType(semanticAdapter);
 		String elementTypeHint = ((IHintedType) elementType).getSemanticHint();
 		switch (UrmlVisualIDRegistry.getVisualID(elementTypeHint)) {
 		case StakeholderGoalsEditPart.VISUAL_ID:
-			return createStakeholderGoals_4008(containerView, index, persisted, preferencesHint);
+			return createStakeholderGoals_4008(containerView, index, persisted,
+					preferencesHint);
 		case AbstractFeatureSubFeaturesEditPart.VISUAL_ID:
-			return createAbstractFeatureSubFeatures_4034(containerView, index, persisted, preferencesHint);
+			return createAbstractFeatureSubFeatures_4034(containerView, index,
+					persisted, preferencesHint);
 		case AbstractFeatureDetailingFunctionalRequirementsEditPart.VISUAL_ID:
-			return createAbstractFeatureDetailingFunctionalRequirements_4035(containerView, index, persisted,
-				preferencesHint);
+			return createAbstractFeatureDetailingFunctionalRequirements_4035(
+					containerView, index, persisted, preferencesHint);
 		case AbstractFeatureConstrainingNonFunctionalRequirementsEditPart.VISUAL_ID:
-			return createAbstractFeatureConstrainingNonFunctionalRequirements_4036(containerView, index, persisted,
-				preferencesHint);
+			return createAbstractFeatureConstrainingNonFunctionalRequirements_4036(
+					containerView, index, persisted, preferencesHint);
 		case AbstractFeatureRequiredFeaturesEditPart.VISUAL_ID:
-			return createAbstractFeatureRequiredFeatures_4045(containerView, index, persisted, preferencesHint);
+			return createAbstractFeatureRequiredFeatures_4045(containerView,
+					index, persisted, preferencesHint);
 		case AbstractFeatureExcludedFeaturesEditPart.VISUAL_ID:
-			return createAbstractFeatureExcludedFeatures_4038(containerView, index, persisted, preferencesHint);
+			return createAbstractFeatureExcludedFeatures_4038(containerView,
+					index, persisted, preferencesHint);
 		case GoalRealizedFeaturesEditPart.VISUAL_ID:
-			return createGoalRealizedFeatures_4004(containerView, index, persisted, preferencesHint);
+			return createGoalRealizedFeatures_4004(containerView, index,
+					persisted, preferencesHint);
 		case GoalSubGoalsEditPart.VISUAL_ID:
-			return createGoalSubGoals_4018(containerView, index, persisted, preferencesHint);
+			return createGoalSubGoals_4018(containerView, index, persisted,
+					preferencesHint);
 		case GoalReferenceEditPart.VISUAL_ID:
-			return createGoalReference_4016(getSemanticElement(semanticAdapter), containerView, index, persisted,
-				preferencesHint);
+			return createGoalReference_4016(
+					getSemanticElement(semanticAdapter), containerView, index,
+					persisted, preferencesHint);
 		case GoalReference2EditPart.VISUAL_ID:
-			return createGoalReference_4023(getSemanticElement(semanticAdapter), containerView, index, persisted,
-				preferencesHint);
+			return createGoalReference_4023(
+					getSemanticElement(semanticAdapter), containerView, index,
+					persisted, preferencesHint);
 		case GoalReference3EditPart.VISUAL_ID:
-			return createGoalReference_4024(getSemanticElement(semanticAdapter), containerView, index, persisted,
-				preferencesHint);
+			return createGoalReference_4024(
+					getSemanticElement(semanticAdapter), containerView, index,
+					persisted, preferencesHint);
 		case GoalReference4EditPart.VISUAL_ID:
-			return createGoalReference_4025(getSemanticElement(semanticAdapter), containerView, index, persisted,
-				preferencesHint);
+			return createGoalReference_4025(
+					getSemanticElement(semanticAdapter), containerView, index,
+					persisted, preferencesHint);
 		case RequirementImplementingServicesEditPart.VISUAL_ID:
-			return createRequirementImplementingServices_4005(containerView, index, persisted, preferencesHint);
+			return createRequirementImplementingServices_4005(containerView,
+					index, persisted, preferencesHint);
 		case NonFunctionalRequirementSubNonFunctionalRequirementsEditPart.VISUAL_ID:
-			return createNonFunctionalRequirementSubNonFunctionalRequirements_4043(containerView, index, persisted,
-				preferencesHint);
+			return createNonFunctionalRequirementSubNonFunctionalRequirements_4043(
+					containerView, index, persisted, preferencesHint);
 		case FunctionalRequirementSubFunctionalRequirementsEditPart.VISUAL_ID:
-			return createFunctionalRequirementSubFunctionalRequirements_4044(containerView, index, persisted,
-				preferencesHint);
+			return createFunctionalRequirementSubFunctionalRequirements_4044(
+					containerView, index, persisted, preferencesHint);
 		case MitigationMitigatedDangersEditPart.VISUAL_ID:
-			return createMitigationMitigatedDangers_4012(containerView, index, persisted, preferencesHint);
+			return createMitigationMitigatedDangers_4012(containerView, index,
+					persisted, preferencesHint);
 		case DangerHarmedAssetsEditPart.VISUAL_ID:
-			return createDangerHarmedAssets_4013(containerView, index, persisted, preferencesHint);
+			return createDangerHarmedAssets_4013(containerView, index,
+					persisted, preferencesHint);
 		case AssetTriggeredDangersEditPart.VISUAL_ID:
-			return createAssetTriggeredDangers_4017(containerView, index, persisted, preferencesHint);
+			return createAssetTriggeredDangers_4017(containerView, index,
+					persisted, preferencesHint);
 		case ServiceSubServicesEditPart.VISUAL_ID:
-			return createServiceSubServices_4022(containerView, index, persisted, preferencesHint);
+			return createServiceSubServices_4022(containerView, index,
+					persisted, preferencesHint);
 		case VariationPointOptionalSubFeaturesEditPart.VISUAL_ID:
-			return createVariationPointOptionalSubFeatures_4046(containerView, index, persisted, preferencesHint);
+			return createVariationPointOptionalSubFeatures_4046(containerView,
+					index, persisted, preferencesHint);
 		case VariationPointInstanceVariationPointEditPart.VISUAL_ID:
-			return createVariationPointInstanceVariationPoint_4033(containerView, index, persisted, preferencesHint);
+			return createVariationPointInstanceVariationPoint_4033(
+					containerView, index, persisted, preferencesHint);
 		case VariationPointInstanceSelectedFeaturesEditPart.VISUAL_ID:
-			return createVariationPointInstanceSelectedFeatures_4040(containerView, index, persisted, preferencesHint);
+			return createVariationPointInstanceSelectedFeatures_4040(
+					containerView, index, persisted, preferencesHint);
 		case ProductVariationPointInstancesEditPart.VISUAL_ID:
-			return createProductVariationPointInstances_4032(containerView, index, persisted, preferencesHint);
+			return createProductVariationPointInstances_4032(containerView,
+					index, persisted, preferencesHint);
 		case ProductFeaturesEditPart.VISUAL_ID:
-			return createProductFeatures_4047(containerView, index, persisted, preferencesHint);
+			return createProductFeatures_4047(containerView, index, persisted,
+					preferencesHint);
+		case UrmlModelElementAssociationsEditPart.VISUAL_ID:
+			return createUrmlModelElementAssociations_4048(containerView,
+					index, persisted, preferencesHint);
 		}
 		// can never happen, provided #provides(CreateEdgeViewOperation) is correct
 		return null;
@@ -376,487 +440,602 @@
 	/**
 	 * @generated
 	 */
-	public Node createStakeholder_2002(EObject domainElement, View containerView, int index, boolean persisted,
-		PreferencesHint preferencesHint) {
+	public Node createStakeholder_2002(EObject domainElement,
+			View containerView, int index, boolean persisted,
+			PreferencesHint preferencesHint) {
 		Shape node = NotationFactory.eINSTANCE.createShape();
 		node.setLayoutConstraint(NotationFactory.eINSTANCE.createBounds());
-		node.setType(UrmlVisualIDRegistry.getType(StakeholderEditPart.VISUAL_ID));
+		node.setType(UrmlVisualIDRegistry
+				.getType(StakeholderEditPart.VISUAL_ID));
 		ViewUtil.insertChildView(containerView, node, index, persisted);
 		node.setElement(domainElement);
 		stampShortcut(containerView, node);
-		// initializeFromPreferences
-		final IPreferenceStore prefStore = (IPreferenceStore) preferencesHint.getPreferenceStore();
+		// initializeFromPreferences 
+		final IPreferenceStore prefStore = (IPreferenceStore) preferencesHint
+				.getPreferenceStore();
 
-		org.eclipse.swt.graphics.RGB lineRGB = PreferenceConverter.getColor(prefStore,
-			IPreferenceConstants.PREF_LINE_COLOR);
-		ViewUtil.setStructuralFeatureValue(node, NotationPackage.eINSTANCE.getLineStyle_LineColor(), FigureUtilities
-			.RGBToInteger(lineRGB));
-		FontStyle nodeFontStyle = (FontStyle) node.getStyle(NotationPackage.Literals.FONT_STYLE);
+		org.eclipse.swt.graphics.RGB lineRGB = PreferenceConverter.getColor(
+				prefStore, IPreferenceConstants.PREF_LINE_COLOR);
+		ViewUtil.setStructuralFeatureValue(node,
+				NotationPackage.eINSTANCE.getLineStyle_LineColor(),
+				FigureUtilities.RGBToInteger(lineRGB));
+		FontStyle nodeFontStyle = (FontStyle) node
+				.getStyle(NotationPackage.Literals.FONT_STYLE);
 		if (nodeFontStyle != null) {
-			FontData fontData = PreferenceConverter.getFontData(prefStore, IPreferenceConstants.PREF_DEFAULT_FONT);
+			FontData fontData = PreferenceConverter.getFontData(prefStore,
+					IPreferenceConstants.PREF_DEFAULT_FONT);
 			nodeFontStyle.setFontName(fontData.getName());
 			nodeFontStyle.setFontHeight(fontData.getHeight());
 			nodeFontStyle.setBold((fontData.getStyle() & SWT.BOLD) != 0);
 			nodeFontStyle.setItalic((fontData.getStyle() & SWT.ITALIC) != 0);
-			org.eclipse.swt.graphics.RGB fontRGB = PreferenceConverter.getColor(prefStore,
-				IPreferenceConstants.PREF_FONT_COLOR);
-			nodeFontStyle.setFontColor(FigureUtilities.RGBToInteger(fontRGB).intValue());
+			org.eclipse.swt.graphics.RGB fontRGB = PreferenceConverter
+					.getColor(prefStore, IPreferenceConstants.PREF_FONT_COLOR);
+			nodeFontStyle.setFontColor(FigureUtilities.RGBToInteger(fontRGB)
+					.intValue());
 		}
-		org.eclipse.swt.graphics.RGB fillRGB = PreferenceConverter.getColor(prefStore,
-			IPreferenceConstants.PREF_FILL_COLOR);
-		ViewUtil.setStructuralFeatureValue(node, NotationPackage.eINSTANCE.getFillStyle_FillColor(), FigureUtilities
-			.RGBToInteger(fillRGB));
-		Node label5008 = createLabel(node, UrmlVisualIDRegistry.getType(StakeholderNameEditPart.VISUAL_ID));
+		org.eclipse.swt.graphics.RGB fillRGB = PreferenceConverter.getColor(
+				prefStore, IPreferenceConstants.PREF_FILL_COLOR);
+		ViewUtil.setStructuralFeatureValue(node,
+				NotationPackage.eINSTANCE.getFillStyle_FillColor(),
+				FigureUtilities.RGBToInteger(fillRGB));
+		Node label5008 = createLabel(node,
+				UrmlVisualIDRegistry.getType(StakeholderNameEditPart.VISUAL_ID));
 		return node;
 	}
 
 	/**
 	 * @generated
 	 */
-	public Node createGoal_2001(EObject domainElement, View containerView, int index, boolean persisted,
-		PreferencesHint preferencesHint) {
+	public Node createGoal_2001(EObject domainElement, View containerView,
+			int index, boolean persisted, PreferencesHint preferencesHint) {
 		Shape node = NotationFactory.eINSTANCE.createShape();
 		node.setLayoutConstraint(NotationFactory.eINSTANCE.createBounds());
 		node.setType(UrmlVisualIDRegistry.getType(GoalEditPart.VISUAL_ID));
 		ViewUtil.insertChildView(containerView, node, index, persisted);
 		node.setElement(domainElement);
 		stampShortcut(containerView, node);
-		// initializeFromPreferences
-		final IPreferenceStore prefStore = (IPreferenceStore) preferencesHint.getPreferenceStore();
+		// initializeFromPreferences 
+		final IPreferenceStore prefStore = (IPreferenceStore) preferencesHint
+				.getPreferenceStore();
 
-		org.eclipse.swt.graphics.RGB lineRGB = PreferenceConverter.getColor(prefStore,
-			IPreferenceConstants.PREF_LINE_COLOR);
-		ViewUtil.setStructuralFeatureValue(node, NotationPackage.eINSTANCE.getLineStyle_LineColor(), FigureUtilities
-			.RGBToInteger(lineRGB));
-		FontStyle nodeFontStyle = (FontStyle) node.getStyle(NotationPackage.Literals.FONT_STYLE);
+		org.eclipse.swt.graphics.RGB lineRGB = PreferenceConverter.getColor(
+				prefStore, IPreferenceConstants.PREF_LINE_COLOR);
+		ViewUtil.setStructuralFeatureValue(node,
+				NotationPackage.eINSTANCE.getLineStyle_LineColor(),
+				FigureUtilities.RGBToInteger(lineRGB));
+		FontStyle nodeFontStyle = (FontStyle) node
+				.getStyle(NotationPackage.Literals.FONT_STYLE);
 		if (nodeFontStyle != null) {
-			FontData fontData = PreferenceConverter.getFontData(prefStore, IPreferenceConstants.PREF_DEFAULT_FONT);
+			FontData fontData = PreferenceConverter.getFontData(prefStore,
+					IPreferenceConstants.PREF_DEFAULT_FONT);
 			nodeFontStyle.setFontName(fontData.getName());
 			nodeFontStyle.setFontHeight(fontData.getHeight());
 			nodeFontStyle.setBold((fontData.getStyle() & SWT.BOLD) != 0);
 			nodeFontStyle.setItalic((fontData.getStyle() & SWT.ITALIC) != 0);
-			org.eclipse.swt.graphics.RGB fontRGB = PreferenceConverter.getColor(prefStore,
-				IPreferenceConstants.PREF_FONT_COLOR);
-			nodeFontStyle.setFontColor(FigureUtilities.RGBToInteger(fontRGB).intValue());
+			org.eclipse.swt.graphics.RGB fontRGB = PreferenceConverter
+					.getColor(prefStore, IPreferenceConstants.PREF_FONT_COLOR);
+			nodeFontStyle.setFontColor(FigureUtilities.RGBToInteger(fontRGB)
+					.intValue());
 		}
-		org.eclipse.swt.graphics.RGB fillRGB = PreferenceConverter.getColor(prefStore,
-			IPreferenceConstants.PREF_FILL_COLOR);
-		ViewUtil.setStructuralFeatureValue(node, NotationPackage.eINSTANCE.getFillStyle_FillColor(), FigureUtilities
-			.RGBToInteger(fillRGB));
-		Node label5009 = createLabel(node, UrmlVisualIDRegistry.getType(GoalNameEditPart.VISUAL_ID));
+		org.eclipse.swt.graphics.RGB fillRGB = PreferenceConverter.getColor(
+				prefStore, IPreferenceConstants.PREF_FILL_COLOR);
+		ViewUtil.setStructuralFeatureValue(node,
+				NotationPackage.eINSTANCE.getFillStyle_FillColor(),
+				FigureUtilities.RGBToInteger(fillRGB));
+		Node label5009 = createLabel(node,
+				UrmlVisualIDRegistry.getType(GoalNameEditPart.VISUAL_ID));
 		return node;
 	}
 
 	/**
 	 * @generated
 	 */
-	public Node createFunctionalRequirement_2006(EObject domainElement, View containerView, int index,
-		boolean persisted, PreferencesHint preferencesHint) {
+	public Node createFunctionalRequirement_2006(EObject domainElement,
+			View containerView, int index, boolean persisted,
+			PreferencesHint preferencesHint) {
 		Shape node = NotationFactory.eINSTANCE.createShape();
 		node.setLayoutConstraint(NotationFactory.eINSTANCE.createBounds());
-		node.setType(UrmlVisualIDRegistry.getType(FunctionalRequirementEditPart.VISUAL_ID));
+		node.setType(UrmlVisualIDRegistry
+				.getType(FunctionalRequirementEditPart.VISUAL_ID));
 		ViewUtil.insertChildView(containerView, node, index, persisted);
 		node.setElement(domainElement);
 		stampShortcut(containerView, node);
-		// initializeFromPreferences
-		final IPreferenceStore prefStore = (IPreferenceStore) preferencesHint.getPreferenceStore();
+		// initializeFromPreferences 
+		final IPreferenceStore prefStore = (IPreferenceStore) preferencesHint
+				.getPreferenceStore();
 
-		org.eclipse.swt.graphics.RGB lineRGB = PreferenceConverter.getColor(prefStore,
-			IPreferenceConstants.PREF_LINE_COLOR);
-		ViewUtil.setStructuralFeatureValue(node, NotationPackage.eINSTANCE.getLineStyle_LineColor(), FigureUtilities
-			.RGBToInteger(lineRGB));
-		FontStyle nodeFontStyle = (FontStyle) node.getStyle(NotationPackage.Literals.FONT_STYLE);
+		org.eclipse.swt.graphics.RGB lineRGB = PreferenceConverter.getColor(
+				prefStore, IPreferenceConstants.PREF_LINE_COLOR);
+		ViewUtil.setStructuralFeatureValue(node,
+				NotationPackage.eINSTANCE.getLineStyle_LineColor(),
+				FigureUtilities.RGBToInteger(lineRGB));
+		FontStyle nodeFontStyle = (FontStyle) node
+				.getStyle(NotationPackage.Literals.FONT_STYLE);
 		if (nodeFontStyle != null) {
-			FontData fontData = PreferenceConverter.getFontData(prefStore, IPreferenceConstants.PREF_DEFAULT_FONT);
+			FontData fontData = PreferenceConverter.getFontData(prefStore,
+					IPreferenceConstants.PREF_DEFAULT_FONT);
 			nodeFontStyle.setFontName(fontData.getName());
 			nodeFontStyle.setFontHeight(fontData.getHeight());
 			nodeFontStyle.setBold((fontData.getStyle() & SWT.BOLD) != 0);
 			nodeFontStyle.setItalic((fontData.getStyle() & SWT.ITALIC) != 0);
-			org.eclipse.swt.graphics.RGB fontRGB = PreferenceConverter.getColor(prefStore,
-				IPreferenceConstants.PREF_FONT_COLOR);
-			nodeFontStyle.setFontColor(FigureUtilities.RGBToInteger(fontRGB).intValue());
+			org.eclipse.swt.graphics.RGB fontRGB = PreferenceConverter
+					.getColor(prefStore, IPreferenceConstants.PREF_FONT_COLOR);
+			nodeFontStyle.setFontColor(FigureUtilities.RGBToInteger(fontRGB)
+					.intValue());
 		}
-		org.eclipse.swt.graphics.RGB fillRGB = PreferenceConverter.getColor(prefStore,
-			IPreferenceConstants.PREF_FILL_COLOR);
-		ViewUtil.setStructuralFeatureValue(node, NotationPackage.eINSTANCE.getFillStyle_FillColor(), FigureUtilities
-			.RGBToInteger(fillRGB));
-		Node label5010 = createLabel(node, UrmlVisualIDRegistry.getType(FunctionalRequirementNameEditPart.VISUAL_ID));
+		org.eclipse.swt.graphics.RGB fillRGB = PreferenceConverter.getColor(
+				prefStore, IPreferenceConstants.PREF_FILL_COLOR);
+		ViewUtil.setStructuralFeatureValue(node,
+				NotationPackage.eINSTANCE.getFillStyle_FillColor(),
+				FigureUtilities.RGBToInteger(fillRGB));
+		Node label5010 = createLabel(node,
+				UrmlVisualIDRegistry
+						.getType(FunctionalRequirementNameEditPart.VISUAL_ID));
 		return node;
 	}
 
 	/**
 	 * @generated
 	 */
-	public Node createFeature_2012(EObject domainElement, View containerView, int index, boolean persisted,
-		PreferencesHint preferencesHint) {
+	public Node createFeature_2012(EObject domainElement, View containerView,
+			int index, boolean persisted, PreferencesHint preferencesHint) {
 		Shape node = NotationFactory.eINSTANCE.createShape();
 		node.setLayoutConstraint(NotationFactory.eINSTANCE.createBounds());
 		node.setType(UrmlVisualIDRegistry.getType(FeatureEditPart.VISUAL_ID));
 		ViewUtil.insertChildView(containerView, node, index, persisted);
 		node.setElement(domainElement);
 		stampShortcut(containerView, node);
-		// initializeFromPreferences
-		final IPreferenceStore prefStore = (IPreferenceStore) preferencesHint.getPreferenceStore();
+		// initializeFromPreferences 
+		final IPreferenceStore prefStore = (IPreferenceStore) preferencesHint
+				.getPreferenceStore();
 
-		org.eclipse.swt.graphics.RGB lineRGB = PreferenceConverter.getColor(prefStore,
-			IPreferenceConstants.PREF_LINE_COLOR);
-		ViewUtil.setStructuralFeatureValue(node, NotationPackage.eINSTANCE.getLineStyle_LineColor(), FigureUtilities
-			.RGBToInteger(lineRGB));
-		FontStyle nodeFontStyle = (FontStyle) node.getStyle(NotationPackage.Literals.FONT_STYLE);
+		org.eclipse.swt.graphics.RGB lineRGB = PreferenceConverter.getColor(
+				prefStore, IPreferenceConstants.PREF_LINE_COLOR);
+		ViewUtil.setStructuralFeatureValue(node,
+				NotationPackage.eINSTANCE.getLineStyle_LineColor(),
+				FigureUtilities.RGBToInteger(lineRGB));
+		FontStyle nodeFontStyle = (FontStyle) node
+				.getStyle(NotationPackage.Literals.FONT_STYLE);
 		if (nodeFontStyle != null) {
-			FontData fontData = PreferenceConverter.getFontData(prefStore, IPreferenceConstants.PREF_DEFAULT_FONT);
+			FontData fontData = PreferenceConverter.getFontData(prefStore,
+					IPreferenceConstants.PREF_DEFAULT_FONT);
 			nodeFontStyle.setFontName(fontData.getName());
 			nodeFontStyle.setFontHeight(fontData.getHeight());
 			nodeFontStyle.setBold((fontData.getStyle() & SWT.BOLD) != 0);
 			nodeFontStyle.setItalic((fontData.getStyle() & SWT.ITALIC) != 0);
-			org.eclipse.swt.graphics.RGB fontRGB = PreferenceConverter.getColor(prefStore,
-				IPreferenceConstants.PREF_FONT_COLOR);
-			nodeFontStyle.setFontColor(FigureUtilities.RGBToInteger(fontRGB).intValue());
+			org.eclipse.swt.graphics.RGB fontRGB = PreferenceConverter
+					.getColor(prefStore, IPreferenceConstants.PREF_FONT_COLOR);
+			nodeFontStyle.setFontColor(FigureUtilities.RGBToInteger(fontRGB)
+					.intValue());
 		}
-		org.eclipse.swt.graphics.RGB fillRGB = PreferenceConverter.getColor(prefStore,
-			IPreferenceConstants.PREF_FILL_COLOR);
-		ViewUtil.setStructuralFeatureValue(node, NotationPackage.eINSTANCE.getFillStyle_FillColor(), FigureUtilities
-			.RGBToInteger(fillRGB));
-		Node label5011 = createLabel(node, UrmlVisualIDRegistry.getType(FeatureNameEditPart.VISUAL_ID));
+		org.eclipse.swt.graphics.RGB fillRGB = PreferenceConverter.getColor(
+				prefStore, IPreferenceConstants.PREF_FILL_COLOR);
+		ViewUtil.setStructuralFeatureValue(node,
+				NotationPackage.eINSTANCE.getFillStyle_FillColor(),
+				FigureUtilities.RGBToInteger(fillRGB));
+		Node label5011 = createLabel(node,
+				UrmlVisualIDRegistry.getType(FeatureNameEditPart.VISUAL_ID));
 		return node;
 	}
 
 	/**
 	 * @generated
 	 */
-	public Node createService_2007(EObject domainElement, View containerView, int index, boolean persisted,
-		PreferencesHint preferencesHint) {
+	public Node createService_2007(EObject domainElement, View containerView,
+			int index, boolean persisted, PreferencesHint preferencesHint) {
 		Shape node = NotationFactory.eINSTANCE.createShape();
 		node.setLayoutConstraint(NotationFactory.eINSTANCE.createBounds());
 		node.setType(UrmlVisualIDRegistry.getType(ServiceEditPart.VISUAL_ID));
 		ViewUtil.insertChildView(containerView, node, index, persisted);
 		node.setElement(domainElement);
 		stampShortcut(containerView, node);
-		// initializeFromPreferences
-		final IPreferenceStore prefStore = (IPreferenceStore) preferencesHint.getPreferenceStore();
+		// initializeFromPreferences 
+		final IPreferenceStore prefStore = (IPreferenceStore) preferencesHint
+				.getPreferenceStore();
 
-		org.eclipse.swt.graphics.RGB lineRGB = PreferenceConverter.getColor(prefStore,
-			IPreferenceConstants.PREF_LINE_COLOR);
-		ViewUtil.setStructuralFeatureValue(node, NotationPackage.eINSTANCE.getLineStyle_LineColor(), FigureUtilities
-			.RGBToInteger(lineRGB));
-		FontStyle nodeFontStyle = (FontStyle) node.getStyle(NotationPackage.Literals.FONT_STYLE);
+		org.eclipse.swt.graphics.RGB lineRGB = PreferenceConverter.getColor(
+				prefStore, IPreferenceConstants.PREF_LINE_COLOR);
+		ViewUtil.setStructuralFeatureValue(node,
+				NotationPackage.eINSTANCE.getLineStyle_LineColor(),
+				FigureUtilities.RGBToInteger(lineRGB));
+		FontStyle nodeFontStyle = (FontStyle) node
+				.getStyle(NotationPackage.Literals.FONT_STYLE);
 		if (nodeFontStyle != null) {
-			FontData fontData = PreferenceConverter.getFontData(prefStore, IPreferenceConstants.PREF_DEFAULT_FONT);
+			FontData fontData = PreferenceConverter.getFontData(prefStore,
+					IPreferenceConstants.PREF_DEFAULT_FONT);
 			nodeFontStyle.setFontName(fontData.getName());
 			nodeFontStyle.setFontHeight(fontData.getHeight());
 			nodeFontStyle.setBold((fontData.getStyle() & SWT.BOLD) != 0);
 			nodeFontStyle.setItalic((fontData.getStyle() & SWT.ITALIC) != 0);
-			org.eclipse.swt.graphics.RGB fontRGB = PreferenceConverter.getColor(prefStore,
-				IPreferenceConstants.PREF_FONT_COLOR);
-			nodeFontStyle.setFontColor(FigureUtilities.RGBToInteger(fontRGB).intValue());
+			org.eclipse.swt.graphics.RGB fontRGB = PreferenceConverter
+					.getColor(prefStore, IPreferenceConstants.PREF_FONT_COLOR);
+			nodeFontStyle.setFontColor(FigureUtilities.RGBToInteger(fontRGB)
+					.intValue());
 		}
-		org.eclipse.swt.graphics.RGB fillRGB = PreferenceConverter.getColor(prefStore,
-			IPreferenceConstants.PREF_FILL_COLOR);
-		ViewUtil.setStructuralFeatureValue(node, NotationPackage.eINSTANCE.getFillStyle_FillColor(), FigureUtilities
-			.RGBToInteger(fillRGB));
-		Node label5002 = createLabel(node, UrmlVisualIDRegistry.getType(ServiceNameEditPart.VISUAL_ID));
+		org.eclipse.swt.graphics.RGB fillRGB = PreferenceConverter.getColor(
+				prefStore, IPreferenceConstants.PREF_FILL_COLOR);
+		ViewUtil.setStructuralFeatureValue(node,
+				NotationPackage.eINSTANCE.getFillStyle_FillColor(),
+				FigureUtilities.RGBToInteger(fillRGB));
+		Node label5002 = createLabel(node,
+				UrmlVisualIDRegistry.getType(ServiceNameEditPart.VISUAL_ID));
 		return node;
 	}
 
 	/**
 	 * @generated
 	 */
-	public Node createNonFunctionalRequirement_2008(EObject domainElement, View containerView, int index,
-		boolean persisted, PreferencesHint preferencesHint) {
+	public Node createNonFunctionalRequirement_2008(EObject domainElement,
+			View containerView, int index, boolean persisted,
+			PreferencesHint preferencesHint) {
 		Shape node = NotationFactory.eINSTANCE.createShape();
 		node.setLayoutConstraint(NotationFactory.eINSTANCE.createBounds());
-		node.setType(UrmlVisualIDRegistry.getType(NonFunctionalRequirementEditPart.VISUAL_ID));
+		node.setType(UrmlVisualIDRegistry
+				.getType(NonFunctionalRequirementEditPart.VISUAL_ID));
 		ViewUtil.insertChildView(containerView, node, index, persisted);
 		node.setElement(domainElement);
 		stampShortcut(containerView, node);
-		// initializeFromPreferences
-		final IPreferenceStore prefStore = (IPreferenceStore) preferencesHint.getPreferenceStore();
+		// initializeFromPreferences 
+		final IPreferenceStore prefStore = (IPreferenceStore) preferencesHint
+				.getPreferenceStore();
 
-		org.eclipse.swt.graphics.RGB lineRGB = PreferenceConverter.getColor(prefStore,
-			IPreferenceConstants.PREF_LINE_COLOR);
-		ViewUtil.setStructuralFeatureValue(node, NotationPackage.eINSTANCE.getLineStyle_LineColor(), FigureUtilities
-			.RGBToInteger(lineRGB));
-		FontStyle nodeFontStyle = (FontStyle) node.getStyle(NotationPackage.Literals.FONT_STYLE);
+		org.eclipse.swt.graphics.RGB lineRGB = PreferenceConverter.getColor(
+				prefStore, IPreferenceConstants.PREF_LINE_COLOR);
+		ViewUtil.setStructuralFeatureValue(node,
+				NotationPackage.eINSTANCE.getLineStyle_LineColor(),
+				FigureUtilities.RGBToInteger(lineRGB));
+		FontStyle nodeFontStyle = (FontStyle) node
+				.getStyle(NotationPackage.Literals.FONT_STYLE);
 		if (nodeFontStyle != null) {
-			FontData fontData = PreferenceConverter.getFontData(prefStore, IPreferenceConstants.PREF_DEFAULT_FONT);
+			FontData fontData = PreferenceConverter.getFontData(prefStore,
+					IPreferenceConstants.PREF_DEFAULT_FONT);
 			nodeFontStyle.setFontName(fontData.getName());
 			nodeFontStyle.setFontHeight(fontData.getHeight());
 			nodeFontStyle.setBold((fontData.getStyle() & SWT.BOLD) != 0);
 			nodeFontStyle.setItalic((fontData.getStyle() & SWT.ITALIC) != 0);
-			org.eclipse.swt.graphics.RGB fontRGB = PreferenceConverter.getColor(prefStore,
-				IPreferenceConstants.PREF_FONT_COLOR);
-			nodeFontStyle.setFontColor(FigureUtilities.RGBToInteger(fontRGB).intValue());
+			org.eclipse.swt.graphics.RGB fontRGB = PreferenceConverter
+					.getColor(prefStore, IPreferenceConstants.PREF_FONT_COLOR);
+			nodeFontStyle.setFontColor(FigureUtilities.RGBToInteger(fontRGB)
+					.intValue());
 		}
-		org.eclipse.swt.graphics.RGB fillRGB = PreferenceConverter.getColor(prefStore,
-			IPreferenceConstants.PREF_FILL_COLOR);
-		ViewUtil.setStructuralFeatureValue(node, NotationPackage.eINSTANCE.getFillStyle_FillColor(), FigureUtilities
-			.RGBToInteger(fillRGB));
-		Node label5003 = createLabel(node, UrmlVisualIDRegistry.getType(NonFunctionalRequirementNameEditPart.VISUAL_ID));
+		org.eclipse.swt.graphics.RGB fillRGB = PreferenceConverter.getColor(
+				prefStore, IPreferenceConstants.PREF_FILL_COLOR);
+		ViewUtil.setStructuralFeatureValue(node,
+				NotationPackage.eINSTANCE.getFillStyle_FillColor(),
+				FigureUtilities.RGBToInteger(fillRGB));
+		Node label5003 = createLabel(
+				node,
+				UrmlVisualIDRegistry
+						.getType(NonFunctionalRequirementNameEditPart.VISUAL_ID));
 		return node;
 	}
 
 	/**
 	 * @generated
 	 */
-	public Node createDanger_2009(EObject domainElement, View containerView, int index, boolean persisted,
-		PreferencesHint preferencesHint) {
+	public Node createDanger_2009(EObject domainElement, View containerView,
+			int index, boolean persisted, PreferencesHint preferencesHint) {
 		Shape node = NotationFactory.eINSTANCE.createShape();
 		node.setLayoutConstraint(NotationFactory.eINSTANCE.createBounds());
 		node.setType(UrmlVisualIDRegistry.getType(DangerEditPart.VISUAL_ID));
 		ViewUtil.insertChildView(containerView, node, index, persisted);
 		node.setElement(domainElement);
 		stampShortcut(containerView, node);
-		// initializeFromPreferences
-		final IPreferenceStore prefStore = (IPreferenceStore) preferencesHint.getPreferenceStore();
+		// initializeFromPreferences 
+		final IPreferenceStore prefStore = (IPreferenceStore) preferencesHint
+				.getPreferenceStore();
 
-		org.eclipse.swt.graphics.RGB lineRGB = PreferenceConverter.getColor(prefStore,
-			IPreferenceConstants.PREF_LINE_COLOR);
-		ViewUtil.setStructuralFeatureValue(node, NotationPackage.eINSTANCE.getLineStyle_LineColor(), FigureUtilities
-			.RGBToInteger(lineRGB));
-		FontStyle nodeFontStyle = (FontStyle) node.getStyle(NotationPackage.Literals.FONT_STYLE);
+		org.eclipse.swt.graphics.RGB lineRGB = PreferenceConverter.getColor(
+				prefStore, IPreferenceConstants.PREF_LINE_COLOR);
+		ViewUtil.setStructuralFeatureValue(node,
+				NotationPackage.eINSTANCE.getLineStyle_LineColor(),
+				FigureUtilities.RGBToInteger(lineRGB));
+		FontStyle nodeFontStyle = (FontStyle) node
+				.getStyle(NotationPackage.Literals.FONT_STYLE);
 		if (nodeFontStyle != null) {
-			FontData fontData = PreferenceConverter.getFontData(prefStore, IPreferenceConstants.PREF_DEFAULT_FONT);
+			FontData fontData = PreferenceConverter.getFontData(prefStore,
+					IPreferenceConstants.PREF_DEFAULT_FONT);
 			nodeFontStyle.setFontName(fontData.getName());
 			nodeFontStyle.setFontHeight(fontData.getHeight());
 			nodeFontStyle.setBold((fontData.getStyle() & SWT.BOLD) != 0);
 			nodeFontStyle.setItalic((fontData.getStyle() & SWT.ITALIC) != 0);
-			org.eclipse.swt.graphics.RGB fontRGB = PreferenceConverter.getColor(prefStore,
-				IPreferenceConstants.PREF_FONT_COLOR);
-			nodeFontStyle.setFontColor(FigureUtilities.RGBToInteger(fontRGB).intValue());
+			org.eclipse.swt.graphics.RGB fontRGB = PreferenceConverter
+					.getColor(prefStore, IPreferenceConstants.PREF_FONT_COLOR);
+			nodeFontStyle.setFontColor(FigureUtilities.RGBToInteger(fontRGB)
+					.intValue());
 		}
-		org.eclipse.swt.graphics.RGB fillRGB = PreferenceConverter.getColor(prefStore,
-			IPreferenceConstants.PREF_FILL_COLOR);
-		ViewUtil.setStructuralFeatureValue(node, NotationPackage.eINSTANCE.getFillStyle_FillColor(), FigureUtilities
-			.RGBToInteger(fillRGB));
-		Node label5004 = createLabel(node, UrmlVisualIDRegistry.getType(DangerNameEditPart.VISUAL_ID));
+		org.eclipse.swt.graphics.RGB fillRGB = PreferenceConverter.getColor(
+				prefStore, IPreferenceConstants.PREF_FILL_COLOR);
+		ViewUtil.setStructuralFeatureValue(node,
+				NotationPackage.eINSTANCE.getFillStyle_FillColor(),
+				FigureUtilities.RGBToInteger(fillRGB));
+		Node label5004 = createLabel(node,
+				UrmlVisualIDRegistry.getType(DangerNameEditPart.VISUAL_ID));
 		return node;
 	}
 
 	/**
 	 * @generated
 	 */
-	public Node createActor_2010(EObject domainElement, View containerView, int index, boolean persisted,
-		PreferencesHint preferencesHint) {
+	public Node createActor_2010(EObject domainElement, View containerView,
+			int index, boolean persisted, PreferencesHint preferencesHint) {
 		Shape node = NotationFactory.eINSTANCE.createShape();
 		node.setLayoutConstraint(NotationFactory.eINSTANCE.createBounds());
 		node.setType(UrmlVisualIDRegistry.getType(ActorEditPart.VISUAL_ID));
 		ViewUtil.insertChildView(containerView, node, index, persisted);
 		node.setElement(domainElement);
 		stampShortcut(containerView, node);
-		// initializeFromPreferences
-		final IPreferenceStore prefStore = (IPreferenceStore) preferencesHint.getPreferenceStore();
+		// initializeFromPreferences 
+		final IPreferenceStore prefStore = (IPreferenceStore) preferencesHint
+				.getPreferenceStore();
 
-		org.eclipse.swt.graphics.RGB lineRGB = PreferenceConverter.getColor(prefStore,
-			IPreferenceConstants.PREF_LINE_COLOR);
-		ViewUtil.setStructuralFeatureValue(node, NotationPackage.eINSTANCE.getLineStyle_LineColor(), FigureUtilities
-			.RGBToInteger(lineRGB));
-		FontStyle nodeFontStyle = (FontStyle) node.getStyle(NotationPackage.Literals.FONT_STYLE);
+		org.eclipse.swt.graphics.RGB lineRGB = PreferenceConverter.getColor(
+				prefStore, IPreferenceConstants.PREF_LINE_COLOR);
+		ViewUtil.setStructuralFeatureValue(node,
+				NotationPackage.eINSTANCE.getLineStyle_LineColor(),
+				FigureUtilities.RGBToInteger(lineRGB));
+		FontStyle nodeFontStyle = (FontStyle) node
+				.getStyle(NotationPackage.Literals.FONT_STYLE);
 		if (nodeFontStyle != null) {
-			FontData fontData = PreferenceConverter.getFontData(prefStore, IPreferenceConstants.PREF_DEFAULT_FONT);
+			FontData fontData = PreferenceConverter.getFontData(prefStore,
+					IPreferenceConstants.PREF_DEFAULT_FONT);
 			nodeFontStyle.setFontName(fontData.getName());
 			nodeFontStyle.setFontHeight(fontData.getHeight());
 			nodeFontStyle.setBold((fontData.getStyle() & SWT.BOLD) != 0);
 			nodeFontStyle.setItalic((fontData.getStyle() & SWT.ITALIC) != 0);
-			org.eclipse.swt.graphics.RGB fontRGB = PreferenceConverter.getColor(prefStore,
-				IPreferenceConstants.PREF_FONT_COLOR);
-			nodeFontStyle.setFontColor(FigureUtilities.RGBToInteger(fontRGB).intValue());
+			org.eclipse.swt.graphics.RGB fontRGB = PreferenceConverter
+					.getColor(prefStore, IPreferenceConstants.PREF_FONT_COLOR);
+			nodeFontStyle.setFontColor(FigureUtilities.RGBToInteger(fontRGB)
+					.intValue());
 		}
-		org.eclipse.swt.graphics.RGB fillRGB = PreferenceConverter.getColor(prefStore,
-			IPreferenceConstants.PREF_FILL_COLOR);
-		ViewUtil.setStructuralFeatureValue(node, NotationPackage.eINSTANCE.getFillStyle_FillColor(), FigureUtilities
-			.RGBToInteger(fillRGB));
-		Node label5005 = createLabel(node, UrmlVisualIDRegistry.getType(ActorNameEditPart.VISUAL_ID));
+		org.eclipse.swt.graphics.RGB fillRGB = PreferenceConverter.getColor(
+				prefStore, IPreferenceConstants.PREF_FILL_COLOR);
+		ViewUtil.setStructuralFeatureValue(node,
+				NotationPackage.eINSTANCE.getFillStyle_FillColor(),
+				FigureUtilities.RGBToInteger(fillRGB));
+		Node label5005 = createLabel(node,
+				UrmlVisualIDRegistry.getType(ActorNameEditPart.VISUAL_ID));
 		return node;
 	}
 
 	/**
 	 * @generated
 	 */
-	public Node createProceduralMitigation_2011(EObject domainElement, View containerView, int index,
-		boolean persisted, PreferencesHint preferencesHint) {
+	public Node createProceduralMitigation_2011(EObject domainElement,
+			View containerView, int index, boolean persisted,
+			PreferencesHint preferencesHint) {
 		Shape node = NotationFactory.eINSTANCE.createShape();
 		node.setLayoutConstraint(NotationFactory.eINSTANCE.createBounds());
-		node.setType(UrmlVisualIDRegistry.getType(ProceduralMitigationEditPart.VISUAL_ID));
+		node.setType(UrmlVisualIDRegistry
+				.getType(ProceduralMitigationEditPart.VISUAL_ID));
 		ViewUtil.insertChildView(containerView, node, index, persisted);
 		node.setElement(domainElement);
 		stampShortcut(containerView, node);
-		// initializeFromPreferences
-		final IPreferenceStore prefStore = (IPreferenceStore) preferencesHint.getPreferenceStore();
+		// initializeFromPreferences 
+		final IPreferenceStore prefStore = (IPreferenceStore) preferencesHint
+				.getPreferenceStore();
 
-		org.eclipse.swt.graphics.RGB lineRGB = PreferenceConverter.getColor(prefStore,
-			IPreferenceConstants.PREF_LINE_COLOR);
-		ViewUtil.setStructuralFeatureValue(node, NotationPackage.eINSTANCE.getLineStyle_LineColor(), FigureUtilities
-			.RGBToInteger(lineRGB));
-		FontStyle nodeFontStyle = (FontStyle) node.getStyle(NotationPackage.Literals.FONT_STYLE);
+		org.eclipse.swt.graphics.RGB lineRGB = PreferenceConverter.getColor(
+				prefStore, IPreferenceConstants.PREF_LINE_COLOR);
+		ViewUtil.setStructuralFeatureValue(node,
+				NotationPackage.eINSTANCE.getLineStyle_LineColor(),
+				FigureUtilities.RGBToInteger(lineRGB));
+		FontStyle nodeFontStyle = (FontStyle) node
+				.getStyle(NotationPackage.Literals.FONT_STYLE);
 		if (nodeFontStyle != null) {
-			FontData fontData = PreferenceConverter.getFontData(prefStore, IPreferenceConstants.PREF_DEFAULT_FONT);
+			FontData fontData = PreferenceConverter.getFontData(prefStore,
+					IPreferenceConstants.PREF_DEFAULT_FONT);
 			nodeFontStyle.setFontName(fontData.getName());
 			nodeFontStyle.setFontHeight(fontData.getHeight());
 			nodeFontStyle.setBold((fontData.getStyle() & SWT.BOLD) != 0);
 			nodeFontStyle.setItalic((fontData.getStyle() & SWT.ITALIC) != 0);
-			org.eclipse.swt.graphics.RGB fontRGB = PreferenceConverter.getColor(prefStore,
-				IPreferenceConstants.PREF_FONT_COLOR);
-			nodeFontStyle.setFontColor(FigureUtilities.RGBToInteger(fontRGB).intValue());
+			org.eclipse.swt.graphics.RGB fontRGB = PreferenceConverter
+					.getColor(prefStore, IPreferenceConstants.PREF_FONT_COLOR);
+			nodeFontStyle.setFontColor(FigureUtilities.RGBToInteger(fontRGB)
+					.intValue());
 		}
-		org.eclipse.swt.graphics.RGB fillRGB = PreferenceConverter.getColor(prefStore,
-			IPreferenceConstants.PREF_FILL_COLOR);
-		ViewUtil.setStructuralFeatureValue(node, NotationPackage.eINSTANCE.getFillStyle_FillColor(), FigureUtilities
-			.RGBToInteger(fillRGB));
-		Node label5006 = createLabel(node, UrmlVisualIDRegistry.getType(ProceduralMitigationNameEditPart.VISUAL_ID));
+		org.eclipse.swt.graphics.RGB fillRGB = PreferenceConverter.getColor(
+				prefStore, IPreferenceConstants.PREF_FILL_COLOR);
+		ViewUtil.setStructuralFeatureValue(node,
+				NotationPackage.eINSTANCE.getFillStyle_FillColor(),
+				FigureUtilities.RGBToInteger(fillRGB));
+		Node label5006 = createLabel(node,
+				UrmlVisualIDRegistry
+						.getType(ProceduralMitigationNameEditPart.VISUAL_ID));
 		return node;
 	}
 
 	/**
 	 * @generated
 	 */
-	public Node createVariationPoint_2013(EObject domainElement, View containerView, int index, boolean persisted,
-		PreferencesHint preferencesHint) {
+	public Node createVariationPoint_2013(EObject domainElement,
+			View containerView, int index, boolean persisted,
+			PreferencesHint preferencesHint) {
 		Shape node = NotationFactory.eINSTANCE.createShape();
 		node.setLayoutConstraint(NotationFactory.eINSTANCE.createBounds());
-		node.setType(UrmlVisualIDRegistry.getType(VariationPointEditPart.VISUAL_ID));
+		node.setType(UrmlVisualIDRegistry
+				.getType(VariationPointEditPart.VISUAL_ID));
 		ViewUtil.insertChildView(containerView, node, index, persisted);
 		node.setElement(domainElement);
 		stampShortcut(containerView, node);
-		// initializeFromPreferences
-		final IPreferenceStore prefStore = (IPreferenceStore) preferencesHint.getPreferenceStore();
+		// initializeFromPreferences 
+		final IPreferenceStore prefStore = (IPreferenceStore) preferencesHint
+				.getPreferenceStore();
 
-		org.eclipse.swt.graphics.RGB lineRGB = PreferenceConverter.getColor(prefStore,
-			IPreferenceConstants.PREF_LINE_COLOR);
-		ViewUtil.setStructuralFeatureValue(node, NotationPackage.eINSTANCE.getLineStyle_LineColor(), FigureUtilities
-			.RGBToInteger(lineRGB));
-		FontStyle nodeFontStyle = (FontStyle) node.getStyle(NotationPackage.Literals.FONT_STYLE);
+		org.eclipse.swt.graphics.RGB lineRGB = PreferenceConverter.getColor(
+				prefStore, IPreferenceConstants.PREF_LINE_COLOR);
+		ViewUtil.setStructuralFeatureValue(node,
+				NotationPackage.eINSTANCE.getLineStyle_LineColor(),
+				FigureUtilities.RGBToInteger(lineRGB));
+		FontStyle nodeFontStyle = (FontStyle) node
+				.getStyle(NotationPackage.Literals.FONT_STYLE);
 		if (nodeFontStyle != null) {
-			FontData fontData = PreferenceConverter.getFontData(prefStore, IPreferenceConstants.PREF_DEFAULT_FONT);
+			FontData fontData = PreferenceConverter.getFontData(prefStore,
+					IPreferenceConstants.PREF_DEFAULT_FONT);
 			nodeFontStyle.setFontName(fontData.getName());
 			nodeFontStyle.setFontHeight(fontData.getHeight());
 			nodeFontStyle.setBold((fontData.getStyle() & SWT.BOLD) != 0);
 			nodeFontStyle.setItalic((fontData.getStyle() & SWT.ITALIC) != 0);
-			org.eclipse.swt.graphics.RGB fontRGB = PreferenceConverter.getColor(prefStore,
-				IPreferenceConstants.PREF_FONT_COLOR);
-			nodeFontStyle.setFontColor(FigureUtilities.RGBToInteger(fontRGB).intValue());
+			org.eclipse.swt.graphics.RGB fontRGB = PreferenceConverter
+					.getColor(prefStore, IPreferenceConstants.PREF_FONT_COLOR);
+			nodeFontStyle.setFontColor(FigureUtilities.RGBToInteger(fontRGB)
+					.intValue());
 		}
-		org.eclipse.swt.graphics.RGB fillRGB = PreferenceConverter.getColor(prefStore,
-			IPreferenceConstants.PREF_FILL_COLOR);
-		ViewUtil.setStructuralFeatureValue(node, NotationPackage.eINSTANCE.getFillStyle_FillColor(), FigureUtilities
-			.RGBToInteger(fillRGB));
-		Node label5012 = createLabel(node, UrmlVisualIDRegistry.getType(VariationPointNameEditPart.VISUAL_ID));
+		org.eclipse.swt.graphics.RGB fillRGB = PreferenceConverter.getColor(
+				prefStore, IPreferenceConstants.PREF_FILL_COLOR);
+		ViewUtil.setStructuralFeatureValue(node,
+				NotationPackage.eINSTANCE.getFillStyle_FillColor(),
+				FigureUtilities.RGBToInteger(fillRGB));
+		Node label5012 = createLabel(node,
+				UrmlVisualIDRegistry
+						.getType(VariationPointNameEditPart.VISUAL_ID));
 		return node;
 	}
 
 	/**
 	 * @generated
 	 */
-	public Node createVariationPointInstance_2014(EObject domainElement, View containerView, int index,
-		boolean persisted, PreferencesHint preferencesHint) {
+	public Node createVariationPointInstance_2014(EObject domainElement,
+			View containerView, int index, boolean persisted,
+			PreferencesHint preferencesHint) {
 		Shape node = NotationFactory.eINSTANCE.createShape();
 		node.setLayoutConstraint(NotationFactory.eINSTANCE.createBounds());
-		node.setType(UrmlVisualIDRegistry.getType(VariationPointInstanceEditPart.VISUAL_ID));
+		node.setType(UrmlVisualIDRegistry
+				.getType(VariationPointInstanceEditPart.VISUAL_ID));
 		ViewUtil.insertChildView(containerView, node, index, persisted);
 		node.setElement(domainElement);
 		stampShortcut(containerView, node);
-		// initializeFromPreferences
-		final IPreferenceStore prefStore = (IPreferenceStore) preferencesHint.getPreferenceStore();
+		// initializeFromPreferences 
+		final IPreferenceStore prefStore = (IPreferenceStore) preferencesHint
+				.getPreferenceStore();
 
-		org.eclipse.swt.graphics.RGB lineRGB = PreferenceConverter.getColor(prefStore,
-			IPreferenceConstants.PREF_LINE_COLOR);
-		ViewUtil.setStructuralFeatureValue(node, NotationPackage.eINSTANCE.getLineStyle_LineColor(), FigureUtilities
-			.RGBToInteger(lineRGB));
-		FontStyle nodeFontStyle = (FontStyle) node.getStyle(NotationPackage.Literals.FONT_STYLE);
+		org.eclipse.swt.graphics.RGB lineRGB = PreferenceConverter.getColor(
+				prefStore, IPreferenceConstants.PREF_LINE_COLOR);
+		ViewUtil.setStructuralFeatureValue(node,
+				NotationPackage.eINSTANCE.getLineStyle_LineColor(),
+				FigureUtilities.RGBToInteger(lineRGB));
+		FontStyle nodeFontStyle = (FontStyle) node
+				.getStyle(NotationPackage.Literals.FONT_STYLE);
 		if (nodeFontStyle != null) {
-			FontData fontData = PreferenceConverter.getFontData(prefStore, IPreferenceConstants.PREF_DEFAULT_FONT);
+			FontData fontData = PreferenceConverter.getFontData(prefStore,
+					IPreferenceConstants.PREF_DEFAULT_FONT);
 			nodeFontStyle.setFontName(fontData.getName());
 			nodeFontStyle.setFontHeight(fontData.getHeight());
 			nodeFontStyle.setBold((fontData.getStyle() & SWT.BOLD) != 0);
 			nodeFontStyle.setItalic((fontData.getStyle() & SWT.ITALIC) != 0);
-			org.eclipse.swt.graphics.RGB fontRGB = PreferenceConverter.getColor(prefStore,
-				IPreferenceConstants.PREF_FONT_COLOR);
-			nodeFontStyle.setFontColor(FigureUtilities.RGBToInteger(fontRGB).intValue());
+			org.eclipse.swt.graphics.RGB fontRGB = PreferenceConverter
+					.getColor(prefStore, IPreferenceConstants.PREF_FONT_COLOR);
+			nodeFontStyle.setFontColor(FigureUtilities.RGBToInteger(fontRGB)
+					.intValue());
 		}
-		org.eclipse.swt.graphics.RGB fillRGB = PreferenceConverter.getColor(prefStore,
-			IPreferenceConstants.PREF_FILL_COLOR);
-		ViewUtil.setStructuralFeatureValue(node, NotationPackage.eINSTANCE.getFillStyle_FillColor(), FigureUtilities
-			.RGBToInteger(fillRGB));
-		Node label5013 = createLabel(node, UrmlVisualIDRegistry.getType(VariationPointInstanceNameEditPart.VISUAL_ID));
+		org.eclipse.swt.graphics.RGB fillRGB = PreferenceConverter.getColor(
+				prefStore, IPreferenceConstants.PREF_FILL_COLOR);
+		ViewUtil.setStructuralFeatureValue(node,
+				NotationPackage.eINSTANCE.getFillStyle_FillColor(),
+				FigureUtilities.RGBToInteger(fillRGB));
+		Node label5013 = createLabel(node,
+				UrmlVisualIDRegistry
+						.getType(VariationPointInstanceNameEditPart.VISUAL_ID));
 		return node;
 	}
 
 	/**
 	 * @generated
 	 */
-	public Node createProduct_2015(EObject domainElement, View containerView, int index, boolean persisted,
-		PreferencesHint preferencesHint) {
+	public Node createProduct_2015(EObject domainElement, View containerView,
+			int index, boolean persisted, PreferencesHint preferencesHint) {
 		Shape node = NotationFactory.eINSTANCE.createShape();
 		node.setLayoutConstraint(NotationFactory.eINSTANCE.createBounds());
 		node.setType(UrmlVisualIDRegistry.getType(ProductEditPart.VISUAL_ID));
 		ViewUtil.insertChildView(containerView, node, index, persisted);
 		node.setElement(domainElement);
 		stampShortcut(containerView, node);
-		// initializeFromPreferences
-		final IPreferenceStore prefStore = (IPreferenceStore) preferencesHint.getPreferenceStore();
+		// initializeFromPreferences 
+		final IPreferenceStore prefStore = (IPreferenceStore) preferencesHint
+				.getPreferenceStore();
 
-		org.eclipse.swt.graphics.RGB lineRGB = PreferenceConverter.getColor(prefStore,
-			IPreferenceConstants.PREF_LINE_COLOR);
-		ViewUtil.setStructuralFeatureValue(node, NotationPackage.eINSTANCE.getLineStyle_LineColor(), FigureUtilities
-			.RGBToInteger(lineRGB));
-		FontStyle nodeFontStyle = (FontStyle) node.getStyle(NotationPackage.Literals.FONT_STYLE);
+		org.eclipse.swt.graphics.RGB lineRGB = PreferenceConverter.getColor(
+				prefStore, IPreferenceConstants.PREF_LINE_COLOR);
+		ViewUtil.setStructuralFeatureValue(node,
+				NotationPackage.eINSTANCE.getLineStyle_LineColor(),
+				FigureUtilities.RGBToInteger(lineRGB));
+		FontStyle nodeFontStyle = (FontStyle) node
+				.getStyle(NotationPackage.Literals.FONT_STYLE);
 		if (nodeFontStyle != null) {
-			FontData fontData = PreferenceConverter.getFontData(prefStore, IPreferenceConstants.PREF_DEFAULT_FONT);
+			FontData fontData = PreferenceConverter.getFontData(prefStore,
+					IPreferenceConstants.PREF_DEFAULT_FONT);
 			nodeFontStyle.setFontName(fontData.getName());
 			nodeFontStyle.setFontHeight(fontData.getHeight());
 			nodeFontStyle.setBold((fontData.getStyle() & SWT.BOLD) != 0);
 			nodeFontStyle.setItalic((fontData.getStyle() & SWT.ITALIC) != 0);
-			org.eclipse.swt.graphics.RGB fontRGB = PreferenceConverter.getColor(prefStore,
-				IPreferenceConstants.PREF_FONT_COLOR);
-			nodeFontStyle.setFontColor(FigureUtilities.RGBToInteger(fontRGB).intValue());
+			org.eclipse.swt.graphics.RGB fontRGB = PreferenceConverter
+					.getColor(prefStore, IPreferenceConstants.PREF_FONT_COLOR);
+			nodeFontStyle.setFontColor(FigureUtilities.RGBToInteger(fontRGB)
+					.intValue());
 		}
-		org.eclipse.swt.graphics.RGB fillRGB = PreferenceConverter.getColor(prefStore,
-			IPreferenceConstants.PREF_FILL_COLOR);
-		ViewUtil.setStructuralFeatureValue(node, NotationPackage.eINSTANCE.getFillStyle_FillColor(), FigureUtilities
-			.RGBToInteger(fillRGB));
-		Node label5014 = createLabel(node, UrmlVisualIDRegistry.getType(ProductNameEditPart.VISUAL_ID));
+		org.eclipse.swt.graphics.RGB fillRGB = PreferenceConverter.getColor(
+				prefStore, IPreferenceConstants.PREF_FILL_COLOR);
+		ViewUtil.setStructuralFeatureValue(node,
+				NotationPackage.eINSTANCE.getFillStyle_FillColor(),
+				FigureUtilities.RGBToInteger(fillRGB));
+		Node label5014 = createLabel(node,
+				UrmlVisualIDRegistry.getType(ProductNameEditPart.VISUAL_ID));
 		return node;
 	}
 
 	/**
 	 * @generated
 	 */
-	public Edge createStakeholderGoals_4008(View containerView, int index, boolean persisted,
-		PreferencesHint preferencesHint) {
+	public Edge createStakeholderGoals_4008(View containerView, int index,
+			boolean persisted, PreferencesHint preferencesHint) {
 		Connector edge = NotationFactory.eINSTANCE.createConnector();
 		edge.getStyles().add(NotationFactory.eINSTANCE.createFontStyle());
-		RelativeBendpoints bendpoints = NotationFactory.eINSTANCE.createRelativeBendpoints();
-		ArrayList points = new ArrayList(2);
+		RelativeBendpoints bendpoints = NotationFactory.eINSTANCE
+				.createRelativeBendpoints();
+		ArrayList<RelativeBendpoint> points = new ArrayList<RelativeBendpoint>(
+				2);
 		points.add(new RelativeBendpoint());
 		points.add(new RelativeBendpoint());
 		bendpoints.setPoints(points);
 		edge.setBendpoints(bendpoints);
 		ViewUtil.insertChildView(containerView, edge, index, persisted);
-		edge.setType(UrmlVisualIDRegistry.getType(StakeholderGoalsEditPart.VISUAL_ID));
+		edge.setType(UrmlVisualIDRegistry
+				.getType(StakeholderGoalsEditPart.VISUAL_ID));
 		edge.setElement(null);
 		// initializePreferences
-		final IPreferenceStore prefStore = (IPreferenceStore) preferencesHint.getPreferenceStore();
+		final IPreferenceStore prefStore = (IPreferenceStore) preferencesHint
+				.getPreferenceStore();
 
-		org.eclipse.swt.graphics.RGB lineRGB = PreferenceConverter.getColor(prefStore,
-			IPreferenceConstants.PREF_LINE_COLOR);
-		ViewUtil.setStructuralFeatureValue(edge, NotationPackage.eINSTANCE.getLineStyle_LineColor(), FigureUtilities
-			.RGBToInteger(lineRGB));
-		FontStyle edgeFontStyle = (FontStyle) edge.getStyle(NotationPackage.Literals.FONT_STYLE);
+		org.eclipse.swt.graphics.RGB lineRGB = PreferenceConverter.getColor(
+				prefStore, IPreferenceConstants.PREF_LINE_COLOR);
+		ViewUtil.setStructuralFeatureValue(edge,
+				NotationPackage.eINSTANCE.getLineStyle_LineColor(),
+				FigureUtilities.RGBToInteger(lineRGB));
+		FontStyle edgeFontStyle = (FontStyle) edge
+				.getStyle(NotationPackage.Literals.FONT_STYLE);
 		if (edgeFontStyle != null) {
-			FontData fontData = PreferenceConverter.getFontData(prefStore, IPreferenceConstants.PREF_DEFAULT_FONT);
+			FontData fontData = PreferenceConverter.getFontData(prefStore,
+					IPreferenceConstants.PREF_DEFAULT_FONT);
 			edgeFontStyle.setFontName(fontData.getName());
 			edgeFontStyle.setFontHeight(fontData.getHeight());
 			edgeFontStyle.setBold((fontData.getStyle() & SWT.BOLD) != 0);
 			edgeFontStyle.setItalic((fontData.getStyle() & SWT.ITALIC) != 0);
-			org.eclipse.swt.graphics.RGB fontRGB = PreferenceConverter.getColor(prefStore,
-				IPreferenceConstants.PREF_FONT_COLOR);
-			edgeFontStyle.setFontColor(FigureUtilities.RGBToInteger(fontRGB).intValue());
+			org.eclipse.swt.graphics.RGB fontRGB = PreferenceConverter
+					.getColor(prefStore, IPreferenceConstants.PREF_FONT_COLOR);
+			edgeFontStyle.setFontColor(FigureUtilities.RGBToInteger(fontRGB)
+					.intValue());
 		}
-		Routing routing = Routing.get(prefStore.getInt(IPreferenceConstants.PREF_LINE_STYLE));
+		Routing routing = Routing.get(prefStore
+				.getInt(IPreferenceConstants.PREF_LINE_STYLE));
 		if (routing != null) {
-			ViewUtil.setStructuralFeatureValue(edge, NotationPackage.eINSTANCE.getRoutingStyle_Routing(), routing);
+			ViewUtil.setStructuralFeatureValue(edge,
+					NotationPackage.eINSTANCE.getRoutingStyle_Routing(),
+					routing);
 		}
-		Node label6001 = createLabel(edge, UrmlVisualIDRegistry.getType(ExpressesLabelEditPart.VISUAL_ID));
-		label6001.setLayoutConstraint(NotationFactory.eINSTANCE.createLocation());
+		Node label6001 = createLabel(edge,
+				UrmlVisualIDRegistry.getType(ExpressesLabelEditPart.VISUAL_ID));
+		label6001.setLayoutConstraint(NotationFactory.eINSTANCE
+				.createLocation());
 		Location location6001 = (Location) label6001.getLayoutConstraint();
 		location6001.setX(0);
 		location6001.setY(20);
@@ -866,43 +1045,56 @@
 	/**
 	 * @generated
 	 */
-	public Edge createAbstractFeatureSubFeatures_4034(View containerView, int index, boolean persisted,
-		PreferencesHint preferencesHint) {
+	public Edge createAbstractFeatureSubFeatures_4034(View containerView,
+			int index, boolean persisted, PreferencesHint preferencesHint) {
 		Connector edge = NotationFactory.eINSTANCE.createConnector();
 		edge.getStyles().add(NotationFactory.eINSTANCE.createFontStyle());
-		RelativeBendpoints bendpoints = NotationFactory.eINSTANCE.createRelativeBendpoints();
-		ArrayList points = new ArrayList(2);
+		RelativeBendpoints bendpoints = NotationFactory.eINSTANCE
+				.createRelativeBendpoints();
+		ArrayList<RelativeBendpoint> points = new ArrayList<RelativeBendpoint>(
+				2);
 		points.add(new RelativeBendpoint());
 		points.add(new RelativeBendpoint());
 		bendpoints.setPoints(points);
 		edge.setBendpoints(bendpoints);
 		ViewUtil.insertChildView(containerView, edge, index, persisted);
-		edge.setType(UrmlVisualIDRegistry.getType(AbstractFeatureSubFeaturesEditPart.VISUAL_ID));
+		edge.setType(UrmlVisualIDRegistry
+				.getType(AbstractFeatureSubFeaturesEditPart.VISUAL_ID));
 		edge.setElement(null);
 		// initializePreferences
-		final IPreferenceStore prefStore = (IPreferenceStore) preferencesHint.getPreferenceStore();
+		final IPreferenceStore prefStore = (IPreferenceStore) preferencesHint
+				.getPreferenceStore();
 
-		org.eclipse.swt.graphics.RGB lineRGB = PreferenceConverter.getColor(prefStore,
-			IPreferenceConstants.PREF_LINE_COLOR);
-		ViewUtil.setStructuralFeatureValue(edge, NotationPackage.eINSTANCE.getLineStyle_LineColor(), FigureUtilities
-			.RGBToInteger(lineRGB));
-		FontStyle edgeFontStyle = (FontStyle) edge.getStyle(NotationPackage.Literals.FONT_STYLE);
+		org.eclipse.swt.graphics.RGB lineRGB = PreferenceConverter.getColor(
+				prefStore, IPreferenceConstants.PREF_LINE_COLOR);
+		ViewUtil.setStructuralFeatureValue(edge,
+				NotationPackage.eINSTANCE.getLineStyle_LineColor(),
+				FigureUtilities.RGBToInteger(lineRGB));
+		FontStyle edgeFontStyle = (FontStyle) edge
+				.getStyle(NotationPackage.Literals.FONT_STYLE);
 		if (edgeFontStyle != null) {
-			FontData fontData = PreferenceConverter.getFontData(prefStore, IPreferenceConstants.PREF_DEFAULT_FONT);
+			FontData fontData = PreferenceConverter.getFontData(prefStore,
+					IPreferenceConstants.PREF_DEFAULT_FONT);
 			edgeFontStyle.setFontName(fontData.getName());
 			edgeFontStyle.setFontHeight(fontData.getHeight());
 			edgeFontStyle.setBold((fontData.getStyle() & SWT.BOLD) != 0);
 			edgeFontStyle.setItalic((fontData.getStyle() & SWT.ITALIC) != 0);
-			org.eclipse.swt.graphics.RGB fontRGB = PreferenceConverter.getColor(prefStore,
-				IPreferenceConstants.PREF_FONT_COLOR);
-			edgeFontStyle.setFontColor(FigureUtilities.RGBToInteger(fontRGB).intValue());
+			org.eclipse.swt.graphics.RGB fontRGB = PreferenceConverter
+					.getColor(prefStore, IPreferenceConstants.PREF_FONT_COLOR);
+			edgeFontStyle.setFontColor(FigureUtilities.RGBToInteger(fontRGB)
+					.intValue());
 		}
-		Routing routing = Routing.get(prefStore.getInt(IPreferenceConstants.PREF_LINE_STYLE));
+		Routing routing = Routing.get(prefStore
+				.getInt(IPreferenceConstants.PREF_LINE_STYLE));
 		if (routing != null) {
-			ViewUtil.setStructuralFeatureValue(edge, NotationPackage.eINSTANCE.getRoutingStyle_Routing(), routing);
+			ViewUtil.setStructuralFeatureValue(edge,
+					NotationPackage.eINSTANCE.getRoutingStyle_Routing(),
+					routing);
 		}
-		Node label6034 = createLabel(edge, UrmlVisualIDRegistry.getType(IsRefinedLabel2EditPart.VISUAL_ID));
-		label6034.setLayoutConstraint(NotationFactory.eINSTANCE.createLocation());
+		Node label6034 = createLabel(edge,
+				UrmlVisualIDRegistry.getType(IsRefinedLabel2EditPart.VISUAL_ID));
+		label6034.setLayoutConstraint(NotationFactory.eINSTANCE
+				.createLocation());
 		Location location6034 = (Location) label6034.getLayoutConstraint();
 		location6034.setX(0);
 		location6034.setY(20);
@@ -912,43 +1104,57 @@
 	/**
 	 * @generated
 	 */
-	public Edge createAbstractFeatureDetailingFunctionalRequirements_4035(View containerView, int index,
-		boolean persisted, PreferencesHint preferencesHint) {
+	public Edge createAbstractFeatureDetailingFunctionalRequirements_4035(
+			View containerView, int index, boolean persisted,
+			PreferencesHint preferencesHint) {
 		Connector edge = NotationFactory.eINSTANCE.createConnector();
 		edge.getStyles().add(NotationFactory.eINSTANCE.createFontStyle());
-		RelativeBendpoints bendpoints = NotationFactory.eINSTANCE.createRelativeBendpoints();
-		ArrayList points = new ArrayList(2);
+		RelativeBendpoints bendpoints = NotationFactory.eINSTANCE
+				.createRelativeBendpoints();
+		ArrayList<RelativeBendpoint> points = new ArrayList<RelativeBendpoint>(
+				2);
 		points.add(new RelativeBendpoint());
 		points.add(new RelativeBendpoint());
 		bendpoints.setPoints(points);
 		edge.setBendpoints(bendpoints);
 		ViewUtil.insertChildView(containerView, edge, index, persisted);
-		edge.setType(UrmlVisualIDRegistry.getType(AbstractFeatureDetailingFunctionalRequirementsEditPart.VISUAL_ID));
+		edge.setType(UrmlVisualIDRegistry
+				.getType(AbstractFeatureDetailingFunctionalRequirementsEditPart.VISUAL_ID));
 		edge.setElement(null);
 		// initializePreferences
-		final IPreferenceStore prefStore = (IPreferenceStore) preferencesHint.getPreferenceStore();
+		final IPreferenceStore prefStore = (IPreferenceStore) preferencesHint
+				.getPreferenceStore();
 
-		org.eclipse.swt.graphics.RGB lineRGB = PreferenceConverter.getColor(prefStore,
-			IPreferenceConstants.PREF_LINE_COLOR);
-		ViewUtil.setStructuralFeatureValue(edge, NotationPackage.eINSTANCE.getLineStyle_LineColor(), FigureUtilities
-			.RGBToInteger(lineRGB));
-		FontStyle edgeFontStyle = (FontStyle) edge.getStyle(NotationPackage.Literals.FONT_STYLE);
+		org.eclipse.swt.graphics.RGB lineRGB = PreferenceConverter.getColor(
+				prefStore, IPreferenceConstants.PREF_LINE_COLOR);
+		ViewUtil.setStructuralFeatureValue(edge,
+				NotationPackage.eINSTANCE.getLineStyle_LineColor(),
+				FigureUtilities.RGBToInteger(lineRGB));
+		FontStyle edgeFontStyle = (FontStyle) edge
+				.getStyle(NotationPackage.Literals.FONT_STYLE);
 		if (edgeFontStyle != null) {
-			FontData fontData = PreferenceConverter.getFontData(prefStore, IPreferenceConstants.PREF_DEFAULT_FONT);
+			FontData fontData = PreferenceConverter.getFontData(prefStore,
+					IPreferenceConstants.PREF_DEFAULT_FONT);
 			edgeFontStyle.setFontName(fontData.getName());
 			edgeFontStyle.setFontHeight(fontData.getHeight());
 			edgeFontStyle.setBold((fontData.getStyle() & SWT.BOLD) != 0);
 			edgeFontStyle.setItalic((fontData.getStyle() & SWT.ITALIC) != 0);
-			org.eclipse.swt.graphics.RGB fontRGB = PreferenceConverter.getColor(prefStore,
-				IPreferenceConstants.PREF_FONT_COLOR);
-			edgeFontStyle.setFontColor(FigureUtilities.RGBToInteger(fontRGB).intValue());
+			org.eclipse.swt.graphics.RGB fontRGB = PreferenceConverter
+					.getColor(prefStore, IPreferenceConstants.PREF_FONT_COLOR);
+			edgeFontStyle.setFontColor(FigureUtilities.RGBToInteger(fontRGB)
+					.intValue());
 		}
-		Routing routing = Routing.get(prefStore.getInt(IPreferenceConstants.PREF_LINE_STYLE));
+		Routing routing = Routing.get(prefStore
+				.getInt(IPreferenceConstants.PREF_LINE_STYLE));
 		if (routing != null) {
-			ViewUtil.setStructuralFeatureValue(edge, NotationPackage.eINSTANCE.getRoutingStyle_Routing(), routing);
+			ViewUtil.setStructuralFeatureValue(edge,
+					NotationPackage.eINSTANCE.getRoutingStyle_Routing(),
+					routing);
 		}
-		Node label6035 = createLabel(edge, UrmlVisualIDRegistry.getType(IsDetailedLabelEditPart.VISUAL_ID));
-		label6035.setLayoutConstraint(NotationFactory.eINSTANCE.createLocation());
+		Node label6035 = createLabel(edge,
+				UrmlVisualIDRegistry.getType(IsDetailedLabelEditPart.VISUAL_ID));
+		label6035.setLayoutConstraint(NotationFactory.eINSTANCE
+				.createLocation());
 		Location location6035 = (Location) label6035.getLayoutConstraint();
 		location6035.setX(0);
 		location6035.setY(20);
@@ -958,44 +1164,58 @@
 	/**
 	 * @generated
 	 */
-	public Edge createAbstractFeatureConstrainingNonFunctionalRequirements_4036(View containerView, int index,
-		boolean persisted, PreferencesHint preferencesHint) {
+	public Edge createAbstractFeatureConstrainingNonFunctionalRequirements_4036(
+			View containerView, int index, boolean persisted,
+			PreferencesHint preferencesHint) {
 		Connector edge = NotationFactory.eINSTANCE.createConnector();
 		edge.getStyles().add(NotationFactory.eINSTANCE.createFontStyle());
-		RelativeBendpoints bendpoints = NotationFactory.eINSTANCE.createRelativeBendpoints();
-		ArrayList points = new ArrayList(2);
+		RelativeBendpoints bendpoints = NotationFactory.eINSTANCE
+				.createRelativeBendpoints();
+		ArrayList<RelativeBendpoint> points = new ArrayList<RelativeBendpoint>(
+				2);
 		points.add(new RelativeBendpoint());
 		points.add(new RelativeBendpoint());
 		bendpoints.setPoints(points);
 		edge.setBendpoints(bendpoints);
 		ViewUtil.insertChildView(containerView, edge, index, persisted);
 		edge.setType(UrmlVisualIDRegistry
-			.getType(AbstractFeatureConstrainingNonFunctionalRequirementsEditPart.VISUAL_ID));
+				.getType(AbstractFeatureConstrainingNonFunctionalRequirementsEditPart.VISUAL_ID));
 		edge.setElement(null);
 		// initializePreferences
-		final IPreferenceStore prefStore = (IPreferenceStore) preferencesHint.getPreferenceStore();
+		final IPreferenceStore prefStore = (IPreferenceStore) preferencesHint
+				.getPreferenceStore();
 
-		org.eclipse.swt.graphics.RGB lineRGB = PreferenceConverter.getColor(prefStore,
-			IPreferenceConstants.PREF_LINE_COLOR);
-		ViewUtil.setStructuralFeatureValue(edge, NotationPackage.eINSTANCE.getLineStyle_LineColor(), FigureUtilities
-			.RGBToInteger(lineRGB));
-		FontStyle edgeFontStyle = (FontStyle) edge.getStyle(NotationPackage.Literals.FONT_STYLE);
+		org.eclipse.swt.graphics.RGB lineRGB = PreferenceConverter.getColor(
+				prefStore, IPreferenceConstants.PREF_LINE_COLOR);
+		ViewUtil.setStructuralFeatureValue(edge,
+				NotationPackage.eINSTANCE.getLineStyle_LineColor(),
+				FigureUtilities.RGBToInteger(lineRGB));
+		FontStyle edgeFontStyle = (FontStyle) edge
+				.getStyle(NotationPackage.Literals.FONT_STYLE);
 		if (edgeFontStyle != null) {
-			FontData fontData = PreferenceConverter.getFontData(prefStore, IPreferenceConstants.PREF_DEFAULT_FONT);
+			FontData fontData = PreferenceConverter.getFontData(prefStore,
+					IPreferenceConstants.PREF_DEFAULT_FONT);
 			edgeFontStyle.setFontName(fontData.getName());
 			edgeFontStyle.setFontHeight(fontData.getHeight());
 			edgeFontStyle.setBold((fontData.getStyle() & SWT.BOLD) != 0);
 			edgeFontStyle.setItalic((fontData.getStyle() & SWT.ITALIC) != 0);
-			org.eclipse.swt.graphics.RGB fontRGB = PreferenceConverter.getColor(prefStore,
-				IPreferenceConstants.PREF_FONT_COLOR);
-			edgeFontStyle.setFontColor(FigureUtilities.RGBToInteger(fontRGB).intValue());
+			org.eclipse.swt.graphics.RGB fontRGB = PreferenceConverter
+					.getColor(prefStore, IPreferenceConstants.PREF_FONT_COLOR);
+			edgeFontStyle.setFontColor(FigureUtilities.RGBToInteger(fontRGB)
+					.intValue());
 		}
-		Routing routing = Routing.get(prefStore.getInt(IPreferenceConstants.PREF_LINE_STYLE));
+		Routing routing = Routing.get(prefStore
+				.getInt(IPreferenceConstants.PREF_LINE_STYLE));
 		if (routing != null) {
-			ViewUtil.setStructuralFeatureValue(edge, NotationPackage.eINSTANCE.getRoutingStyle_Routing(), routing);
+			ViewUtil.setStructuralFeatureValue(edge,
+					NotationPackage.eINSTANCE.getRoutingStyle_Routing(),
+					routing);
 		}
-		Node label6036 = createLabel(edge, UrmlVisualIDRegistry.getType(IsConstraintLabelEditPart.VISUAL_ID));
-		label6036.setLayoutConstraint(NotationFactory.eINSTANCE.createLocation());
+		Node label6036 = createLabel(edge,
+				UrmlVisualIDRegistry
+						.getType(IsConstraintLabelEditPart.VISUAL_ID));
+		label6036.setLayoutConstraint(NotationFactory.eINSTANCE
+				.createLocation());
 		Location location6036 = (Location) label6036.getLayoutConstraint();
 		location6036.setX(0);
 		location6036.setY(20);
@@ -1005,43 +1225,56 @@
 	/**
 	 * @generated
 	 */
-	public Edge createAbstractFeatureRequiredFeatures_4045(View containerView, int index, boolean persisted,
-		PreferencesHint preferencesHint) {
+	public Edge createAbstractFeatureRequiredFeatures_4045(View containerView,
+			int index, boolean persisted, PreferencesHint preferencesHint) {
 		Connector edge = NotationFactory.eINSTANCE.createConnector();
 		edge.getStyles().add(NotationFactory.eINSTANCE.createFontStyle());
-		RelativeBendpoints bendpoints = NotationFactory.eINSTANCE.createRelativeBendpoints();
-		ArrayList points = new ArrayList(2);
+		RelativeBendpoints bendpoints = NotationFactory.eINSTANCE
+				.createRelativeBendpoints();
+		ArrayList<RelativeBendpoint> points = new ArrayList<RelativeBendpoint>(
+				2);
 		points.add(new RelativeBendpoint());
 		points.add(new RelativeBendpoint());
 		bendpoints.setPoints(points);
 		edge.setBendpoints(bendpoints);
 		ViewUtil.insertChildView(containerView, edge, index, persisted);
-		edge.setType(UrmlVisualIDRegistry.getType(AbstractFeatureRequiredFeaturesEditPart.VISUAL_ID));
+		edge.setType(UrmlVisualIDRegistry
+				.getType(AbstractFeatureRequiredFeaturesEditPart.VISUAL_ID));
 		edge.setElement(null);
 		// initializePreferences
-		final IPreferenceStore prefStore = (IPreferenceStore) preferencesHint.getPreferenceStore();
+		final IPreferenceStore prefStore = (IPreferenceStore) preferencesHint
+				.getPreferenceStore();
 
-		org.eclipse.swt.graphics.RGB lineRGB = PreferenceConverter.getColor(prefStore,
-			IPreferenceConstants.PREF_LINE_COLOR);
-		ViewUtil.setStructuralFeatureValue(edge, NotationPackage.eINSTANCE.getLineStyle_LineColor(), FigureUtilities
-			.RGBToInteger(lineRGB));
-		FontStyle edgeFontStyle = (FontStyle) edge.getStyle(NotationPackage.Literals.FONT_STYLE);
+		org.eclipse.swt.graphics.RGB lineRGB = PreferenceConverter.getColor(
+				prefStore, IPreferenceConstants.PREF_LINE_COLOR);
+		ViewUtil.setStructuralFeatureValue(edge,
+				NotationPackage.eINSTANCE.getLineStyle_LineColor(),
+				FigureUtilities.RGBToInteger(lineRGB));
+		FontStyle edgeFontStyle = (FontStyle) edge
+				.getStyle(NotationPackage.Literals.FONT_STYLE);
 		if (edgeFontStyle != null) {
-			FontData fontData = PreferenceConverter.getFontData(prefStore, IPreferenceConstants.PREF_DEFAULT_FONT);
+			FontData fontData = PreferenceConverter.getFontData(prefStore,
+					IPreferenceConstants.PREF_DEFAULT_FONT);
 			edgeFontStyle.setFontName(fontData.getName());
 			edgeFontStyle.setFontHeight(fontData.getHeight());
 			edgeFontStyle.setBold((fontData.getStyle() & SWT.BOLD) != 0);
 			edgeFontStyle.setItalic((fontData.getStyle() & SWT.ITALIC) != 0);
-			org.eclipse.swt.graphics.RGB fontRGB = PreferenceConverter.getColor(prefStore,
-				IPreferenceConstants.PREF_FONT_COLOR);
-			edgeFontStyle.setFontColor(FigureUtilities.RGBToInteger(fontRGB).intValue());
+			org.eclipse.swt.graphics.RGB fontRGB = PreferenceConverter
+					.getColor(prefStore, IPreferenceConstants.PREF_FONT_COLOR);
+			edgeFontStyle.setFontColor(FigureUtilities.RGBToInteger(fontRGB)
+					.intValue());
 		}
-		Routing routing = Routing.get(prefStore.getInt(IPreferenceConstants.PREF_LINE_STYLE));
+		Routing routing = Routing.get(prefStore
+				.getInt(IPreferenceConstants.PREF_LINE_STYLE));
 		if (routing != null) {
-			ViewUtil.setStructuralFeatureValue(edge, NotationPackage.eINSTANCE.getRoutingStyle_Routing(), routing);
+			ViewUtil.setStructuralFeatureValue(edge,
+					NotationPackage.eINSTANCE.getRoutingStyle_Routing(),
+					routing);
 		}
-		Node label6045 = createLabel(edge, UrmlVisualIDRegistry.getType(RequiresLabelEditPart.VISUAL_ID));
-		label6045.setLayoutConstraint(NotationFactory.eINSTANCE.createLocation());
+		Node label6045 = createLabel(edge,
+				UrmlVisualIDRegistry.getType(RequiresLabelEditPart.VISUAL_ID));
+		label6045.setLayoutConstraint(NotationFactory.eINSTANCE
+				.createLocation());
 		Location location6045 = (Location) label6045.getLayoutConstraint();
 		location6045.setX(0);
 		location6045.setY(20);
@@ -1051,43 +1284,56 @@
 	/**
 	 * @generated
 	 */
-	public Edge createAbstractFeatureExcludedFeatures_4038(View containerView, int index, boolean persisted,
-		PreferencesHint preferencesHint) {
+	public Edge createAbstractFeatureExcludedFeatures_4038(View containerView,
+			int index, boolean persisted, PreferencesHint preferencesHint) {
 		Connector edge = NotationFactory.eINSTANCE.createConnector();
 		edge.getStyles().add(NotationFactory.eINSTANCE.createFontStyle());
-		RelativeBendpoints bendpoints = NotationFactory.eINSTANCE.createRelativeBendpoints();
-		ArrayList points = new ArrayList(2);
+		RelativeBendpoints bendpoints = NotationFactory.eINSTANCE
+				.createRelativeBendpoints();
+		ArrayList<RelativeBendpoint> points = new ArrayList<RelativeBendpoint>(
+				2);
 		points.add(new RelativeBendpoint());
 		points.add(new RelativeBendpoint());
 		bendpoints.setPoints(points);
 		edge.setBendpoints(bendpoints);
 		ViewUtil.insertChildView(containerView, edge, index, persisted);
-		edge.setType(UrmlVisualIDRegistry.getType(AbstractFeatureExcludedFeaturesEditPart.VISUAL_ID));
+		edge.setType(UrmlVisualIDRegistry
+				.getType(AbstractFeatureExcludedFeaturesEditPart.VISUAL_ID));
 		edge.setElement(null);
 		// initializePreferences
-		final IPreferenceStore prefStore = (IPreferenceStore) preferencesHint.getPreferenceStore();
+		final IPreferenceStore prefStore = (IPreferenceStore) preferencesHint
+				.getPreferenceStore();
 
-		org.eclipse.swt.graphics.RGB lineRGB = PreferenceConverter.getColor(prefStore,
-			IPreferenceConstants.PREF_LINE_COLOR);
-		ViewUtil.setStructuralFeatureValue(edge, NotationPackage.eINSTANCE.getLineStyle_LineColor(), FigureUtilities
-			.RGBToInteger(lineRGB));
-		FontStyle edgeFontStyle = (FontStyle) edge.getStyle(NotationPackage.Literals.FONT_STYLE);
+		org.eclipse.swt.graphics.RGB lineRGB = PreferenceConverter.getColor(
+				prefStore, IPreferenceConstants.PREF_LINE_COLOR);
+		ViewUtil.setStructuralFeatureValue(edge,
+				NotationPackage.eINSTANCE.getLineStyle_LineColor(),
+				FigureUtilities.RGBToInteger(lineRGB));
+		FontStyle edgeFontStyle = (FontStyle) edge
+				.getStyle(NotationPackage.Literals.FONT_STYLE);
 		if (edgeFontStyle != null) {
-			FontData fontData = PreferenceConverter.getFontData(prefStore, IPreferenceConstants.PREF_DEFAULT_FONT);
+			FontData fontData = PreferenceConverter.getFontData(prefStore,
+					IPreferenceConstants.PREF_DEFAULT_FONT);
 			edgeFontStyle.setFontName(fontData.getName());
 			edgeFontStyle.setFontHeight(fontData.getHeight());
 			edgeFontStyle.setBold((fontData.getStyle() & SWT.BOLD) != 0);
 			edgeFontStyle.setItalic((fontData.getStyle() & SWT.ITALIC) != 0);
-			org.eclipse.swt.graphics.RGB fontRGB = PreferenceConverter.getColor(prefStore,
-				IPreferenceConstants.PREF_FONT_COLOR);
-			edgeFontStyle.setFontColor(FigureUtilities.RGBToInteger(fontRGB).intValue());
+			org.eclipse.swt.graphics.RGB fontRGB = PreferenceConverter
+					.getColor(prefStore, IPreferenceConstants.PREF_FONT_COLOR);
+			edgeFontStyle.setFontColor(FigureUtilities.RGBToInteger(fontRGB)
+					.intValue());
 		}
-		Routing routing = Routing.get(prefStore.getInt(IPreferenceConstants.PREF_LINE_STYLE));
+		Routing routing = Routing.get(prefStore
+				.getInt(IPreferenceConstants.PREF_LINE_STYLE));
 		if (routing != null) {
-			ViewUtil.setStructuralFeatureValue(edge, NotationPackage.eINSTANCE.getRoutingStyle_Routing(), routing);
+			ViewUtil.setStructuralFeatureValue(edge,
+					NotationPackage.eINSTANCE.getRoutingStyle_Routing(),
+					routing);
 		}
-		Node label6038 = createLabel(edge, UrmlVisualIDRegistry.getType(ExcludesLabelEditPart.VISUAL_ID));
-		label6038.setLayoutConstraint(NotationFactory.eINSTANCE.createLocation());
+		Node label6038 = createLabel(edge,
+				UrmlVisualIDRegistry.getType(ExcludesLabelEditPart.VISUAL_ID));
+		label6038.setLayoutConstraint(NotationFactory.eINSTANCE
+				.createLocation());
 		Location location6038 = (Location) label6038.getLayoutConstraint();
 		location6038.setX(0);
 		location6038.setY(20);
@@ -1097,43 +1343,56 @@
 	/**
 	 * @generated
 	 */
-	public Edge createGoalRealizedFeatures_4004(View containerView, int index, boolean persisted,
-		PreferencesHint preferencesHint) {
+	public Edge createGoalRealizedFeatures_4004(View containerView, int index,
+			boolean persisted, PreferencesHint preferencesHint) {
 		Connector edge = NotationFactory.eINSTANCE.createConnector();
 		edge.getStyles().add(NotationFactory.eINSTANCE.createFontStyle());
-		RelativeBendpoints bendpoints = NotationFactory.eINSTANCE.createRelativeBendpoints();
-		ArrayList points = new ArrayList(2);
+		RelativeBendpoints bendpoints = NotationFactory.eINSTANCE
+				.createRelativeBendpoints();
+		ArrayList<RelativeBendpoint> points = new ArrayList<RelativeBendpoint>(
+				2);
 		points.add(new RelativeBendpoint());
 		points.add(new RelativeBendpoint());
 		bendpoints.setPoints(points);
 		edge.setBendpoints(bendpoints);
 		ViewUtil.insertChildView(containerView, edge, index, persisted);
-		edge.setType(UrmlVisualIDRegistry.getType(GoalRealizedFeaturesEditPart.VISUAL_ID));
+		edge.setType(UrmlVisualIDRegistry
+				.getType(GoalRealizedFeaturesEditPart.VISUAL_ID));
 		edge.setElement(null);
 		// initializePreferences
-		final IPreferenceStore prefStore = (IPreferenceStore) preferencesHint.getPreferenceStore();
+		final IPreferenceStore prefStore = (IPreferenceStore) preferencesHint
+				.getPreferenceStore();
 
-		org.eclipse.swt.graphics.RGB lineRGB = PreferenceConverter.getColor(prefStore,
-			IPreferenceConstants.PREF_LINE_COLOR);
-		ViewUtil.setStructuralFeatureValue(edge, NotationPackage.eINSTANCE.getLineStyle_LineColor(), FigureUtilities
-			.RGBToInteger(lineRGB));
-		FontStyle edgeFontStyle = (FontStyle) edge.getStyle(NotationPackage.Literals.FONT_STYLE);
+		org.eclipse.swt.graphics.RGB lineRGB = PreferenceConverter.getColor(
+				prefStore, IPreferenceConstants.PREF_LINE_COLOR);
+		ViewUtil.setStructuralFeatureValue(edge,
+				NotationPackage.eINSTANCE.getLineStyle_LineColor(),
+				FigureUtilities.RGBToInteger(lineRGB));
+		FontStyle edgeFontStyle = (FontStyle) edge
+				.getStyle(NotationPackage.Literals.FONT_STYLE);
 		if (edgeFontStyle != null) {
-			FontData fontData = PreferenceConverter.getFontData(prefStore, IPreferenceConstants.PREF_DEFAULT_FONT);
+			FontData fontData = PreferenceConverter.getFontData(prefStore,
+					IPreferenceConstants.PREF_DEFAULT_FONT);
 			edgeFontStyle.setFontName(fontData.getName());
 			edgeFontStyle.setFontHeight(fontData.getHeight());
 			edgeFontStyle.setBold((fontData.getStyle() & SWT.BOLD) != 0);
 			edgeFontStyle.setItalic((fontData.getStyle() & SWT.ITALIC) != 0);
-			org.eclipse.swt.graphics.RGB fontRGB = PreferenceConverter.getColor(prefStore,
-				IPreferenceConstants.PREF_FONT_COLOR);
-			edgeFontStyle.setFontColor(FigureUtilities.RGBToInteger(fontRGB).intValue());
+			org.eclipse.swt.graphics.RGB fontRGB = PreferenceConverter
+					.getColor(prefStore, IPreferenceConstants.PREF_FONT_COLOR);
+			edgeFontStyle.setFontColor(FigureUtilities.RGBToInteger(fontRGB)
+					.intValue());
 		}
-		Routing routing = Routing.get(prefStore.getInt(IPreferenceConstants.PREF_LINE_STYLE));
+		Routing routing = Routing.get(prefStore
+				.getInt(IPreferenceConstants.PREF_LINE_STYLE));
 		if (routing != null) {
-			ViewUtil.setStructuralFeatureValue(edge, NotationPackage.eINSTANCE.getRoutingStyle_Routing(), routing);
+			ViewUtil.setStructuralFeatureValue(edge,
+					NotationPackage.eINSTANCE.getRoutingStyle_Routing(),
+					routing);
 		}
-		Node label6004 = createLabel(edge, UrmlVisualIDRegistry.getType(MotivatesLabelEditPart.VISUAL_ID));
-		label6004.setLayoutConstraint(NotationFactory.eINSTANCE.createLocation());
+		Node label6004 = createLabel(edge,
+				UrmlVisualIDRegistry.getType(MotivatesLabelEditPart.VISUAL_ID));
+		label6004.setLayoutConstraint(NotationFactory.eINSTANCE
+				.createLocation());
 		Location location6004 = (Location) label6004.getLayoutConstraint();
 		location6004.setX(0);
 		location6004.setY(20);
@@ -1143,43 +1402,56 @@
 	/**
 	 * @generated
 	 */
-	public Edge createGoalSubGoals_4018(View containerView, int index, boolean persisted,
-		PreferencesHint preferencesHint) {
+	public Edge createGoalSubGoals_4018(View containerView, int index,
+			boolean persisted, PreferencesHint preferencesHint) {
 		Connector edge = NotationFactory.eINSTANCE.createConnector();
 		edge.getStyles().add(NotationFactory.eINSTANCE.createFontStyle());
-		RelativeBendpoints bendpoints = NotationFactory.eINSTANCE.createRelativeBendpoints();
-		ArrayList points = new ArrayList(2);
+		RelativeBendpoints bendpoints = NotationFactory.eINSTANCE
+				.createRelativeBendpoints();
+		ArrayList<RelativeBendpoint> points = new ArrayList<RelativeBendpoint>(
+				2);
 		points.add(new RelativeBendpoint());
 		points.add(new RelativeBendpoint());
 		bendpoints.setPoints(points);
 		edge.setBendpoints(bendpoints);
 		ViewUtil.insertChildView(containerView, edge, index, persisted);
-		edge.setType(UrmlVisualIDRegistry.getType(GoalSubGoalsEditPart.VISUAL_ID));
+		edge.setType(UrmlVisualIDRegistry
+				.getType(GoalSubGoalsEditPart.VISUAL_ID));
 		edge.setElement(null);
 		// initializePreferences
-		final IPreferenceStore prefStore = (IPreferenceStore) preferencesHint.getPreferenceStore();
+		final IPreferenceStore prefStore = (IPreferenceStore) preferencesHint
+				.getPreferenceStore();
 
-		org.eclipse.swt.graphics.RGB lineRGB = PreferenceConverter.getColor(prefStore,
-			IPreferenceConstants.PREF_LINE_COLOR);
-		ViewUtil.setStructuralFeatureValue(edge, NotationPackage.eINSTANCE.getLineStyle_LineColor(), FigureUtilities
-			.RGBToInteger(lineRGB));
-		FontStyle edgeFontStyle = (FontStyle) edge.getStyle(NotationPackage.Literals.FONT_STYLE);
+		org.eclipse.swt.graphics.RGB lineRGB = PreferenceConverter.getColor(
+				prefStore, IPreferenceConstants.PREF_LINE_COLOR);
+		ViewUtil.setStructuralFeatureValue(edge,
+				NotationPackage.eINSTANCE.getLineStyle_LineColor(),
+				FigureUtilities.RGBToInteger(lineRGB));
+		FontStyle edgeFontStyle = (FontStyle) edge
+				.getStyle(NotationPackage.Literals.FONT_STYLE);
 		if (edgeFontStyle != null) {
-			FontData fontData = PreferenceConverter.getFontData(prefStore, IPreferenceConstants.PREF_DEFAULT_FONT);
+			FontData fontData = PreferenceConverter.getFontData(prefStore,
+					IPreferenceConstants.PREF_DEFAULT_FONT);
 			edgeFontStyle.setFontName(fontData.getName());
 			edgeFontStyle.setFontHeight(fontData.getHeight());
 			edgeFontStyle.setBold((fontData.getStyle() & SWT.BOLD) != 0);
 			edgeFontStyle.setItalic((fontData.getStyle() & SWT.ITALIC) != 0);
-			org.eclipse.swt.graphics.RGB fontRGB = PreferenceConverter.getColor(prefStore,
-				IPreferenceConstants.PREF_FONT_COLOR);
-			edgeFontStyle.setFontColor(FigureUtilities.RGBToInteger(fontRGB).intValue());
+			org.eclipse.swt.graphics.RGB fontRGB = PreferenceConverter
+					.getColor(prefStore, IPreferenceConstants.PREF_FONT_COLOR);
+			edgeFontStyle.setFontColor(FigureUtilities.RGBToInteger(fontRGB)
+					.intValue());
 		}
-		Routing routing = Routing.get(prefStore.getInt(IPreferenceConstants.PREF_LINE_STYLE));
+		Routing routing = Routing.get(prefStore
+				.getInt(IPreferenceConstants.PREF_LINE_STYLE));
 		if (routing != null) {
-			ViewUtil.setStructuralFeatureValue(edge, NotationPackage.eINSTANCE.getRoutingStyle_Routing(), routing);
+			ViewUtil.setStructuralFeatureValue(edge,
+					NotationPackage.eINSTANCE.getRoutingStyle_Routing(),
+					routing);
 		}
-		Node label6014 = createLabel(edge, UrmlVisualIDRegistry.getType(IsRefinedLabelEditPart.VISUAL_ID));
-		label6014.setLayoutConstraint(NotationFactory.eINSTANCE.createLocation());
+		Node label6014 = createLabel(edge,
+				UrmlVisualIDRegistry.getType(IsRefinedLabelEditPart.VISUAL_ID));
+		label6014.setLayoutConstraint(NotationFactory.eINSTANCE
+				.createLocation());
 		Location location6014 = (Location) label6014.getLayoutConstraint();
 		location6014.setX(0);
 		location6014.setY(20);
@@ -1189,45 +1461,62 @@
 	/**
 	 * @generated
 	 */
-	public Edge createGoalReference_4016(EObject domainElement, View containerView, int index, boolean persisted,
-		PreferencesHint preferencesHint) {
+	public Edge createGoalReference_4016(EObject domainElement,
+			View containerView, int index, boolean persisted,
+			PreferencesHint preferencesHint) {
 		Connector edge = NotationFactory.eINSTANCE.createConnector();
 		edge.getStyles().add(NotationFactory.eINSTANCE.createFontStyle());
-		RelativeBendpoints bendpoints = NotationFactory.eINSTANCE.createRelativeBendpoints();
-		ArrayList points = new ArrayList(2);
+		RelativeBendpoints bendpoints = NotationFactory.eINSTANCE
+				.createRelativeBendpoints();
+		ArrayList<RelativeBendpoint> points = new ArrayList<RelativeBendpoint>(
+				2);
 		points.add(new RelativeBendpoint());
 		points.add(new RelativeBendpoint());
 		bendpoints.setPoints(points);
 		edge.setBendpoints(bendpoints);
 		ViewUtil.insertChildView(containerView, edge, index, persisted);
-		edge.setType(UrmlVisualIDRegistry.getType(GoalReferenceEditPart.VISUAL_ID));
+		edge.setType(UrmlVisualIDRegistry
+				.getType(GoalReferenceEditPart.VISUAL_ID));
 		edge.setElement(domainElement);
 		// initializePreferences
-		final IPreferenceStore prefStore = (IPreferenceStore) preferencesHint.getPreferenceStore();
+		final IPreferenceStore prefStore = (IPreferenceStore) preferencesHint
+				.getPreferenceStore();
 
-		org.eclipse.swt.graphics.RGB lineRGB = PreferenceConverter.getColor(prefStore,
-			IPreferenceConstants.PREF_LINE_COLOR);
-		ViewUtil.setStructuralFeatureValue(edge, NotationPackage.eINSTANCE.getLineStyle_LineColor(), FigureUtilities
-			.RGBToInteger(lineRGB));
-		FontStyle edgeFontStyle = (FontStyle) edge.getStyle(NotationPackage.Literals.FONT_STYLE);
+		org.eclipse.swt.graphics.RGB lineRGB = PreferenceConverter.getColor(
+				prefStore, IPreferenceConstants.PREF_LINE_COLOR);
+		ViewUtil.setStructuralFeatureValue(edge,
+				NotationPackage.eINSTANCE.getLineStyle_LineColor(),
+				FigureUtilities.RGBToInteger(lineRGB));
+		FontStyle edgeFontStyle = (FontStyle) edge
+				.getStyle(NotationPackage.Literals.FONT_STYLE);
 		if (edgeFontStyle != null) {
-			FontData fontData = PreferenceConverter.getFontData(prefStore, IPreferenceConstants.PREF_DEFAULT_FONT);
+			FontData fontData = PreferenceConverter.getFontData(prefStore,
+					IPreferenceConstants.PREF_DEFAULT_FONT);
 			edgeFontStyle.setFontName(fontData.getName());
 			edgeFontStyle.setFontHeight(fontData.getHeight());
 			edgeFontStyle.setBold((fontData.getStyle() & SWT.BOLD) != 0);
 			edgeFontStyle.setItalic((fontData.getStyle() & SWT.ITALIC) != 0);
-			org.eclipse.swt.graphics.RGB fontRGB = PreferenceConverter.getColor(prefStore,
-				IPreferenceConstants.PREF_FONT_COLOR);
-			edgeFontStyle.setFontColor(FigureUtilities.RGBToInteger(fontRGB).intValue());
+			org.eclipse.swt.graphics.RGB fontRGB = PreferenceConverter
+					.getColor(prefStore, IPreferenceConstants.PREF_FONT_COLOR);
+			edgeFontStyle.setFontColor(FigureUtilities.RGBToInteger(fontRGB)
+					.intValue());
 		}
-		Routing routing = Routing.get(prefStore.getInt(IPreferenceConstants.PREF_LINE_STYLE));
+		Routing routing = Routing.get(prefStore
+				.getInt(IPreferenceConstants.PREF_LINE_STYLE));
 		if (routing != null) {
-			ViewUtil.setStructuralFeatureValue(edge, NotationPackage.eINSTANCE.getRoutingStyle_Routing(), routing);
+			ViewUtil.setStructuralFeatureValue(edge,
+					NotationPackage.eINSTANCE.getRoutingStyle_Routing(),
+					routing);
 		}
-		Node label6013 = createLabel(edge, UrmlVisualIDRegistry.getType(IsDetailedLabel2EditPart.VISUAL_ID));
-		label6013.setLayoutConstraint(NotationFactory.eINSTANCE.createLocation());
-		Node label6022 = createLabel(edge, UrmlVisualIDRegistry.getType(InfluencesLabelEditPart.VISUAL_ID));
-		label6022.setLayoutConstraint(NotationFactory.eINSTANCE.createLocation());
+		Node label6013 = createLabel(edge,
+				UrmlVisualIDRegistry
+						.getType(IsDetailedLabel2EditPart.VISUAL_ID));
+		label6013.setLayoutConstraint(NotationFactory.eINSTANCE
+				.createLocation());
+		Node label6022 = createLabel(edge,
+				UrmlVisualIDRegistry.getType(InfluencesLabelEditPart.VISUAL_ID));
+		label6022.setLayoutConstraint(NotationFactory.eINSTANCE
+				.createLocation());
 		Location location6022 = (Location) label6022.getLayoutConstraint();
 		location6022.setX(0);
 		location6022.setY(20);
@@ -1237,45 +1526,63 @@
 	/**
 	 * @generated
 	 */
-	public Edge createGoalReference_4023(EObject domainElement, View containerView, int index, boolean persisted,
-		PreferencesHint preferencesHint) {
+	public Edge createGoalReference_4023(EObject domainElement,
+			View containerView, int index, boolean persisted,
+			PreferencesHint preferencesHint) {
 		Connector edge = NotationFactory.eINSTANCE.createConnector();
 		edge.getStyles().add(NotationFactory.eINSTANCE.createFontStyle());
-		RelativeBendpoints bendpoints = NotationFactory.eINSTANCE.createRelativeBendpoints();
-		ArrayList points = new ArrayList(2);
+		RelativeBendpoints bendpoints = NotationFactory.eINSTANCE
+				.createRelativeBendpoints();
+		ArrayList<RelativeBendpoint> points = new ArrayList<RelativeBendpoint>(
+				2);
 		points.add(new RelativeBendpoint());
 		points.add(new RelativeBendpoint());
 		bendpoints.setPoints(points);
 		edge.setBendpoints(bendpoints);
 		ViewUtil.insertChildView(containerView, edge, index, persisted);
-		edge.setType(UrmlVisualIDRegistry.getType(GoalReference2EditPart.VISUAL_ID));
+		edge.setType(UrmlVisualIDRegistry
+				.getType(GoalReference2EditPart.VISUAL_ID));
 		edge.setElement(domainElement);
 		// initializePreferences
-		final IPreferenceStore prefStore = (IPreferenceStore) preferencesHint.getPreferenceStore();
+		final IPreferenceStore prefStore = (IPreferenceStore) preferencesHint
+				.getPreferenceStore();
 
-		org.eclipse.swt.graphics.RGB lineRGB = PreferenceConverter.getColor(prefStore,
-			IPreferenceConstants.PREF_LINE_COLOR);
-		ViewUtil.setStructuralFeatureValue(edge, NotationPackage.eINSTANCE.getLineStyle_LineColor(), FigureUtilities
-			.RGBToInteger(lineRGB));
-		FontStyle edgeFontStyle = (FontStyle) edge.getStyle(NotationPackage.Literals.FONT_STYLE);
+		org.eclipse.swt.graphics.RGB lineRGB = PreferenceConverter.getColor(
+				prefStore, IPreferenceConstants.PREF_LINE_COLOR);
+		ViewUtil.setStructuralFeatureValue(edge,
+				NotationPackage.eINSTANCE.getLineStyle_LineColor(),
+				FigureUtilities.RGBToInteger(lineRGB));
+		FontStyle edgeFontStyle = (FontStyle) edge
+				.getStyle(NotationPackage.Literals.FONT_STYLE);
 		if (edgeFontStyle != null) {
-			FontData fontData = PreferenceConverter.getFontData(prefStore, IPreferenceConstants.PREF_DEFAULT_FONT);
+			FontData fontData = PreferenceConverter.getFontData(prefStore,
+					IPreferenceConstants.PREF_DEFAULT_FONT);
 			edgeFontStyle.setFontName(fontData.getName());
 			edgeFontStyle.setFontHeight(fontData.getHeight());
 			edgeFontStyle.setBold((fontData.getStyle() & SWT.BOLD) != 0);
 			edgeFontStyle.setItalic((fontData.getStyle() & SWT.ITALIC) != 0);
-			org.eclipse.swt.graphics.RGB fontRGB = PreferenceConverter.getColor(prefStore,
-				IPreferenceConstants.PREF_FONT_COLOR);
-			edgeFontStyle.setFontColor(FigureUtilities.RGBToInteger(fontRGB).intValue());
+			org.eclipse.swt.graphics.RGB fontRGB = PreferenceConverter
+					.getColor(prefStore, IPreferenceConstants.PREF_FONT_COLOR);
+			edgeFontStyle.setFontColor(FigureUtilities.RGBToInteger(fontRGB)
+					.intValue());
 		}
-		Routing routing = Routing.get(prefStore.getInt(IPreferenceConstants.PREF_LINE_STYLE));
+		Routing routing = Routing.get(prefStore
+				.getInt(IPreferenceConstants.PREF_LINE_STYLE));
 		if (routing != null) {
-			ViewUtil.setStructuralFeatureValue(edge, NotationPackage.eINSTANCE.getRoutingStyle_Routing(), routing);
+			ViewUtil.setStructuralFeatureValue(edge,
+					NotationPackage.eINSTANCE.getRoutingStyle_Routing(),
+					routing);
 		}
-		Node label6019 = createLabel(edge, UrmlVisualIDRegistry.getType(GoalReferenceWeightEditPart.VISUAL_ID));
-		label6019.setLayoutConstraint(NotationFactory.eINSTANCE.createLocation());
-		Node label6023 = createLabel(edge, UrmlVisualIDRegistry.getType(InfluencesLabel2EditPart.VISUAL_ID));
-		label6023.setLayoutConstraint(NotationFactory.eINSTANCE.createLocation());
+		Node label6019 = createLabel(edge,
+				UrmlVisualIDRegistry
+						.getType(GoalReferenceWeightEditPart.VISUAL_ID));
+		label6019.setLayoutConstraint(NotationFactory.eINSTANCE
+				.createLocation());
+		Node label6023 = createLabel(edge,
+				UrmlVisualIDRegistry
+						.getType(InfluencesLabel2EditPart.VISUAL_ID));
+		label6023.setLayoutConstraint(NotationFactory.eINSTANCE
+				.createLocation());
 		Location location6023 = (Location) label6023.getLayoutConstraint();
 		location6023.setX(0);
 		location6023.setY(20);
@@ -1285,45 +1592,63 @@
 	/**
 	 * @generated
 	 */
-	public Edge createGoalReference_4024(EObject domainElement, View containerView, int index, boolean persisted,
-		PreferencesHint preferencesHint) {
+	public Edge createGoalReference_4024(EObject domainElement,
+			View containerView, int index, boolean persisted,
+			PreferencesHint preferencesHint) {
 		Connector edge = NotationFactory.eINSTANCE.createConnector();
 		edge.getStyles().add(NotationFactory.eINSTANCE.createFontStyle());
-		RelativeBendpoints bendpoints = NotationFactory.eINSTANCE.createRelativeBendpoints();
-		ArrayList points = new ArrayList(2);
+		RelativeBendpoints bendpoints = NotationFactory.eINSTANCE
+				.createRelativeBendpoints();
+		ArrayList<RelativeBendpoint> points = new ArrayList<RelativeBendpoint>(
+				2);
 		points.add(new RelativeBendpoint());
 		points.add(new RelativeBendpoint());
 		bendpoints.setPoints(points);
 		edge.setBendpoints(bendpoints);
 		ViewUtil.insertChildView(containerView, edge, index, persisted);
-		edge.setType(UrmlVisualIDRegistry.getType(GoalReference3EditPart.VISUAL_ID));
+		edge.setType(UrmlVisualIDRegistry
+				.getType(GoalReference3EditPart.VISUAL_ID));
 		edge.setElement(domainElement);
 		// initializePreferences
-		final IPreferenceStore prefStore = (IPreferenceStore) preferencesHint.getPreferenceStore();
+		final IPreferenceStore prefStore = (IPreferenceStore) preferencesHint
+				.getPreferenceStore();
 
-		org.eclipse.swt.graphics.RGB lineRGB = PreferenceConverter.getColor(prefStore,
-			IPreferenceConstants.PREF_LINE_COLOR);
-		ViewUtil.setStructuralFeatureValue(edge, NotationPackage.eINSTANCE.getLineStyle_LineColor(), FigureUtilities
-			.RGBToInteger(lineRGB));
-		FontStyle edgeFontStyle = (FontStyle) edge.getStyle(NotationPackage.Literals.FONT_STYLE);
+		org.eclipse.swt.graphics.RGB lineRGB = PreferenceConverter.getColor(
+				prefStore, IPreferenceConstants.PREF_LINE_COLOR);
+		ViewUtil.setStructuralFeatureValue(edge,
+				NotationPackage.eINSTANCE.getLineStyle_LineColor(),
+				FigureUtilities.RGBToInteger(lineRGB));
+		FontStyle edgeFontStyle = (FontStyle) edge
+				.getStyle(NotationPackage.Literals.FONT_STYLE);
 		if (edgeFontStyle != null) {
-			FontData fontData = PreferenceConverter.getFontData(prefStore, IPreferenceConstants.PREF_DEFAULT_FONT);
+			FontData fontData = PreferenceConverter.getFontData(prefStore,
+					IPreferenceConstants.PREF_DEFAULT_FONT);
 			edgeFontStyle.setFontName(fontData.getName());
 			edgeFontStyle.setFontHeight(fontData.getHeight());
 			edgeFontStyle.setBold((fontData.getStyle() & SWT.BOLD) != 0);
 			edgeFontStyle.setItalic((fontData.getStyle() & SWT.ITALIC) != 0);
-			org.eclipse.swt.graphics.RGB fontRGB = PreferenceConverter.getColor(prefStore,
-				IPreferenceConstants.PREF_FONT_COLOR);
-			edgeFontStyle.setFontColor(FigureUtilities.RGBToInteger(fontRGB).intValue());
+			org.eclipse.swt.graphics.RGB fontRGB = PreferenceConverter
+					.getColor(prefStore, IPreferenceConstants.PREF_FONT_COLOR);
+			edgeFontStyle.setFontColor(FigureUtilities.RGBToInteger(fontRGB)
+					.intValue());
 		}
-		Routing routing = Routing.get(prefStore.getInt(IPreferenceConstants.PREF_LINE_STYLE));
+		Routing routing = Routing.get(prefStore
+				.getInt(IPreferenceConstants.PREF_LINE_STYLE));
 		if (routing != null) {
-			ViewUtil.setStructuralFeatureValue(edge, NotationPackage.eINSTANCE.getRoutingStyle_Routing(), routing);
+			ViewUtil.setStructuralFeatureValue(edge,
+					NotationPackage.eINSTANCE.getRoutingStyle_Routing(),
+					routing);
 		}
-		Node label6020 = createLabel(edge, UrmlVisualIDRegistry.getType(GoalReferenceWeight2EditPart.VISUAL_ID));
-		label6020.setLayoutConstraint(NotationFactory.eINSTANCE.createLocation());
-		Node label6024 = createLabel(edge, UrmlVisualIDRegistry.getType(InfluencesLabel3EditPart.VISUAL_ID));
-		label6024.setLayoutConstraint(NotationFactory.eINSTANCE.createLocation());
+		Node label6020 = createLabel(edge,
+				UrmlVisualIDRegistry
+						.getType(GoalReferenceWeight2EditPart.VISUAL_ID));
+		label6020.setLayoutConstraint(NotationFactory.eINSTANCE
+				.createLocation());
+		Node label6024 = createLabel(edge,
+				UrmlVisualIDRegistry
+						.getType(InfluencesLabel3EditPart.VISUAL_ID));
+		label6024.setLayoutConstraint(NotationFactory.eINSTANCE
+				.createLocation());
 		Location location6024 = (Location) label6024.getLayoutConstraint();
 		location6024.setX(0);
 		location6024.setY(20);
@@ -1333,45 +1658,63 @@
 	/**
 	 * @generated
 	 */
-	public Edge createGoalReference_4025(EObject domainElement, View containerView, int index, boolean persisted,
-		PreferencesHint preferencesHint) {
+	public Edge createGoalReference_4025(EObject domainElement,
+			View containerView, int index, boolean persisted,
+			PreferencesHint preferencesHint) {
 		Connector edge = NotationFactory.eINSTANCE.createConnector();
 		edge.getStyles().add(NotationFactory.eINSTANCE.createFontStyle());
-		RelativeBendpoints bendpoints = NotationFactory.eINSTANCE.createRelativeBendpoints();
-		ArrayList points = new ArrayList(2);
+		RelativeBendpoints bendpoints = NotationFactory.eINSTANCE
+				.createRelativeBendpoints();
+		ArrayList<RelativeBendpoint> points = new ArrayList<RelativeBendpoint>(
+				2);
 		points.add(new RelativeBendpoint());
 		points.add(new RelativeBendpoint());
 		bendpoints.setPoints(points);
 		edge.setBendpoints(bendpoints);
 		ViewUtil.insertChildView(containerView, edge, index, persisted);
-		edge.setType(UrmlVisualIDRegistry.getType(GoalReference4EditPart.VISUAL_ID));
+		edge.setType(UrmlVisualIDRegistry
+				.getType(GoalReference4EditPart.VISUAL_ID));
 		edge.setElement(domainElement);
 		// initializePreferences
-		final IPreferenceStore prefStore = (IPreferenceStore) preferencesHint.getPreferenceStore();
+		final IPreferenceStore prefStore = (IPreferenceStore) preferencesHint
+				.getPreferenceStore();
 
-		org.eclipse.swt.graphics.RGB lineRGB = PreferenceConverter.getColor(prefStore,
-			IPreferenceConstants.PREF_LINE_COLOR);
-		ViewUtil.setStructuralFeatureValue(edge, NotationPackage.eINSTANCE.getLineStyle_LineColor(), FigureUtilities
-			.RGBToInteger(lineRGB));
-		FontStyle edgeFontStyle = (FontStyle) edge.getStyle(NotationPackage.Literals.FONT_STYLE);
+		org.eclipse.swt.graphics.RGB lineRGB = PreferenceConverter.getColor(
+				prefStore, IPreferenceConstants.PREF_LINE_COLOR);
+		ViewUtil.setStructuralFeatureValue(edge,
+				NotationPackage.eINSTANCE.getLineStyle_LineColor(),
+				FigureUtilities.RGBToInteger(lineRGB));
+		FontStyle edgeFontStyle = (FontStyle) edge
+				.getStyle(NotationPackage.Literals.FONT_STYLE);
 		if (edgeFontStyle != null) {
-			FontData fontData = PreferenceConverter.getFontData(prefStore, IPreferenceConstants.PREF_DEFAULT_FONT);
+			FontData fontData = PreferenceConverter.getFontData(prefStore,
+					IPreferenceConstants.PREF_DEFAULT_FONT);
 			edgeFontStyle.setFontName(fontData.getName());
 			edgeFontStyle.setFontHeight(fontData.getHeight());
 			edgeFontStyle.setBold((fontData.getStyle() & SWT.BOLD) != 0);
 			edgeFontStyle.setItalic((fontData.getStyle() & SWT.ITALIC) != 0);
-			org.eclipse.swt.graphics.RGB fontRGB = PreferenceConverter.getColor(prefStore,
-				IPreferenceConstants.PREF_FONT_COLOR);
-			edgeFontStyle.setFontColor(FigureUtilities.RGBToInteger(fontRGB).intValue());
+			org.eclipse.swt.graphics.RGB fontRGB = PreferenceConverter
+					.getColor(prefStore, IPreferenceConstants.PREF_FONT_COLOR);
+			edgeFontStyle.setFontColor(FigureUtilities.RGBToInteger(fontRGB)
+					.intValue());
 		}
-		Routing routing = Routing.get(prefStore.getInt(IPreferenceConstants.PREF_LINE_STYLE));
+		Routing routing = Routing.get(prefStore
+				.getInt(IPreferenceConstants.PREF_LINE_STYLE));
 		if (routing != null) {
-			ViewUtil.setStructuralFeatureValue(edge, NotationPackage.eINSTANCE.getRoutingStyle_Routing(), routing);
+			ViewUtil.setStructuralFeatureValue(edge,
+					NotationPackage.eINSTANCE.getRoutingStyle_Routing(),
+					routing);
 		}
-		Node label6021 = createLabel(edge, UrmlVisualIDRegistry.getType(GoalReferenceWeight3EditPart.VISUAL_ID));
-		label6021.setLayoutConstraint(NotationFactory.eINSTANCE.createLocation());
-		Node label6025 = createLabel(edge, UrmlVisualIDRegistry.getType(InfluencesLabel4EditPart.VISUAL_ID));
-		label6025.setLayoutConstraint(NotationFactory.eINSTANCE.createLocation());
+		Node label6021 = createLabel(edge,
+				UrmlVisualIDRegistry
+						.getType(GoalReferenceWeight3EditPart.VISUAL_ID));
+		label6021.setLayoutConstraint(NotationFactory.eINSTANCE
+				.createLocation());
+		Node label6025 = createLabel(edge,
+				UrmlVisualIDRegistry
+						.getType(InfluencesLabel4EditPart.VISUAL_ID));
+		label6025.setLayoutConstraint(NotationFactory.eINSTANCE
+				.createLocation());
 		Location location6025 = (Location) label6025.getLayoutConstraint();
 		location6025.setX(0);
 		location6025.setY(20);
@@ -1381,43 +1724,57 @@
 	/**
 	 * @generated
 	 */
-	public Edge createRequirementImplementingServices_4005(View containerView, int index, boolean persisted,
-		PreferencesHint preferencesHint) {
+	public Edge createRequirementImplementingServices_4005(View containerView,
+			int index, boolean persisted, PreferencesHint preferencesHint) {
 		Connector edge = NotationFactory.eINSTANCE.createConnector();
 		edge.getStyles().add(NotationFactory.eINSTANCE.createFontStyle());
-		RelativeBendpoints bendpoints = NotationFactory.eINSTANCE.createRelativeBendpoints();
-		ArrayList points = new ArrayList(2);
+		RelativeBendpoints bendpoints = NotationFactory.eINSTANCE
+				.createRelativeBendpoints();
+		ArrayList<RelativeBendpoint> points = new ArrayList<RelativeBendpoint>(
+				2);
 		points.add(new RelativeBendpoint());
 		points.add(new RelativeBendpoint());
 		bendpoints.setPoints(points);
 		edge.setBendpoints(bendpoints);
 		ViewUtil.insertChildView(containerView, edge, index, persisted);
-		edge.setType(UrmlVisualIDRegistry.getType(RequirementImplementingServicesEditPart.VISUAL_ID));
+		edge.setType(UrmlVisualIDRegistry
+				.getType(RequirementImplementingServicesEditPart.VISUAL_ID));
 		edge.setElement(null);
 		// initializePreferences
-		final IPreferenceStore prefStore = (IPreferenceStore) preferencesHint.getPreferenceStore();
+		final IPreferenceStore prefStore = (IPreferenceStore) preferencesHint
+				.getPreferenceStore();
 
-		org.eclipse.swt.graphics.RGB lineRGB = PreferenceConverter.getColor(prefStore,
-			IPreferenceConstants.PREF_LINE_COLOR);
-		ViewUtil.setStructuralFeatureValue(edge, NotationPackage.eINSTANCE.getLineStyle_LineColor(), FigureUtilities
-			.RGBToInteger(lineRGB));
-		FontStyle edgeFontStyle = (FontStyle) edge.getStyle(NotationPackage.Literals.FONT_STYLE);
+		org.eclipse.swt.graphics.RGB lineRGB = PreferenceConverter.getColor(
+				prefStore, IPreferenceConstants.PREF_LINE_COLOR);
+		ViewUtil.setStructuralFeatureValue(edge,
+				NotationPackage.eINSTANCE.getLineStyle_LineColor(),
+				FigureUtilities.RGBToInteger(lineRGB));
+		FontStyle edgeFontStyle = (FontStyle) edge
+				.getStyle(NotationPackage.Literals.FONT_STYLE);
 		if (edgeFontStyle != null) {
-			FontData fontData = PreferenceConverter.getFontData(prefStore, IPreferenceConstants.PREF_DEFAULT_FONT);
+			FontData fontData = PreferenceConverter.getFontData(prefStore,
+					IPreferenceConstants.PREF_DEFAULT_FONT);
 			edgeFontStyle.setFontName(fontData.getName());
 			edgeFontStyle.setFontHeight(fontData.getHeight());
 			edgeFontStyle.setBold((fontData.getStyle() & SWT.BOLD) != 0);
 			edgeFontStyle.setItalic((fontData.getStyle() & SWT.ITALIC) != 0);
-			org.eclipse.swt.graphics.RGB fontRGB = PreferenceConverter.getColor(prefStore,
-				IPreferenceConstants.PREF_FONT_COLOR);
-			edgeFontStyle.setFontColor(FigureUtilities.RGBToInteger(fontRGB).intValue());
+			org.eclipse.swt.graphics.RGB fontRGB = PreferenceConverter
+					.getColor(prefStore, IPreferenceConstants.PREF_FONT_COLOR);
+			edgeFontStyle.setFontColor(FigureUtilities.RGBToInteger(fontRGB)
+					.intValue());
 		}
-		Routing routing = Routing.get(prefStore.getInt(IPreferenceConstants.PREF_LINE_STYLE));
+		Routing routing = Routing.get(prefStore
+				.getInt(IPreferenceConstants.PREF_LINE_STYLE));
 		if (routing != null) {
-			ViewUtil.setStructuralFeatureValue(edge, NotationPackage.eINSTANCE.getRoutingStyle_Routing(), routing);
+			ViewUtil.setStructuralFeatureValue(edge,
+					NotationPackage.eINSTANCE.getRoutingStyle_Routing(),
+					routing);
 		}
-		Node label6007 = createLabel(edge, UrmlVisualIDRegistry.getType(IsImplementedLabelEditPart.VISUAL_ID));
-		label6007.setLayoutConstraint(NotationFactory.eINSTANCE.createLocation());
+		Node label6007 = createLabel(edge,
+				UrmlVisualIDRegistry
+						.getType(IsImplementedLabelEditPart.VISUAL_ID));
+		label6007.setLayoutConstraint(NotationFactory.eINSTANCE
+				.createLocation());
 		Location location6007 = (Location) label6007.getLayoutConstraint();
 		location6007.setX(0);
 		location6007.setY(20);
@@ -1427,44 +1784,57 @@
 	/**
 	 * @generated
 	 */
-	public Edge createNonFunctionalRequirementSubNonFunctionalRequirements_4043(View containerView, int index,
-		boolean persisted, PreferencesHint preferencesHint) {
+	public Edge createNonFunctionalRequirementSubNonFunctionalRequirements_4043(
+			View containerView, int index, boolean persisted,
+			PreferencesHint preferencesHint) {
 		Connector edge = NotationFactory.eINSTANCE.createConnector();
 		edge.getStyles().add(NotationFactory.eINSTANCE.createFontStyle());
-		RelativeBendpoints bendpoints = NotationFactory.eINSTANCE.createRelativeBendpoints();
-		ArrayList points = new ArrayList(2);
+		RelativeBendpoints bendpoints = NotationFactory.eINSTANCE
+				.createRelativeBendpoints();
+		ArrayList<RelativeBendpoint> points = new ArrayList<RelativeBendpoint>(
+				2);
 		points.add(new RelativeBendpoint());
 		points.add(new RelativeBendpoint());
 		bendpoints.setPoints(points);
 		edge.setBendpoints(bendpoints);
 		ViewUtil.insertChildView(containerView, edge, index, persisted);
 		edge.setType(UrmlVisualIDRegistry
-			.getType(NonFunctionalRequirementSubNonFunctionalRequirementsEditPart.VISUAL_ID));
+				.getType(NonFunctionalRequirementSubNonFunctionalRequirementsEditPart.VISUAL_ID));
 		edge.setElement(null);
 		// initializePreferences
-		final IPreferenceStore prefStore = (IPreferenceStore) preferencesHint.getPreferenceStore();
+		final IPreferenceStore prefStore = (IPreferenceStore) preferencesHint
+				.getPreferenceStore();
 
-		org.eclipse.swt.graphics.RGB lineRGB = PreferenceConverter.getColor(prefStore,
-			IPreferenceConstants.PREF_LINE_COLOR);
-		ViewUtil.setStructuralFeatureValue(edge, NotationPackage.eINSTANCE.getLineStyle_LineColor(), FigureUtilities
-			.RGBToInteger(lineRGB));
-		FontStyle edgeFontStyle = (FontStyle) edge.getStyle(NotationPackage.Literals.FONT_STYLE);
+		org.eclipse.swt.graphics.RGB lineRGB = PreferenceConverter.getColor(
+				prefStore, IPreferenceConstants.PREF_LINE_COLOR);
+		ViewUtil.setStructuralFeatureValue(edge,
+				NotationPackage.eINSTANCE.getLineStyle_LineColor(),
+				FigureUtilities.RGBToInteger(lineRGB));
+		FontStyle edgeFontStyle = (FontStyle) edge
+				.getStyle(NotationPackage.Literals.FONT_STYLE);
 		if (edgeFontStyle != null) {
-			FontData fontData = PreferenceConverter.getFontData(prefStore, IPreferenceConstants.PREF_DEFAULT_FONT);
+			FontData fontData = PreferenceConverter.getFontData(prefStore,
+					IPreferenceConstants.PREF_DEFAULT_FONT);
 			edgeFontStyle.setFontName(fontData.getName());
 			edgeFontStyle.setFontHeight(fontData.getHeight());
 			edgeFontStyle.setBold((fontData.getStyle() & SWT.BOLD) != 0);
 			edgeFontStyle.setItalic((fontData.getStyle() & SWT.ITALIC) != 0);
-			org.eclipse.swt.graphics.RGB fontRGB = PreferenceConverter.getColor(prefStore,
-				IPreferenceConstants.PREF_FONT_COLOR);
-			edgeFontStyle.setFontColor(FigureUtilities.RGBToInteger(fontRGB).intValue());
+			org.eclipse.swt.graphics.RGB fontRGB = PreferenceConverter
+					.getColor(prefStore, IPreferenceConstants.PREF_FONT_COLOR);
+			edgeFontStyle.setFontColor(FigureUtilities.RGBToInteger(fontRGB)
+					.intValue());
 		}
-		Routing routing = Routing.get(prefStore.getInt(IPreferenceConstants.PREF_LINE_STYLE));
+		Routing routing = Routing.get(prefStore
+				.getInt(IPreferenceConstants.PREF_LINE_STYLE));
 		if (routing != null) {
-			ViewUtil.setStructuralFeatureValue(edge, NotationPackage.eINSTANCE.getRoutingStyle_Routing(), routing);
+			ViewUtil.setStructuralFeatureValue(edge,
+					NotationPackage.eINSTANCE.getRoutingStyle_Routing(),
+					routing);
 		}
-		Node label6043 = createLabel(edge, UrmlVisualIDRegistry.getType(IsRefinedLabel3EditPart.VISUAL_ID));
-		label6043.setLayoutConstraint(NotationFactory.eINSTANCE.createLocation());
+		Node label6043 = createLabel(edge,
+				UrmlVisualIDRegistry.getType(IsRefinedLabel3EditPart.VISUAL_ID));
+		label6043.setLayoutConstraint(NotationFactory.eINSTANCE
+				.createLocation());
 		Location location6043 = (Location) label6043.getLayoutConstraint();
 		location6043.setX(0);
 		location6043.setY(20);
@@ -1474,43 +1844,57 @@
 	/**
 	 * @generated
 	 */
-	public Edge createFunctionalRequirementSubFunctionalRequirements_4044(View containerView, int index,
-		boolean persisted, PreferencesHint preferencesHint) {
+	public Edge createFunctionalRequirementSubFunctionalRequirements_4044(
+			View containerView, int index, boolean persisted,
+			PreferencesHint preferencesHint) {
 		Connector edge = NotationFactory.eINSTANCE.createConnector();
 		edge.getStyles().add(NotationFactory.eINSTANCE.createFontStyle());
-		RelativeBendpoints bendpoints = NotationFactory.eINSTANCE.createRelativeBendpoints();
-		ArrayList points = new ArrayList(2);
+		RelativeBendpoints bendpoints = NotationFactory.eINSTANCE
+				.createRelativeBendpoints();
+		ArrayList<RelativeBendpoint> points = new ArrayList<RelativeBendpoint>(
+				2);
 		points.add(new RelativeBendpoint());
 		points.add(new RelativeBendpoint());
 		bendpoints.setPoints(points);
 		edge.setBendpoints(bendpoints);
 		ViewUtil.insertChildView(containerView, edge, index, persisted);
-		edge.setType(UrmlVisualIDRegistry.getType(FunctionalRequirementSubFunctionalRequirementsEditPart.VISUAL_ID));
+		edge.setType(UrmlVisualIDRegistry
+				.getType(FunctionalRequirementSubFunctionalRequirementsEditPart.VISUAL_ID));
 		edge.setElement(null);
 		// initializePreferences
-		final IPreferenceStore prefStore = (IPreferenceStore) preferencesHint.getPreferenceStore();
+		final IPreferenceStore prefStore = (IPreferenceStore) preferencesHint
+				.getPreferenceStore();
 
-		org.eclipse.swt.graphics.RGB lineRGB = PreferenceConverter.getColor(prefStore,
-			IPreferenceConstants.PREF_LINE_COLOR);
-		ViewUtil.setStructuralFeatureValue(edge, NotationPackage.eINSTANCE.getLineStyle_LineColor(), FigureUtilities
-			.RGBToInteger(lineRGB));
-		FontStyle edgeFontStyle = (FontStyle) edge.getStyle(NotationPackage.Literals.FONT_STYLE);
+		org.eclipse.swt.graphics.RGB lineRGB = PreferenceConverter.getColor(
+				prefStore, IPreferenceConstants.PREF_LINE_COLOR);
+		ViewUtil.setStructuralFeatureValue(edge,
+				NotationPackage.eINSTANCE.getLineStyle_LineColor(),
+				FigureUtilities.RGBToInteger(lineRGB));
+		FontStyle edgeFontStyle = (FontStyle) edge
+				.getStyle(NotationPackage.Literals.FONT_STYLE);
 		if (edgeFontStyle != null) {
-			FontData fontData = PreferenceConverter.getFontData(prefStore, IPreferenceConstants.PREF_DEFAULT_FONT);
+			FontData fontData = PreferenceConverter.getFontData(prefStore,
+					IPreferenceConstants.PREF_DEFAULT_FONT);
 			edgeFontStyle.setFontName(fontData.getName());
 			edgeFontStyle.setFontHeight(fontData.getHeight());
 			edgeFontStyle.setBold((fontData.getStyle() & SWT.BOLD) != 0);
 			edgeFontStyle.setItalic((fontData.getStyle() & SWT.ITALIC) != 0);
-			org.eclipse.swt.graphics.RGB fontRGB = PreferenceConverter.getColor(prefStore,
-				IPreferenceConstants.PREF_FONT_COLOR);
-			edgeFontStyle.setFontColor(FigureUtilities.RGBToInteger(fontRGB).intValue());
+			org.eclipse.swt.graphics.RGB fontRGB = PreferenceConverter
+					.getColor(prefStore, IPreferenceConstants.PREF_FONT_COLOR);
+			edgeFontStyle.setFontColor(FigureUtilities.RGBToInteger(fontRGB)
+					.intValue());
 		}
-		Routing routing = Routing.get(prefStore.getInt(IPreferenceConstants.PREF_LINE_STYLE));
+		Routing routing = Routing.get(prefStore
+				.getInt(IPreferenceConstants.PREF_LINE_STYLE));
 		if (routing != null) {
-			ViewUtil.setStructuralFeatureValue(edge, NotationPackage.eINSTANCE.getRoutingStyle_Routing(), routing);
+			ViewUtil.setStructuralFeatureValue(edge,
+					NotationPackage.eINSTANCE.getRoutingStyle_Routing(),
+					routing);
 		}
-		Node label6044 = createLabel(edge, UrmlVisualIDRegistry.getType(IsRefinedLabel4EditPart.VISUAL_ID));
-		label6044.setLayoutConstraint(NotationFactory.eINSTANCE.createLocation());
+		Node label6044 = createLabel(edge,
+				UrmlVisualIDRegistry.getType(IsRefinedLabel4EditPart.VISUAL_ID));
+		label6044.setLayoutConstraint(NotationFactory.eINSTANCE
+				.createLocation());
 		Location location6044 = (Location) label6044.getLayoutConstraint();
 		location6044.setX(0);
 		location6044.setY(20);
@@ -1520,43 +1904,56 @@
 	/**
 	 * @generated
 	 */
-	public Edge createMitigationMitigatedDangers_4012(View containerView, int index, boolean persisted,
-		PreferencesHint preferencesHint) {
+	public Edge createMitigationMitigatedDangers_4012(View containerView,
+			int index, boolean persisted, PreferencesHint preferencesHint) {
 		Connector edge = NotationFactory.eINSTANCE.createConnector();
 		edge.getStyles().add(NotationFactory.eINSTANCE.createFontStyle());
-		RelativeBendpoints bendpoints = NotationFactory.eINSTANCE.createRelativeBendpoints();
-		ArrayList points = new ArrayList(2);
+		RelativeBendpoints bendpoints = NotationFactory.eINSTANCE
+				.createRelativeBendpoints();
+		ArrayList<RelativeBendpoint> points = new ArrayList<RelativeBendpoint>(
+				2);
 		points.add(new RelativeBendpoint());
 		points.add(new RelativeBendpoint());
 		bendpoints.setPoints(points);
 		edge.setBendpoints(bendpoints);
 		ViewUtil.insertChildView(containerView, edge, index, persisted);
-		edge.setType(UrmlVisualIDRegistry.getType(MitigationMitigatedDangersEditPart.VISUAL_ID));
+		edge.setType(UrmlVisualIDRegistry
+				.getType(MitigationMitigatedDangersEditPart.VISUAL_ID));
 		edge.setElement(null);
 		// initializePreferences
-		final IPreferenceStore prefStore = (IPreferenceStore) preferencesHint.getPreferenceStore();
+		final IPreferenceStore prefStore = (IPreferenceStore) preferencesHint
+				.getPreferenceStore();
 
-		org.eclipse.swt.graphics.RGB lineRGB = PreferenceConverter.getColor(prefStore,
-			IPreferenceConstants.PREF_LINE_COLOR);
-		ViewUtil.setStructuralFeatureValue(edge, NotationPackage.eINSTANCE.getLineStyle_LineColor(), FigureUtilities
-			.RGBToInteger(lineRGB));
-		FontStyle edgeFontStyle = (FontStyle) edge.getStyle(NotationPackage.Literals.FONT_STYLE);
+		org.eclipse.swt.graphics.RGB lineRGB = PreferenceConverter.getColor(
+				prefStore, IPreferenceConstants.PREF_LINE_COLOR);
+		ViewUtil.setStructuralFeatureValue(edge,
+				NotationPackage.eINSTANCE.getLineStyle_LineColor(),
+				FigureUtilities.RGBToInteger(lineRGB));
+		FontStyle edgeFontStyle = (FontStyle) edge
+				.getStyle(NotationPackage.Literals.FONT_STYLE);
 		if (edgeFontStyle != null) {
-			FontData fontData = PreferenceConverter.getFontData(prefStore, IPreferenceConstants.PREF_DEFAULT_FONT);
+			FontData fontData = PreferenceConverter.getFontData(prefStore,
+					IPreferenceConstants.PREF_DEFAULT_FONT);
 			edgeFontStyle.setFontName(fontData.getName());
 			edgeFontStyle.setFontHeight(fontData.getHeight());
 			edgeFontStyle.setBold((fontData.getStyle() & SWT.BOLD) != 0);
 			edgeFontStyle.setItalic((fontData.getStyle() & SWT.ITALIC) != 0);
-			org.eclipse.swt.graphics.RGB fontRGB = PreferenceConverter.getColor(prefStore,
-				IPreferenceConstants.PREF_FONT_COLOR);
-			edgeFontStyle.setFontColor(FigureUtilities.RGBToInteger(fontRGB).intValue());
+			org.eclipse.swt.graphics.RGB fontRGB = PreferenceConverter
+					.getColor(prefStore, IPreferenceConstants.PREF_FONT_COLOR);
+			edgeFontStyle.setFontColor(FigureUtilities.RGBToInteger(fontRGB)
+					.intValue());
 		}
-		Routing routing = Routing.get(prefStore.getInt(IPreferenceConstants.PREF_LINE_STYLE));
+		Routing routing = Routing.get(prefStore
+				.getInt(IPreferenceConstants.PREF_LINE_STYLE));
 		if (routing != null) {
-			ViewUtil.setStructuralFeatureValue(edge, NotationPackage.eINSTANCE.getRoutingStyle_Routing(), routing);
+			ViewUtil.setStructuralFeatureValue(edge,
+					NotationPackage.eINSTANCE.getRoutingStyle_Routing(),
+					routing);
 		}
-		Node label6009 = createLabel(edge, UrmlVisualIDRegistry.getType(MitigatesLabelEditPart.VISUAL_ID));
-		label6009.setLayoutConstraint(NotationFactory.eINSTANCE.createLocation());
+		Node label6009 = createLabel(edge,
+				UrmlVisualIDRegistry.getType(MitigatesLabelEditPart.VISUAL_ID));
+		label6009.setLayoutConstraint(NotationFactory.eINSTANCE
+				.createLocation());
 		Location location6009 = (Location) label6009.getLayoutConstraint();
 		location6009.setX(0);
 		location6009.setY(20);
@@ -1566,43 +1963,56 @@
 	/**
 	 * @generated
 	 */
-	public Edge createDangerHarmedAssets_4013(View containerView, int index, boolean persisted,
-		PreferencesHint preferencesHint) {
+	public Edge createDangerHarmedAssets_4013(View containerView, int index,
+			boolean persisted, PreferencesHint preferencesHint) {
 		Connector edge = NotationFactory.eINSTANCE.createConnector();
 		edge.getStyles().add(NotationFactory.eINSTANCE.createFontStyle());
-		RelativeBendpoints bendpoints = NotationFactory.eINSTANCE.createRelativeBendpoints();
-		ArrayList points = new ArrayList(2);
+		RelativeBendpoints bendpoints = NotationFactory.eINSTANCE
+				.createRelativeBendpoints();
+		ArrayList<RelativeBendpoint> points = new ArrayList<RelativeBendpoint>(
+				2);
 		points.add(new RelativeBendpoint());
 		points.add(new RelativeBendpoint());
 		bendpoints.setPoints(points);
 		edge.setBendpoints(bendpoints);
 		ViewUtil.insertChildView(containerView, edge, index, persisted);
-		edge.setType(UrmlVisualIDRegistry.getType(DangerHarmedAssetsEditPart.VISUAL_ID));
+		edge.setType(UrmlVisualIDRegistry
+				.getType(DangerHarmedAssetsEditPart.VISUAL_ID));
 		edge.setElement(null);
 		// initializePreferences
-		final IPreferenceStore prefStore = (IPreferenceStore) preferencesHint.getPreferenceStore();
+		final IPreferenceStore prefStore = (IPreferenceStore) preferencesHint
+				.getPreferenceStore();
 
-		org.eclipse.swt.graphics.RGB lineRGB = PreferenceConverter.getColor(prefStore,
-			IPreferenceConstants.PREF_LINE_COLOR);
-		ViewUtil.setStructuralFeatureValue(edge, NotationPackage.eINSTANCE.getLineStyle_LineColor(), FigureUtilities
-			.RGBToInteger(lineRGB));
-		FontStyle edgeFontStyle = (FontStyle) edge.getStyle(NotationPackage.Literals.FONT_STYLE);
+		org.eclipse.swt.graphics.RGB lineRGB = PreferenceConverter.getColor(
+				prefStore, IPreferenceConstants.PREF_LINE_COLOR);
+		ViewUtil.setStructuralFeatureValue(edge,
+				NotationPackage.eINSTANCE.getLineStyle_LineColor(),
+				FigureUtilities.RGBToInteger(lineRGB));
+		FontStyle edgeFontStyle = (FontStyle) edge
+				.getStyle(NotationPackage.Literals.FONT_STYLE);
 		if (edgeFontStyle != null) {
-			FontData fontData = PreferenceConverter.getFontData(prefStore, IPreferenceConstants.PREF_DEFAULT_FONT);
+			FontData fontData = PreferenceConverter.getFontData(prefStore,
+					IPreferenceConstants.PREF_DEFAULT_FONT);
 			edgeFontStyle.setFontName(fontData.getName());
 			edgeFontStyle.setFontHeight(fontData.getHeight());
 			edgeFontStyle.setBold((fontData.getStyle() & SWT.BOLD) != 0);
 			edgeFontStyle.setItalic((fontData.getStyle() & SWT.ITALIC) != 0);
-			org.eclipse.swt.graphics.RGB fontRGB = PreferenceConverter.getColor(prefStore,
-				IPreferenceConstants.PREF_FONT_COLOR);
-			edgeFontStyle.setFontColor(FigureUtilities.RGBToInteger(fontRGB).intValue());
+			org.eclipse.swt.graphics.RGB fontRGB = PreferenceConverter
+					.getColor(prefStore, IPreferenceConstants.PREF_FONT_COLOR);
+			edgeFontStyle.setFontColor(FigureUtilities.RGBToInteger(fontRGB)
+					.intValue());
 		}
-		Routing routing = Routing.get(prefStore.getInt(IPreferenceConstants.PREF_LINE_STYLE));
+		Routing routing = Routing.get(prefStore
+				.getInt(IPreferenceConstants.PREF_LINE_STYLE));
 		if (routing != null) {
-			ViewUtil.setStructuralFeatureValue(edge, NotationPackage.eINSTANCE.getRoutingStyle_Routing(), routing);
+			ViewUtil.setStructuralFeatureValue(edge,
+					NotationPackage.eINSTANCE.getRoutingStyle_Routing(),
+					routing);
 		}
-		Node label6010 = createLabel(edge, UrmlVisualIDRegistry.getType(HarmsLabelEditPart.VISUAL_ID));
-		label6010.setLayoutConstraint(NotationFactory.eINSTANCE.createLocation());
+		Node label6010 = createLabel(edge,
+				UrmlVisualIDRegistry.getType(HarmsLabelEditPart.VISUAL_ID));
+		label6010.setLayoutConstraint(NotationFactory.eINSTANCE
+				.createLocation());
 		Location location6010 = (Location) label6010.getLayoutConstraint();
 		location6010.setX(0);
 		location6010.setY(20);
@@ -1612,43 +2022,56 @@
 	/**
 	 * @generated
 	 */
-	public Edge createAssetTriggeredDangers_4017(View containerView, int index, boolean persisted,
-		PreferencesHint preferencesHint) {
+	public Edge createAssetTriggeredDangers_4017(View containerView, int index,
+			boolean persisted, PreferencesHint preferencesHint) {
 		Connector edge = NotationFactory.eINSTANCE.createConnector();
 		edge.getStyles().add(NotationFactory.eINSTANCE.createFontStyle());
-		RelativeBendpoints bendpoints = NotationFactory.eINSTANCE.createRelativeBendpoints();
-		ArrayList points = new ArrayList(2);
+		RelativeBendpoints bendpoints = NotationFactory.eINSTANCE
+				.createRelativeBendpoints();
+		ArrayList<RelativeBendpoint> points = new ArrayList<RelativeBendpoint>(
+				2);
 		points.add(new RelativeBendpoint());
 		points.add(new RelativeBendpoint());
 		bendpoints.setPoints(points);
 		edge.setBendpoints(bendpoints);
 		ViewUtil.insertChildView(containerView, edge, index, persisted);
-		edge.setType(UrmlVisualIDRegistry.getType(AssetTriggeredDangersEditPart.VISUAL_ID));
+		edge.setType(UrmlVisualIDRegistry
+				.getType(AssetTriggeredDangersEditPart.VISUAL_ID));
 		edge.setElement(null);
 		// initializePreferences
-		final IPreferenceStore prefStore = (IPreferenceStore) preferencesHint.getPreferenceStore();
+		final IPreferenceStore prefStore = (IPreferenceStore) preferencesHint
+				.getPreferenceStore();
 
-		org.eclipse.swt.graphics.RGB lineRGB = PreferenceConverter.getColor(prefStore,
-			IPreferenceConstants.PREF_LINE_COLOR);
-		ViewUtil.setStructuralFeatureValue(edge, NotationPackage.eINSTANCE.getLineStyle_LineColor(), FigureUtilities
-			.RGBToInteger(lineRGB));
-		FontStyle edgeFontStyle = (FontStyle) edge.getStyle(NotationPackage.Literals.FONT_STYLE);
+		org.eclipse.swt.graphics.RGB lineRGB = PreferenceConverter.getColor(
+				prefStore, IPreferenceConstants.PREF_LINE_COLOR);
+		ViewUtil.setStructuralFeatureValue(edge,
+				NotationPackage.eINSTANCE.getLineStyle_LineColor(),
+				FigureUtilities.RGBToInteger(lineRGB));
+		FontStyle edgeFontStyle = (FontStyle) edge
+				.getStyle(NotationPackage.Literals.FONT_STYLE);
 		if (edgeFontStyle != null) {
-			FontData fontData = PreferenceConverter.getFontData(prefStore, IPreferenceConstants.PREF_DEFAULT_FONT);
+			FontData fontData = PreferenceConverter.getFontData(prefStore,
+					IPreferenceConstants.PREF_DEFAULT_FONT);
 			edgeFontStyle.setFontName(fontData.getName());
 			edgeFontStyle.setFontHeight(fontData.getHeight());
 			edgeFontStyle.setBold((fontData.getStyle() & SWT.BOLD) != 0);
 			edgeFontStyle.setItalic((fontData.getStyle() & SWT.ITALIC) != 0);
-			org.eclipse.swt.graphics.RGB fontRGB = PreferenceConverter.getColor(prefStore,
-				IPreferenceConstants.PREF_FONT_COLOR);
-			edgeFontStyle.setFontColor(FigureUtilities.RGBToInteger(fontRGB).intValue());
+			org.eclipse.swt.graphics.RGB fontRGB = PreferenceConverter
+					.getColor(prefStore, IPreferenceConstants.PREF_FONT_COLOR);
+			edgeFontStyle.setFontColor(FigureUtilities.RGBToInteger(fontRGB)
+					.intValue());
 		}
-		Routing routing = Routing.get(prefStore.getInt(IPreferenceConstants.PREF_LINE_STYLE));
+		Routing routing = Routing.get(prefStore
+				.getInt(IPreferenceConstants.PREF_LINE_STYLE));
 		if (routing != null) {
-			ViewUtil.setStructuralFeatureValue(edge, NotationPackage.eINSTANCE.getRoutingStyle_Routing(), routing);
+			ViewUtil.setStructuralFeatureValue(edge,
+					NotationPackage.eINSTANCE.getRoutingStyle_Routing(),
+					routing);
 		}
-		Node label6012 = createLabel(edge, UrmlVisualIDRegistry.getType(TriggersLabelEditPart.VISUAL_ID));
-		label6012.setLayoutConstraint(NotationFactory.eINSTANCE.createLocation());
+		Node label6012 = createLabel(edge,
+				UrmlVisualIDRegistry.getType(TriggersLabelEditPart.VISUAL_ID));
+		label6012.setLayoutConstraint(NotationFactory.eINSTANCE
+				.createLocation());
 		Location location6012 = (Location) label6012.getLayoutConstraint();
 		location6012.setX(0);
 		location6012.setY(20);
@@ -1658,43 +2081,56 @@
 	/**
 	 * @generated
 	 */
-	public Edge createServiceSubServices_4022(View containerView, int index, boolean persisted,
-		PreferencesHint preferencesHint) {
+	public Edge createServiceSubServices_4022(View containerView, int index,
+			boolean persisted, PreferencesHint preferencesHint) {
 		Connector edge = NotationFactory.eINSTANCE.createConnector();
 		edge.getStyles().add(NotationFactory.eINSTANCE.createFontStyle());
-		RelativeBendpoints bendpoints = NotationFactory.eINSTANCE.createRelativeBendpoints();
-		ArrayList points = new ArrayList(2);
+		RelativeBendpoints bendpoints = NotationFactory.eINSTANCE
+				.createRelativeBendpoints();
+		ArrayList<RelativeBendpoint> points = new ArrayList<RelativeBendpoint>(
+				2);
 		points.add(new RelativeBendpoint());
 		points.add(new RelativeBendpoint());
 		bendpoints.setPoints(points);
 		edge.setBendpoints(bendpoints);
 		ViewUtil.insertChildView(containerView, edge, index, persisted);
-		edge.setType(UrmlVisualIDRegistry.getType(ServiceSubServicesEditPart.VISUAL_ID));
+		edge.setType(UrmlVisualIDRegistry
+				.getType(ServiceSubServicesEditPart.VISUAL_ID));
 		edge.setElement(null);
 		// initializePreferences
-		final IPreferenceStore prefStore = (IPreferenceStore) preferencesHint.getPreferenceStore();
+		final IPreferenceStore prefStore = (IPreferenceStore) preferencesHint
+				.getPreferenceStore();
 
-		org.eclipse.swt.graphics.RGB lineRGB = PreferenceConverter.getColor(prefStore,
-			IPreferenceConstants.PREF_LINE_COLOR);
-		ViewUtil.setStructuralFeatureValue(edge, NotationPackage.eINSTANCE.getLineStyle_LineColor(), FigureUtilities
-			.RGBToInteger(lineRGB));
-		FontStyle edgeFontStyle = (FontStyle) edge.getStyle(NotationPackage.Literals.FONT_STYLE);
+		org.eclipse.swt.graphics.RGB lineRGB = PreferenceConverter.getColor(
+				prefStore, IPreferenceConstants.PREF_LINE_COLOR);
+		ViewUtil.setStructuralFeatureValue(edge,
+				NotationPackage.eINSTANCE.getLineStyle_LineColor(),
+				FigureUtilities.RGBToInteger(lineRGB));
+		FontStyle edgeFontStyle = (FontStyle) edge
+				.getStyle(NotationPackage.Literals.FONT_STYLE);
 		if (edgeFontStyle != null) {
-			FontData fontData = PreferenceConverter.getFontData(prefStore, IPreferenceConstants.PREF_DEFAULT_FONT);
+			FontData fontData = PreferenceConverter.getFontData(prefStore,
+					IPreferenceConstants.PREF_DEFAULT_FONT);
 			edgeFontStyle.setFontName(fontData.getName());
 			edgeFontStyle.setFontHeight(fontData.getHeight());
 			edgeFontStyle.setBold((fontData.getStyle() & SWT.BOLD) != 0);
 			edgeFontStyle.setItalic((fontData.getStyle() & SWT.ITALIC) != 0);
-			org.eclipse.swt.graphics.RGB fontRGB = PreferenceConverter.getColor(prefStore,
-				IPreferenceConstants.PREF_FONT_COLOR);
-			edgeFontStyle.setFontColor(FigureUtilities.RGBToInteger(fontRGB).intValue());
+			org.eclipse.swt.graphics.RGB fontRGB = PreferenceConverter
+					.getColor(prefStore, IPreferenceConstants.PREF_FONT_COLOR);
+			edgeFontStyle.setFontColor(FigureUtilities.RGBToInteger(fontRGB)
+					.intValue());
 		}
-		Routing routing = Routing.get(prefStore.getInt(IPreferenceConstants.PREF_LINE_STYLE));
+		Routing routing = Routing.get(prefStore
+				.getInt(IPreferenceConstants.PREF_LINE_STYLE));
 		if (routing != null) {
-			ViewUtil.setStructuralFeatureValue(edge, NotationPackage.eINSTANCE.getRoutingStyle_Routing(), routing);
+			ViewUtil.setStructuralFeatureValue(edge,
+					NotationPackage.eINSTANCE.getRoutingStyle_Routing(),
+					routing);
 		}
-		Node label6018 = createLabel(edge, UrmlVisualIDRegistry.getType(MotivatesLabel2EditPart.VISUAL_ID));
-		label6018.setLayoutConstraint(NotationFactory.eINSTANCE.createLocation());
+		Node label6018 = createLabel(edge,
+				UrmlVisualIDRegistry.getType(MotivatesLabel2EditPart.VISUAL_ID));
+		label6018.setLayoutConstraint(NotationFactory.eINSTANCE
+				.createLocation());
 		Location location6018 = (Location) label6018.getLayoutConstraint();
 		location6018.setX(0);
 		location6018.setY(20);
@@ -1704,43 +2140,57 @@
 	/**
 	 * @generated
 	 */
-	public Edge createVariationPointOptionalSubFeatures_4046(View containerView, int index, boolean persisted,
-		PreferencesHint preferencesHint) {
+	public Edge createVariationPointOptionalSubFeatures_4046(
+			View containerView, int index, boolean persisted,
+			PreferencesHint preferencesHint) {
 		Connector edge = NotationFactory.eINSTANCE.createConnector();
 		edge.getStyles().add(NotationFactory.eINSTANCE.createFontStyle());
-		RelativeBendpoints bendpoints = NotationFactory.eINSTANCE.createRelativeBendpoints();
-		ArrayList points = new ArrayList(2);
+		RelativeBendpoints bendpoints = NotationFactory.eINSTANCE
+				.createRelativeBendpoints();
+		ArrayList<RelativeBendpoint> points = new ArrayList<RelativeBendpoint>(
+				2);
 		points.add(new RelativeBendpoint());
 		points.add(new RelativeBendpoint());
 		bendpoints.setPoints(points);
 		edge.setBendpoints(bendpoints);
 		ViewUtil.insertChildView(containerView, edge, index, persisted);
-		edge.setType(UrmlVisualIDRegistry.getType(VariationPointOptionalSubFeaturesEditPart.VISUAL_ID));
+		edge.setType(UrmlVisualIDRegistry
+				.getType(VariationPointOptionalSubFeaturesEditPart.VISUAL_ID));
 		edge.setElement(null);
 		// initializePreferences
-		final IPreferenceStore prefStore = (IPreferenceStore) preferencesHint.getPreferenceStore();
+		final IPreferenceStore prefStore = (IPreferenceStore) preferencesHint
+				.getPreferenceStore();
 
-		org.eclipse.swt.graphics.RGB lineRGB = PreferenceConverter.getColor(prefStore,
-			IPreferenceConstants.PREF_LINE_COLOR);
-		ViewUtil.setStructuralFeatureValue(edge, NotationPackage.eINSTANCE.getLineStyle_LineColor(), FigureUtilities
-			.RGBToInteger(lineRGB));
-		FontStyle edgeFontStyle = (FontStyle) edge.getStyle(NotationPackage.Literals.FONT_STYLE);
+		org.eclipse.swt.graphics.RGB lineRGB = PreferenceConverter.getColor(
+				prefStore, IPreferenceConstants.PREF_LINE_COLOR);
+		ViewUtil.setStructuralFeatureValue(edge,
+				NotationPackage.eINSTANCE.getLineStyle_LineColor(),
+				FigureUtilities.RGBToInteger(lineRGB));
+		FontStyle edgeFontStyle = (FontStyle) edge
+				.getStyle(NotationPackage.Literals.FONT_STYLE);
 		if (edgeFontStyle != null) {
-			FontData fontData = PreferenceConverter.getFontData(prefStore, IPreferenceConstants.PREF_DEFAULT_FONT);
+			FontData fontData = PreferenceConverter.getFontData(prefStore,
+					IPreferenceConstants.PREF_DEFAULT_FONT);
 			edgeFontStyle.setFontName(fontData.getName());
 			edgeFontStyle.setFontHeight(fontData.getHeight());
 			edgeFontStyle.setBold((fontData.getStyle() & SWT.BOLD) != 0);
 			edgeFontStyle.setItalic((fontData.getStyle() & SWT.ITALIC) != 0);
-			org.eclipse.swt.graphics.RGB fontRGB = PreferenceConverter.getColor(prefStore,
-				IPreferenceConstants.PREF_FONT_COLOR);
-			edgeFontStyle.setFontColor(FigureUtilities.RGBToInteger(fontRGB).intValue());
+			org.eclipse.swt.graphics.RGB fontRGB = PreferenceConverter
+					.getColor(prefStore, IPreferenceConstants.PREF_FONT_COLOR);
+			edgeFontStyle.setFontColor(FigureUtilities.RGBToInteger(fontRGB)
+					.intValue());
 		}
-		Routing routing = Routing.get(prefStore.getInt(IPreferenceConstants.PREF_LINE_STYLE));
+		Routing routing = Routing.get(prefStore
+				.getInt(IPreferenceConstants.PREF_LINE_STYLE));
 		if (routing != null) {
-			ViewUtil.setStructuralFeatureValue(edge, NotationPackage.eINSTANCE.getRoutingStyle_Routing(), routing);
+			ViewUtil.setStructuralFeatureValue(edge,
+					NotationPackage.eINSTANCE.getRoutingStyle_Routing(),
+					routing);
 		}
-		Node label6046 = createLabel(edge, UrmlVisualIDRegistry.getType(SuggestsLabelEditPart.VISUAL_ID));
-		label6046.setLayoutConstraint(NotationFactory.eINSTANCE.createLocation());
+		Node label6046 = createLabel(edge,
+				UrmlVisualIDRegistry.getType(SuggestsLabelEditPart.VISUAL_ID));
+		label6046.setLayoutConstraint(NotationFactory.eINSTANCE
+				.createLocation());
 		Location location6046 = (Location) label6046.getLayoutConstraint();
 		location6046.setX(0);
 		location6046.setY(20);
@@ -1750,43 +2200,58 @@
 	/**
 	 * @generated
 	 */
-	public Edge createVariationPointInstanceVariationPoint_4033(View containerView, int index, boolean persisted,
-		PreferencesHint preferencesHint) {
+	public Edge createVariationPointInstanceVariationPoint_4033(
+			View containerView, int index, boolean persisted,
+			PreferencesHint preferencesHint) {
 		Connector edge = NotationFactory.eINSTANCE.createConnector();
 		edge.getStyles().add(NotationFactory.eINSTANCE.createFontStyle());
-		RelativeBendpoints bendpoints = NotationFactory.eINSTANCE.createRelativeBendpoints();
-		ArrayList points = new ArrayList(2);
+		RelativeBendpoints bendpoints = NotationFactory.eINSTANCE
+				.createRelativeBendpoints();
+		ArrayList<RelativeBendpoint> points = new ArrayList<RelativeBendpoint>(
+				2);
 		points.add(new RelativeBendpoint());
 		points.add(new RelativeBendpoint());
 		bendpoints.setPoints(points);
 		edge.setBendpoints(bendpoints);
 		ViewUtil.insertChildView(containerView, edge, index, persisted);
-		edge.setType(UrmlVisualIDRegistry.getType(VariationPointInstanceVariationPointEditPart.VISUAL_ID));
+		edge.setType(UrmlVisualIDRegistry
+				.getType(VariationPointInstanceVariationPointEditPart.VISUAL_ID));
 		edge.setElement(null);
 		// initializePreferences
-		final IPreferenceStore prefStore = (IPreferenceStore) preferencesHint.getPreferenceStore();
+		final IPreferenceStore prefStore = (IPreferenceStore) preferencesHint
+				.getPreferenceStore();
 
-		org.eclipse.swt.graphics.RGB lineRGB = PreferenceConverter.getColor(prefStore,
-			IPreferenceConstants.PREF_LINE_COLOR);
-		ViewUtil.setStructuralFeatureValue(edge, NotationPackage.eINSTANCE.getLineStyle_LineColor(), FigureUtilities
-			.RGBToInteger(lineRGB));
-		FontStyle edgeFontStyle = (FontStyle) edge.getStyle(NotationPackage.Literals.FONT_STYLE);
+		org.eclipse.swt.graphics.RGB lineRGB = PreferenceConverter.getColor(
+				prefStore, IPreferenceConstants.PREF_LINE_COLOR);
+		ViewUtil.setStructuralFeatureValue(edge,
+				NotationPackage.eINSTANCE.getLineStyle_LineColor(),
+				FigureUtilities.RGBToInteger(lineRGB));
+		FontStyle edgeFontStyle = (FontStyle) edge
+				.getStyle(NotationPackage.Literals.FONT_STYLE);
 		if (edgeFontStyle != null) {
-			FontData fontData = PreferenceConverter.getFontData(prefStore, IPreferenceConstants.PREF_DEFAULT_FONT);
+			FontData fontData = PreferenceConverter.getFontData(prefStore,
+					IPreferenceConstants.PREF_DEFAULT_FONT);
 			edgeFontStyle.setFontName(fontData.getName());
 			edgeFontStyle.setFontHeight(fontData.getHeight());
 			edgeFontStyle.setBold((fontData.getStyle() & SWT.BOLD) != 0);
 			edgeFontStyle.setItalic((fontData.getStyle() & SWT.ITALIC) != 0);
-			org.eclipse.swt.graphics.RGB fontRGB = PreferenceConverter.getColor(prefStore,
-				IPreferenceConstants.PREF_FONT_COLOR);
-			edgeFontStyle.setFontColor(FigureUtilities.RGBToInteger(fontRGB).intValue());
+			org.eclipse.swt.graphics.RGB fontRGB = PreferenceConverter
+					.getColor(prefStore, IPreferenceConstants.PREF_FONT_COLOR);
+			edgeFontStyle.setFontColor(FigureUtilities.RGBToInteger(fontRGB)
+					.intValue());
 		}
-		Routing routing = Routing.get(prefStore.getInt(IPreferenceConstants.PREF_LINE_STYLE));
+		Routing routing = Routing.get(prefStore
+				.getInt(IPreferenceConstants.PREF_LINE_STYLE));
 		if (routing != null) {
-			ViewUtil.setStructuralFeatureValue(edge, NotationPackage.eINSTANCE.getRoutingStyle_Routing(), routing);
+			ViewUtil.setStructuralFeatureValue(edge,
+					NotationPackage.eINSTANCE.getRoutingStyle_Routing(),
+					routing);
 		}
-		Node label6033 = createLabel(edge, UrmlVisualIDRegistry.getType(InstantiateLabelEditPart.VISUAL_ID));
-		label6033.setLayoutConstraint(NotationFactory.eINSTANCE.createLocation());
+		Node label6033 = createLabel(edge,
+				UrmlVisualIDRegistry
+						.getType(InstantiateLabelEditPart.VISUAL_ID));
+		label6033.setLayoutConstraint(NotationFactory.eINSTANCE
+				.createLocation());
 		Location location6033 = (Location) label6033.getLayoutConstraint();
 		location6033.setX(0);
 		location6033.setY(20);
@@ -1796,43 +2261,57 @@
 	/**
 	 * @generated
 	 */
-	public Edge createVariationPointInstanceSelectedFeatures_4040(View containerView, int index, boolean persisted,
-		PreferencesHint preferencesHint) {
+	public Edge createVariationPointInstanceSelectedFeatures_4040(
+			View containerView, int index, boolean persisted,
+			PreferencesHint preferencesHint) {
 		Connector edge = NotationFactory.eINSTANCE.createConnector();
 		edge.getStyles().add(NotationFactory.eINSTANCE.createFontStyle());
-		RelativeBendpoints bendpoints = NotationFactory.eINSTANCE.createRelativeBendpoints();
-		ArrayList points = new ArrayList(2);
+		RelativeBendpoints bendpoints = NotationFactory.eINSTANCE
+				.createRelativeBendpoints();
+		ArrayList<RelativeBendpoint> points = new ArrayList<RelativeBendpoint>(
+				2);
 		points.add(new RelativeBendpoint());
 		points.add(new RelativeBendpoint());
 		bendpoints.setPoints(points);
 		edge.setBendpoints(bendpoints);
 		ViewUtil.insertChildView(containerView, edge, index, persisted);
-		edge.setType(UrmlVisualIDRegistry.getType(VariationPointInstanceSelectedFeaturesEditPart.VISUAL_ID));
+		edge.setType(UrmlVisualIDRegistry
+				.getType(VariationPointInstanceSelectedFeaturesEditPart.VISUAL_ID));
 		edge.setElement(null);
 		// initializePreferences
-		final IPreferenceStore prefStore = (IPreferenceStore) preferencesHint.getPreferenceStore();
+		final IPreferenceStore prefStore = (IPreferenceStore) preferencesHint
+				.getPreferenceStore();
 
-		org.eclipse.swt.graphics.RGB lineRGB = PreferenceConverter.getColor(prefStore,
-			IPreferenceConstants.PREF_LINE_COLOR);
-		ViewUtil.setStructuralFeatureValue(edge, NotationPackage.eINSTANCE.getLineStyle_LineColor(), FigureUtilities
-			.RGBToInteger(lineRGB));
-		FontStyle edgeFontStyle = (FontStyle) edge.getStyle(NotationPackage.Literals.FONT_STYLE);
+		org.eclipse.swt.graphics.RGB lineRGB = PreferenceConverter.getColor(
+				prefStore, IPreferenceConstants.PREF_LINE_COLOR);
+		ViewUtil.setStructuralFeatureValue(edge,
+				NotationPackage.eINSTANCE.getLineStyle_LineColor(),
+				FigureUtilities.RGBToInteger(lineRGB));
+		FontStyle edgeFontStyle = (FontStyle) edge
+				.getStyle(NotationPackage.Literals.FONT_STYLE);
 		if (edgeFontStyle != null) {
-			FontData fontData = PreferenceConverter.getFontData(prefStore, IPreferenceConstants.PREF_DEFAULT_FONT);
+			FontData fontData = PreferenceConverter.getFontData(prefStore,
+					IPreferenceConstants.PREF_DEFAULT_FONT);
 			edgeFontStyle.setFontName(fontData.getName());
 			edgeFontStyle.setFontHeight(fontData.getHeight());
 			edgeFontStyle.setBold((fontData.getStyle() & SWT.BOLD) != 0);
 			edgeFontStyle.setItalic((fontData.getStyle() & SWT.ITALIC) != 0);
-			org.eclipse.swt.graphics.RGB fontRGB = PreferenceConverter.getColor(prefStore,
-				IPreferenceConstants.PREF_FONT_COLOR);
-			edgeFontStyle.setFontColor(FigureUtilities.RGBToInteger(fontRGB).intValue());
+			org.eclipse.swt.graphics.RGB fontRGB = PreferenceConverter
+					.getColor(prefStore, IPreferenceConstants.PREF_FONT_COLOR);
+			edgeFontStyle.setFontColor(FigureUtilities.RGBToInteger(fontRGB)
+					.intValue());
 		}
-		Routing routing = Routing.get(prefStore.getInt(IPreferenceConstants.PREF_LINE_STYLE));
+		Routing routing = Routing.get(prefStore
+				.getInt(IPreferenceConstants.PREF_LINE_STYLE));
 		if (routing != null) {
-			ViewUtil.setStructuralFeatureValue(edge, NotationPackage.eINSTANCE.getRoutingStyle_Routing(), routing);
+			ViewUtil.setStructuralFeatureValue(edge,
+					NotationPackage.eINSTANCE.getRoutingStyle_Routing(),
+					routing);
 		}
-		Node label6040 = createLabel(edge, UrmlVisualIDRegistry.getType(SelectLabelEditPart.VISUAL_ID));
-		label6040.setLayoutConstraint(NotationFactory.eINSTANCE.createLocation());
+		Node label6040 = createLabel(edge,
+				UrmlVisualIDRegistry.getType(SelectLabelEditPart.VISUAL_ID));
+		label6040.setLayoutConstraint(NotationFactory.eINSTANCE
+				.createLocation());
 		Location location6040 = (Location) label6040.getLayoutConstraint();
 		location6040.setX(0);
 		location6040.setY(20);
@@ -1842,43 +2321,56 @@
 	/**
 	 * @generated
 	 */
-	public Edge createProductVariationPointInstances_4032(View containerView, int index, boolean persisted,
-		PreferencesHint preferencesHint) {
+	public Edge createProductVariationPointInstances_4032(View containerView,
+			int index, boolean persisted, PreferencesHint preferencesHint) {
 		Connector edge = NotationFactory.eINSTANCE.createConnector();
 		edge.getStyles().add(NotationFactory.eINSTANCE.createFontStyle());
-		RelativeBendpoints bendpoints = NotationFactory.eINSTANCE.createRelativeBendpoints();
-		ArrayList points = new ArrayList(2);
+		RelativeBendpoints bendpoints = NotationFactory.eINSTANCE
+				.createRelativeBendpoints();
+		ArrayList<RelativeBendpoint> points = new ArrayList<RelativeBendpoint>(
+				2);
 		points.add(new RelativeBendpoint());
 		points.add(new RelativeBendpoint());
 		bendpoints.setPoints(points);
 		edge.setBendpoints(bendpoints);
 		ViewUtil.insertChildView(containerView, edge, index, persisted);
-		edge.setType(UrmlVisualIDRegistry.getType(ProductVariationPointInstancesEditPart.VISUAL_ID));
+		edge.setType(UrmlVisualIDRegistry
+				.getType(ProductVariationPointInstancesEditPart.VISUAL_ID));
 		edge.setElement(null);
 		// initializePreferences
-		final IPreferenceStore prefStore = (IPreferenceStore) preferencesHint.getPreferenceStore();
+		final IPreferenceStore prefStore = (IPreferenceStore) preferencesHint
+				.getPreferenceStore();
 
-		org.eclipse.swt.graphics.RGB lineRGB = PreferenceConverter.getColor(prefStore,
-			IPreferenceConstants.PREF_LINE_COLOR);
-		ViewUtil.setStructuralFeatureValue(edge, NotationPackage.eINSTANCE.getLineStyle_LineColor(), FigureUtilities
-			.RGBToInteger(lineRGB));
-		FontStyle edgeFontStyle = (FontStyle) edge.getStyle(NotationPackage.Literals.FONT_STYLE);
+		org.eclipse.swt.graphics.RGB lineRGB = PreferenceConverter.getColor(
+				prefStore, IPreferenceConstants.PREF_LINE_COLOR);
+		ViewUtil.setStructuralFeatureValue(edge,
+				NotationPackage.eINSTANCE.getLineStyle_LineColor(),
+				FigureUtilities.RGBToInteger(lineRGB));
+		FontStyle edgeFontStyle = (FontStyle) edge
+				.getStyle(NotationPackage.Literals.FONT_STYLE);
 		if (edgeFontStyle != null) {
-			FontData fontData = PreferenceConverter.getFontData(prefStore, IPreferenceConstants.PREF_DEFAULT_FONT);
+			FontData fontData = PreferenceConverter.getFontData(prefStore,
+					IPreferenceConstants.PREF_DEFAULT_FONT);
 			edgeFontStyle.setFontName(fontData.getName());
 			edgeFontStyle.setFontHeight(fontData.getHeight());
 			edgeFontStyle.setBold((fontData.getStyle() & SWT.BOLD) != 0);
 			edgeFontStyle.setItalic((fontData.getStyle() & SWT.ITALIC) != 0);
-			org.eclipse.swt.graphics.RGB fontRGB = PreferenceConverter.getColor(prefStore,
-				IPreferenceConstants.PREF_FONT_COLOR);
-			edgeFontStyle.setFontColor(FigureUtilities.RGBToInteger(fontRGB).intValue());
+			org.eclipse.swt.graphics.RGB fontRGB = PreferenceConverter
+					.getColor(prefStore, IPreferenceConstants.PREF_FONT_COLOR);
+			edgeFontStyle.setFontColor(FigureUtilities.RGBToInteger(fontRGB)
+					.intValue());
 		}
-		Routing routing = Routing.get(prefStore.getInt(IPreferenceConstants.PREF_LINE_STYLE));
+		Routing routing = Routing.get(prefStore
+				.getInt(IPreferenceConstants.PREF_LINE_STYLE));
 		if (routing != null) {
-			ViewUtil.setStructuralFeatureValue(edge, NotationPackage.eINSTANCE.getRoutingStyle_Routing(), routing);
+			ViewUtil.setStructuralFeatureValue(edge,
+					NotationPackage.eINSTANCE.getRoutingStyle_Routing(),
+					routing);
 		}
-		Node label6032 = createLabel(edge, UrmlVisualIDRegistry.getType(CombineLabelEditPart.VISUAL_ID));
-		label6032.setLayoutConstraint(NotationFactory.eINSTANCE.createLocation());
+		Node label6032 = createLabel(edge,
+				UrmlVisualIDRegistry.getType(CombineLabelEditPart.VISUAL_ID));
+		label6032.setLayoutConstraint(NotationFactory.eINSTANCE
+				.createLocation());
 		Location location6032 = (Location) label6032.getLayoutConstraint();
 		location6032.setX(0);
 		location6032.setY(20);
@@ -1888,43 +2380,56 @@
 	/**
 	 * @generated
 	 */
-	public Edge createProductFeatures_4047(View containerView, int index, boolean persisted,
-		PreferencesHint preferencesHint) {
+	public Edge createProductFeatures_4047(View containerView, int index,
+			boolean persisted, PreferencesHint preferencesHint) {
 		Connector edge = NotationFactory.eINSTANCE.createConnector();
 		edge.getStyles().add(NotationFactory.eINSTANCE.createFontStyle());
-		RelativeBendpoints bendpoints = NotationFactory.eINSTANCE.createRelativeBendpoints();
-		ArrayList points = new ArrayList(2);
+		RelativeBendpoints bendpoints = NotationFactory.eINSTANCE
+				.createRelativeBendpoints();
+		ArrayList<RelativeBendpoint> points = new ArrayList<RelativeBendpoint>(
+				2);
 		points.add(new RelativeBendpoint());
 		points.add(new RelativeBendpoint());
 		bendpoints.setPoints(points);
 		edge.setBendpoints(bendpoints);
 		ViewUtil.insertChildView(containerView, edge, index, persisted);
-		edge.setType(UrmlVisualIDRegistry.getType(ProductFeaturesEditPart.VISUAL_ID));
+		edge.setType(UrmlVisualIDRegistry
+				.getType(ProductFeaturesEditPart.VISUAL_ID));
 		edge.setElement(null);
 		// initializePreferences
-		final IPreferenceStore prefStore = (IPreferenceStore) preferencesHint.getPreferenceStore();
+		final IPreferenceStore prefStore = (IPreferenceStore) preferencesHint
+				.getPreferenceStore();
 
-		org.eclipse.swt.graphics.RGB lineRGB = PreferenceConverter.getColor(prefStore,
-			IPreferenceConstants.PREF_LINE_COLOR);
-		ViewUtil.setStructuralFeatureValue(edge, NotationPackage.eINSTANCE.getLineStyle_LineColor(), FigureUtilities
-			.RGBToInteger(lineRGB));
-		FontStyle edgeFontStyle = (FontStyle) edge.getStyle(NotationPackage.Literals.FONT_STYLE);
+		org.eclipse.swt.graphics.RGB lineRGB = PreferenceConverter.getColor(
+				prefStore, IPreferenceConstants.PREF_LINE_COLOR);
+		ViewUtil.setStructuralFeatureValue(edge,
+				NotationPackage.eINSTANCE.getLineStyle_LineColor(),
+				FigureUtilities.RGBToInteger(lineRGB));
+		FontStyle edgeFontStyle = (FontStyle) edge
+				.getStyle(NotationPackage.Literals.FONT_STYLE);
 		if (edgeFontStyle != null) {
-			FontData fontData = PreferenceConverter.getFontData(prefStore, IPreferenceConstants.PREF_DEFAULT_FONT);
+			FontData fontData = PreferenceConverter.getFontData(prefStore,
+					IPreferenceConstants.PREF_DEFAULT_FONT);
 			edgeFontStyle.setFontName(fontData.getName());
 			edgeFontStyle.setFontHeight(fontData.getHeight());
 			edgeFontStyle.setBold((fontData.getStyle() & SWT.BOLD) != 0);
 			edgeFontStyle.setItalic((fontData.getStyle() & SWT.ITALIC) != 0);
-			org.eclipse.swt.graphics.RGB fontRGB = PreferenceConverter.getColor(prefStore,
-				IPreferenceConstants.PREF_FONT_COLOR);
-			edgeFontStyle.setFontColor(FigureUtilities.RGBToInteger(fontRGB).intValue());
+			org.eclipse.swt.graphics.RGB fontRGB = PreferenceConverter
+					.getColor(prefStore, IPreferenceConstants.PREF_FONT_COLOR);
+			edgeFontStyle.setFontColor(FigureUtilities.RGBToInteger(fontRGB)
+					.intValue());
 		}
-		Routing routing = Routing.get(prefStore.getInt(IPreferenceConstants.PREF_LINE_STYLE));
+		Routing routing = Routing.get(prefStore
+				.getInt(IPreferenceConstants.PREF_LINE_STYLE));
 		if (routing != null) {
-			ViewUtil.setStructuralFeatureValue(edge, NotationPackage.eINSTANCE.getRoutingStyle_Routing(), routing);
+			ViewUtil.setStructuralFeatureValue(edge,
+					NotationPackage.eINSTANCE.getRoutingStyle_Routing(),
+					routing);
 		}
-		Node label6047 = createLabel(edge, UrmlVisualIDRegistry.getType(ConsistsOfLabelEditPart.VISUAL_ID));
-		label6047.setLayoutConstraint(NotationFactory.eINSTANCE.createLocation());
+		Node label6047 = createLabel(edge,
+				UrmlVisualIDRegistry.getType(ConsistsOfLabelEditPart.VISUAL_ID));
+		label6047.setLayoutConstraint(NotationFactory.eINSTANCE
+				.createLocation());
 		Location location6047 = (Location) label6047.getLayoutConstraint();
 		location6047.setX(0);
 		location6047.setY(20);
@@ -1934,11 +2439,73 @@
 	/**
 	 * @generated
 	 */
+	public Edge createUrmlModelElementAssociations_4048(View containerView,
+			int index, boolean persisted, PreferencesHint preferencesHint) {
+		Connector edge = NotationFactory.eINSTANCE.createConnector();
+		edge.getStyles().add(NotationFactory.eINSTANCE.createFontStyle());
+		RelativeBendpoints bendpoints = NotationFactory.eINSTANCE
+				.createRelativeBendpoints();
+		ArrayList<RelativeBendpoint> points = new ArrayList<RelativeBendpoint>(
+				2);
+		points.add(new RelativeBendpoint());
+		points.add(new RelativeBendpoint());
+		bendpoints.setPoints(points);
+		edge.setBendpoints(bendpoints);
+		ViewUtil.insertChildView(containerView, edge, index, persisted);
+		edge.setType(UrmlVisualIDRegistry
+				.getType(UrmlModelElementAssociationsEditPart.VISUAL_ID));
+		edge.setElement(null);
+		// initializePreferences
+		final IPreferenceStore prefStore = (IPreferenceStore) preferencesHint
+				.getPreferenceStore();
+
+		org.eclipse.swt.graphics.RGB lineRGB = PreferenceConverter.getColor(
+				prefStore, IPreferenceConstants.PREF_LINE_COLOR);
+		ViewUtil.setStructuralFeatureValue(edge,
+				NotationPackage.eINSTANCE.getLineStyle_LineColor(),
+				FigureUtilities.RGBToInteger(lineRGB));
+		FontStyle edgeFontStyle = (FontStyle) edge
+				.getStyle(NotationPackage.Literals.FONT_STYLE);
+		if (edgeFontStyle != null) {
+			FontData fontData = PreferenceConverter.getFontData(prefStore,
+					IPreferenceConstants.PREF_DEFAULT_FONT);
+			edgeFontStyle.setFontName(fontData.getName());
+			edgeFontStyle.setFontHeight(fontData.getHeight());
+			edgeFontStyle.setBold((fontData.getStyle() & SWT.BOLD) != 0);
+			edgeFontStyle.setItalic((fontData.getStyle() & SWT.ITALIC) != 0);
+			org.eclipse.swt.graphics.RGB fontRGB = PreferenceConverter
+					.getColor(prefStore, IPreferenceConstants.PREF_FONT_COLOR);
+			edgeFontStyle.setFontColor(FigureUtilities.RGBToInteger(fontRGB)
+					.intValue());
+		}
+		Routing routing = Routing.get(prefStore
+				.getInt(IPreferenceConstants.PREF_LINE_STYLE));
+		if (routing != null) {
+			ViewUtil.setStructuralFeatureValue(edge,
+					NotationPackage.eINSTANCE.getRoutingStyle_Routing(),
+					routing);
+		}
+		Node label6048 = createLabel(edge,
+				UrmlVisualIDRegistry.getType(TriggersLabel2EditPart.VISUAL_ID));
+		label6048.setLayoutConstraint(NotationFactory.eINSTANCE
+				.createLocation());
+		Location location6048 = (Location) label6048.getLayoutConstraint();
+		location6048.setX(0);
+		location6048.setY(20);
+		return edge;
+	}
+
+	/**
+	 * @generated
+	 */
 	private void stampShortcut(View containerView, Node target) {
-		if (!URMLDiagramEditPart.MODEL_ID.equals(UrmlVisualIDRegistry.getModelID(containerView))) {
-			EAnnotation shortcutAnnotation = EcoreFactory.eINSTANCE.createEAnnotation();
+		if (!URMLDiagramEditPart.MODEL_ID.equals(UrmlVisualIDRegistry
+				.getModelID(containerView))) {
+			EAnnotation shortcutAnnotation = EcoreFactory.eINSTANCE
+					.createEAnnotation();
 			shortcutAnnotation.setSource("Shortcut"); //$NON-NLS-1$
-			shortcutAnnotation.getDetails().put("modelID", URMLDiagramEditPart.MODEL_ID); //$NON-NLS-1$
+			shortcutAnnotation.getDetails().put(
+					"modelID", URMLDiagramEditPart.MODEL_ID); //$NON-NLS-1$
 			target.getEAnnotations().add(shortcutAnnotation);
 		}
 	}
@@ -1962,7 +2529,8 @@
 		}
 		EObject eObject = (EObject) semanticAdapter.getAdapter(EObject.class);
 		if (eObject != null) {
-			return EMFCoreUtil.resolve(TransactionUtil.getEditingDomain(eObject), eObject);
+			return EMFCoreUtil.resolve(
+					TransactionUtil.getEditingDomain(eObject), eObject);
 		}
 		return null;
 	}
Index: src/org/unicase/ui/diagram/urml/providers/UrmlElementTypes.java
===================================================================
--- src/org/unicase/ui/diagram/urml/providers/UrmlElementTypes.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/providers/UrmlElementTypes.java	(working copy)
@@ -1,5 +1,7 @@
 package org.unicase.ui.diagram.urml.providers;
 
+import java.net.MalformedURLException;
+import java.net.URL;
 import java.util.HashSet;
 import java.util.IdentityHashMap;
 import java.util.Map;
@@ -16,12 +18,16 @@
 import org.eclipse.jface.resource.ImageDescriptor;
 import org.eclipse.jface.resource.ImageRegistry;
 import org.eclipse.swt.graphics.Image;
+import org.eclipse.ui.ISharedImages;
+import org.eclipse.ui.PlatformUI;
 import org.unicase.model.urml.UrmlPackage;
 import org.unicase.model.urml.danger.DangerPackage;
 import org.unicase.model.urml.feature.FeaturePackage;
 import org.unicase.model.urml.feature.provider.AbstractFeatureItemProvider;
 import org.unicase.model.urml.feature.provider.FeatureItemProviderAdapterFactory;
 import org.unicase.model.urml.goal.GoalPackage;
+import org.unicase.model.urml.provider.UrmlItemProviderAdapterFactory;
+import org.unicase.model.urml.provider.UrmlModelElementItemProvider;
 import org.unicase.model.urml.requirement.RequirementPackage;
 import org.unicase.model.urml.service.ServicePackage;
 import org.unicase.model.urml.usecase.UsecasePackage;
@@ -57,6 +63,7 @@
 import org.unicase.ui.diagram.urml.edit.parts.StakeholderEditPart;
 import org.unicase.ui.diagram.urml.edit.parts.StakeholderGoalsEditPart;
 import org.unicase.ui.diagram.urml.edit.parts.URMLDiagramEditPart;
+import org.unicase.ui.diagram.urml.edit.parts.UrmlModelElementAssociationsEditPart;
 import org.unicase.ui.diagram.urml.edit.parts.VariationPointEditPart;
 import org.unicase.ui.diagram.urml.edit.parts.VariationPointInstanceEditPart;
 import org.unicase.ui.diagram.urml.edit.parts.VariationPointInstanceSelectedFeaturesEditPart;
@@ -78,7 +85,7 @@
 	/**
 	 * @generated
 	 */
-	private static Map elements;
+	private static Map<IElementType, ENamedElement> elements;
 
 	/**
 	 * @generated
@@ -88,7 +95,7 @@
 	/**
 	 * @generated
 	 */
-	private static Set KNOWN_ELEMENT_TYPES;
+	private static Set<IElementType> KNOWN_ELEMENT_TYPES;
 
 	/**
 	 * @generated
@@ -242,6 +249,11 @@
 	/**
 	 * @generated
 	 */
+	public static final IElementType UrmlModelElementAssociations_4048 = getElementType("org.unicase.ui.diagram.urmlDiagram.UrmlModelElementAssociations_4048"); //$NON-NLS-1$
+
+	/**
+	 * @generated
+	 */
 	private static ImageRegistry getImageRegistry() {
 		if (imageRegistry == null) {
 			imageRegistry = new ImageRegistry();
@@ -259,14 +271,16 @@
 	/**
 	 * @generated NOT
 	 */
-	private static ImageDescriptor getProvidedImageDescriptor(ENamedElement element) {
+	private static ImageDescriptor getProvidedImageDescriptor(
+			ENamedElement element) {
 		if (element instanceof EStructuralFeature) {
 			EStructuralFeature feature = ((EStructuralFeature) element);
 			EClass eContainingClass = feature.getEContainingClass();
 			EClassifier eType = feature.getEType();
 			if (eContainingClass != null && !eContainingClass.isAbstract()) {
 				element = eContainingClass;
-			} else if (eType instanceof EClass && !((EClass) eType).isAbstract()) {
+			} else if (eType instanceof EClass
+					&& !((EClass) eType).isAbstract()) {
 				element = eType;
 			}
 			/* user code */
@@ -274,16 +288,23 @@
 			else if (eContainingClass.getName().equals("AbstractFeature")) {
 				FeatureItemProviderAdapterFactory factory = new FeatureItemProviderAdapterFactory();
 				AbstractFeatureItemProvider provider = (AbstractFeatureItemProvider) factory
-					.createAbstractFeatureAdapter();
-				return ExtendedImageRegistry.getInstance().getImageDescriptor(provider.getImage(new Object()));
+						.createAbstractFeatureAdapter();
+				return ExtendedImageRegistry.getInstance().getImageDescriptor(
+						provider.getImage(new Object()));
+			}
+			else if(eContainingClass.getName().equals("UrmlModelElement")) {
+				// TODO : icon
+				return ImageDescriptor.createFromImage(PlatformUI.getWorkbench().getSharedImages().getImage(ISharedImages.IMG_OBJ_ADD));
 			}
 			/* user code */
 		}
 		if (element instanceof EClass) {
 			EClass eClass = (EClass) element;
 			if (!eClass.isAbstract()) {
-				return UrmlDiagramEditorPlugin.getInstance().getItemImageDescriptor(
-					eClass.getEPackage().getEFactoryInstance().create(eClass));
+				return UrmlDiagramEditorPlugin.getInstance()
+						.getItemImageDescriptor(
+								eClass.getEPackage().getEFactoryInstance()
+										.create(eClass));
 			}
 		}
 		// TODO : support structural features
@@ -353,92 +374,130 @@
 	public static ENamedElement getElement(IAdaptable hint) {
 		Object type = hint.getAdapter(IElementType.class);
 		if (elements == null) {
-			elements = new IdentityHashMap();
+			elements = new IdentityHashMap<IElementType, ENamedElement>();
 
-			elements.put(URMLDiagram_1000, UrmlPackage.eINSTANCE.getURMLDiagram());
+			elements.put(URMLDiagram_1000,
+					UrmlPackage.eINSTANCE.getURMLDiagram());
 
-			elements.put(Stakeholder_2002, UrmlPackage.eINSTANCE.getStakeholder());
+			elements.put(Stakeholder_2002,
+					UrmlPackage.eINSTANCE.getStakeholder());
 
 			elements.put(Goal_2001, GoalPackage.eINSTANCE.getGoal());
 
-			elements.put(FunctionalRequirement_2006, RequirementPackage.eINSTANCE.getFunctionalRequirement());
+			elements.put(FunctionalRequirement_2006,
+					RequirementPackage.eINSTANCE.getFunctionalRequirement());
 
 			elements.put(Feature_2012, FeaturePackage.eINSTANCE.getFeature());
 
 			elements.put(Service_2007, ServicePackage.eINSTANCE.getService());
 
-			elements.put(NonFunctionalRequirement_2008, RequirementPackage.eINSTANCE.getNonFunctionalRequirement());
+			elements.put(NonFunctionalRequirement_2008,
+					RequirementPackage.eINSTANCE.getNonFunctionalRequirement());
 
 			elements.put(Danger_2009, DangerPackage.eINSTANCE.getDanger());
 
 			elements.put(Actor_2010, UsecasePackage.eINSTANCE.getActor());
 
-			elements.put(ProceduralMitigation_2011, DangerPackage.eINSTANCE.getProceduralMitigation());
+			elements.put(ProceduralMitigation_2011,
+					DangerPackage.eINSTANCE.getProceduralMitigation());
 
-			elements.put(VariationPoint_2013, FeaturePackage.eINSTANCE.getVariationPoint());
+			elements.put(VariationPoint_2013,
+					FeaturePackage.eINSTANCE.getVariationPoint());
 
-			elements.put(VariationPointInstance_2014, FeaturePackage.eINSTANCE.getVariationPointInstance());
+			elements.put(VariationPointInstance_2014,
+					FeaturePackage.eINSTANCE.getVariationPointInstance());
 
 			elements.put(Product_2015, FeaturePackage.eINSTANCE.getProduct());
 
-			elements.put(StakeholderGoals_4008, UrmlPackage.eINSTANCE.getStakeholder_Goals());
+			elements.put(StakeholderGoals_4008,
+					UrmlPackage.eINSTANCE.getStakeholder_Goals());
 
-			elements.put(AbstractFeatureSubFeatures_4034, FeaturePackage.eINSTANCE.getAbstractFeature_SubFeatures());
+			elements.put(AbstractFeatureSubFeatures_4034,
+					FeaturePackage.eINSTANCE.getAbstractFeature_SubFeatures());
 
-			elements.put(AbstractFeatureDetailingFunctionalRequirements_4035, FeaturePackage.eINSTANCE
-				.getAbstractFeature_DetailingFunctionalRequirements());
+			elements.put(
+					AbstractFeatureDetailingFunctionalRequirements_4035,
+					FeaturePackage.eINSTANCE
+							.getAbstractFeature_DetailingFunctionalRequirements());
 
-			elements.put(AbstractFeatureConstrainingNonFunctionalRequirements_4036, FeaturePackage.eINSTANCE
-				.getAbstractFeature_ConstrainingNonFunctionalRequirements());
+			elements.put(
+					AbstractFeatureConstrainingNonFunctionalRequirements_4036,
+					FeaturePackage.eINSTANCE
+							.getAbstractFeature_ConstrainingNonFunctionalRequirements());
 
-			elements.put(AbstractFeatureRequiredFeatures_4045, FeaturePackage.eINSTANCE
-				.getAbstractFeature_RequiredFeatures());
+			elements.put(AbstractFeatureRequiredFeatures_4045,
+					FeaturePackage.eINSTANCE
+							.getAbstractFeature_RequiredFeatures());
 
-			elements.put(AbstractFeatureExcludedFeatures_4038, FeaturePackage.eINSTANCE
-				.getAbstractFeature_ExcludedFeatures());
+			elements.put(AbstractFeatureExcludedFeatures_4038,
+					FeaturePackage.eINSTANCE
+							.getAbstractFeature_ExcludedFeatures());
 
-			elements.put(GoalRealizedFeatures_4004, GoalPackage.eINSTANCE.getGoal_RealizedFeatures());
+			elements.put(GoalRealizedFeatures_4004,
+					GoalPackage.eINSTANCE.getGoal_RealizedFeatures());
 
-			elements.put(GoalSubGoals_4018, GoalPackage.eINSTANCE.getGoal_SubGoals());
+			elements.put(GoalSubGoals_4018,
+					GoalPackage.eINSTANCE.getGoal_SubGoals());
 
-			elements.put(GoalReference_4016, GoalPackage.eINSTANCE.getGoalReference());
+			elements.put(GoalReference_4016,
+					GoalPackage.eINSTANCE.getGoalReference());
 
-			elements.put(GoalReference_4023, GoalPackage.eINSTANCE.getGoalReference());
+			elements.put(GoalReference_4023,
+					GoalPackage.eINSTANCE.getGoalReference());
 
-			elements.put(GoalReference_4024, GoalPackage.eINSTANCE.getGoalReference());
+			elements.put(GoalReference_4024,
+					GoalPackage.eINSTANCE.getGoalReference());
 
-			elements.put(GoalReference_4025, GoalPackage.eINSTANCE.getGoalReference());
+			elements.put(GoalReference_4025,
+					GoalPackage.eINSTANCE.getGoalReference());
 
-			elements.put(RequirementImplementingServices_4005, RequirementPackage.eINSTANCE
-				.getRequirement_ImplementingServices());
+			elements.put(RequirementImplementingServices_4005,
+					RequirementPackage.eINSTANCE
+							.getRequirement_ImplementingServices());
 
-			elements.put(NonFunctionalRequirementSubNonFunctionalRequirements_4043, RequirementPackage.eINSTANCE
-				.getNonFunctionalRequirement_SubNonFunctionalRequirements());
+			elements.put(
+					NonFunctionalRequirementSubNonFunctionalRequirements_4043,
+					RequirementPackage.eINSTANCE
+							.getNonFunctionalRequirement_SubNonFunctionalRequirements());
 
-			elements.put(FunctionalRequirementSubFunctionalRequirements_4044, RequirementPackage.eINSTANCE
-				.getFunctionalRequirement_SubFunctionalRequirements());
+			elements.put(
+					FunctionalRequirementSubFunctionalRequirements_4044,
+					RequirementPackage.eINSTANCE
+							.getFunctionalRequirement_SubFunctionalRequirements());
 
-			elements.put(MitigationMitigatedDangers_4012, DangerPackage.eINSTANCE.getMitigation_MitigatedDangers());
+			elements.put(MitigationMitigatedDangers_4012,
+					DangerPackage.eINSTANCE.getMitigation_MitigatedDangers());
 
-			elements.put(DangerHarmedAssets_4013, DangerPackage.eINSTANCE.getDanger_HarmedAssets());
+			elements.put(DangerHarmedAssets_4013,
+					DangerPackage.eINSTANCE.getDanger_HarmedAssets());
 
-			elements.put(AssetTriggeredDangers_4017, DangerPackage.eINSTANCE.getAsset_TriggeredDangers());
+			elements.put(AssetTriggeredDangers_4017,
+					DangerPackage.eINSTANCE.getAsset_TriggeredDangers());
 
-			elements.put(ServiceSubServices_4022, ServicePackage.eINSTANCE.getService_SubServices());
+			elements.put(ServiceSubServices_4022,
+					ServicePackage.eINSTANCE.getService_SubServices());
 
-			elements.put(VariationPointOptionalSubFeatures_4046, FeaturePackage.eINSTANCE
-				.getVariationPoint_OptionalSubFeatures());
+			elements.put(VariationPointOptionalSubFeatures_4046,
+					FeaturePackage.eINSTANCE
+							.getVariationPoint_OptionalSubFeatures());
 
-			elements.put(VariationPointInstanceVariationPoint_4033, FeaturePackage.eINSTANCE
-				.getVariationPointInstance_VariationPoint());
+			elements.put(VariationPointInstanceVariationPoint_4033,
+					FeaturePackage.eINSTANCE
+							.getVariationPointInstance_VariationPoint());
 
-			elements.put(VariationPointInstanceSelectedFeatures_4040, FeaturePackage.eINSTANCE
-				.getVariationPointInstance_SelectedFeatures());
+			elements.put(VariationPointInstanceSelectedFeatures_4040,
+					FeaturePackage.eINSTANCE
+							.getVariationPointInstance_SelectedFeatures());
 
-			elements.put(ProductVariationPointInstances_4032, FeaturePackage.eINSTANCE
-				.getProduct_VariationPointInstances());
+			elements.put(ProductVariationPointInstances_4032,
+					FeaturePackage.eINSTANCE
+							.getProduct_VariationPointInstances());
 
-			elements.put(ProductFeatures_4047, FeaturePackage.eINSTANCE.getProduct_Features());
+			elements.put(ProductFeatures_4047,
+					FeaturePackage.eINSTANCE.getProduct_Features());
+
+			elements.put(UrmlModelElementAssociations_4048,
+					UrmlPackage.eINSTANCE.getUrmlModelElement_Associations());
 		}
 		return (ENamedElement) elements.get(type);
 	}
@@ -455,7 +514,7 @@
 	 */
 	public static boolean isKnownElementType(IElementType elementType) {
 		if (KNOWN_ELEMENT_TYPES == null) {
-			KNOWN_ELEMENT_TYPES = new HashSet();
+			KNOWN_ELEMENT_TYPES = new HashSet<IElementType>();
 			KNOWN_ELEMENT_TYPES.add(URMLDiagram_1000);
 			KNOWN_ELEMENT_TYPES.add(Stakeholder_2002);
 			KNOWN_ELEMENT_TYPES.add(Goal_2001);
@@ -471,8 +530,10 @@
 			KNOWN_ELEMENT_TYPES.add(Product_2015);
 			KNOWN_ELEMENT_TYPES.add(StakeholderGoals_4008);
 			KNOWN_ELEMENT_TYPES.add(AbstractFeatureSubFeatures_4034);
-			KNOWN_ELEMENT_TYPES.add(AbstractFeatureDetailingFunctionalRequirements_4035);
-			KNOWN_ELEMENT_TYPES.add(AbstractFeatureConstrainingNonFunctionalRequirements_4036);
+			KNOWN_ELEMENT_TYPES
+					.add(AbstractFeatureDetailingFunctionalRequirements_4035);
+			KNOWN_ELEMENT_TYPES
+					.add(AbstractFeatureConstrainingNonFunctionalRequirements_4036);
 			KNOWN_ELEMENT_TYPES.add(AbstractFeatureRequiredFeatures_4045);
 			KNOWN_ELEMENT_TYPES.add(AbstractFeatureExcludedFeatures_4038);
 			KNOWN_ELEMENT_TYPES.add(GoalRealizedFeatures_4004);
@@ -482,17 +543,21 @@
 			KNOWN_ELEMENT_TYPES.add(GoalReference_4024);
 			KNOWN_ELEMENT_TYPES.add(GoalReference_4025);
 			KNOWN_ELEMENT_TYPES.add(RequirementImplementingServices_4005);
-			KNOWN_ELEMENT_TYPES.add(NonFunctionalRequirementSubNonFunctionalRequirements_4043);
-			KNOWN_ELEMENT_TYPES.add(FunctionalRequirementSubFunctionalRequirements_4044);
+			KNOWN_ELEMENT_TYPES
+					.add(NonFunctionalRequirementSubNonFunctionalRequirements_4043);
+			KNOWN_ELEMENT_TYPES
+					.add(FunctionalRequirementSubFunctionalRequirements_4044);
 			KNOWN_ELEMENT_TYPES.add(MitigationMitigatedDangers_4012);
 			KNOWN_ELEMENT_TYPES.add(DangerHarmedAssets_4013);
 			KNOWN_ELEMENT_TYPES.add(AssetTriggeredDangers_4017);
 			KNOWN_ELEMENT_TYPES.add(ServiceSubServices_4022);
 			KNOWN_ELEMENT_TYPES.add(VariationPointOptionalSubFeatures_4046);
 			KNOWN_ELEMENT_TYPES.add(VariationPointInstanceVariationPoint_4033);
-			KNOWN_ELEMENT_TYPES.add(VariationPointInstanceSelectedFeatures_4040);
+			KNOWN_ELEMENT_TYPES
+					.add(VariationPointInstanceSelectedFeatures_4040);
 			KNOWN_ELEMENT_TYPES.add(ProductVariationPointInstances_4032);
 			KNOWN_ELEMENT_TYPES.add(ProductFeatures_4047);
+			KNOWN_ELEMENT_TYPES.add(UrmlModelElementAssociations_4048);
 		}
 		return KNOWN_ELEMENT_TYPES.contains(elementType);
 	}
@@ -576,6 +641,8 @@
 			return ProductVariationPointInstances_4032;
 		case ProductFeaturesEditPart.VISUAL_ID:
 			return ProductFeatures_4047;
+		case UrmlModelElementAssociationsEditPart.VISUAL_ID:
+			return UrmlModelElementAssociations_4048;
 		}
 		return null;
 	}
Index: src/org/unicase/ui/diagram/urml/providers/UrmlModelingAssistantProvider.java
===================================================================
--- src/org/unicase/ui/diagram/urml/providers/UrmlModelingAssistantProvider.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/providers/UrmlModelingAssistantProvider.java	(working copy)
@@ -45,7 +45,8 @@
 	 * @generated
 	 */
 	public List getTypesForPopupBar(IAdaptable host) {
-		IGraphicalEditPart editPart = (IGraphicalEditPart) host.getAdapter(IGraphicalEditPart.class);
+		IGraphicalEditPart editPart = (IGraphicalEditPart) host
+				.getAdapter(IGraphicalEditPart.class);
 		if (editPart instanceof URMLDiagramEditPart) {
 			ArrayList types = new ArrayList(12);
 			types.add(UrmlElementTypes.Stakeholder_2002);
@@ -69,15 +70,18 @@
 	 * @generated
 	 */
 	public List getRelTypesOnSource(IAdaptable source) {
-		IGraphicalEditPart sourceEditPart = (IGraphicalEditPart) source.getAdapter(IGraphicalEditPart.class);
+		IGraphicalEditPart sourceEditPart = (IGraphicalEditPart) source
+				.getAdapter(IGraphicalEditPart.class);
 		if (sourceEditPart instanceof StakeholderEditPart) {
-			return ((StakeholderEditPart) sourceEditPart).getMARelTypesOnSource();
+			return ((StakeholderEditPart) sourceEditPart)
+					.getMARelTypesOnSource();
 		}
 		if (sourceEditPart instanceof GoalEditPart) {
 			return ((GoalEditPart) sourceEditPart).getMARelTypesOnSource();
 		}
 		if (sourceEditPart instanceof FunctionalRequirementEditPart) {
-			return ((FunctionalRequirementEditPart) sourceEditPart).getMARelTypesOnSource();
+			return ((FunctionalRequirementEditPart) sourceEditPart)
+					.getMARelTypesOnSource();
 		}
 		if (sourceEditPart instanceof FeatureEditPart) {
 			return ((FeatureEditPart) sourceEditPart).getMARelTypesOnSource();
@@ -86,7 +90,8 @@
 			return ((ServiceEditPart) sourceEditPart).getMARelTypesOnSource();
 		}
 		if (sourceEditPart instanceof NonFunctionalRequirementEditPart) {
-			return ((NonFunctionalRequirementEditPart) sourceEditPart).getMARelTypesOnSource();
+			return ((NonFunctionalRequirementEditPart) sourceEditPart)
+					.getMARelTypesOnSource();
 		}
 		if (sourceEditPart instanceof DangerEditPart) {
 			return ((DangerEditPart) sourceEditPart).getMARelTypesOnSource();
@@ -95,13 +100,16 @@
 			return ((ActorEditPart) sourceEditPart).getMARelTypesOnSource();
 		}
 		if (sourceEditPart instanceof ProceduralMitigationEditPart) {
-			return ((ProceduralMitigationEditPart) sourceEditPart).getMARelTypesOnSource();
+			return ((ProceduralMitigationEditPart) sourceEditPart)
+					.getMARelTypesOnSource();
 		}
 		if (sourceEditPart instanceof VariationPointEditPart) {
-			return ((VariationPointEditPart) sourceEditPart).getMARelTypesOnSource();
+			return ((VariationPointEditPart) sourceEditPart)
+					.getMARelTypesOnSource();
 		}
 		if (sourceEditPart instanceof VariationPointInstanceEditPart) {
-			return ((VariationPointInstanceEditPart) sourceEditPart).getMARelTypesOnSource();
+			return ((VariationPointInstanceEditPart) sourceEditPart)
+					.getMARelTypesOnSource();
 		}
 		if (sourceEditPart instanceof ProductEditPart) {
 			return ((ProductEditPart) sourceEditPart).getMARelTypesOnSource();
@@ -113,12 +121,18 @@
 	 * @generated
 	 */
 	public List getRelTypesOnTarget(IAdaptable target) {
-		IGraphicalEditPart targetEditPart = (IGraphicalEditPart) target.getAdapter(IGraphicalEditPart.class);
+		IGraphicalEditPart targetEditPart = (IGraphicalEditPart) target
+				.getAdapter(IGraphicalEditPart.class);
+		if (targetEditPart instanceof StakeholderEditPart) {
+			return ((StakeholderEditPart) targetEditPart)
+					.getMARelTypesOnTarget();
+		}
 		if (targetEditPart instanceof GoalEditPart) {
 			return ((GoalEditPart) targetEditPart).getMARelTypesOnTarget();
 		}
 		if (targetEditPart instanceof FunctionalRequirementEditPart) {
-			return ((FunctionalRequirementEditPart) targetEditPart).getMARelTypesOnTarget();
+			return ((FunctionalRequirementEditPart) targetEditPart)
+					.getMARelTypesOnTarget();
 		}
 		if (targetEditPart instanceof FeatureEditPart) {
 			return ((FeatureEditPart) targetEditPart).getMARelTypesOnTarget();
@@ -127,7 +141,8 @@
 			return ((ServiceEditPart) targetEditPart).getMARelTypesOnTarget();
 		}
 		if (targetEditPart instanceof NonFunctionalRequirementEditPart) {
-			return ((NonFunctionalRequirementEditPart) targetEditPart).getMARelTypesOnTarget();
+			return ((NonFunctionalRequirementEditPart) targetEditPart)
+					.getMARelTypesOnTarget();
 		}
 		if (targetEditPart instanceof DangerEditPart) {
 			return ((DangerEditPart) targetEditPart).getMARelTypesOnTarget();
@@ -135,11 +150,20 @@
 		if (targetEditPart instanceof ActorEditPart) {
 			return ((ActorEditPart) targetEditPart).getMARelTypesOnTarget();
 		}
+		if (targetEditPart instanceof ProceduralMitigationEditPart) {
+			return ((ProceduralMitigationEditPart) targetEditPart)
+					.getMARelTypesOnTarget();
+		}
 		if (targetEditPart instanceof VariationPointEditPart) {
-			return ((VariationPointEditPart) targetEditPart).getMARelTypesOnTarget();
+			return ((VariationPointEditPart) targetEditPart)
+					.getMARelTypesOnTarget();
 		}
 		if (targetEditPart instanceof VariationPointInstanceEditPart) {
-			return ((VariationPointInstanceEditPart) targetEditPart).getMARelTypesOnTarget();
+			return ((VariationPointInstanceEditPart) targetEditPart)
+					.getMARelTypesOnTarget();
+		}
+		if (targetEditPart instanceof ProductEditPart) {
+			return ((ProductEditPart) targetEditPart).getMARelTypesOnTarget();
 		}
 		return Collections.EMPTY_LIST;
 	}
@@ -147,44 +171,59 @@
 	/**
 	 * @generated
 	 */
-	public List getRelTypesOnSourceAndTarget(IAdaptable source, IAdaptable target) {
-		IGraphicalEditPart sourceEditPart = (IGraphicalEditPart) source.getAdapter(IGraphicalEditPart.class);
-		IGraphicalEditPart targetEditPart = (IGraphicalEditPart) target.getAdapter(IGraphicalEditPart.class);
+	public List getRelTypesOnSourceAndTarget(IAdaptable source,
+			IAdaptable target) {
+		IGraphicalEditPart sourceEditPart = (IGraphicalEditPart) source
+				.getAdapter(IGraphicalEditPart.class);
+		IGraphicalEditPart targetEditPart = (IGraphicalEditPart) target
+				.getAdapter(IGraphicalEditPart.class);
 		if (sourceEditPart instanceof StakeholderEditPart) {
-			return ((StakeholderEditPart) sourceEditPart).getMARelTypesOnSourceAndTarget(targetEditPart);
+			return ((StakeholderEditPart) sourceEditPart)
+					.getMARelTypesOnSourceAndTarget(targetEditPart);
 		}
 		if (sourceEditPart instanceof GoalEditPart) {
-			return ((GoalEditPart) sourceEditPart).getMARelTypesOnSourceAndTarget(targetEditPart);
+			return ((GoalEditPart) sourceEditPart)
+					.getMARelTypesOnSourceAndTarget(targetEditPart);
 		}
 		if (sourceEditPart instanceof FunctionalRequirementEditPart) {
-			return ((FunctionalRequirementEditPart) sourceEditPart).getMARelTypesOnSourceAndTarget(targetEditPart);
+			return ((FunctionalRequirementEditPart) sourceEditPart)
+					.getMARelTypesOnSourceAndTarget(targetEditPart);
 		}
 		if (sourceEditPart instanceof FeatureEditPart) {
-			return ((FeatureEditPart) sourceEditPart).getMARelTypesOnSourceAndTarget(targetEditPart);
+			return ((FeatureEditPart) sourceEditPart)
+					.getMARelTypesOnSourceAndTarget(targetEditPart);
 		}
 		if (sourceEditPart instanceof ServiceEditPart) {
-			return ((ServiceEditPart) sourceEditPart).getMARelTypesOnSourceAndTarget(targetEditPart);
+			return ((ServiceEditPart) sourceEditPart)
+					.getMARelTypesOnSourceAndTarget(targetEditPart);
 		}
 		if (sourceEditPart instanceof NonFunctionalRequirementEditPart) {
-			return ((NonFunctionalRequirementEditPart) sourceEditPart).getMARelTypesOnSourceAndTarget(targetEditPart);
+			return ((NonFunctionalRequirementEditPart) sourceEditPart)
+					.getMARelTypesOnSourceAndTarget(targetEditPart);
 		}
 		if (sourceEditPart instanceof DangerEditPart) {
-			return ((DangerEditPart) sourceEditPart).getMARelTypesOnSourceAndTarget(targetEditPart);
+			return ((DangerEditPart) sourceEditPart)
+					.getMARelTypesOnSourceAndTarget(targetEditPart);
 		}
 		if (sourceEditPart instanceof ActorEditPart) {
-			return ((ActorEditPart) sourceEditPart).getMARelTypesOnSourceAndTarget(targetEditPart);
+			return ((ActorEditPart) sourceEditPart)
+					.getMARelTypesOnSourceAndTarget(targetEditPart);
 		}
 		if (sourceEditPart instanceof ProceduralMitigationEditPart) {
-			return ((ProceduralMitigationEditPart) sourceEditPart).getMARelTypesOnSourceAndTarget(targetEditPart);
+			return ((ProceduralMitigationEditPart) sourceEditPart)
+					.getMARelTypesOnSourceAndTarget(targetEditPart);
 		}
 		if (sourceEditPart instanceof VariationPointEditPart) {
-			return ((VariationPointEditPart) sourceEditPart).getMARelTypesOnSourceAndTarget(targetEditPart);
+			return ((VariationPointEditPart) sourceEditPart)
+					.getMARelTypesOnSourceAndTarget(targetEditPart);
 		}
 		if (sourceEditPart instanceof VariationPointInstanceEditPart) {
-			return ((VariationPointInstanceEditPart) sourceEditPart).getMARelTypesOnSourceAndTarget(targetEditPart);
+			return ((VariationPointInstanceEditPart) sourceEditPart)
+					.getMARelTypesOnSourceAndTarget(targetEditPart);
 		}
 		if (sourceEditPart instanceof ProductEditPart) {
-			return ((ProductEditPart) sourceEditPart).getMARelTypesOnSourceAndTarget(targetEditPart);
+			return ((ProductEditPart) sourceEditPart)
+					.getMARelTypesOnSourceAndTarget(targetEditPart);
 		}
 		return Collections.EMPTY_LIST;
 	}
@@ -192,34 +231,57 @@
 	/**
 	 * @generated
 	 */
-	public List getTypesForSource(IAdaptable target, IElementType relationshipType) {
-		IGraphicalEditPart targetEditPart = (IGraphicalEditPart) target.getAdapter(IGraphicalEditPart.class);
+	public List getTypesForSource(IAdaptable target,
+			IElementType relationshipType) {
+		IGraphicalEditPart targetEditPart = (IGraphicalEditPart) target
+				.getAdapter(IGraphicalEditPart.class);
+		if (targetEditPart instanceof StakeholderEditPart) {
+			return ((StakeholderEditPart) targetEditPart)
+					.getMATypesForSource(relationshipType);
+		}
 		if (targetEditPart instanceof GoalEditPart) {
-			return ((GoalEditPart) targetEditPart).getMATypesForSource(relationshipType);
+			return ((GoalEditPart) targetEditPart)
+					.getMATypesForSource(relationshipType);
 		}
 		if (targetEditPart instanceof FunctionalRequirementEditPart) {
-			return ((FunctionalRequirementEditPart) targetEditPart).getMATypesForSource(relationshipType);
+			return ((FunctionalRequirementEditPart) targetEditPart)
+					.getMATypesForSource(relationshipType);
 		}
 		if (targetEditPart instanceof FeatureEditPart) {
-			return ((FeatureEditPart) targetEditPart).getMATypesForSource(relationshipType);
+			return ((FeatureEditPart) targetEditPart)
+					.getMATypesForSource(relationshipType);
 		}
 		if (targetEditPart instanceof ServiceEditPart) {
-			return ((ServiceEditPart) targetEditPart).getMATypesForSource(relationshipType);
+			return ((ServiceEditPart) targetEditPart)
+					.getMATypesForSource(relationshipType);
 		}
 		if (targetEditPart instanceof NonFunctionalRequirementEditPart) {
-			return ((NonFunctionalRequirementEditPart) targetEditPart).getMATypesForSource(relationshipType);
+			return ((NonFunctionalRequirementEditPart) targetEditPart)
+					.getMATypesForSource(relationshipType);
 		}
 		if (targetEditPart instanceof DangerEditPart) {
-			return ((DangerEditPart) targetEditPart).getMATypesForSource(relationshipType);
+			return ((DangerEditPart) targetEditPart)
+					.getMATypesForSource(relationshipType);
 		}
 		if (targetEditPart instanceof ActorEditPart) {
-			return ((ActorEditPart) targetEditPart).getMATypesForSource(relationshipType);
+			return ((ActorEditPart) targetEditPart)
+					.getMATypesForSource(relationshipType);
+		}
+		if (targetEditPart instanceof ProceduralMitigationEditPart) {
+			return ((ProceduralMitigationEditPart) targetEditPart)
+					.getMATypesForSource(relationshipType);
 		}
 		if (targetEditPart instanceof VariationPointEditPart) {
-			return ((VariationPointEditPart) targetEditPart).getMATypesForSource(relationshipType);
+			return ((VariationPointEditPart) targetEditPart)
+					.getMATypesForSource(relationshipType);
 		}
 		if (targetEditPart instanceof VariationPointInstanceEditPart) {
-			return ((VariationPointInstanceEditPart) targetEditPart).getMATypesForSource(relationshipType);
+			return ((VariationPointInstanceEditPart) targetEditPart)
+					.getMATypesForSource(relationshipType);
+		}
+		if (targetEditPart instanceof ProductEditPart) {
+			return ((ProductEditPart) targetEditPart)
+					.getMATypesForSource(relationshipType);
 		}
 		return Collections.EMPTY_LIST;
 	}
@@ -227,43 +289,57 @@
 	/**
 	 * @generated
 	 */
-	public List getTypesForTarget(IAdaptable source, IElementType relationshipType) {
-		IGraphicalEditPart sourceEditPart = (IGraphicalEditPart) source.getAdapter(IGraphicalEditPart.class);
+	public List getTypesForTarget(IAdaptable source,
+			IElementType relationshipType) {
+		IGraphicalEditPart sourceEditPart = (IGraphicalEditPart) source
+				.getAdapter(IGraphicalEditPart.class);
 		if (sourceEditPart instanceof StakeholderEditPart) {
-			return ((StakeholderEditPart) sourceEditPart).getMATypesForTarget(relationshipType);
+			return ((StakeholderEditPart) sourceEditPart)
+					.getMATypesForTarget(relationshipType);
 		}
 		if (sourceEditPart instanceof GoalEditPart) {
-			return ((GoalEditPart) sourceEditPart).getMATypesForTarget(relationshipType);
+			return ((GoalEditPart) sourceEditPart)
+					.getMATypesForTarget(relationshipType);
 		}
 		if (sourceEditPart instanceof FunctionalRequirementEditPart) {
-			return ((FunctionalRequirementEditPart) sourceEditPart).getMATypesForTarget(relationshipType);
+			return ((FunctionalRequirementEditPart) sourceEditPart)
+					.getMATypesForTarget(relationshipType);
 		}
 		if (sourceEditPart instanceof FeatureEditPart) {
-			return ((FeatureEditPart) sourceEditPart).getMATypesForTarget(relationshipType);
+			return ((FeatureEditPart) sourceEditPart)
+					.getMATypesForTarget(relationshipType);
 		}
 		if (sourceEditPart instanceof ServiceEditPart) {
-			return ((ServiceEditPart) sourceEditPart).getMATypesForTarget(relationshipType);
+			return ((ServiceEditPart) sourceEditPart)
+					.getMATypesForTarget(relationshipType);
 		}
 		if (sourceEditPart instanceof NonFunctionalRequirementEditPart) {
-			return ((NonFunctionalRequirementEditPart) sourceEditPart).getMATypesForTarget(relationshipType);
+			return ((NonFunctionalRequirementEditPart) sourceEditPart)
+					.getMATypesForTarget(relationshipType);
 		}
 		if (sourceEditPart instanceof DangerEditPart) {
-			return ((DangerEditPart) sourceEditPart).getMATypesForTarget(relationshipType);
+			return ((DangerEditPart) sourceEditPart)
+					.getMATypesForTarget(relationshipType);
 		}
 		if (sourceEditPart instanceof ActorEditPart) {
-			return ((ActorEditPart) sourceEditPart).getMATypesForTarget(relationshipType);
+			return ((ActorEditPart) sourceEditPart)
+					.getMATypesForTarget(relationshipType);
 		}
 		if (sourceEditPart instanceof ProceduralMitigationEditPart) {
-			return ((ProceduralMitigationEditPart) sourceEditPart).getMATypesForTarget(relationshipType);
+			return ((ProceduralMitigationEditPart) sourceEditPart)
+					.getMATypesForTarget(relationshipType);
 		}
 		if (sourceEditPart instanceof VariationPointEditPart) {
-			return ((VariationPointEditPart) sourceEditPart).getMATypesForTarget(relationshipType);
+			return ((VariationPointEditPart) sourceEditPart)
+					.getMATypesForTarget(relationshipType);
 		}
 		if (sourceEditPart instanceof VariationPointInstanceEditPart) {
-			return ((VariationPointInstanceEditPart) sourceEditPart).getMATypesForTarget(relationshipType);
+			return ((VariationPointInstanceEditPart) sourceEditPart)
+					.getMATypesForTarget(relationshipType);
 		}
 		if (sourceEditPart instanceof ProductEditPart) {
-			return ((ProductEditPart) sourceEditPart).getMATypesForTarget(relationshipType);
+			return ((ProductEditPart) sourceEditPart)
+					.getMATypesForTarget(relationshipType);
 		}
 		return Collections.EMPTY_LIST;
 	}
@@ -271,15 +347,19 @@
 	/**
 	 * @generated
 	 */
-	public EObject selectExistingElementForSource(IAdaptable target, IElementType relationshipType) {
-		return selectExistingElement(target, getTypesForSource(target, relationshipType));
+	public EObject selectExistingElementForSource(IAdaptable target,
+			IElementType relationshipType) {
+		return selectExistingElement(target,
+				getTypesForSource(target, relationshipType));
 	}
 
 	/**
 	 * @generated
 	 */
-	public EObject selectExistingElementForTarget(IAdaptable source, IElementType relationshipType) {
-		return selectExistingElement(source, getTypesForTarget(source, relationshipType));
+	public EObject selectExistingElementForTarget(IAdaptable source,
+			IElementType relationshipType) {
+		return selectExistingElement(source,
+				getTypesForTarget(source, relationshipType));
 	}
 
 	/**
@@ -289,7 +369,8 @@
 		if (types.isEmpty()) {
 			return null;
 		}
-		IGraphicalEditPart editPart = (IGraphicalEditPart) host.getAdapter(IGraphicalEditPart.class);
+		IGraphicalEditPart editPart = (IGraphicalEditPart) host
+				.getAdapter(IGraphicalEditPart.class);
 		if (editPart == null) {
 			return null;
 		}
@@ -304,14 +385,16 @@
 		if (elements.isEmpty()) {
 			return null;
 		}
-		return selectElement((EObject[]) elements.toArray(new EObject[elements.size()]));
+		return selectElement((EObject[]) elements.toArray(new EObject[elements
+				.size()]));
 	}
 
 	/**
 	 * @generated
 	 */
 	protected boolean isApplicableElement(EObject element, Collection types) {
-		IElementType type = ElementTypeRegistry.getInstance().getElementType(element);
+		IElementType type = ElementTypeRegistry.getInstance().getElementType(
+				element);
 		return types.contains(type);
 	}
 
@@ -320,9 +403,11 @@
 	 */
 	protected EObject selectElement(EObject[] elements) {
 		Shell shell = Display.getCurrent().getActiveShell();
-		ILabelProvider labelProvider = new AdapterFactoryLabelProvider(UrmlDiagramEditorPlugin.getInstance()
-			.getItemProvidersAdapterFactory());
-		ElementListSelectionDialog dialog = new ElementListSelectionDialog(shell, labelProvider);
+		ILabelProvider labelProvider = new AdapterFactoryLabelProvider(
+				UrmlDiagramEditorPlugin.getInstance()
+						.getItemProvidersAdapterFactory());
+		ElementListSelectionDialog dialog = new ElementListSelectionDialog(
+				shell, labelProvider);
 		dialog.setMessage(Messages.UrmlModelingAssistantProviderMessage);
 		dialog.setTitle(Messages.UrmlModelingAssistantProviderTitle);
 		dialog.setMultipleSelection(false);
Index: src/org/unicase/ui/diagram/urml/providers/ElementInitializers.java
===================================================================
--- src/org/unicase/ui/diagram/urml/providers/ElementInitializers.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/providers/ElementInitializers.java	(working copy)
@@ -11,64 +11,93 @@
  * @generated
  */
 public class ElementInitializers {
+	protected ElementInitializers() {
+		// use #getInstance to access cached instance
+	}
+
 	/**
 	 * @generated
 	 */
-	public static void init_GoalReference_4016(GoalReference instance) {
+	public void init_GoalReference_4016(GoalReference instance) {
 		try {
-			Object value_0 = UrmlOCLFactory.getExpression("GoalReferenceType::PLUS_PLUS",
-				GoalPackage.eINSTANCE.getGoalReference()).evaluate(instance);
+			Object value_0 = UrmlOCLFactory.getExpression(1,
+					GoalPackage.eINSTANCE.getGoalReference(), null).evaluate(
+					instance);
 
-			value_0 = UrmlAbstractExpression.performCast(value_0, GoalPackage.eINSTANCE.getGoalReferenceType());
+			value_0 = UrmlAbstractExpression.performCast(value_0,
+					GoalPackage.eINSTANCE.getGoalReferenceType());
 			instance.setWeight((GoalReferenceType) value_0);
 		} catch (RuntimeException e) {
-			UrmlDiagramEditorPlugin.getInstance().logError("Element initialization failed", e); //$NON-NLS-1$						
+			UrmlDiagramEditorPlugin.getInstance().logError(
+					"Element initialization failed", e); //$NON-NLS-1$						
 		}
 	}
 
 	/**
 	 * @generated
 	 */
-	public static void init_GoalReference_4023(GoalReference instance) {
+	public void init_GoalReference_4023(GoalReference instance) {
 		try {
-			Object value_0 = UrmlOCLFactory.getExpression("GoalReferenceType::PLUS",
-				GoalPackage.eINSTANCE.getGoalReference()).evaluate(instance);
+			Object value_0 = UrmlOCLFactory.getExpression(3,
+					GoalPackage.eINSTANCE.getGoalReference(), null).evaluate(
+					instance);
 
-			value_0 = UrmlAbstractExpression.performCast(value_0, GoalPackage.eINSTANCE.getGoalReferenceType());
+			value_0 = UrmlAbstractExpression.performCast(value_0,
+					GoalPackage.eINSTANCE.getGoalReferenceType());
 			instance.setWeight((GoalReferenceType) value_0);
 		} catch (RuntimeException e) {
-			UrmlDiagramEditorPlugin.getInstance().logError("Element initialization failed", e); //$NON-NLS-1$						
+			UrmlDiagramEditorPlugin.getInstance().logError(
+					"Element initialization failed", e); //$NON-NLS-1$						
 		}
 	}
 
 	/**
 	 * @generated
 	 */
-	public static void init_GoalReference_4024(GoalReference instance) {
+	public void init_GoalReference_4024(GoalReference instance) {
 		try {
-			Object value_0 = UrmlOCLFactory.getExpression("GoalReferenceType::MINUS",
-				GoalPackage.eINSTANCE.getGoalReference()).evaluate(instance);
+			Object value_0 = UrmlOCLFactory.getExpression(5,
+					GoalPackage.eINSTANCE.getGoalReference(), null).evaluate(
+					instance);
 
-			value_0 = UrmlAbstractExpression.performCast(value_0, GoalPackage.eINSTANCE.getGoalReferenceType());
+			value_0 = UrmlAbstractExpression.performCast(value_0,
+					GoalPackage.eINSTANCE.getGoalReferenceType());
 			instance.setWeight((GoalReferenceType) value_0);
 		} catch (RuntimeException e) {
-			UrmlDiagramEditorPlugin.getInstance().logError("Element initialization failed", e); //$NON-NLS-1$						
+			UrmlDiagramEditorPlugin.getInstance().logError(
+					"Element initialization failed", e); //$NON-NLS-1$						
 		}
 	}
 
 	/**
 	 * @generated
 	 */
-	public static void init_GoalReference_4025(GoalReference instance) {
+	public void init_GoalReference_4025(GoalReference instance) {
 		try {
-			Object value_0 = UrmlOCLFactory.getExpression("GoalReferenceType::MINUS_MINUS",
-				GoalPackage.eINSTANCE.getGoalReference()).evaluate(instance);
+			Object value_0 = UrmlOCLFactory.getExpression(7,
+					GoalPackage.eINSTANCE.getGoalReference(), null).evaluate(
+					instance);
 
-			value_0 = UrmlAbstractExpression.performCast(value_0, GoalPackage.eINSTANCE.getGoalReferenceType());
+			value_0 = UrmlAbstractExpression.performCast(value_0,
+					GoalPackage.eINSTANCE.getGoalReferenceType());
 			instance.setWeight((GoalReferenceType) value_0);
 		} catch (RuntimeException e) {
-			UrmlDiagramEditorPlugin.getInstance().logError("Element initialization failed", e); //$NON-NLS-1$						
+			UrmlDiagramEditorPlugin.getInstance().logError(
+					"Element initialization failed", e); //$NON-NLS-1$						
+		}
+	}
+
+	/**
+	 * @generated
+	 */
+	public static ElementInitializers getInstance() {
+		ElementInitializers cached = UrmlDiagramEditorPlugin.getInstance()
+				.getElementInitializers();
+		if (cached == null) {
+			UrmlDiagramEditorPlugin.getInstance().setElementInitializers(
+					cached = new ElementInitializers());
 		}
+		return cached;
 	}
 
 }
Index: src/org/unicase/ui/diagram/urml/part/Messages.java
===================================================================
--- src/org/unicase/ui/diagram/urml/part/Messages.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/part/Messages.java	(working copy)
@@ -328,11 +328,26 @@
 	/**
 	 * @generated
 	 */
+	public static String NavigatorGroupName_UrmlModelElementAssociations_4048_target;
+
+	/**
+	 * @generated
+	 */
+	public static String NavigatorGroupName_UrmlModelElementAssociations_4048_source;
+
+	/**
+	 * @generated
+	 */
 	public static String NavigatorGroupName_Stakeholder_2002_outgoinglinks;
 
 	/**
 	 * @generated
 	 */
+	public static String NavigatorGroupName_Stakeholder_2002_incominglinks;
+
+	/**
+	 * @generated
+	 */
 	public static String NavigatorGroupName_Goal_2001_incominglinks;
 
 	/**
@@ -408,6 +423,11 @@
 	/**
 	 * @generated
 	 */
+	public static String NavigatorGroupName_ProceduralMitigation_2011_incominglinks;
+
+	/**
+	 * @generated
+	 */
 	public static String NavigatorGroupName_VariationPoint_2013_incominglinks;
 
 	/**
@@ -433,6 +453,11 @@
 	/**
 	 * @generated
 	 */
+	public static String NavigatorGroupName_Product_2015_incominglinks;
+
+	/**
+	 * @generated
+	 */
 	public static String NavigatorGroupName_StakeholderGoals_4008_target;
 
 	/**
@@ -523,6 +548,16 @@
 	/**
 	 * @generated
 	 */
+	public static String NavigatorGroupName_GoalReference_4016_incominglinks;
+
+	/**
+	 * @generated
+	 */
+	public static String NavigatorGroupName_GoalReference_4016_outgoinglinks;
+
+	/**
+	 * @generated
+	 */
 	public static String NavigatorGroupName_GoalReference_4023_target;
 
 	/**
@@ -533,6 +568,16 @@
 	/**
 	 * @generated
 	 */
+	public static String NavigatorGroupName_GoalReference_4023_incominglinks;
+
+	/**
+	 * @generated
+	 */
+	public static String NavigatorGroupName_GoalReference_4023_outgoinglinks;
+
+	/**
+	 * @generated
+	 */
 	public static String NavigatorGroupName_GoalReference_4024_target;
 
 	/**
@@ -543,6 +588,16 @@
 	/**
 	 * @generated
 	 */
+	public static String NavigatorGroupName_GoalReference_4024_incominglinks;
+
+	/**
+	 * @generated
+	 */
+	public static String NavigatorGroupName_GoalReference_4024_outgoinglinks;
+
+	/**
+	 * @generated
+	 */
 	public static String NavigatorGroupName_GoalReference_4025_target;
 
 	/**
@@ -553,6 +608,16 @@
 	/**
 	 * @generated
 	 */
+	public static String NavigatorGroupName_GoalReference_4025_incominglinks;
+
+	/**
+	 * @generated
+	 */
+	public static String NavigatorGroupName_GoalReference_4025_outgoinglinks;
+
+	/**
+	 * @generated
+	 */
 	public static String NavigatorGroupName_RequirementImplementingServices_4005_target;
 
 	/**
Index: src/org/unicase/ui/diagram/urml/part/UrmlInitDiagramFileAction.java
===================================================================
--- src/org/unicase/ui/diagram/urml/part/UrmlInitDiagramFileAction.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/part/UrmlInitDiagramFileAction.java	(working copy)
@@ -47,11 +47,14 @@
 	public void selectionChanged(IAction action, ISelection selection) {
 		domainModelURI = null;
 		action.setEnabled(false);
-		if (selection instanceof IStructuredSelection == false || selection.isEmpty()) {
+		if (selection instanceof IStructuredSelection == false
+				|| selection.isEmpty()) {
 			return;
 		}
-		IFile file = (IFile) ((IStructuredSelection) selection).getFirstElement();
-		domainModelURI = URI.createPlatformResourceURI(file.getFullPath().toString(), true);
+		IFile file = (IFile) ((IStructuredSelection) selection)
+				.getFirstElement();
+		domainModelURI = URI.createPlatformResourceURI(file.getFullPath()
+				.toString(), true);
 		action.setEnabled(true);
 	}
 
@@ -66,22 +69,27 @@
 	 * @generated
 	 */
 	public void run(IAction action) {
-		TransactionalEditingDomain editingDomain = GMFEditingDomainFactory.INSTANCE.createEditingDomain();
+		TransactionalEditingDomain editingDomain = GMFEditingDomainFactory.INSTANCE
+				.createEditingDomain();
 		ResourceSet resourceSet = editingDomain.getResourceSet();
 		EObject diagramRoot = null;
 		try {
 			Resource resource = resourceSet.getResource(domainModelURI, true);
 			diagramRoot = (EObject) resource.getContents().get(0);
 		} catch (WrappedException ex) {
-			UrmlDiagramEditorPlugin.getInstance().logError("Unable to load resource: " + domainModelURI, ex); //$NON-NLS-1$
+			UrmlDiagramEditorPlugin.getInstance().logError(
+					"Unable to load resource: " + domainModelURI, ex); //$NON-NLS-1$
 		}
 		if (diagramRoot == null) {
-			MessageDialog.openError(getShell(), Messages.InitDiagramFile_ResourceErrorDialogTitle,
-				Messages.InitDiagramFile_ResourceErrorDialogMessage);
+			MessageDialog.openError(getShell(),
+					Messages.InitDiagramFile_ResourceErrorDialogTitle,
+					Messages.InitDiagramFile_ResourceErrorDialogMessage);
 			return;
 		}
-		Wizard wizard = new UrmlNewDiagramFileWizard(domainModelURI, diagramRoot, editingDomain);
-		wizard.setWindowTitle(NLS.bind(Messages.InitDiagramFile_WizardTitle, URMLDiagramEditPart.MODEL_ID));
+		Wizard wizard = new UrmlNewDiagramFileWizard(domainModelURI,
+				diagramRoot, editingDomain);
+		wizard.setWindowTitle(NLS.bind(Messages.InitDiagramFile_WizardTitle,
+				URMLDiagramEditPart.MODEL_ID));
 		UrmlDiagramEditorUtil.runWizard(getShell(), wizard, "InitDiagramFile"); //$NON-NLS-1$
 	}
 }
Index: src/org/unicase/ui/diagram/urml/part/UrmlCreationWizard.java
===================================================================
--- src/org/unicase/ui/diagram/urml/part/UrmlCreationWizard.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/part/UrmlCreationWizard.java	(working copy)
@@ -80,7 +80,8 @@
 	/**
 	 * @generated
 	 */
-	public void setOpenNewlyCreatedDiagramEditor(boolean openNewlyCreatedDiagramEditor) {
+	public void setOpenNewlyCreatedDiagramEditor(
+			boolean openNewlyCreatedDiagramEditor) {
 		this.openNewlyCreatedDiagramEditor = openNewlyCreatedDiagramEditor;
 	}
 
@@ -92,7 +93,7 @@
 		this.selection = selection;
 		setWindowTitle(Messages.UrmlCreationWizardTitle);
 		setDefaultPageImageDescriptor(UrmlDiagramEditorPlugin
-			.getBundledImageDescriptor("icons/wizban/NewUrmlWizard.gif")); //$NON-NLS-1$
+				.getBundledImageDescriptor("icons/wizban/NewUrmlWizard.gif")); //$NON-NLS-1$
 		setNeedsProgressMonitor(true);
 	}
 
@@ -100,24 +101,32 @@
 	 * @generated
 	 */
 	public void addPages() {
-		diagramModelFilePage = new UrmlCreationWizardPage("DiagramModelFile", getSelection(), "urml_diagram"); //$NON-NLS-1$ //$NON-NLS-2$
-		diagramModelFilePage.setTitle(Messages.UrmlCreationWizard_DiagramModelFilePageTitle);
-		diagramModelFilePage.setDescription(Messages.UrmlCreationWizard_DiagramModelFilePageDescription);
+		diagramModelFilePage = new UrmlCreationWizardPage(
+				"DiagramModelFile", getSelection(), "urml_diagram"); //$NON-NLS-1$ //$NON-NLS-2$
+		diagramModelFilePage
+				.setTitle(Messages.UrmlCreationWizard_DiagramModelFilePageTitle);
+		diagramModelFilePage
+				.setDescription(Messages.UrmlCreationWizard_DiagramModelFilePageDescription);
 		addPage(diagramModelFilePage);
 
-		domainModelFilePage = new UrmlCreationWizardPage("DomainModelFile", getSelection(), "urml") { //$NON-NLS-1$ //$NON-NLS-2$
+		domainModelFilePage = new UrmlCreationWizardPage(
+				"DomainModelFile", getSelection(), "urml") { //$NON-NLS-1$ //$NON-NLS-2$
 
 			public void setVisible(boolean visible) {
 				if (visible) {
 					String fileName = diagramModelFilePage.getFileName();
-					fileName = fileName.substring(0, fileName.length() - ".urml_diagram".length()); //$NON-NLS-1$
-					setFileName(UrmlDiagramEditorUtil.getUniqueFileName(getContainerFullPath(), fileName, "urml")); //$NON-NLS-1$
+					fileName = fileName.substring(0, fileName.length()
+							- ".urml_diagram".length()); //$NON-NLS-1$
+					setFileName(UrmlDiagramEditorUtil.getUniqueFileName(
+							getContainerFullPath(), fileName, "urml")); //$NON-NLS-1$
 				}
 				super.setVisible(visible);
 			}
 		};
-		domainModelFilePage.setTitle(Messages.UrmlCreationWizard_DomainModelFilePageTitle);
-		domainModelFilePage.setDescription(Messages.UrmlCreationWizard_DomainModelFilePageDescription);
+		domainModelFilePage
+				.setTitle(Messages.UrmlCreationWizard_DomainModelFilePageTitle);
+		domainModelFilePage
+				.setDescription(Messages.UrmlCreationWizard_DomainModelFilePageDescription);
 		addPage(domainModelFilePage);
 	}
 
@@ -127,15 +136,18 @@
 	public boolean performFinish() {
 		IRunnableWithProgress op = new WorkspaceModifyOperation(null) {
 
-			protected void execute(IProgressMonitor monitor) throws CoreException, InterruptedException {
-				diagram = UrmlDiagramEditorUtil.createDiagram(diagramModelFilePage.getURI(), domainModelFilePage
-					.getURI(), monitor);
+			protected void execute(IProgressMonitor monitor)
+					throws CoreException, InterruptedException {
+				diagram = UrmlDiagramEditorUtil.createDiagram(
+						diagramModelFilePage.getURI(),
+						domainModelFilePage.getURI(), monitor);
 				if (isOpenNewlyCreatedDiagramEditor() && diagram != null) {
 					try {
 						UrmlDiagramEditorUtil.openDiagram(diagram);
 					} catch (PartInitException e) {
-						ErrorDialog.openError(getContainer().getShell(), Messages.UrmlCreationWizardOpenEditorError,
-							null, e.getStatus());
+						ErrorDialog.openError(getContainer().getShell(),
+								Messages.UrmlCreationWizardOpenEditorError,
+								null, e.getStatus());
 					}
 				}
 			}
@@ -146,10 +158,12 @@
 			return false;
 		} catch (InvocationTargetException e) {
 			if (e.getTargetException() instanceof CoreException) {
-				ErrorDialog.openError(getContainer().getShell(), Messages.UrmlCreationWizardCreationError, null,
-					((CoreException) e.getTargetException()).getStatus());
+				ErrorDialog.openError(getContainer().getShell(),
+						Messages.UrmlCreationWizardCreationError, null,
+						((CoreException) e.getTargetException()).getStatus());
 			} else {
-				UrmlDiagramEditorPlugin.getInstance().logError("Error creating diagram", e.getTargetException()); //$NON-NLS-1$
+				UrmlDiagramEditorPlugin.getInstance().logError(
+						"Error creating diagram", e.getTargetException()); //$NON-NLS-1$
 			}
 			return false;
 		}
Index: src/org/unicase/ui/diagram/urml/part/DiagramEditorContextMenuProvider.java
===================================================================
--- src/org/unicase/ui/diagram/urml/part/DiagramEditorContextMenuProvider.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/part/DiagramEditorContextMenuProvider.java	(working copy)
@@ -12,7 +12,8 @@
 /**
  * @generated
  */
-public class DiagramEditorContextMenuProvider extends DiagramContextMenuProvider {
+public class DiagramEditorContextMenuProvider extends
+		DiagramContextMenuProvider {
 
 	/**
 	 * @generated
@@ -27,7 +28,8 @@
 	/**
 	 * @generated
 	 */
-	public DiagramEditorContextMenuProvider(IWorkbenchPart part, EditPartViewer viewer) {
+	public DiagramEditorContextMenuProvider(IWorkbenchPart part,
+			EditPartViewer viewer) {
 		super(part, viewer);
 		this.part = part;
 		deleteAction = new DeleteElementAction(part);
@@ -51,18 +53,23 @@
 	public void buildContextMenu(final IMenuManager menu) {
 		getViewer().flush();
 		try {
-			TransactionUtil.getEditingDomain((EObject) getViewer().getContents().getModel()).runExclusive(
-				new Runnable() {
+			TransactionUtil.getEditingDomain(
+					(EObject) getViewer().getContents().getModel())
+					.runExclusive(new Runnable() {
 
-					public void run() {
-						ContributionItemService.getInstance().contributeToPopupMenu(
-							DiagramEditorContextMenuProvider.this, part);
-						menu.remove(ActionIds.ACTION_DELETE_FROM_MODEL);
-						menu.appendToGroup("editGroup", deleteAction);
-					}
-				});
+						public void run() {
+							ContributionItemService
+									.getInstance()
+									.contributeToPopupMenu(
+											DiagramEditorContextMenuProvider.this,
+											part);
+							menu.remove(ActionIds.ACTION_DELETE_FROM_MODEL);
+							menu.appendToGroup("editGroup", deleteAction);
+						}
+					});
 		} catch (Exception e) {
-			UrmlDiagramEditorPlugin.getInstance().logError("Error building context menu", e);
+			UrmlDiagramEditorPlugin.getInstance().logError(
+					"Error building context menu", e);
 		}
 	}
 }
Index: src/org/unicase/ui/diagram/urml/part/UrmlDiagramEditor.java
===================================================================
--- src/org/unicase/ui/diagram/urml/part/UrmlDiagramEditor.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/part/UrmlDiagramEditor.java	(working copy)
@@ -19,6 +19,7 @@
 import org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.IDiagramDocument;
 import org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.IDocument;
 import org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.IDocumentProvider;
+import org.eclipse.gmf.runtime.diagram.ui.resources.editor.parts.DiagramDocumentEditor;
 import org.eclipse.gmf.runtime.notation.Diagram;
 import org.eclipse.jface.dialogs.ErrorDialog;
 import org.eclipse.jface.dialogs.IMessageProvider;
@@ -46,7 +47,8 @@
  * @generated
  */
 
-public class UrmlDiagramEditor extends ModelDiagramEditor implements IGotoMarker {
+public class UrmlDiagramEditor extends ModelDiagramEditor implements
+		IGotoMarker {
 
 	/**
 	 * @generated
@@ -91,6 +93,7 @@
 	/**
 	 * @generated
 	 */
+	@SuppressWarnings("rawtypes")
 	public Object getAdapter(Class type) {
 		if (type == IShowInTargetList.class) {
 			return new IShowInTargetList() {
@@ -106,7 +109,8 @@
 	 * @generated
 	 */
 	protected IDocumentProvider getDocumentProvider(IEditorInput input) {
-		if (input instanceof IFileEditorInput || input instanceof URIEditorInput) {
+		if (input instanceof IFileEditorInput
+				|| input instanceof URIEditorInput) {
 			return UrmlDiagramEditorPlugin.getInstance().getDocumentProvider();
 		}
 		return super.getDocumentProvider(input);
@@ -116,7 +120,8 @@
 	 * @generated
 	 */
 	public TransactionalEditingDomain getEditingDomain() {
-		IDocument document = getEditorInput() != null ? getDocumentProvider().getDocument(getEditorInput()) : null;
+		IDocument document = getEditorInput() != null ? getDocumentProvider()
+				.getDocument(getEditorInput()) : null;
 		if (document instanceof IDiagramDocument) {
 			return ((IDiagramDocument) document).getEditingDomain();
 		}
@@ -127,8 +132,10 @@
 	 * @generated
 	 */
 	protected void setDocumentProvider(IEditorInput input) {
-		if (input instanceof IFileEditorInput || input instanceof URIEditorInput) {
-			setDocumentProvider(UrmlDiagramEditorPlugin.getInstance().getDocumentProvider());
+		if (input instanceof IFileEditorInput
+				|| input instanceof URIEditorInput) {
+			setDocumentProvider(UrmlDiagramEditorPlugin.getInstance()
+					.getDocumentProvider());
 		} else {
 			super.setDocumentProvider(input);
 		}
@@ -162,7 +169,8 @@
 		Shell shell = getSite().getShell();
 		IEditorInput input = getEditorInput();
 		SaveAsDialog dialog = new SaveAsDialog(shell);
-		IFile original = input instanceof IFileEditorInput ? ((IFileEditorInput) input).getFile() : null;
+		IFile original = input instanceof IFileEditorInput ? ((IFileEditorInput) input)
+				.getFile() : null;
 		if (original != null) {
 			dialog.setOriginalFile(original);
 		}
@@ -173,7 +181,9 @@
 			return;
 		}
 		if (provider.isDeleted(input) && original != null) {
-			String message = NLS.bind(Messages.UrmlDiagramEditor_SavingDeletedFile, original.getName());
+			String message = NLS.bind(
+					Messages.UrmlDiagramEditor_SavingDeletedFile,
+					original.getName());
 			dialog.setErrorMessage(null);
 			dialog.setMessage(message, IMessageProvider.WARNING);
 		}
@@ -194,27 +204,33 @@
 		IFile file = workspaceRoot.getFile(filePath);
 		final IEditorInput newInput = new FileEditorInput(file);
 		// Check if the editor is already open
-		IEditorMatchingStrategy matchingStrategy = getEditorDescriptor().getEditorMatchingStrategy();
-		IEditorReference[] editorRefs = PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage()
-			.getEditorReferences();
+		IEditorMatchingStrategy matchingStrategy = getEditorDescriptor()
+				.getEditorMatchingStrategy();
+		IEditorReference[] editorRefs = PlatformUI.getWorkbench()
+				.getActiveWorkbenchWindow().getActivePage()
+				.getEditorReferences();
 		for (int i = 0; i < editorRefs.length; i++) {
 			if (matchingStrategy.matches(editorRefs[i], newInput)) {
-				MessageDialog.openWarning(shell, Messages.UrmlDiagramEditor_SaveAsErrorTitle,
-					Messages.UrmlDiagramEditor_SaveAsErrorMessage);
+				MessageDialog.openWarning(shell,
+						Messages.UrmlDiagramEditor_SaveAsErrorTitle,
+						Messages.UrmlDiagramEditor_SaveAsErrorMessage);
 				return;
 			}
 		}
 		boolean success = false;
 		try {
 			provider.aboutToChange(newInput);
-			getDocumentProvider(newInput).saveDocument(progressMonitor, newInput,
-				getDocumentProvider().getDocument(getEditorInput()), true);
+			getDocumentProvider(newInput).saveDocument(progressMonitor,
+					newInput,
+					getDocumentProvider().getDocument(getEditorInput()), true);
 			success = true;
 		} catch (CoreException x) {
 			IStatus status = x.getStatus();
 			if (status == null || status.getSeverity() != IStatus.CANCEL) {
-				ErrorDialog.openError(shell, Messages.UrmlDiagramEditor_SaveErrorTitle,
-					Messages.UrmlDiagramEditor_SaveErrorMessage, x.getStatus());
+				ErrorDialog.openError(shell,
+						Messages.UrmlDiagramEditor_SaveErrorTitle,
+						Messages.UrmlDiagramEditor_SaveErrorMessage,
+						x.getStatus());
 			}
 		} finally {
 			provider.changed(newInput);
@@ -243,6 +259,9 @@
 			return StructuredSelection.EMPTY;
 		}
 		Diagram diagram = document.getDiagram();
+		if (diagram == null || diagram.eResource() == null) {
+			return StructuredSelection.EMPTY;
+		}
 		IFile file = WorkspaceSynchronizer.getFile(diagram.eResource());
 		if (file != null) {
 			UrmlNavigatorItem item = new UrmlNavigatorItem(diagram, file, false);
@@ -256,10 +275,11 @@
 	 */
 	protected void configureGraphicalViewer() {
 		super.configureGraphicalViewer();
-		DiagramEditorContextMenuProvider provider = new DiagramEditorContextMenuProvider(this,
-			getDiagramGraphicalViewer());
+		DiagramEditorContextMenuProvider provider = new DiagramEditorContextMenuProvider(
+				this, getDiagramGraphicalViewer());
 		getDiagramGraphicalViewer().setContextMenu(provider);
-		getSite().registerContextMenu(ActionIds.DIAGRAM_EDITOR_CONTEXT_MENU, provider, getDiagramGraphicalViewer());
+		getSite().registerContextMenu(ActionIds.DIAGRAM_EDITOR_CONTEXT_MENU,
+				provider, getDiagramGraphicalViewer());
 	}
 
 }
Index: src/org/unicase/ui/diagram/urml/part/UrmlCreationWizardPage.java
===================================================================
--- src/org/unicase/ui/diagram/urml/part/UrmlCreationWizardPage.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/part/UrmlCreationWizardPage.java	(working copy)
@@ -21,7 +21,8 @@
 	/**
 	 * @generated
 	 */
-	public UrmlCreationWizardPage(String pageName, IStructuredSelection selection, String fileExtension) {
+	public UrmlCreationWizardPage(String pageName,
+			IStructuredSelection selection, String fileExtension) {
 		super(pageName, selection);
 		this.fileExtension = fileExtension;
 	}
@@ -62,7 +63,8 @@
 	 */
 	public void createControl(Composite parent) {
 		super.createControl(parent);
-		setFileName(UrmlDiagramEditorUtil.getUniqueFileName(getContainerFullPath(), getFileName(), getExtension()));
+		setFileName(UrmlDiagramEditorUtil.getUniqueFileName(
+				getContainerFullPath(), getFileName(), getExtension()));
 		setPageComplete(validatePage());
 	}
 
@@ -74,8 +76,10 @@
 			return false;
 		}
 		String extension = getExtension();
-		if (extension != null && !getFilePath().toString().endsWith("." + extension)) {
-			setErrorMessage(NLS.bind(Messages.UrmlCreationWizardPageExtensionError, extension));
+		if (extension != null
+				&& !getFilePath().toString().endsWith("." + extension)) {
+			setErrorMessage(NLS.bind(
+					Messages.UrmlCreationWizardPageExtensionError, extension));
 			return false;
 		}
 		return true;
Index: src/org/unicase/ui/diagram/urml/part/UrmlDiagramEditorUtil.java
===================================================================
--- src/org/unicase/ui/diagram/urml/part/UrmlDiagramEditorUtil.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/part/UrmlDiagramEditorUtil.java	(working copy)
@@ -5,6 +5,7 @@
 import java.util.Collections;
 import java.util.HashMap;
 import java.util.Iterator;
+import java.util.LinkedList;
 import java.util.List;
 import java.util.Map;
 import java.util.Set;
@@ -60,22 +61,27 @@
 	/**
 	 * @generated
 	 */
-	public static Map getSaveOptions() {
-		Map saveOptions = new HashMap();
+	public static Map<?, ?> getSaveOptions() {
+		HashMap<String, Object> saveOptions = new HashMap<String, Object>();
 		saveOptions.put(XMLResource.OPTION_ENCODING, "UTF-8"); //$NON-NLS-1$
-		saveOptions.put(Resource.OPTION_SAVE_ONLY_IF_CHANGED, Resource.OPTION_SAVE_ONLY_IF_CHANGED_MEMORY_BUFFER);
+		saveOptions.put(Resource.OPTION_SAVE_ONLY_IF_CHANGED,
+				Resource.OPTION_SAVE_ONLY_IF_CHANGED_MEMORY_BUFFER);
 		return saveOptions;
 	}
 
 	/**
 	 * @generated
 	 */
-	public static boolean openDiagram(Resource diagram) throws PartInitException {
+	public static boolean openDiagram(Resource diagram)
+			throws PartInitException {
 		String path = diagram.getURI().toPlatformString(true);
-		IResource workspaceResource = ResourcesPlugin.getWorkspace().getRoot().findMember(new Path(path));
+		IResource workspaceResource = ResourcesPlugin.getWorkspace().getRoot()
+				.findMember(new Path(path));
 		if (workspaceResource instanceof IFile) {
-			IWorkbenchPage page = PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
-			return null != page.openEditor(new FileEditorInput((IFile) workspaceResource), UrmlDiagramEditor.ID);
+			IWorkbenchPage page = PlatformUI.getWorkbench()
+					.getActiveWorkbenchWindow().getActivePage();
+			return null != page.openEditor(new FileEditorInput(
+					(IFile) workspaceResource), UrmlDiagramEditor.ID);
 		}
 		return false;
 	}
@@ -90,14 +96,16 @@
 		try {
 			file.setCharset("UTF-8", new NullProgressMonitor()); //$NON-NLS-1$
 		} catch (CoreException e) {
-			UrmlDiagramEditorPlugin.getInstance().logError("Unable to set charset for file " + file.getFullPath(), e); //$NON-NLS-1$
+			UrmlDiagramEditorPlugin.getInstance().logError(
+					"Unable to set charset for file " + file.getFullPath(), e); //$NON-NLS-1$
 		}
 	}
 
 	/**
 	 * @generated
 	 */
-	public static String getUniqueFileName(IPath containerFullPath, String fileName, String extension) {
+	public static String getUniqueFileName(IPath containerFullPath,
+			String fileName, String extension) {
 		if (containerFullPath == null) {
 			containerFullPath = new Path(""); //$NON-NLS-1$
 		}
@@ -127,15 +135,19 @@
 	 * @generated
 	 */
 	public static void runWizard(Shell shell, Wizard wizard, String settingsKey) {
-		IDialogSettings pluginDialogSettings = UrmlDiagramEditorPlugin.getInstance().getDialogSettings();
-		IDialogSettings wizardDialogSettings = pluginDialogSettings.getSection(settingsKey);
+		IDialogSettings pluginDialogSettings = UrmlDiagramEditorPlugin
+				.getInstance().getDialogSettings();
+		IDialogSettings wizardDialogSettings = pluginDialogSettings
+				.getSection(settingsKey);
 		if (wizardDialogSettings == null) {
-			wizardDialogSettings = pluginDialogSettings.addNewSection(settingsKey);
+			wizardDialogSettings = pluginDialogSettings
+					.addNewSection(settingsKey);
 		}
 		wizard.setDialogSettings(wizardDialogSettings);
 		WizardDialog dialog = new WizardDialog(shell, wizard);
 		dialog.create();
-		dialog.getShell().setSize(Math.max(500, dialog.getShell().getSize().x), 500);
+		dialog.getShell().setSize(Math.max(500, dialog.getShell().getSize().x),
+				500);
 		dialog.open();
 	}
 
@@ -144,21 +156,30 @@
 	 * 
 	 * @generated
 	 */
-	public static Resource createDiagram(URI diagramURI, URI modelURI, IProgressMonitor progressMonitor) {
-		TransactionalEditingDomain editingDomain = GMFEditingDomainFactory.INSTANCE.createEditingDomain();
-		progressMonitor.beginTask(Messages.UrmlDiagramEditorUtil_CreateDiagramProgressTask, 3);
-		final Resource diagramResource = editingDomain.getResourceSet().createResource(diagramURI);
-		final Resource modelResource = editingDomain.getResourceSet().createResource(modelURI);
+	public static Resource createDiagram(URI diagramURI, URI modelURI,
+			IProgressMonitor progressMonitor) {
+		TransactionalEditingDomain editingDomain = GMFEditingDomainFactory.INSTANCE
+				.createEditingDomain();
+		progressMonitor.beginTask(
+				Messages.UrmlDiagramEditorUtil_CreateDiagramProgressTask, 3);
+		final Resource diagramResource = editingDomain.getResourceSet()
+				.createResource(diagramURI);
+		final Resource modelResource = editingDomain.getResourceSet()
+				.createResource(modelURI);
 		final String diagramName = diagramURI.lastSegment();
-		AbstractTransactionalCommand command = new AbstractTransactionalCommand(editingDomain,
-			Messages.UrmlDiagramEditorUtil_CreateDiagramCommandLabel, Collections.EMPTY_LIST) {
-			protected CommandResult doExecuteWithResult(IProgressMonitor monitor, IAdaptable info)
-				throws ExecutionException {
+		AbstractTransactionalCommand command = new AbstractTransactionalCommand(
+				editingDomain,
+				Messages.UrmlDiagramEditorUtil_CreateDiagramCommandLabel,
+				Collections.EMPTY_LIST) {
+			protected CommandResult doExecuteWithResult(
+					IProgressMonitor monitor, IAdaptable info)
+					throws ExecutionException {
 				URMLDiagram model = createInitialModel();
 				attachModelToResource(model, modelResource);
 
-				Diagram diagram = ViewService.createDiagram(model, URMLDiagramEditPart.MODEL_ID,
-					UrmlDiagramEditorPlugin.DIAGRAM_PREFERENCES_HINT);
+				Diagram diagram = ViewService.createDiagram(model,
+						URMLDiagramEditPart.MODEL_ID,
+						UrmlDiagramEditorPlugin.DIAGRAM_PREFERENCES_HINT);
 				if (diagram != null) {
 					diagramResource.getContents().add(diagram);
 					diagram.setName(diagramName);
@@ -166,20 +187,26 @@
 				}
 
 				try {
-					modelResource.save(org.unicase.ui.diagram.urml.part.UrmlDiagramEditorUtil.getSaveOptions());
-					diagramResource.save(org.unicase.ui.diagram.urml.part.UrmlDiagramEditorUtil.getSaveOptions());
+					modelResource
+							.save(org.unicase.ui.diagram.urml.part.UrmlDiagramEditorUtil
+									.getSaveOptions());
+					diagramResource
+							.save(org.unicase.ui.diagram.urml.part.UrmlDiagramEditorUtil
+									.getSaveOptions());
 				} catch (IOException e) {
 
-					UrmlDiagramEditorPlugin.getInstance().logError("Unable to store model and diagram resources", e); //$NON-NLS-1$
+					UrmlDiagramEditorPlugin.getInstance().logError(
+							"Unable to store model and diagram resources", e); //$NON-NLS-1$
 				}
 				return CommandResult.newOKCommandResult();
 			}
 		};
 		try {
-			OperationHistoryFactory.getOperationHistory().execute(command, new SubProgressMonitor(progressMonitor, 1),
-				null);
+			OperationHistoryFactory.getOperationHistory().execute(command,
+					new SubProgressMonitor(progressMonitor, 1), null);
 		} catch (ExecutionException e) {
-			UrmlDiagramEditorPlugin.getInstance().logError("Unable to create model and diagram", e); //$NON-NLS-1$
+			UrmlDiagramEditorPlugin.getInstance().logError(
+					"Unable to create model and diagram", e); //$NON-NLS-1$
 		}
 		setCharset(WorkspaceSynchronizer.getFile(modelResource));
 		setCharset(WorkspaceSynchronizer.getFile(diagramResource));
@@ -187,8 +214,8 @@
 	}
 
 	/**
-	 * Create a new instance of domain element associated with canvas. <!-- begin-user-doc --> <!-- end-user-doc -->
-	 * 
+	 * Create a new instance of domain element associated with canvas.
+	 * <!-- begin-user-doc --> <!-- end-user-doc -->
 	 * @generated
 	 */
 	private static URMLDiagram createInitialModel() {
@@ -196,23 +223,24 @@
 	}
 
 	/**
-	 * Store model element in the resource. <!-- begin-user-doc --> <!-- end-user-doc -->
-	 * 
+	 * Store model element in the resource.
+	 * <!-- begin-user-doc --> <!-- end-user-doc -->
 	 * @generated
 	 */
-	private static void attachModelToResource(URMLDiagram model, Resource resource) {
+	private static void attachModelToResource(URMLDiagram model,
+			Resource resource) {
 		resource.getContents().add(model);
 	}
 
 	/**
 	 * @generated
 	 */
-	public static void selectElementsInDiagram(IDiagramWorkbenchPart diagramPart, List/* EditPart */editParts) {
+	public static void selectElementsInDiagram(
+			IDiagramWorkbenchPart diagramPart, List<EditPart> editParts) {
 		diagramPart.getDiagramGraphicalViewer().deselectAll();
 
 		EditPart firstPrimary = null;
-		for (Iterator it = editParts.iterator(); it.hasNext();) {
-			EditPart nextPart = (EditPart) it.next();
+		for (EditPart nextPart : editParts) {
 			diagramPart.getDiagramGraphicalViewer().appendSelection(nextPart);
 			if (firstPrimary == null && nextPart instanceof IPrimaryEditPart) {
 				firstPrimary = nextPart;
@@ -221,19 +249,23 @@
 
 		if (!editParts.isEmpty()) {
 			diagramPart.getDiagramGraphicalViewer().reveal(
-				firstPrimary != null ? firstPrimary : (EditPart) editParts.get(0));
+					firstPrimary != null ? firstPrimary : (EditPart) editParts
+							.get(0));
 		}
 	}
 
 	/**
 	 * @generated
 	 */
-	private static int findElementsInDiagramByID(DiagramEditPart diagramPart, EObject element, List editPartCollector) {
-		IDiagramGraphicalViewer viewer = (IDiagramGraphicalViewer) diagramPart.getViewer();
+	private static int findElementsInDiagramByID(DiagramEditPart diagramPart,
+			EObject element, List<EditPart> editPartCollector) {
+		IDiagramGraphicalViewer viewer = (IDiagramGraphicalViewer) diagramPart
+				.getViewer();
 		final int intialNumOfEditParts = editPartCollector.size();
 
 		if (element instanceof View) { // support notation element lookup
-			EditPart editPart = (EditPart) viewer.getEditPartRegistry().get(element);
+			EditPart editPart = (EditPart) viewer.getEditPartRegistry().get(
+					element);
 			if (editPart != null) {
 				editPartCollector.add(editPart);
 				return 1;
@@ -241,10 +273,11 @@
 		}
 
 		String elementID = EMFCoreUtil.getProxyID(element);
-		List associatedParts = viewer.findEditPartsForElement(elementID, IGraphicalEditPart.class);
+		@SuppressWarnings("unchecked")
+		List<EditPart> associatedParts = viewer.findEditPartsForElement(
+				elementID, IGraphicalEditPart.class);
 		// perform the possible hierarchy disjoint -> take the top-most parts only
-		for (Iterator editPartIt = associatedParts.iterator(); editPartIt.hasNext();) {
-			EditPart nextPart = (EditPart) editPartIt.next();
+		for (EditPart nextPart : associatedParts) {
 			EditPart parentPart = nextPart.getParent();
 			while (parentPart != null && !associatedParts.contains(parentPart)) {
 				parentPart = parentPart.getParent();
@@ -256,10 +289,11 @@
 
 		if (intialNumOfEditParts == editPartCollector.size()) {
 			if (!associatedParts.isEmpty()) {
-				editPartCollector.add(associatedParts.iterator().next());
+				editPartCollector.add(associatedParts.get(0));
 			} else {
 				if (element.eContainer() != null) {
-					return findElementsInDiagramByID(diagramPart, element.eContainer(), editPartCollector);
+					return findElementsInDiagramByID(diagramPart,
+							element.eContainer(), editPartCollector);
 				}
 			}
 		}
@@ -269,20 +303,24 @@
 	/**
 	 * @generated
 	 */
-	public static View findView(DiagramEditPart diagramEditPart, EObject targetElement,
-		LazyElement2ViewMap lazyElement2ViewMap) {
+	public static View findView(DiagramEditPart diagramEditPart,
+			EObject targetElement, LazyElement2ViewMap lazyElement2ViewMap) {
 		boolean hasStructuralURI = false;
 		if (targetElement.eResource() instanceof XMLResource) {
-			hasStructuralURI = ((XMLResource) targetElement.eResource()).getID(targetElement) == null;
+			hasStructuralURI = ((XMLResource) targetElement.eResource())
+					.getID(targetElement) == null;
 		}
 
 		View view = null;
-		if (hasStructuralURI && !lazyElement2ViewMap.getElement2ViewMap().isEmpty()) {
-			view = (View) lazyElement2ViewMap.getElement2ViewMap().get(targetElement);
-		} else if (findElementsInDiagramByID(diagramEditPart, targetElement, lazyElement2ViewMap.editPartTmpHolder) > 0) {
-			EditPart editPart = (EditPart) lazyElement2ViewMap.editPartTmpHolder.get(0);
-			lazyElement2ViewMap.editPartTmpHolder.clear();
-			view = editPart.getModel() instanceof View ? (View) editPart.getModel() : null;
+		LinkedList<EditPart> editPartHolder = new LinkedList<EditPart>();
+		if (hasStructuralURI
+				&& !lazyElement2ViewMap.getElement2ViewMap().isEmpty()) {
+			view = lazyElement2ViewMap.getElement2ViewMap().get(targetElement);
+		} else if (findElementsInDiagramByID(diagramEditPart, targetElement,
+				editPartHolder) > 0) {
+			EditPart editPart = editPartHolder.get(0);
+			view = editPart.getModel() instanceof View ? (View) editPart
+					.getModel() : null;
 		}
 
 		return (view == null) ? diagramEditPart.getDiagramView() : view;
@@ -295,7 +333,7 @@
 		/**
 		 * @generated
 		 */
-		private Map element2ViewMap;
+		private Map<EObject, View> element2ViewMap;
 
 		/**
 		 * @generated
@@ -305,17 +343,12 @@
 		/**
 		 * @generated
 		 */
-		private Set elementSet;
-
-		/**
-		 * @generated
-		 */
-		public final List editPartTmpHolder = new ArrayList();
+		private Set<? extends EObject> elementSet;
 
 		/**
 		 * @generated
 		 */
-		public LazyElement2ViewMap(View scope, Set elements) {
+		public LazyElement2ViewMap(View scope, Set<? extends EObject> elements) {
 			this.scope = scope;
 			this.elementSet = elements;
 		}
@@ -323,16 +356,15 @@
 		/**
 		 * @generated
 		 */
-		public final Map getElement2ViewMap() {
+		public final Map<EObject, View> getElement2ViewMap() {
 			if (element2ViewMap == null) {
-				element2ViewMap = new HashMap();
+				element2ViewMap = new HashMap<EObject, View>();
 				// map possible notation elements to itself as these can't be found by view.getElement()
-				for (Iterator it = elementSet.iterator(); it.hasNext();) {
-					EObject element = (EObject) it.next();
+				for (EObject element : elementSet) {
 					if (element instanceof View) {
 						View view = (View) element;
 						if (view.getDiagram() == scope.getDiagram()) {
-							element2ViewMap.put(element, element); // take only those that part of our diagram
+							element2ViewMap.put(element, view); // take only those that part of our diagram
 						}
 					}
 				}
@@ -345,33 +377,38 @@
 		/**
 		 * @generated
 		 */
-		static Map buildElement2ViewMap(View parentView, Map element2ViewMap, Set elements) {
-			if (elements.size() == element2ViewMap.size())
-				return element2ViewMap;
+		private static boolean buildElement2ViewMap(View parentView,
+				Map<EObject, View> element2ViewMap,
+				Set<? extends EObject> elements) {
+			if (elements.size() == element2ViewMap.size()) {
+				return true;
+			}
 
-			if (parentView.isSetElement() && !element2ViewMap.containsKey(parentView.getElement())
-				&& elements.contains(parentView.getElement())) {
+			if (parentView.isSetElement()
+					&& !element2ViewMap.containsKey(parentView.getElement())
+					&& elements.contains(parentView.getElement())) {
 				element2ViewMap.put(parentView.getElement(), parentView);
-				if (elements.size() == element2ViewMap.size())
-					return element2ViewMap;
+				if (elements.size() == element2ViewMap.size()) {
+					return true;
+				}
 			}
-
-			for (Iterator it = parentView.getChildren().iterator(); it.hasNext();) {
-				buildElement2ViewMap((View) it.next(), element2ViewMap, elements);
-				if (elements.size() == element2ViewMap.size())
-					return element2ViewMap;
+			boolean complete = false;
+			for (Iterator<?> it = parentView.getChildren().iterator(); it
+					.hasNext() && !complete;) {
+				complete = buildElement2ViewMap((View) it.next(),
+						element2ViewMap, elements);
 			}
-			for (Iterator it = parentView.getSourceEdges().iterator(); it.hasNext();) {
-				buildElement2ViewMap((View) it.next(), element2ViewMap, elements);
-				if (elements.size() == element2ViewMap.size())
-					return element2ViewMap;
+			for (Iterator<?> it = parentView.getSourceEdges().iterator(); it
+					.hasNext() && !complete;) {
+				complete = buildElement2ViewMap((View) it.next(),
+						element2ViewMap, elements);
 			}
-			for (Iterator it = parentView.getSourceEdges().iterator(); it.hasNext();) {
-				buildElement2ViewMap((View) it.next(), element2ViewMap, elements);
-				if (elements.size() == element2ViewMap.size())
-					return element2ViewMap;
+			for (Iterator<?> it = parentView.getTargetEdges().iterator(); it
+					.hasNext() && !complete;) {
+				complete = buildElement2ViewMap((View) it.next(),
+						element2ViewMap, elements);
 			}
-			return element2ViewMap;
+			return complete;
 		}
 	} // LazyElement2ViewMap
 
Index: src/org/unicase/ui/diagram/urml/part/UrmlDiagramEditorPlugin.java
===================================================================
--- src/org/unicase/ui/diagram/urml/part/UrmlDiagramEditorPlugin.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/part/UrmlDiagramEditorPlugin.java	(working copy)
@@ -20,6 +20,7 @@
 import org.eclipse.jface.resource.ImageDescriptor;
 import org.eclipse.swt.graphics.Image;
 import org.eclipse.ui.plugin.AbstractUIPlugin;
+import org.osgi.framework.Bundle;
 import org.osgi.framework.BundleContext;
 import org.unicase.emfstore.esmodel.accesscontrol.provider.AccesscontrolItemProviderAdapterFactory;
 import org.unicase.emfstore.esmodel.accesscontrol.roles.provider.RolesItemProviderAdapterFactory;
@@ -56,6 +57,9 @@
 import org.unicase.model.urml.service.provider.ServiceItemProviderAdapterFactory;
 import org.unicase.model.urml.usecase.provider.UsecaseItemProviderAdapterFactory;
 import org.unicase.model.util.provider.UtilItemProviderAdapterFactory;
+import org.unicase.ui.diagram.urml.edit.policies.UrmlBaseItemSemanticEditPolicy;
+import org.unicase.ui.diagram.urml.expressions.UrmlOCLFactory;
+import org.unicase.ui.diagram.urml.providers.ElementInitializers;
 
 /**
  * @generated
@@ -70,7 +74,8 @@
 	/**
 	 * @generated
 	 */
-	public static final PreferencesHint DIAGRAM_PREFERENCES_HINT = new PreferencesHint(ID);
+	public static final PreferencesHint DIAGRAM_PREFERENCES_HINT = new PreferencesHint(
+			ID);
 
 	/**
 	 * @generated
@@ -90,7 +95,23 @@
 	/**
 	 * @generated
 	 */
+	private UrmlBaseItemSemanticEditPolicy.LinkConstraints linkConstraints;
+
+	/**
+	 * @generated
+	 */
+	private ElementInitializers initializers;
+
+	/**
+	 * @generated
+	 */
+	private UrmlOCLFactory oclFactory;
+
+	/**
+	 * @generated
+	 */
 	public UrmlDiagramEditorPlugin() {
+
 	}
 
 	/**
@@ -99,7 +120,8 @@
 	public void start(BundleContext context) throws Exception {
 		super.start(context);
 		instance = this;
-		PreferencesHint.registerPreferenceStore(DIAGRAM_PREFERENCES_HINT, getPreferenceStore());
+		PreferencesHint.registerPreferenceStore(DIAGRAM_PREFERENCES_HINT,
+				getPreferenceStore());
 		adapterFactory = createAdapterFactory();
 	}
 
@@ -109,6 +131,9 @@
 	public void stop(BundleContext context) throws Exception {
 		adapterFactory.dispose();
 		adapterFactory = null;
+		linkConstraints = null;
+		initializers = null;
+		oclFactory = null;
 		instance = null;
 		super.stop(context);
 	}
@@ -124,7 +149,7 @@
 	 * @generated
 	 */
 	protected ComposedAdapterFactory createAdapterFactory() {
-		List factories = new ArrayList();
+		ArrayList<AdapterFactory> factories = new ArrayList<AdapterFactory>();
 		fillItemProviderFactories(factories);
 		return new ComposedAdapterFactory(factories);
 	}
@@ -132,7 +157,7 @@
 	/**
 	 * @generated
 	 */
-	protected void fillItemProviderFactories(List factories) {
+	protected void fillItemProviderFactories(List<AdapterFactory> factories) {
 		factories.add(new UrmlItemProviderAdapterFactory());
 		factories.add(new GoalItemProviderAdapterFactory());
 		factories.add(new RequirementItemProviderAdapterFactory());
@@ -158,7 +183,8 @@
 		factories.add(new TaskItemProviderAdapterFactory());
 		factories.add(new ClassesItemProviderAdapterFactory());
 		factories.add(new DocumentItemProviderAdapterFactory());
-		factories.add(new org.unicase.model.requirement.provider.RequirementItemProviderAdapterFactory());
+		factories
+				.add(new org.unicase.model.requirement.provider.RequirementItemProviderAdapterFactory());
 		factories.add(new RationaleItemProviderAdapterFactory());
 		factories.add(new ChangeItemProviderAdapterFactory());
 		factories.add(new BugItemProviderAdapterFactory());
@@ -186,9 +212,11 @@
 	 * @generated
 	 */
 	public ImageDescriptor getItemImageDescriptor(Object item) {
-		IItemLabelProvider labelProvider = (IItemLabelProvider) adapterFactory.adapt(item, IItemLabelProvider.class);
+		IItemLabelProvider labelProvider = (IItemLabelProvider) adapterFactory
+				.adapt(item, IItemLabelProvider.class);
 		if (labelProvider != null) {
-			return ExtendedImageRegistry.getInstance().getImageDescriptor(labelProvider.getImage(item));
+			return ExtendedImageRegistry.getInstance().getImageDescriptor(
+					labelProvider.getImage(item));
 		}
 		return null;
 	}
@@ -215,8 +243,8 @@
 	public static ImageDescriptor findImageDescriptor(String path) {
 		final IPath p = new Path(path);
 		if (p.isAbsolute() && p.segmentCount() > 1) {
-			return AbstractUIPlugin.imageDescriptorFromPlugin(p.segment(0), p.removeFirstSegments(1).makeAbsolute()
-				.toString());
+			return AbstractUIPlugin.imageDescriptorFromPlugin(p.segment(0), p
+					.removeFirstSegments(1).makeAbsolute().toString());
 		} else {
 			return getBundledImageDescriptor(p.makeAbsolute().toString());
 		}
@@ -261,6 +289,49 @@
 	/**
 	 * @generated
 	 */
+	public UrmlBaseItemSemanticEditPolicy.LinkConstraints getLinkConstraints() {
+		return linkConstraints;
+	}
+
+	/**
+	 * @generated
+	 */
+	public void setLinkConstraints(
+			UrmlBaseItemSemanticEditPolicy.LinkConstraints lc) {
+		this.linkConstraints = lc;
+	}
+
+	/**
+	 * @generated
+	 */
+	public ElementInitializers getElementInitializers() {
+		return initializers;
+	}
+
+	/**
+	 * @generated
+	 */
+	public void setElementInitializers(ElementInitializers i) {
+		this.initializers = i;
+	}
+
+	/**
+	 * @generated
+	 */
+	public UrmlOCLFactory getUrmlOCLFactory() {
+		return oclFactory;
+	}
+
+	/**
+	 * @generated
+	 */
+	public void setUrmlOCLFactory(UrmlOCLFactory f) {
+		this.oclFactory = f;
+	}
+
+	/**
+	 * @generated
+	 */
 	public void logError(String error) {
 		logError(error, null);
 	}
@@ -272,7 +343,9 @@
 		if (error == null && throwable != null) {
 			error = throwable.getMessage();
 		}
-		getLog().log(new Status(IStatus.ERROR, UrmlDiagramEditorPlugin.ID, IStatus.OK, error, throwable));
+		getLog().log(
+				new Status(IStatus.ERROR, UrmlDiagramEditorPlugin.ID,
+						IStatus.OK, error, throwable));
 		debug(error, throwable);
 	}
 
@@ -290,7 +363,9 @@
 		if (message == null && throwable != null) {
 			message = throwable.getMessage();
 		}
-		getLog().log(new Status(IStatus.INFO, UrmlDiagramEditorPlugin.ID, IStatus.OK, message, throwable));
+		getLog().log(
+				new Status(IStatus.INFO, UrmlDiagramEditorPlugin.ID,
+						IStatus.OK, message, throwable));
 		debug(message, throwable);
 	}
 
Index: src/org/unicase/ui/diagram/urml/part/UrmlMatchingStrategy.java
===================================================================
--- src/org/unicase/ui/diagram/urml/part/UrmlMatchingStrategy.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/part/UrmlMatchingStrategy.java	(working copy)
@@ -25,8 +25,10 @@
 		if (editorInput.equals(input)) {
 			return true;
 		}
-		if (editorInput instanceof URIEditorInput && input instanceof URIEditorInput) {
-			return ((URIEditorInput) editorInput).getURI().equals(((URIEditorInput) input).getURI());
+		if (editorInput instanceof URIEditorInput
+				&& input instanceof URIEditorInput) {
+			return ((URIEditorInput) editorInput).getURI().equals(
+					((URIEditorInput) input).getURI());
 		}
 		return false;
 	}
Index: src/org/unicase/ui/diagram/urml/part/UrmlDocumentProvider.java
===================================================================
--- src/org/unicase/ui/diagram/urml/part/UrmlDocumentProvider.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/part/UrmlDocumentProvider.java	(working copy)
@@ -4,13 +4,17 @@
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.Collections;
+import java.util.HashMap;
 import java.util.Iterator;
+import java.util.LinkedList;
 import java.util.List;
 
+import java.util.Map;
 import org.eclipse.core.commands.ExecutionException;
 import org.eclipse.core.resources.IFile;
 import org.eclipse.core.resources.IResource;
 import org.eclipse.core.resources.IResourceStatus;
+import org.eclipse.core.resources.IStorage;
 import org.eclipse.core.resources.ResourcesPlugin;
 import org.eclipse.core.runtime.CoreException;
 import org.eclipse.core.runtime.IAdaptable;
@@ -20,9 +24,12 @@
 import org.eclipse.core.runtime.Status;
 import org.eclipse.core.runtime.jobs.ISchedulingRule;
 import org.eclipse.core.runtime.jobs.MultiRule;
+import org.eclipse.emf.common.notify.Adapter;
 import org.eclipse.emf.common.notify.Notification;
+import org.eclipse.emf.common.notify.Notifier;
 import org.eclipse.emf.common.ui.URIEditorInput;
 import org.eclipse.emf.common.util.URI;
+import org.eclipse.emf.ecore.EObject;
 import org.eclipse.emf.ecore.resource.Resource;
 import org.eclipse.emf.ecore.resource.ResourceSet;
 import org.eclipse.emf.ecore.util.EContentAdapter;
@@ -31,11 +38,16 @@
 import org.eclipse.emf.transaction.TransactionalEditingDomain;
 import org.eclipse.emf.workspace.util.WorkspaceSynchronizer;
 import org.eclipse.gmf.runtime.common.core.command.CommandResult;
+import org.eclipse.gmf.runtime.diagram.core.DiagramEditingDomainFactory;
+import org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.AbstractDocumentProvider;
+import org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.DiagramDocument;
 import org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.IDiagramDocument;
 import org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.IDiagramDocumentProvider;
 import org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.IDocument;
 import org.eclipse.gmf.runtime.diagram.ui.resources.editor.internal.EditorStatusCodes;
+import org.eclipse.gmf.runtime.diagram.ui.resources.editor.internal.util.DiagramIOUtil;
 import org.eclipse.gmf.runtime.emf.commands.core.command.AbstractTransactionalCommand;
+import org.eclipse.gmf.runtime.emf.core.resources.GMFResourceFactory;
 import org.eclipse.gmf.runtime.notation.Diagram;
 import org.eclipse.jface.operation.IRunnableContext;
 import org.eclipse.osgi.util.NLS;
@@ -48,17 +60,27 @@
  * @generated
  */
 
-public class UrmlDocumentProvider extends ModelDocumentProvider implements IDiagramDocumentProvider {
+public class UrmlDocumentProvider extends ModelDocumentProvider implements
+		IDiagramDocumentProvider {
 
 	/**
 	 * @generated
 	 */
-	protected ElementInfo createElementInfo(Object element) throws CoreException {
-		if (false == element instanceof FileEditorInput && false == element instanceof URIEditorInput) {
-			throw new CoreException(new Status(IStatus.ERROR, UrmlDiagramEditorPlugin.ID, 0, NLS.bind(
-				Messages.UrmlDocumentProvider_IncorrectInputError, new Object[] { element,
-					"org.eclipse.ui.part.FileEditorInput", "org.eclipse.emf.common.ui.URIEditorInput" }), //$NON-NLS-1$ //$NON-NLS-2$ 
-				null));
+	protected ElementInfo createElementInfo(Object element)
+			throws CoreException {
+		if (false == element instanceof FileEditorInput
+				&& false == element instanceof URIEditorInput) {
+			throw new CoreException(
+					new Status(
+							IStatus.ERROR,
+							UrmlDiagramEditorPlugin.ID,
+							0,
+							NLS.bind(
+									Messages.UrmlDocumentProvider_IncorrectInputError,
+									new Object[] {
+											element,
+											"org.eclipse.ui.part.FileEditorInput", "org.eclipse.emf.common.ui.URIEditorInput" }), //$NON-NLS-1$ //$NON-NLS-2$ 
+							null));
 		}
 		IEditorInput editorInput = (IEditorInput) element;
 		IDiagramDocument document = (IDiagramDocument) createDocument(editorInput);
@@ -73,11 +95,19 @@
 	 * @generated
 	 */
 	protected IDocument createDocument(Object element) throws CoreException {
-		if (false == element instanceof FileEditorInput && false == element instanceof URIEditorInput) {
-			throw new CoreException(new Status(IStatus.ERROR, UrmlDiagramEditorPlugin.ID, 0, NLS.bind(
-				Messages.UrmlDocumentProvider_IncorrectInputError, new Object[] { element,
-					"org.eclipse.ui.part.FileEditorInput", "org.eclipse.emf.common.ui.URIEditorInput" }), //$NON-NLS-1$ //$NON-NLS-2$ 
-				null));
+		if (false == element instanceof FileEditorInput
+				&& false == element instanceof URIEditorInput) {
+			throw new CoreException(
+					new Status(
+							IStatus.ERROR,
+							UrmlDiagramEditorPlugin.ID,
+							0,
+							NLS.bind(
+									Messages.UrmlDocumentProvider_IncorrectInputError,
+									new Object[] {
+											element,
+											"org.eclipse.ui.part.FileEditorInput", "org.eclipse.emf.common.ui.URIEditorInput" }), //$NON-NLS-1$ //$NON-NLS-2$ 
+							null));
 		}
 		IDocument document = createEmptyDocument();
 		setDocumentContent(document, (IEditorInput) element);
@@ -102,8 +132,9 @@
 	 */
 	private long computeModificationStamp(ResourceSetInfo info) {
 		int result = 0;
-		for (Iterator/* <org.eclipse.emf.ecore.resource.Resource> */it = info.getLoadedResourcesIterator(); it.hasNext();) {
-			Resource nextResource = (Resource) it.next();
+		for (Iterator<Resource> it = info.getLoadedResourcesIterator(); it
+				.hasNext();) {
+			Resource nextResource = it.next();
 			IFile file = WorkspaceSynchronizer.getFile(nextResource);
 			if (file != null) {
 				if (file.getLocation() != null) {
@@ -136,7 +167,8 @@
 			Resource diagramResource = document.getDiagram().eResource();
 			if (diagramResource != null) {
 				IFile file = WorkspaceSynchronizer.getFile(diagramResource);
-				return file == null || file.getLocation() == null || !file.getLocation().toFile().exists();
+				return file == null || file.getLocation() == null
+						|| !file.getLocation().toFile().exists();
 			}
 		}
 		return super.isDeleted(element);
@@ -152,23 +184,22 @@
 	/**
 	 * @generated
 	 */
-	protected void doValidateState(Object element, Object computationContext) throws CoreException {
+	protected void doValidateState(Object element, Object computationContext)
+			throws CoreException {
 		ResourceSetInfo info = getResourceSetInfo(element);
 		if (info != null) {
-			Collection/* <org.eclipse.core.resources.IFile> */files2Validate = new ArrayList/*
-																						 * <org.eclipse.core.resources.IFile
-																						 * >
-																						 */();
-			for (Iterator/* <org.eclipse.emf.ecore.resource.Resource> */it = info.getLoadedResourcesIterator(); it
-				.hasNext();) {
-				Resource nextResource = (Resource) it.next();
+			LinkedList<IFile> files2Validate = new LinkedList<IFile>();
+			for (Iterator<Resource> it = info.getLoadedResourcesIterator(); it
+					.hasNext();) {
+				Resource nextResource = it.next();
 				IFile file = WorkspaceSynchronizer.getFile(nextResource);
 				if (file != null && file.isReadOnly()) {
 					files2Validate.add(file);
 				}
 			}
 			ResourcesPlugin.getWorkspace().validateEdit(
-				(IFile[]) files2Validate.toArray(new IFile[files2Validate.size()]), computationContext);
+					(IFile[]) files2Validate.toArray(new IFile[files2Validate
+							.size()]), computationContext);
 		}
 
 		super.doValidateState(element, computationContext);
@@ -184,9 +215,9 @@
 				try {
 					updateCache(element);
 				} catch (CoreException ex) {
-					UrmlDiagramEditorPlugin.getInstance().logError(Messages.UrmlDocumentProvider_isModifiable, ex);
-					// Error message to log was initially taken from
-					// org.eclipse.gmf.runtime.diagram.ui.resources.editor.ide.internal.l10n.EditorMessages.StorageDocumentProvider_isModifiable
+					UrmlDiagramEditorPlugin.getInstance().logError(
+							Messages.UrmlDocumentProvider_isModifiable, ex);
+					// Error message to log was initially taken from org.eclipse.gmf.runtime.diagram.ui.resources.editor.ide.internal.l10n.EditorMessages.StorageDocumentProvider_isModifiable
 				}
 			}
 			return info.isReadOnly();
@@ -199,7 +230,8 @@
 	 */
 	public boolean isModifiable(Object element) {
 		if (!isStateValidated(element)) {
-			if (element instanceof FileEditorInput || element instanceof URIEditorInput) {
+			if (element instanceof FileEditorInput
+					|| element instanceof URIEditorInput) {
 				return true;
 			}
 		}
@@ -209,9 +241,9 @@
 				try {
 					updateCache(element);
 				} catch (CoreException ex) {
-					UrmlDiagramEditorPlugin.getInstance().logError(Messages.UrmlDocumentProvider_isModifiable, ex);
-					// Error message to log was initially taken from
-					// org.eclipse.gmf.runtime.diagram.ui.resources.editor.ide.internal.l10n.EditorMessages.StorageDocumentProvider_isModifiable
+					UrmlDiagramEditorPlugin.getInstance().logError(
+							Messages.UrmlDocumentProvider_isModifiable, ex);
+					// Error message to log was initially taken from org.eclipse.gmf.runtime.diagram.ui.resources.editor.ide.internal.l10n.EditorMessages.StorageDocumentProvider_isModifiable
 				}
 			}
 			return info.isModifiable();
@@ -225,9 +257,9 @@
 	protected void updateCache(Object element) throws CoreException {
 		ResourceSetInfo info = getResourceSetInfo(element);
 		if (info != null) {
-			for (Iterator/* <org.eclipse.emf.ecore.resource.Resource> */it = info.getLoadedResourcesIterator(); it
-				.hasNext();) {
-				Resource nextResource = (Resource) it.next();
+			for (Iterator<Resource> it = info.getLoadedResourcesIterator(); it
+					.hasNext();) {
+				Resource nextResource = it.next();
 				IFile file = WorkspaceSynchronizer.getFile(nextResource);
 				if (file != null && file.isReadOnly()) {
 					info.setReadOnly(true);
@@ -269,19 +301,19 @@
 	protected ISchedulingRule getResetRule(Object element) {
 		ResourceSetInfo info = getResourceSetInfo(element);
 		if (info != null) {
-			Collection/* <org.eclipse.core.runtime.jobs.ISchedulingRule> */rules = new ArrayList/*
-																							 * <org.eclipse.core.runtime.
-																							 * jobs.ISchedulingRule>
-																							 */();
-			for (Iterator/* <org.eclipse.emf.ecore.resource.Resource> */it = info.getLoadedResourcesIterator(); it
-				.hasNext();) {
-				Resource nextResource = (Resource) it.next();
+			LinkedList<ISchedulingRule> rules = new LinkedList<ISchedulingRule>();
+			for (Iterator<Resource> it = info.getLoadedResourcesIterator(); it
+					.hasNext();) {
+				Resource nextResource = it.next();
 				IFile file = WorkspaceSynchronizer.getFile(nextResource);
 				if (file != null) {
-					rules.add(ResourcesPlugin.getWorkspace().getRuleFactory().modifyRule(file));
+					rules.add(ResourcesPlugin.getWorkspace().getRuleFactory()
+							.modifyRule(file));
 				}
 			}
-			return new MultiRule((ISchedulingRule[]) rules.toArray(new ISchedulingRule[rules.size()]));
+			return new MultiRule(
+					(ISchedulingRule[]) rules.toArray(new ISchedulingRule[rules
+							.size()]));
 		}
 		return null;
 	}
@@ -292,19 +324,18 @@
 	protected ISchedulingRule getSaveRule(Object element) {
 		ResourceSetInfo info = getResourceSetInfo(element);
 		if (info != null) {
-			Collection/* <org.eclipse.core.runtime.jobs.ISchedulingRule> */rules = new ArrayList/*
-																							 * <org.eclipse.core.runtime.
-																							 * jobs.ISchedulingRule>
-																							 */();
-			for (Iterator/* <org.eclipse.emf.ecore.resource.Resource> */it = info.getLoadedResourcesIterator(); it
-				.hasNext();) {
-				Resource nextResource = (Resource) it.next();
+			LinkedList<ISchedulingRule> rules = new LinkedList<ISchedulingRule>();
+			for (Iterator<Resource> it = info.getLoadedResourcesIterator(); it
+					.hasNext();) {
+				Resource nextResource = it.next();
 				IFile file = WorkspaceSynchronizer.getFile(nextResource);
 				if (file != null) {
 					rules.add(computeSchedulingRule(file));
 				}
 			}
-			return new MultiRule((ISchedulingRule[]) rules.toArray(new ISchedulingRule[rules.size()]));
+			return new MultiRule(
+					(ISchedulingRule[]) rules.toArray(new ISchedulingRule[rules
+							.size()]));
 		}
 		return null;
 	}
@@ -315,19 +346,19 @@
 	protected ISchedulingRule getSynchronizeRule(Object element) {
 		ResourceSetInfo info = getResourceSetInfo(element);
 		if (info != null) {
-			Collection/* <org.eclipse.core.runtime.jobs.ISchedulingRule> */rules = new ArrayList/*
-																							 * <org.eclipse.core.runtime.
-																							 * jobs.ISchedulingRule>
-																							 */();
-			for (Iterator/* <org.eclipse.emf.ecore.resource.Resource> */it = info.getLoadedResourcesIterator(); it
-				.hasNext();) {
-				Resource nextResource = (Resource) it.next();
+			LinkedList<ISchedulingRule> rules = new LinkedList<ISchedulingRule>();
+			for (Iterator<Resource> it = info.getLoadedResourcesIterator(); it
+					.hasNext();) {
+				Resource nextResource = it.next();
 				IFile file = WorkspaceSynchronizer.getFile(nextResource);
 				if (file != null) {
-					rules.add(ResourcesPlugin.getWorkspace().getRuleFactory().refreshRule(file));
+					rules.add(ResourcesPlugin.getWorkspace().getRuleFactory()
+							.refreshRule(file));
 				}
 			}
-			return new MultiRule((ISchedulingRule[]) rules.toArray(new ISchedulingRule[rules.size()]));
+			return new MultiRule(
+					(ISchedulingRule[]) rules.toArray(new ISchedulingRule[rules
+							.size()]));
 		}
 		return null;
 	}
@@ -338,20 +369,20 @@
 	protected ISchedulingRule getValidateStateRule(Object element) {
 		ResourceSetInfo info = getResourceSetInfo(element);
 		if (info != null) {
-			Collection/* <org.eclipse.core.runtime.jobs.ISchedulingRule> */files = new ArrayList/*
-																							 * <org.eclipse.core.runtime.
-																							 * jobs.ISchedulingRule>
-																							 */();
-			for (Iterator/* <org.eclipse.emf.ecore.resource.Resource> */it = info.getLoadedResourcesIterator(); it
-				.hasNext();) {
-				Resource nextResource = (Resource) it.next();
+			LinkedList<ISchedulingRule> files = new LinkedList<ISchedulingRule>();
+			for (Iterator<Resource> it = info.getLoadedResourcesIterator(); it
+					.hasNext();) {
+				Resource nextResource = it.next();
 				IFile file = WorkspaceSynchronizer.getFile(nextResource);
 				if (file != null) {
 					files.add(file);
 				}
 			}
-			return ResourcesPlugin.getWorkspace().getRuleFactory().validateEditRule(
-				(IFile[]) files.toArray(new IFile[files.size()]));
+			return ResourcesPlugin
+					.getWorkspace()
+					.getRuleFactory()
+					.validateEditRule(
+							(IFile[]) files.toArray(new IFile[files.size()]));
 		}
 		return null;
 	}
@@ -361,30 +392,35 @@
 	 */
 	private ISchedulingRule computeSchedulingRule(IResource toCreateOrModify) {
 		if (toCreateOrModify.exists())
-			return ResourcesPlugin.getWorkspace().getRuleFactory().modifyRule(toCreateOrModify);
+			return ResourcesPlugin.getWorkspace().getRuleFactory()
+					.modifyRule(toCreateOrModify);
 
 		IResource parent = toCreateOrModify;
 		do {
 			/*
-			 * XXX This is a workaround for https://bugs.eclipse.org/bugs/show_bug.cgi?id=67601
-			 * IResourceRuleFactory.createRule should iterate the hierarchy itself.
+			 * XXX This is a workaround for
+			 * https://bugs.eclipse.org/bugs/show_bug.cgi?id=67601
+			 * IResourceRuleFactory.createRule should iterate the hierarchy
+			 * itself.
 			 */
 			toCreateOrModify = parent;
 			parent = toCreateOrModify.getParent();
 		} while (parent != null && !parent.exists());
 
-		return ResourcesPlugin.getWorkspace().getRuleFactory().createRule(toCreateOrModify);
+		return ResourcesPlugin.getWorkspace().getRuleFactory()
+				.createRule(toCreateOrModify);
 	}
 
 	/**
 	 * @generated
 	 */
-	protected void doSynchronize(Object element, IProgressMonitor monitor) throws CoreException {
+	protected void doSynchronize(Object element, IProgressMonitor monitor)
+			throws CoreException {
 		ResourceSetInfo info = getResourceSetInfo(element);
 		if (info != null) {
-			for (Iterator/* <org.eclipse.emf.ecore.resource.Resource> */it = info.getLoadedResourcesIterator(); it
-				.hasNext();) {
-				Resource nextResource = (Resource) it.next();
+			for (Iterator<Resource> it = info.getLoadedResourcesIterator(); it
+					.hasNext();) {
+				Resource nextResource = it.next();
 				handleElementChanged(info, nextResource, monitor);
 			}
 			return;
@@ -395,31 +431,43 @@
 	/**
 	 * @generated
 	 */
-	protected void doSaveDocument(IProgressMonitor monitor, Object element, IDocument document, boolean overwrite)
-		throws CoreException {
+	protected void doSaveDocument(IProgressMonitor monitor, Object element,
+			IDocument document, boolean overwrite) throws CoreException {
 		ResourceSetInfo info = getResourceSetInfo(element);
 		if (info != null) {
 			if (!overwrite && !info.isSynchronized()) {
-				throw new CoreException(new Status(IStatus.ERROR, UrmlDiagramEditorPlugin.ID,
-					IResourceStatus.OUT_OF_SYNC_LOCAL, Messages.UrmlDocumentProvider_UnsynchronizedFileSaveError, null));
+				throw new CoreException(
+						new Status(
+								IStatus.ERROR,
+								UrmlDiagramEditorPlugin.ID,
+								IResourceStatus.OUT_OF_SYNC_LOCAL,
+								Messages.UrmlDocumentProvider_UnsynchronizedFileSaveError,
+								null));
 			}
 			info.stopResourceListening();
 			fireElementStateChanging(element);
 			try {
-				monitor.beginTask(Messages.UrmlDocumentProvider_SaveDiagramTask, info.getResourceSet().getResources()
-					.size() + 1); // "Saving diagram"
-				for (Iterator/* <org.eclipse.emf.ecore.resource.Resource> */it = info.getLoadedResourcesIterator(); it
-					.hasNext();) {
-					Resource nextResource = (Resource) it.next();
-					monitor.setTaskName(NLS.bind(Messages.UrmlDocumentProvider_SaveNextResourceTask, nextResource
-						.getURI()));
-					if (nextResource.isLoaded() && !info.getEditingDomain().isReadOnly(nextResource)) {
+				monitor.beginTask(
+						Messages.UrmlDocumentProvider_SaveDiagramTask, info
+								.getResourceSet().getResources().size() + 1); //"Saving diagram"
+				for (Iterator<Resource> it = info.getLoadedResourcesIterator(); it
+						.hasNext();) {
+					Resource nextResource = it.next();
+					monitor.setTaskName(NLS.bind(
+							Messages.UrmlDocumentProvider_SaveNextResourceTask,
+							nextResource.getURI()));
+					if (nextResource.isLoaded()
+							&& !info.getEditingDomain()
+									.isReadOnly(nextResource)) {
 						try {
-							nextResource.save(UrmlDiagramEditorUtil.getSaveOptions());
+							nextResource.save(UrmlDiagramEditorUtil
+									.getSaveOptions());
 						} catch (IOException e) {
 							fireElementStateChangeFailed(element);
-							throw new CoreException(new Status(IStatus.ERROR, UrmlDiagramEditorPlugin.ID,
-								EditorStatusCodes.RESOURCE_FAILURE, e.getLocalizedMessage(), null));
+							throw new CoreException(new Status(IStatus.ERROR,
+									UrmlDiagramEditorPlugin.ID,
+									EditorStatusCodes.RESOURCE_FAILURE,
+									e.getLocalizedMessage(), null));
 						}
 					}
 					monitor.worked(1);
@@ -434,38 +482,50 @@
 			}
 		} else {
 			URI newResoruceURI;
-			List affectedFiles = null;
+			List<IFile> affectedFiles = null;
 			if (element instanceof FileEditorInput) {
 				IFile newFile = ((FileEditorInput) element).getFile();
 				affectedFiles = Collections.singletonList(newFile);
-				newResoruceURI = URI.createPlatformResourceURI(newFile.getFullPath().toString(), true);
+				newResoruceURI = URI.createPlatformResourceURI(newFile
+						.getFullPath().toString(), true);
 			} else if (element instanceof URIEditorInput) {
 				newResoruceURI = ((URIEditorInput) element).getURI();
 			} else {
 				fireElementStateChangeFailed(element);
-				throw new CoreException(new Status(IStatus.ERROR, UrmlDiagramEditorPlugin.ID, 0, NLS.bind(
-					Messages.UrmlDocumentProvider_IncorrectInputError, new Object[] { element,
-						"org.eclipse.ui.part.FileEditorInput", "org.eclipse.emf.common.ui.URIEditorInput" }), //$NON-NLS-1$ //$NON-NLS-2$ 
-					null));
+				throw new CoreException(
+						new Status(
+								IStatus.ERROR,
+								UrmlDiagramEditorPlugin.ID,
+								0,
+								NLS.bind(
+										Messages.UrmlDocumentProvider_IncorrectInputError,
+										new Object[] {
+												element,
+												"org.eclipse.ui.part.FileEditorInput", "org.eclipse.emf.common.ui.URIEditorInput" }), //$NON-NLS-1$ //$NON-NLS-2$ 
+								null));
 			}
 			if (false == document instanceof IDiagramDocument) {
 				fireElementStateChangeFailed(element);
 				throw new CoreException(
-					new Status(
-						IStatus.ERROR,
-						UrmlDiagramEditorPlugin.ID,
-						0,
-						"Incorrect document used: " + document + " instead of org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.IDiagramDocument", null)); //$NON-NLS-1$ //$NON-NLS-2$
+						new Status(
+								IStatus.ERROR,
+								UrmlDiagramEditorPlugin.ID,
+								0,
+								"Incorrect document used: " + document + " instead of org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.IDiagramDocument", null)); //$NON-NLS-1$ //$NON-NLS-2$
 			}
 			IDiagramDocument diagramDocument = (IDiagramDocument) document;
-			final Resource newResource = diagramDocument.getEditingDomain().getResourceSet().createResource(
-				newResoruceURI);
-			final Diagram diagramCopy = (Diagram) EcoreUtil.copy(diagramDocument.getDiagram());
+			final Resource newResource = diagramDocument.getEditingDomain()
+					.getResourceSet().createResource(newResoruceURI);
+			final Diagram diagramCopy = (Diagram) EcoreUtil
+					.copy(diagramDocument.getDiagram());
 			try {
-				new AbstractTransactionalCommand(diagramDocument.getEditingDomain(), NLS.bind(
-					Messages.UrmlDocumentProvider_SaveAsOperation, diagramCopy.getName()), affectedFiles) {
-					protected CommandResult doExecuteWithResult(IProgressMonitor monitor, IAdaptable info)
-						throws ExecutionException {
+				new AbstractTransactionalCommand(
+						diagramDocument.getEditingDomain(), NLS.bind(
+								Messages.UrmlDocumentProvider_SaveAsOperation,
+								diagramCopy.getName()), affectedFiles) {
+					protected CommandResult doExecuteWithResult(
+							IProgressMonitor monitor, IAdaptable info)
+							throws ExecutionException {
 						newResource.getContents().add(diagramCopy);
 						return CommandResult.newOKCommandResult();
 					}
@@ -473,12 +533,14 @@
 				newResource.save(UrmlDiagramEditorUtil.getSaveOptions());
 			} catch (ExecutionException e) {
 				fireElementStateChangeFailed(element);
-				throw new CoreException(new Status(IStatus.ERROR, UrmlDiagramEditorPlugin.ID, 0, e
-					.getLocalizedMessage(), null));
+				throw new CoreException(new Status(IStatus.ERROR,
+						UrmlDiagramEditorPlugin.ID, 0, e.getLocalizedMessage(),
+						null));
 			} catch (IOException e) {
 				fireElementStateChangeFailed(element);
-				throw new CoreException(new Status(IStatus.ERROR, UrmlDiagramEditorPlugin.ID, 0, e
-					.getLocalizedMessage(), null));
+				throw new CoreException(new Status(IStatus.ERROR,
+						UrmlDiagramEditorPlugin.ID, 0, e.getLocalizedMessage(),
+						null));
 			}
 			newResource.unload();
 		}
@@ -487,16 +549,19 @@
 	/**
 	 * @generated
 	 */
-	protected void handleElementChanged(ResourceSetInfo info, Resource changedResource, IProgressMonitor monitor) {
+	protected void handleElementChanged(ResourceSetInfo info,
+			Resource changedResource, IProgressMonitor monitor) {
 		IFile file = WorkspaceSynchronizer.getFile(changedResource);
 		if (file != null) {
 			try {
 				file.refreshLocal(IResource.DEPTH_INFINITE, monitor);
 			} catch (CoreException ex) {
-				UrmlDiagramEditorPlugin.getInstance().logError(
-					Messages.UrmlDocumentProvider_handleElementContentChanged, ex);
-				// Error message to log was initially taken from
-				// org.eclipse.gmf.runtime.diagram.ui.resources.editor.ide.internal.l10n.EditorMessages.FileDocumentProvider_handleElementContentChanged
+				UrmlDiagramEditorPlugin
+						.getInstance()
+						.logError(
+								Messages.UrmlDocumentProvider_handleElementContentChanged,
+								ex);
+				// Error message to log was initially taken from org.eclipse.gmf.runtime.diagram.ui.resources.editor.ide.internal.l10n.EditorMessages.FileDocumentProvider_handleElementContentChanged
 			}
 		}
 		changedResource.unload();
@@ -521,9 +586,14 @@
 	 */
 	protected void handleElementMoved(IEditorInput input, URI uri) {
 		if (input instanceof FileEditorInput) {
-			IFile newFile = ResourcesPlugin.getWorkspace().getRoot().getFile(
-				new Path(URI.decode(uri.path())).removeFirstSegments(1));
-			fireElementMoved(input, newFile == null ? null : new FileEditorInput(newFile));
+			IFile newFile = ResourcesPlugin
+					.getWorkspace()
+					.getRoot()
+					.getFile(
+							new Path(URI.decode(uri.path()))
+									.removeFirstSegments(1));
+			fireElementMoved(input, newFile == null ? null
+					: new FileEditorInput(newFile));
 			return;
 		}
 		// TODO: append suffix to the URI! (use diagram as a parameter)
@@ -544,7 +614,8 @@
 	/**
 	 * @generated
 	 */
-	public IEditorInput createInputWithEditingDomain(IEditorInput editorInput, TransactionalEditingDomain domain) {
+	public IEditorInput createInputWithEditingDomain(IEditorInput editorInput,
+			TransactionalEditingDomain domain) {
 		return editorInput;
 	}
 
@@ -584,7 +655,7 @@
 		/**
 		 * @generated
 		 */
-		private Collection myUnSynchronizedResources = new ArrayList();
+		private LinkedList<Resource> myUnSynchronizedResources = new LinkedList<Resource>();
 
 		/**
 		 * @generated
@@ -619,7 +690,8 @@
 		/**
 		 * @generated
 		 */
-		public ResourceSetInfo(IDiagramDocument document, IEditorInput editorInput) {
+		public ResourceSetInfo(IDiagramDocument document,
+				IEditorInput editorInput) {
 			super(document);
 			myDocument = document;
 			myEditorInput = editorInput;
@@ -659,9 +731,9 @@
 		/**
 		 * @generated
 		 */
-		public Iterator/* <org.eclipse.emf.ecore.resource.Resource> */getLoadedResourcesIterator() {
-			return new ArrayList/* <org.eclipse.emf.ecore.resource.Resource> */(getResourceSet().getResources())
-				.iterator();
+		public Iterator<Resource> getLoadedResourcesIterator() {
+			return new ArrayList<Resource>(getResourceSet().getResources())
+					.iterator();
 		}
 
 		/**
@@ -718,7 +790,8 @@
 		 * @generated
 		 */
 		public final void startResourceListening() {
-			mySynchronizer = new WorkspaceSynchronizer(getEditingDomain(), new SynchronizerDelegate());
+			mySynchronizer = new WorkspaceSynchronizer(getEditingDomain(),
+					new SynchronizerDelegate());
 		}
 
 		/**
@@ -766,7 +839,8 @@
 		/**
 		 * @generated
 		 */
-		private class SynchronizerDelegate implements WorkspaceSynchronizer.Delegate {
+		private class SynchronizerDelegate implements
+				WorkspaceSynchronizer.Delegate {
 
 			/**
 			 * @generated
@@ -786,7 +860,8 @@
 				}
 				Display.getDefault().asyncExec(new Runnable() {
 					public void run() {
-						handleElementChanged(ResourceSetInfo.this, resource, null);
+						handleElementChanged(ResourceSetInfo.this, resource,
+								null);
 					}
 				});
 				return true;
@@ -804,7 +879,8 @@
 				}
 				Display.getDefault().asyncExec(new Runnable() {
 					public void run() {
-						fireElementDeleted(ResourceSetInfo.this.getEditorInput());
+						fireElementDeleted(ResourceSetInfo.this
+								.getEditorInput());
 					}
 				});
 				return true;
@@ -813,7 +889,8 @@
 			/**
 			 * @generated
 			 */
-			public boolean handleResourceMoved(Resource resource, final URI newURI) {
+			public boolean handleResourceMoved(Resource resource,
+					final URI newURI) {
 				synchronized (ResourceSetInfo.this) {
 					if (ResourceSetInfo.this.fCanBeSaved) {
 						ResourceSetInfo.this.setUnSynchronized(resource);
@@ -823,7 +900,9 @@
 				if (myDocument.getDiagram().eResource() == resource) {
 					Display.getDefault().asyncExec(new Runnable() {
 						public void run() {
-							handleElementMoved(ResourceSetInfo.this.getEditorInput(), newURI);
+							handleElementMoved(
+									ResourceSetInfo.this.getEditorInput(),
+									newURI);
 						}
 					});
 				} else {
@@ -856,9 +935,12 @@
 		 */
 		public ResourceSetModificationListener(ResourceSetInfo info) {
 			myInfo = info;
-			myModifiedFilter = NotificationFilter.createEventTypeFilter(Notification.SET).or(
-				NotificationFilter.createEventTypeFilter(Notification.UNSET)).and(
-				NotificationFilter.createFeatureFilter(Resource.class, Resource.RESOURCE__IS_MODIFIED));
+			myModifiedFilter = NotificationFilter
+					.createEventTypeFilter(Notification.SET)
+					.or(NotificationFilter
+							.createEventTypeFilter(Notification.UNSET))
+					.and(NotificationFilter.createFeatureFilter(Resource.class,
+							Resource.RESOURCE__IS_MODIFIED));
 		}
 
 		/**
@@ -868,13 +950,15 @@
 			if (notification.getNotifier() instanceof ResourceSet) {
 				super.notifyChanged(notification);
 			}
-			if (!notification.isTouch() && myModifiedFilter.matches(notification)) {
+			if (!notification.isTouch()
+					&& myModifiedFilter.matches(notification)) {
 				if (notification.getNotifier() instanceof Resource) {
 					Resource resource = (Resource) notification.getNotifier();
 					if (resource.isLoaded()) {
 						boolean modified = false;
-						for (Iterator/* <org.eclipse.emf.ecore.resource.Resource> */it = myInfo
-							.getLoadedResourcesIterator(); it.hasNext() && !modified;) {
+						for (Iterator/*<org.eclipse.emf.ecore.resource.Resource>*/it = myInfo
+								.getLoadedResourcesIterator(); it.hasNext()
+								&& !modified;) {
 							Resource nextResource = (Resource) it.next();
 							if (nextResource.isLoaded()) {
 								modified = nextResource.isModified();
@@ -891,7 +975,8 @@
 							}
 						}
 						if (dirtyStateChanged) {
-							fireElementDirtyStateChanged(myInfo.getEditorInput(), modified);
+							fireElementDirtyStateChanged(
+									myInfo.getEditorInput(), modified);
 
 							if (!modified) {
 								myInfo.setModificationStamp(computeModificationStamp(myInfo));
Index: src/org/unicase/ui/diagram/urml/part/ModelElementSelectionPage.java
===================================================================
--- src/org/unicase/ui/diagram/urml/part/ModelElementSelectionPage.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/part/ModelElementSelectionPage.java	(working copy)
@@ -55,7 +55,8 @@
 		if (modelViewer != null) {
 			if (selectedModelElement != null) {
 				modelViewer.setInput(selectedModelElement.eResource());
-				modelViewer.setSelection(new StructuredSelection(selectedModelElement));
+				modelViewer.setSelection(new StructuredSelection(
+						selectedModelElement));
 			} else {
 				modelViewer.setInput(null);
 			}
@@ -80,24 +81,31 @@
 		label.setText(getSelectionTitle());
 		label.setLayoutData(new GridData(GridData.HORIZONTAL_ALIGN_BEGINNING));
 
-		modelViewer = new TreeViewer(plate, SWT.SINGLE | SWT.H_SCROLL | SWT.V_SCROLL | SWT.BORDER);
+		modelViewer = new TreeViewer(plate, SWT.SINGLE | SWT.H_SCROLL
+				| SWT.V_SCROLL | SWT.BORDER);
 		GridData layoutData = new GridData(GridData.FILL_BOTH);
 		layoutData.heightHint = 300;
 		layoutData.widthHint = 300;
 		modelViewer.getTree().setLayoutData(layoutData);
-		modelViewer.setContentProvider(new AdapterFactoryContentProvider(UrmlDiagramEditorPlugin.getInstance()
-			.getItemProvidersAdapterFactory()));
-		modelViewer.setLabelProvider(new AdapterFactoryLabelProvider(UrmlDiagramEditorPlugin.getInstance()
-			.getItemProvidersAdapterFactory()));
+		modelViewer.setContentProvider(new AdapterFactoryContentProvider(
+				UrmlDiagramEditorPlugin.getInstance()
+						.getItemProvidersAdapterFactory()));
+		modelViewer.setLabelProvider(new AdapterFactoryLabelProvider(
+				UrmlDiagramEditorPlugin.getInstance()
+						.getItemProvidersAdapterFactory()));
 		if (selectedModelElement != null) {
 			modelViewer.setInput(selectedModelElement.eResource());
-			modelViewer.setSelection(new StructuredSelection(selectedModelElement));
+			modelViewer.setSelection(new StructuredSelection(
+					selectedModelElement));
 		}
-		modelViewer.addSelectionChangedListener(new ISelectionChangedListener() {
-			public void selectionChanged(SelectionChangedEvent event) {
-				ModelElementSelectionPage.this.updateSelection((IStructuredSelection) event.getSelection());
-			}
-		});
+		modelViewer
+				.addSelectionChangedListener(new ISelectionChangedListener() {
+					public void selectionChanged(SelectionChangedEvent event) {
+						ModelElementSelectionPage.this
+								.updateSelection((IStructuredSelection) event
+										.getSelection());
+					}
+				});
 
 		setPageComplete(validatePage());
 	}
@@ -119,10 +127,12 @@
 		if (selection.size() == 1) {
 			Object selectedElement = selection.getFirstElement();
 			if (selectedElement instanceof IWrapperItemProvider) {
-				selectedElement = ((IWrapperItemProvider) selectedElement).getValue();
+				selectedElement = ((IWrapperItemProvider) selectedElement)
+						.getValue();
 			}
 			if (selectedElement instanceof FeatureMap.Entry) {
-				selectedElement = ((FeatureMap.Entry) selectedElement).getValue();
+				selectedElement = ((FeatureMap.Entry) selectedElement)
+						.getValue();
 			}
 			if (selectedElement instanceof EObject) {
 				selectedModelElement = (EObject) selectedElement;
Index: src/org/unicase/ui/diagram/urml/part/UrmlLinkDescriptor.java
===================================================================
--- src/org/unicase/ui/diagram/urml/part/UrmlLinkDescriptor.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/part/UrmlLinkDescriptor.java	(working copy)
@@ -28,7 +28,8 @@
 	/**
 	 * @generated
 	 */
-	private UrmlLinkDescriptor(EObject source, EObject destination, EObject linkElement, int linkVID) {
+	private UrmlLinkDescriptor(EObject source, EObject destination,
+			EObject linkElement, int linkVID) {
 		super(linkElement, linkVID);
 		mySource = source;
 		myDestination = destination;
@@ -37,7 +38,8 @@
 	/**
 	 * @generated
 	 */
-	public UrmlLinkDescriptor(EObject source, EObject destination, IElementType elementType, int linkVID) {
+	public UrmlLinkDescriptor(EObject source, EObject destination,
+			IElementType elementType, int linkVID) {
 		this(source, destination, (EObject) null, linkVID);
 		final IElementType elementTypeCopy = elementType;
 		mySemanticAdapter = new IAdaptable() {
@@ -53,8 +55,8 @@
 	/**
 	 * @generated
 	 */
-	public UrmlLinkDescriptor(EObject source, EObject destination, EObject linkElement, IElementType elementType,
-		int linkVID) {
+	public UrmlLinkDescriptor(EObject source, EObject destination,
+			EObject linkElement, IElementType elementType, int linkVID) {
 		this(source, destination, linkElement, linkVID);
 		final IElementType elementTypeCopy = elementType;
 		mySemanticAdapter = new EObjectAdapter(linkElement) {
Index: src/org/unicase/ui/diagram/urml/part/UrmlDiagramUpdateCommand.java
===================================================================
--- src/org/unicase/ui/diagram/urml/part/UrmlDiagramUpdateCommand.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/part/UrmlDiagramUpdateCommand.java	(working copy)
@@ -36,20 +36,24 @@
 	 * @generated
 	 */
 	public Object execute(ExecutionEvent event) throws ExecutionException {
-		ISelection selection = PlatformUI.getWorkbench().getActiveWorkbenchWindow().getSelectionService()
-			.getSelection();
+		ISelection selection = PlatformUI.getWorkbench()
+				.getActiveWorkbenchWindow().getSelectionService()
+				.getSelection();
 		if (selection instanceof IStructuredSelection) {
 			IStructuredSelection structuredSelection = (IStructuredSelection) selection;
 			if (structuredSelection.size() != 1) {
 				return null;
 			}
 			if (structuredSelection.getFirstElement() instanceof EditPart
-				&& ((EditPart) structuredSelection.getFirstElement()).getModel() instanceof View) {
-				EObject modelElement = ((View) ((EditPart) structuredSelection.getFirstElement()).getModel())
-					.getElement();
-				List editPolicies = CanonicalEditPolicy.getRegisteredEditPolicies(modelElement);
+					&& ((EditPart) structuredSelection.getFirstElement())
+							.getModel() instanceof View) {
+				EObject modelElement = ((View) ((EditPart) structuredSelection
+						.getFirstElement()).getModel()).getElement();
+				List editPolicies = CanonicalEditPolicy
+						.getRegisteredEditPolicies(modelElement);
 				for (Iterator it = editPolicies.iterator(); it.hasNext();) {
-					CanonicalEditPolicy nextEditPolicy = (CanonicalEditPolicy) it.next();
+					CanonicalEditPolicy nextEditPolicy = (CanonicalEditPolicy) it
+							.next();
 					nextEditPolicy.refresh();
 				}
 
Index: src/org/unicase/ui/diagram/urml/part/UrmlPaletteFactory.java
===================================================================
--- src/org/unicase/ui/diagram/urml/part/UrmlPaletteFactory.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/part/UrmlPaletteFactory.java	(working copy)
@@ -1,6 +1,7 @@
 package org.unicase.ui.diagram.urml.part;
 
 import java.util.ArrayList;
+import java.util.Collections;
 import java.util.List;
 
 import org.eclipse.gef.Tool;
@@ -9,6 +10,7 @@
 import org.eclipse.gef.palette.PaletteRoot;
 import org.eclipse.gef.palette.ToolEntry;
 import org.eclipse.gmf.runtime.diagram.ui.tools.UnspecifiedTypeCreationTool;
+import org.eclipse.gmf.runtime.emf.type.core.IElementType;
 import org.unicase.ui.diagram.urml.providers.UrmlElementTypes;
 
 /**
@@ -29,7 +31,8 @@
 	 * @generated
 	 */
 	private PaletteContainer createUrml1Group() {
-		PaletteGroup paletteContainer = new PaletteGroup(Messages.Urml1Group_title);
+		PaletteGroup paletteContainer = new PaletteGroup(
+				Messages.Urml1Group_title);
 		paletteContainer.setId("createUrml1Group"); //$NON-NLS-1$
 		paletteContainer.add(createStakeholder1CreationTool());
 		paletteContainer.add(createGoal2CreationTool());
@@ -50,12 +53,13 @@
 	 * @generated
 	 */
 	private ToolEntry createStakeholder1CreationTool() {
-		List/* <IElementType> */types = new ArrayList/* <IElementType> */(1);
-		types.add(UrmlElementTypes.Stakeholder_2002);
-		NodeToolEntry entry = new NodeToolEntry(Messages.Stakeholder1CreationTool_title,
-			Messages.Stakeholder1CreationTool_desc, types);
+		NodeToolEntry entry = new NodeToolEntry(
+				Messages.Stakeholder1CreationTool_title,
+				Messages.Stakeholder1CreationTool_desc,
+				Collections.singletonList(UrmlElementTypes.Stakeholder_2002));
 		entry.setId("createStakeholder1CreationTool"); //$NON-NLS-1$
-		entry.setSmallIcon(UrmlElementTypes.getImageDescriptor(UrmlElementTypes.Stakeholder_2002));
+		entry.setSmallIcon(UrmlElementTypes
+				.getImageDescriptor(UrmlElementTypes.Stakeholder_2002));
 		entry.setLargeIcon(entry.getSmallIcon());
 		return entry;
 	}
@@ -64,12 +68,13 @@
 	 * @generated
 	 */
 	private ToolEntry createGoal2CreationTool() {
-		List/* <IElementType> */types = new ArrayList/* <IElementType> */(1);
-		types.add(UrmlElementTypes.Goal_2001);
-		NodeToolEntry entry = new NodeToolEntry(Messages.Goal2CreationTool_title, Messages.Goal2CreationTool_desc,
-			types);
+		NodeToolEntry entry = new NodeToolEntry(
+				Messages.Goal2CreationTool_title,
+				Messages.Goal2CreationTool_desc,
+				Collections.singletonList(UrmlElementTypes.Goal_2001));
 		entry.setId("createGoal2CreationTool"); //$NON-NLS-1$
-		entry.setSmallIcon(UrmlElementTypes.getImageDescriptor(UrmlElementTypes.Goal_2001));
+		entry.setSmallIcon(UrmlElementTypes
+				.getImageDescriptor(UrmlElementTypes.Goal_2001));
 		entry.setLargeIcon(entry.getSmallIcon());
 		return entry;
 	}
@@ -78,11 +83,14 @@
 	 * @generated
 	 */
 	private ToolEntry createFunctionalRequirement3CreationTool() {
-		List/* <IElementType> */types = new ArrayList/* <IElementType> */(1);
-		types.add(UrmlElementTypes.FunctionalRequirement_2006);
-		NodeToolEntry entry = new NodeToolEntry(Messages.FunctionalRequirement3CreationTool_title, null, types);
+		NodeToolEntry entry = new NodeToolEntry(
+				Messages.FunctionalRequirement3CreationTool_title,
+				null,
+				Collections
+						.singletonList(UrmlElementTypes.FunctionalRequirement_2006));
 		entry.setId("createFunctionalRequirement3CreationTool"); //$NON-NLS-1$
-		entry.setSmallIcon(UrmlElementTypes.getImageDescriptor(UrmlElementTypes.FunctionalRequirement_2006));
+		entry.setSmallIcon(UrmlElementTypes
+				.getImageDescriptor(UrmlElementTypes.FunctionalRequirement_2006));
 		entry.setLargeIcon(entry.getSmallIcon());
 		return entry;
 	}
@@ -91,11 +99,12 @@
 	 * @generated
 	 */
 	private ToolEntry createFeature4CreationTool() {
-		List/* <IElementType> */types = new ArrayList/* <IElementType> */(1);
-		types.add(UrmlElementTypes.Feature_2012);
-		NodeToolEntry entry = new NodeToolEntry(Messages.Feature4CreationTool_title, null, types);
+		NodeToolEntry entry = new NodeToolEntry(
+				Messages.Feature4CreationTool_title, null,
+				Collections.singletonList(UrmlElementTypes.Feature_2012));
 		entry.setId("createFeature4CreationTool"); //$NON-NLS-1$
-		entry.setSmallIcon(UrmlElementTypes.getImageDescriptor(UrmlElementTypes.Feature_2012));
+		entry.setSmallIcon(UrmlElementTypes
+				.getImageDescriptor(UrmlElementTypes.Feature_2012));
 		entry.setLargeIcon(entry.getSmallIcon());
 		return entry;
 	}
@@ -104,11 +113,12 @@
 	 * @generated
 	 */
 	private ToolEntry createService5CreationTool() {
-		List/* <IElementType> */types = new ArrayList/* <IElementType> */(1);
-		types.add(UrmlElementTypes.Service_2007);
-		NodeToolEntry entry = new NodeToolEntry(Messages.Service5CreationTool_title, null, types);
+		NodeToolEntry entry = new NodeToolEntry(
+				Messages.Service5CreationTool_title, null,
+				Collections.singletonList(UrmlElementTypes.Service_2007));
 		entry.setId("createService5CreationTool"); //$NON-NLS-1$
-		entry.setSmallIcon(UrmlElementTypes.getImageDescriptor(UrmlElementTypes.Service_2007));
+		entry.setSmallIcon(UrmlElementTypes
+				.getImageDescriptor(UrmlElementTypes.Service_2007));
 		entry.setLargeIcon(entry.getSmallIcon());
 		return entry;
 	}
@@ -117,11 +127,14 @@
 	 * @generated
 	 */
 	private ToolEntry createNonFunctionalRequirement6CreationTool() {
-		List/* <IElementType> */types = new ArrayList/* <IElementType> */(1);
-		types.add(UrmlElementTypes.NonFunctionalRequirement_2008);
-		NodeToolEntry entry = new NodeToolEntry(Messages.NonFunctionalRequirement6CreationTool_title, null, types);
+		NodeToolEntry entry = new NodeToolEntry(
+				Messages.NonFunctionalRequirement6CreationTool_title,
+				null,
+				Collections
+						.singletonList(UrmlElementTypes.NonFunctionalRequirement_2008));
 		entry.setId("createNonFunctionalRequirement6CreationTool"); //$NON-NLS-1$
-		entry.setSmallIcon(UrmlElementTypes.getImageDescriptor(UrmlElementTypes.NonFunctionalRequirement_2008));
+		entry.setSmallIcon(UrmlElementTypes
+				.getImageDescriptor(UrmlElementTypes.NonFunctionalRequirement_2008));
 		entry.setLargeIcon(entry.getSmallIcon());
 		return entry;
 	}
@@ -130,11 +143,12 @@
 	 * @generated
 	 */
 	private ToolEntry createDanger7CreationTool() {
-		List/* <IElementType> */types = new ArrayList/* <IElementType> */(1);
-		types.add(UrmlElementTypes.Danger_2009);
-		NodeToolEntry entry = new NodeToolEntry(Messages.Danger7CreationTool_title, null, types);
+		NodeToolEntry entry = new NodeToolEntry(
+				Messages.Danger7CreationTool_title, null,
+				Collections.singletonList(UrmlElementTypes.Danger_2009));
 		entry.setId("createDanger7CreationTool"); //$NON-NLS-1$
-		entry.setSmallIcon(UrmlElementTypes.getImageDescriptor(UrmlElementTypes.Danger_2009));
+		entry.setSmallIcon(UrmlElementTypes
+				.getImageDescriptor(UrmlElementTypes.Danger_2009));
 		entry.setLargeIcon(entry.getSmallIcon());
 		return entry;
 	}
@@ -143,11 +157,12 @@
 	 * @generated
 	 */
 	private ToolEntry createActor8CreationTool() {
-		List/* <IElementType> */types = new ArrayList/* <IElementType> */(1);
-		types.add(UrmlElementTypes.Actor_2010);
-		NodeToolEntry entry = new NodeToolEntry(Messages.Actor8CreationTool_title, null, types);
+		NodeToolEntry entry = new NodeToolEntry(
+				Messages.Actor8CreationTool_title, null,
+				Collections.singletonList(UrmlElementTypes.Actor_2010));
 		entry.setId("createActor8CreationTool"); //$NON-NLS-1$
-		entry.setSmallIcon(UrmlElementTypes.getImageDescriptor(UrmlElementTypes.Actor_2010));
+		entry.setSmallIcon(UrmlElementTypes
+				.getImageDescriptor(UrmlElementTypes.Actor_2010));
 		entry.setLargeIcon(entry.getSmallIcon());
 		return entry;
 	}
@@ -156,11 +171,14 @@
 	 * @generated
 	 */
 	private ToolEntry createProceduralMitigation9CreationTool() {
-		List/* <IElementType> */types = new ArrayList/* <IElementType> */(1);
-		types.add(UrmlElementTypes.ProceduralMitigation_2011);
-		NodeToolEntry entry = new NodeToolEntry(Messages.ProceduralMitigation9CreationTool_title, null, types);
+		NodeToolEntry entry = new NodeToolEntry(
+				Messages.ProceduralMitigation9CreationTool_title,
+				null,
+				Collections
+						.singletonList(UrmlElementTypes.ProceduralMitigation_2011));
 		entry.setId("createProceduralMitigation9CreationTool"); //$NON-NLS-1$
-		entry.setSmallIcon(UrmlElementTypes.getImageDescriptor(UrmlElementTypes.ProceduralMitigation_2011));
+		entry.setSmallIcon(UrmlElementTypes
+				.getImageDescriptor(UrmlElementTypes.ProceduralMitigation_2011));
 		entry.setLargeIcon(entry.getSmallIcon());
 		return entry;
 	}
@@ -169,11 +187,12 @@
 	 * @generated
 	 */
 	private ToolEntry createVariationPoint10CreationTool() {
-		List/* <IElementType> */types = new ArrayList/* <IElementType> */(1);
-		types.add(UrmlElementTypes.VariationPoint_2013);
-		NodeToolEntry entry = new NodeToolEntry(Messages.VariationPoint10CreationTool_title, null, types);
+		NodeToolEntry entry = new NodeToolEntry(
+				Messages.VariationPoint10CreationTool_title, null,
+				Collections.singletonList(UrmlElementTypes.VariationPoint_2013));
 		entry.setId("createVariationPoint10CreationTool"); //$NON-NLS-1$
-		entry.setSmallIcon(UrmlElementTypes.getImageDescriptor(UrmlElementTypes.VariationPoint_2013));
+		entry.setSmallIcon(UrmlElementTypes
+				.getImageDescriptor(UrmlElementTypes.VariationPoint_2013));
 		entry.setLargeIcon(entry.getSmallIcon());
 		return entry;
 	}
@@ -182,11 +201,14 @@
 	 * @generated
 	 */
 	private ToolEntry createVariationPointInstance11CreationTool() {
-		List/* <IElementType> */types = new ArrayList/* <IElementType> */(1);
-		types.add(UrmlElementTypes.VariationPointInstance_2014);
-		NodeToolEntry entry = new NodeToolEntry(Messages.VariationPointInstance11CreationTool_title, null, types);
+		NodeToolEntry entry = new NodeToolEntry(
+				Messages.VariationPointInstance11CreationTool_title,
+				null,
+				Collections
+						.singletonList(UrmlElementTypes.VariationPointInstance_2014));
 		entry.setId("createVariationPointInstance11CreationTool"); //$NON-NLS-1$
-		entry.setSmallIcon(UrmlElementTypes.getImageDescriptor(UrmlElementTypes.VariationPointInstance_2014));
+		entry.setSmallIcon(UrmlElementTypes
+				.getImageDescriptor(UrmlElementTypes.VariationPointInstance_2014));
 		entry.setLargeIcon(entry.getSmallIcon());
 		return entry;
 	}
@@ -195,11 +217,12 @@
 	 * @generated
 	 */
 	private ToolEntry createProduct12CreationTool() {
-		List/* <IElementType> */types = new ArrayList/* <IElementType> */(1);
-		types.add(UrmlElementTypes.Product_2015);
-		NodeToolEntry entry = new NodeToolEntry(Messages.Product12CreationTool_title, null, types);
+		NodeToolEntry entry = new NodeToolEntry(
+				Messages.Product12CreationTool_title, null,
+				Collections.singletonList(UrmlElementTypes.Product_2015));
 		entry.setId("createProduct12CreationTool"); //$NON-NLS-1$
-		entry.setSmallIcon(UrmlElementTypes.getImageDescriptor(UrmlElementTypes.Product_2015));
+		entry.setSmallIcon(UrmlElementTypes
+				.getImageDescriptor(UrmlElementTypes.Product_2015));
 		entry.setLargeIcon(entry.getSmallIcon());
 		return entry;
 	}
@@ -212,12 +235,13 @@
 		/**
 		 * @generated
 		 */
-		private final List elementTypes;
+		private final List<IElementType> elementTypes;
 
 		/**
 		 * @generated
 		 */
-		private NodeToolEntry(String title, String description, List elementTypes) {
+		private NodeToolEntry(String title, String description,
+				List<IElementType> elementTypes) {
 			super(title, description, null, null);
 			this.elementTypes = elementTypes;
 		}
Index: src/org/unicase/ui/diagram/urml/part/UrmlDiagramActionBarContributor.java
===================================================================
--- src/org/unicase/ui/diagram/urml/part/UrmlDiagramActionBarContributor.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/part/UrmlDiagramActionBarContributor.java	(working copy)
@@ -9,7 +9,8 @@
 /**
  * @generated
  */
-public class UrmlDiagramActionBarContributor extends DiagramActionBarContributor {
+public class UrmlDiagramActionBarContributor extends
+		DiagramActionBarContributor {
 
 	/**
 	 * @generated
@@ -31,7 +32,8 @@
 	public void init(IActionBars bars, IWorkbenchPage page) {
 		super.init(bars, page);
 		// print preview
-		IMenuManager fileMenu = bars.getMenuManager().findMenuUsingPath(IWorkbenchActionConstants.M_FILE);
+		IMenuManager fileMenu = bars.getMenuManager().findMenuUsingPath(
+				IWorkbenchActionConstants.M_FILE);
 		assert fileMenu != null;
 		fileMenu.remove("pageSetupAction"); //$NON-NLS-1$
 	}
Index: src/org/unicase/ui/diagram/urml/part/UrmlUriEditorInputTester.java
===================================================================
--- src/org/unicase/ui/diagram/urml/part/UrmlUriEditorInputTester.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/part/UrmlUriEditorInputTester.java	(working copy)
@@ -11,7 +11,8 @@
 	/**
 	 * @generated
 	 */
-	public boolean test(Object receiver, String method, Object[] args, Object expectedValue) {
+	public boolean test(Object receiver, String method, Object[] args,
+			Object expectedValue) {
 		if (false == receiver instanceof URIEditorInput) {
 			return false;
 		}
Index: src/org/unicase/ui/diagram/urml/part/X.java
===================================================================
--- src/org/unicase/ui/diagram/urml/part/X.java	(revision 0)
+++ src/org/unicase/ui/diagram/urml/part/X.java	(revision 0)
@@ -0,0 +1,907 @@
+package org.unicase.ui.diagram.urml.part;
+
+import java.io.IOException;
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.Collections;
+import java.util.Iterator;
+import java.util.List;
+
+import org.eclipse.core.commands.ExecutionException;
+import org.eclipse.core.resources.IFile;
+import org.eclipse.core.resources.IResource;
+import org.eclipse.core.resources.IResourceStatus;
+import org.eclipse.core.resources.ResourcesPlugin;
+import org.eclipse.core.runtime.CoreException;
+import org.eclipse.core.runtime.IAdaptable;
+import org.eclipse.core.runtime.IProgressMonitor;
+import org.eclipse.core.runtime.IStatus;
+import org.eclipse.core.runtime.Path;
+import org.eclipse.core.runtime.Status;
+import org.eclipse.core.runtime.jobs.ISchedulingRule;
+import org.eclipse.core.runtime.jobs.MultiRule;
+import org.eclipse.emf.common.notify.Notification;
+import org.eclipse.emf.common.ui.URIEditorInput;
+import org.eclipse.emf.common.util.URI;
+import org.eclipse.emf.ecore.resource.Resource;
+import org.eclipse.emf.ecore.resource.ResourceSet;
+import org.eclipse.emf.ecore.util.EContentAdapter;
+import org.eclipse.emf.ecore.util.EcoreUtil;
+import org.eclipse.emf.transaction.NotificationFilter;
+import org.eclipse.emf.transaction.TransactionalEditingDomain;
+import org.eclipse.emf.workspace.util.WorkspaceSynchronizer;
+import org.eclipse.gmf.runtime.common.core.command.CommandResult;
+import org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.IDiagramDocument;
+import org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.IDiagramDocumentProvider;
+import org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.IDocument;
+import org.eclipse.gmf.runtime.diagram.ui.resources.editor.internal.EditorStatusCodes;
+import org.eclipse.gmf.runtime.emf.commands.core.command.AbstractTransactionalCommand;
+import org.eclipse.gmf.runtime.notation.Diagram;
+import org.eclipse.jface.operation.IRunnableContext;
+import org.eclipse.osgi.util.NLS;
+import org.eclipse.swt.widgets.Display;
+import org.eclipse.ui.IEditorInput;
+import org.eclipse.ui.part.FileEditorInput;
+import org.unicase.ui.unicasecommon.diagram.part.ModelDocumentProvider;
+
+/**
+ * @generated
+ */
+
+public class X extends ModelDocumentProvider implements IDiagramDocumentProvider {
+
+	/**
+	 * @generated
+	 */
+	protected ElementInfo createElementInfo(Object element) throws CoreException {
+		if (false == element instanceof FileEditorInput && false == element instanceof URIEditorInput) {
+			throw new CoreException(new Status(IStatus.ERROR, UrmlDiagramEditorPlugin.ID, 0, NLS.bind(
+				Messages.UrmlDocumentProvider_IncorrectInputError, new Object[] { element,
+					"org.eclipse.ui.part.FileEditorInput", "org.eclipse.emf.common.ui.URIEditorInput" }), //$NON-NLS-1$ //$NON-NLS-2$ 
+				null));
+		}
+		IEditorInput editorInput = (IEditorInput) element;
+		IDiagramDocument document = (IDiagramDocument) createDocument(editorInput);
+
+		ResourceSetInfo info = new ResourceSetInfo(document, editorInput);
+		info.setModificationStamp(computeModificationStamp(info));
+		info.fStatus = null;
+		return info;
+	}
+
+	/**
+	 * @generated
+	 */
+	protected IDocument createDocument(Object element) throws CoreException {
+		if (false == element instanceof FileEditorInput && false == element instanceof URIEditorInput) {
+			throw new CoreException(new Status(IStatus.ERROR, UrmlDiagramEditorPlugin.ID, 0, NLS.bind(
+				Messages.UrmlDocumentProvider_IncorrectInputError, new Object[] { element,
+					"org.eclipse.ui.part.FileEditorInput", "org.eclipse.emf.common.ui.URIEditorInput" }), //$NON-NLS-1$ //$NON-NLS-2$ 
+				null));
+		}
+		IDocument document = createEmptyDocument();
+		setDocumentContent(document, (IEditorInput) element);
+		setupDocument(element, document);
+		return document;
+	}
+
+	/**
+	 * Sets up the given document as it would be provided for the given element. The content of the document is not
+	 * changed. This default implementation is empty. Subclasses may reimplement.
+	 * 
+	 * @param element the blue-print element
+	 * @param document the document to set up
+	 * @generated
+	 */
+	protected void setupDocument(Object element, IDocument document) {
+		// for subclasses
+	}
+
+	/**
+	 * @generated
+	 */
+	private long computeModificationStamp(ResourceSetInfo info) {
+		int result = 0;
+		for (Iterator/* <org.eclipse.emf.ecore.resource.Resource> */it = info.getLoadedResourcesIterator(); it.hasNext();) {
+			Resource nextResource = (Resource) it.next();
+			IFile file = WorkspaceSynchronizer.getFile(nextResource);
+			if (file != null) {
+				if (file.getLocation() != null) {
+					result += file.getLocation().toFile().lastModified();
+				} else {
+					result += file.getModificationStamp();
+				}
+			}
+		}
+		return result;
+	}
+
+	/**
+	 * @generated
+	 */
+	public long getModificationStamp(Object element) {
+		ResourceSetInfo info = getResourceSetInfo(element);
+		if (info != null) {
+			return computeModificationStamp(info);
+		}
+		return super.getModificationStamp(element);
+	}
+
+	/**
+	 * @generated
+	 */
+	public boolean isDeleted(Object element) {
+		IDiagramDocument document = getDiagramDocument(element);
+		if (document != null) {
+			Resource diagramResource = document.getDiagram().eResource();
+			if (diagramResource != null) {
+				IFile file = WorkspaceSynchronizer.getFile(diagramResource);
+				return file == null || file.getLocation() == null || !file.getLocation().toFile().exists();
+			}
+		}
+		return super.isDeleted(element);
+	}
+
+	/**
+	 * @generated
+	 */
+	public ResourceSetInfo getResourceSetInfo(Object editorInput) {
+		return (ResourceSetInfo) super.getElementInfo(editorInput);
+	}
+
+	/**
+	 * @generated
+	 */
+	protected void doValidateState(Object element, Object computationContext) throws CoreException {
+		ResourceSetInfo info = getResourceSetInfo(element);
+		if (info != null) {
+			Collection/* <org.eclipse.core.resources.IFile> */files2Validate = new ArrayList/*
+																						 * <org.eclipse.core.resources.IFile
+																						 * >
+																						 */();
+			for (Iterator/* <org.eclipse.emf.ecore.resource.Resource> */it = info.getLoadedResourcesIterator(); it
+				.hasNext();) {
+				Resource nextResource = (Resource) it.next();
+				IFile file = WorkspaceSynchronizer.getFile(nextResource);
+				if (file != null && file.isReadOnly()) {
+					files2Validate.add(file);
+				}
+			}
+			ResourcesPlugin.getWorkspace().validateEdit(
+				(IFile[]) files2Validate.toArray(new IFile[files2Validate.size()]), computationContext);
+		}
+
+		super.doValidateState(element, computationContext);
+	}
+
+	/**
+	 * @generated
+	 */
+	public boolean isReadOnly(Object element) {
+		ResourceSetInfo info = getResourceSetInfo(element);
+		if (info != null) {
+			if (info.isUpdateCache()) {
+				try {
+					updateCache(element);
+				} catch (CoreException ex) {
+					UrmlDiagramEditorPlugin.getInstance().logError(Messages.UrmlDocumentProvider_isModifiable, ex);
+					// Error message to log was initially taken from
+					// org.eclipse.gmf.runtime.diagram.ui.resources.editor.ide.internal.l10n.EditorMessages.StorageDocumentProvider_isModifiable
+				}
+			}
+			return info.isReadOnly();
+		}
+		return super.isReadOnly(element);
+	}
+
+	/**
+	 * @generated
+	 */
+	public boolean isModifiable(Object element) {
+		if (!isStateValidated(element)) {
+			if (element instanceof FileEditorInput || element instanceof URIEditorInput) {
+				return true;
+			}
+		}
+		ResourceSetInfo info = getResourceSetInfo(element);
+		if (info != null) {
+			if (info.isUpdateCache()) {
+				try {
+					updateCache(element);
+				} catch (CoreException ex) {
+					UrmlDiagramEditorPlugin.getInstance().logError(Messages.UrmlDocumentProvider_isModifiable, ex);
+					// Error message to log was initially taken from
+					// org.eclipse.gmf.runtime.diagram.ui.resources.editor.ide.internal.l10n.EditorMessages.StorageDocumentProvider_isModifiable
+				}
+			}
+			return info.isModifiable();
+		}
+		return super.isModifiable(element);
+	}
+
+	/**
+	 * @generated
+	 */
+	protected void updateCache(Object element) throws CoreException {
+		ResourceSetInfo info = getResourceSetInfo(element);
+		if (info != null) {
+			for (Iterator/* <org.eclipse.emf.ecore.resource.Resource> */it = info.getLoadedResourcesIterator(); it
+				.hasNext();) {
+				Resource nextResource = (Resource) it.next();
+				IFile file = WorkspaceSynchronizer.getFile(nextResource);
+				if (file != null && file.isReadOnly()) {
+					info.setReadOnly(true);
+					info.setModifiable(false);
+					return;
+				}
+			}
+			info.setReadOnly(false);
+			info.setModifiable(true);
+			return;
+		}
+	}
+
+	/**
+	 * @generated
+	 */
+	protected void doUpdateStateCache(Object element) throws CoreException {
+		ResourceSetInfo info = getResourceSetInfo(element);
+		if (info != null) {
+			info.setUpdateCache(true);
+		}
+		super.doUpdateStateCache(element);
+	}
+
+	/**
+	 * @generated
+	 */
+	public boolean isSynchronized(Object element) {
+		ResourceSetInfo info = getResourceSetInfo(element);
+		if (info != null) {
+			return info.isSynchronized();
+		}
+		return super.isSynchronized(element);
+	}
+
+	/**
+	 * @generated
+	 */
+	protected ISchedulingRule getResetRule(Object element) {
+		ResourceSetInfo info = getResourceSetInfo(element);
+		if (info != null) {
+			Collection/* <org.eclipse.core.runtime.jobs.ISchedulingRule> */rules = new ArrayList/*
+																							 * <org.eclipse.core.runtime.
+																							 * jobs.ISchedulingRule>
+																							 */();
+			for (Iterator/* <org.eclipse.emf.ecore.resource.Resource> */it = info.getLoadedResourcesIterator(); it
+				.hasNext();) {
+				Resource nextResource = (Resource) it.next();
+				IFile file = WorkspaceSynchronizer.getFile(nextResource);
+				if (file != null) {
+					rules.add(ResourcesPlugin.getWorkspace().getRuleFactory().modifyRule(file));
+				}
+			}
+			return new MultiRule((ISchedulingRule[]) rules.toArray(new ISchedulingRule[rules.size()]));
+		}
+		return null;
+	}
+
+	/**
+	 * @generated
+	 */
+	protected ISchedulingRule getSaveRule(Object element) {
+		ResourceSetInfo info = getResourceSetInfo(element);
+		if (info != null) {
+			Collection/* <org.eclipse.core.runtime.jobs.ISchedulingRule> */rules = new ArrayList/*
+																							 * <org.eclipse.core.runtime.
+																							 * jobs.ISchedulingRule>
+																							 */();
+			for (Iterator/* <org.eclipse.emf.ecore.resource.Resource> */it = info.getLoadedResourcesIterator(); it
+				.hasNext();) {
+				Resource nextResource = (Resource) it.next();
+				IFile file = WorkspaceSynchronizer.getFile(nextResource);
+				if (file != null) {
+					rules.add(computeSchedulingRule(file));
+				}
+			}
+			return new MultiRule((ISchedulingRule[]) rules.toArray(new ISchedulingRule[rules.size()]));
+		}
+		return null;
+	}
+
+	/**
+	 * @generated
+	 */
+	protected ISchedulingRule getSynchronizeRule(Object element) {
+		ResourceSetInfo info = getResourceSetInfo(element);
+		if (info != null) {
+			Collection/* <org.eclipse.core.runtime.jobs.ISchedulingRule> */rules = new ArrayList/*
+																							 * <org.eclipse.core.runtime.
+																							 * jobs.ISchedulingRule>
+																							 */();
+			for (Iterator/* <org.eclipse.emf.ecore.resource.Resource> */it = info.getLoadedResourcesIterator(); it
+				.hasNext();) {
+				Resource nextResource = (Resource) it.next();
+				IFile file = WorkspaceSynchronizer.getFile(nextResource);
+				if (file != null) {
+					rules.add(ResourcesPlugin.getWorkspace().getRuleFactory().refreshRule(file));
+				}
+			}
+			return new MultiRule((ISchedulingRule[]) rules.toArray(new ISchedulingRule[rules.size()]));
+		}
+		return null;
+	}
+
+	/**
+	 * @generated
+	 */
+	protected ISchedulingRule getValidateStateRule(Object element) {
+		ResourceSetInfo info = getResourceSetInfo(element);
+		if (info != null) {
+			Collection/* <org.eclipse.core.runtime.jobs.ISchedulingRule> */files = new ArrayList/*
+																							 * <org.eclipse.core.runtime.
+																							 * jobs.ISchedulingRule>
+																							 */();
+			for (Iterator/* <org.eclipse.emf.ecore.resource.Resource> */it = info.getLoadedResourcesIterator(); it
+				.hasNext();) {
+				Resource nextResource = (Resource) it.next();
+				IFile file = WorkspaceSynchronizer.getFile(nextResource);
+				if (file != null) {
+					files.add(file);
+				}
+			}
+			return ResourcesPlugin.getWorkspace().getRuleFactory().validateEditRule(
+				(IFile[]) files.toArray(new IFile[files.size()]));
+		}
+		return null;
+	}
+
+	/**
+	 * @generated
+	 */
+	private ISchedulingRule computeSchedulingRule(IResource toCreateOrModify) {
+		if (toCreateOrModify.exists())
+			return ResourcesPlugin.getWorkspace().getRuleFactory().modifyRule(toCreateOrModify);
+
+		IResource parent = toCreateOrModify;
+		do {
+			/*
+			 * XXX This is a workaround for https://bugs.eclipse.org/bugs/show_bug.cgi?id=67601
+			 * IResourceRuleFactory.createRule should iterate the hierarchy itself.
+			 */
+			toCreateOrModify = parent;
+			parent = toCreateOrModify.getParent();
+		} while (parent != null && !parent.exists());
+
+		return ResourcesPlugin.getWorkspace().getRuleFactory().createRule(toCreateOrModify);
+	}
+
+	/**
+	 * @generated
+	 */
+	protected void doSynchronize(Object element, IProgressMonitor monitor) throws CoreException {
+		ResourceSetInfo info = getResourceSetInfo(element);
+		if (info != null) {
+			for (Iterator/* <org.eclipse.emf.ecore.resource.Resource> */it = info.getLoadedResourcesIterator(); it
+				.hasNext();) {
+				Resource nextResource = (Resource) it.next();
+				handleElementChanged(info, nextResource, monitor);
+			}
+			return;
+		}
+		super.doSynchronize(element, monitor);
+	}
+
+	/**
+	 * @generated
+	 */
+	protected void doSaveDocument(IProgressMonitor monitor, Object element, IDocument document, boolean overwrite)
+		throws CoreException {
+		ResourceSetInfo info = getResourceSetInfo(element);
+		if (info != null) {
+			if (!overwrite && !info.isSynchronized()) {
+				throw new CoreException(new Status(IStatus.ERROR, UrmlDiagramEditorPlugin.ID,
+					IResourceStatus.OUT_OF_SYNC_LOCAL, Messages.UrmlDocumentProvider_UnsynchronizedFileSaveError, null));
+			}
+			info.stopResourceListening();
+			fireElementStateChanging(element);
+			try {
+				monitor.beginTask(Messages.UrmlDocumentProvider_SaveDiagramTask, info.getResourceSet().getResources()
+					.size() + 1); // "Saving diagram"
+				for (Iterator/* <org.eclipse.emf.ecore.resource.Resource> */it = info.getLoadedResourcesIterator(); it
+					.hasNext();) {
+					Resource nextResource = (Resource) it.next();
+					monitor.setTaskName(NLS.bind(Messages.UrmlDocumentProvider_SaveNextResourceTask, nextResource
+						.getURI()));
+					if (nextResource.isLoaded() && !info.getEditingDomain().isReadOnly(nextResource)) {
+						try {
+							nextResource.save(UrmlDiagramEditorUtil.getSaveOptions());
+						} catch (IOException e) {
+							fireElementStateChangeFailed(element);
+							throw new CoreException(new Status(IStatus.ERROR, UrmlDiagramEditorPlugin.ID,
+								EditorStatusCodes.RESOURCE_FAILURE, e.getLocalizedMessage(), null));
+						}
+					}
+					monitor.worked(1);
+				}
+				monitor.done();
+				info.setModificationStamp(computeModificationStamp(info));
+			} catch (RuntimeException x) {
+				fireElementStateChangeFailed(element);
+				throw x;
+			} finally {
+				info.startResourceListening();
+			}
+		} else {
+			URI newResoruceURI;
+			List affectedFiles = null;
+			if (element instanceof FileEditorInput) {
+				IFile newFile = ((FileEditorInput) element).getFile();
+				affectedFiles = Collections.singletonList(newFile);
+				newResoruceURI = URI.createPlatformResourceURI(newFile.getFullPath().toString(), true);
+			} else if (element instanceof URIEditorInput) {
+				newResoruceURI = ((URIEditorInput) element).getURI();
+			} else {
+				fireElementStateChangeFailed(element);
+				throw new CoreException(new Status(IStatus.ERROR, UrmlDiagramEditorPlugin.ID, 0, NLS.bind(
+					Messages.UrmlDocumentProvider_IncorrectInputError, new Object[] { element,
+						"org.eclipse.ui.part.FileEditorInput", "org.eclipse.emf.common.ui.URIEditorInput" }), //$NON-NLS-1$ //$NON-NLS-2$ 
+					null));
+			}
+			if (false == document instanceof IDiagramDocument) {
+				fireElementStateChangeFailed(element);
+				throw new CoreException(
+					new Status(
+						IStatus.ERROR,
+						UrmlDiagramEditorPlugin.ID,
+						0,
+						"Incorrect document used: " + document + " instead of org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.IDiagramDocument", null)); //$NON-NLS-1$ //$NON-NLS-2$
+			}
+			IDiagramDocument diagramDocument = (IDiagramDocument) document;
+			final Resource newResource = diagramDocument.getEditingDomain().getResourceSet().createResource(
+				newResoruceURI);
+			final Diagram diagramCopy = (Diagram) EcoreUtil.copy(diagramDocument.getDiagram());
+			try {
+				new AbstractTransactionalCommand(diagramDocument.getEditingDomain(), NLS.bind(
+					Messages.UrmlDocumentProvider_SaveAsOperation, diagramCopy.getName()), affectedFiles) {
+					protected CommandResult doExecuteWithResult(IProgressMonitor monitor, IAdaptable info)
+						throws ExecutionException {
+						newResource.getContents().add(diagramCopy);
+						return CommandResult.newOKCommandResult();
+					}
+				}.execute(monitor, null);
+				newResource.save(UrmlDiagramEditorUtil.getSaveOptions());
+			} catch (ExecutionException e) {
+				fireElementStateChangeFailed(element);
+				throw new CoreException(new Status(IStatus.ERROR, UrmlDiagramEditorPlugin.ID, 0, e
+					.getLocalizedMessage(), null));
+			} catch (IOException e) {
+				fireElementStateChangeFailed(element);
+				throw new CoreException(new Status(IStatus.ERROR, UrmlDiagramEditorPlugin.ID, 0, e
+					.getLocalizedMessage(), null));
+			}
+			newResource.unload();
+		}
+	}
+
+	/**
+	 * @generated
+	 */
+	protected void handleElementChanged(ResourceSetInfo info, Resource changedResource, IProgressMonitor monitor) {
+		IFile file = WorkspaceSynchronizer.getFile(changedResource);
+		if (file != null) {
+			try {
+				file.refreshLocal(IResource.DEPTH_INFINITE, monitor);
+			} catch (CoreException ex) {
+				UrmlDiagramEditorPlugin.getInstance().logError(
+					Messages.UrmlDocumentProvider_handleElementContentChanged, ex);
+				// Error message to log was initially taken from
+				// org.eclipse.gmf.runtime.diagram.ui.resources.editor.ide.internal.l10n.EditorMessages.FileDocumentProvider_handleElementContentChanged
+			}
+		}
+		changedResource.unload();
+
+		fireElementContentAboutToBeReplaced(info.getEditorInput());
+		removeUnchangedElementListeners(info.getEditorInput(), info);
+		info.fStatus = null;
+		try {
+			setDocumentContent(info.fDocument, info.getEditorInput());
+		} catch (CoreException e) {
+			info.fStatus = e.getStatus();
+		}
+		if (!info.fCanBeSaved) {
+			info.setModificationStamp(computeModificationStamp(info));
+		}
+		addUnchangedElementListeners(info.getEditorInput(), info);
+		fireElementContentReplaced(info.getEditorInput());
+	}
+
+	/**
+	 * @generated
+	 */
+	protected void handleElementMoved(IEditorInput input, URI uri) {
+		if (input instanceof FileEditorInput) {
+			IFile newFile = ResourcesPlugin.getWorkspace().getRoot().getFile(
+				new Path(URI.decode(uri.path())).removeFirstSegments(1));
+			fireElementMoved(input, newFile == null ? null : new FileEditorInput(newFile));
+			return;
+		}
+		// TODO: append suffix to the URI! (use diagram as a parameter)
+		fireElementMoved(input, new URIEditorInput(uri));
+	}
+
+	/**
+	 * @generated
+	 */
+	protected void disposeElementInfo(Object element, ElementInfo info) {
+		if (info instanceof ResourceSetInfo) {
+			ResourceSetInfo resourceSetInfo = (ResourceSetInfo) info;
+			resourceSetInfo.dispose();
+		}
+		super.disposeElementInfo(element, info);
+	}
+
+	/**
+	 * @generated
+	 */
+	public IEditorInput createInputWithEditingDomain(IEditorInput editorInput, TransactionalEditingDomain domain) {
+		return editorInput;
+	}
+
+	/**
+	 * @generated
+	 */
+	public IDiagramDocument getDiagramDocument(Object element) {
+		IDocument doc = getDocument(element);
+		if (doc instanceof IDiagramDocument) {
+			return (IDiagramDocument) doc;
+		}
+		return null;
+	}
+
+	/**
+	 * @generated
+	 */
+	protected IRunnableContext getOperationRunner(IProgressMonitor monitor) {
+		return null;
+	}
+
+	/**
+	 * @generated
+	 */
+	protected class ResourceSetInfo extends ElementInfo {
+
+		/**
+		 * @generated
+		 */
+		private long myModificationStamp = IResource.NULL_STAMP;
+
+		/**
+		 * @generated
+		 */
+		private WorkspaceSynchronizer mySynchronizer;
+
+		/**
+		 * @generated
+		 */
+		private Collection myUnSynchronizedResources = new ArrayList();
+
+		/**
+		 * @generated
+		 */
+		private IDiagramDocument myDocument;
+
+		/**
+		 * @generated
+		 */
+		private IEditorInput myEditorInput;
+
+		/**
+		 * @generated
+		 */
+		private boolean myUpdateCache = true;
+
+		/**
+		 * @generated
+		 */
+		private boolean myModifiable = false;
+
+		/**
+		 * @generated
+		 */
+		private boolean myReadOnly = true;
+
+		/**
+		 * @generated
+		 */
+		private ResourceSetModificationListener myResourceSetListener;
+
+		/**
+		 * @generated
+		 */
+		public ResourceSetInfo(IDiagramDocument document, IEditorInput editorInput) {
+			super(document);
+			myDocument = document;
+			myEditorInput = editorInput;
+			startResourceListening();
+			myResourceSetListener = new ResourceSetModificationListener(this);
+			getResourceSet().eAdapters().add(myResourceSetListener);
+		}
+
+		/**
+		 * @generated
+		 */
+		public long getModificationStamp() {
+			return myModificationStamp;
+		}
+
+		/**
+		 * @generated
+		 */
+		public void setModificationStamp(long modificationStamp) {
+			myModificationStamp = modificationStamp;
+		}
+
+		/**
+		 * @generated
+		 */
+		public TransactionalEditingDomain getEditingDomain() {
+			return myDocument.getEditingDomain();
+		}
+
+		/**
+		 * @generated
+		 */
+		public ResourceSet getResourceSet() {
+			return getEditingDomain().getResourceSet();
+		}
+
+		/**
+		 * @generated
+		 */
+		public Iterator/* <org.eclipse.emf.ecore.resource.Resource> */getLoadedResourcesIterator() {
+			return new ArrayList/* <org.eclipse.emf.ecore.resource.Resource> */(getResourceSet().getResources())
+				.iterator();
+		}
+
+		/**
+		 * @generated
+		 */
+		public IEditorInput getEditorInput() {
+			return myEditorInput;
+		}
+
+		/**
+		 * @generated NOT
+		 */
+		public void dispose() {
+			stopResourceListening();
+			getResourceSet().eAdapters().remove(myResourceSetListener);
+			// for (Iterator/*<org.eclipse.emf.ecore.resource.Resource>*/it = getLoadedResourcesIterator();
+			// it.hasNext();) {
+			// Resource resource = (Resource) it.next();
+			// resource.unload();
+			// }
+			// getEditingDomain().dispose();
+		}
+
+		/**
+		 * @generated
+		 */
+		public boolean isSynchronized() {
+			return myUnSynchronizedResources.size() == 0;
+		}
+
+		/**
+		 * @generated
+		 */
+		public void setUnSynchronized(Resource resource) {
+			myUnSynchronizedResources.add(resource);
+		}
+
+		/**
+		 * @generated
+		 */
+		public void setSynchronized(Resource resource) {
+			myUnSynchronizedResources.remove(resource);
+		}
+
+		/**
+		 * @generated
+		 */
+		public final void stopResourceListening() {
+			mySynchronizer.dispose();
+			mySynchronizer = null;
+		}
+
+		/**
+		 * @generated
+		 */
+		public final void startResourceListening() {
+			mySynchronizer = new WorkspaceSynchronizer(getEditingDomain(), new SynchronizerDelegate());
+		}
+
+		/**
+		 * @generated
+		 */
+		public boolean isUpdateCache() {
+			return myUpdateCache;
+		}
+
+		/**
+		 * @generated
+		 */
+		public void setUpdateCache(boolean update) {
+			myUpdateCache = update;
+		}
+
+		/**
+		 * @generated
+		 */
+		public boolean isModifiable() {
+			return myModifiable;
+		}
+
+		/**
+		 * @generated
+		 */
+		public void setModifiable(boolean modifiable) {
+			myModifiable = modifiable;
+		}
+
+		/**
+		 * @generated
+		 */
+		public boolean isReadOnly() {
+			return myReadOnly;
+		}
+
+		/**
+		 * @generated
+		 */
+		public void setReadOnly(boolean readOnly) {
+			myReadOnly = readOnly;
+		}
+
+		/**
+		 * @generated
+		 */
+		private class SynchronizerDelegate implements WorkspaceSynchronizer.Delegate {
+
+			/**
+			 * @generated
+			 */
+			public void dispose() {
+			}
+
+			/**
+			 * @generated
+			 */
+			public boolean handleResourceChanged(final Resource resource) {
+				synchronized (ResourceSetInfo.this) {
+					if (ResourceSetInfo.this.fCanBeSaved) {
+						ResourceSetInfo.this.setUnSynchronized(resource);
+						return true;
+					}
+				}
+				Display.getDefault().asyncExec(new Runnable() {
+					public void run() {
+						handleElementChanged(ResourceSetInfo.this, resource, null);
+					}
+				});
+				return true;
+			}
+
+			/**
+			 * @generated
+			 */
+			public boolean handleResourceDeleted(Resource resource) {
+				synchronized (ResourceSetInfo.this) {
+					if (ResourceSetInfo.this.fCanBeSaved) {
+						ResourceSetInfo.this.setUnSynchronized(resource);
+						return true;
+					}
+				}
+				Display.getDefault().asyncExec(new Runnable() {
+					public void run() {
+						fireElementDeleted(ResourceSetInfo.this.getEditorInput());
+					}
+				});
+				return true;
+			}
+
+			/**
+			 * @generated
+			 */
+			public boolean handleResourceMoved(Resource resource, final URI newURI) {
+				synchronized (ResourceSetInfo.this) {
+					if (ResourceSetInfo.this.fCanBeSaved) {
+						ResourceSetInfo.this.setUnSynchronized(resource);
+						return true;
+					}
+				}
+				if (myDocument.getDiagram().eResource() == resource) {
+					Display.getDefault().asyncExec(new Runnable() {
+						public void run() {
+							handleElementMoved(ResourceSetInfo.this.getEditorInput(), newURI);
+						}
+					});
+				} else {
+					handleResourceDeleted(resource);
+				}
+				return true;
+			}
+
+		}
+
+	}
+
+	/**
+	 * @generated
+	 */
+	private class ResourceSetModificationListener extends EContentAdapter {
+
+		/**
+		 * @generated
+		 */
+		private NotificationFilter myModifiedFilter;
+
+		/**
+		 * @generated
+		 */
+		private ResourceSetInfo myInfo;
+
+		/**
+		 * @generated
+		 */
+		public ResourceSetModificationListener(ResourceSetInfo info) {
+			myInfo = info;
+			myModifiedFilter = NotificationFilter.createEventTypeFilter(Notification.SET).or(
+				NotificationFilter.createEventTypeFilter(Notification.UNSET)).and(
+				NotificationFilter.createFeatureFilter(Resource.class, Resource.RESOURCE__IS_MODIFIED));
+		}
+
+		/**
+		 * @generated
+		 */
+		public void notifyChanged(Notification notification) {
+			if (notification.getNotifier() instanceof ResourceSet) {
+				super.notifyChanged(notification);
+			}
+			if (!notification.isTouch() && myModifiedFilter.matches(notification)) {
+				if (notification.getNotifier() instanceof Resource) {
+					Resource resource = (Resource) notification.getNotifier();
+					if (resource.isLoaded()) {
+						boolean modified = false;
+						for (Iterator/* <org.eclipse.emf.ecore.resource.Resource> */it = myInfo
+							.getLoadedResourcesIterator(); it.hasNext() && !modified;) {
+							Resource nextResource = (Resource) it.next();
+							if (nextResource.isLoaded()) {
+								modified = nextResource.isModified();
+							}
+						}
+						boolean dirtyStateChanged = false;
+						synchronized (myInfo) {
+							if (modified != myInfo.fCanBeSaved) {
+								myInfo.fCanBeSaved = modified;
+								dirtyStateChanged = true;
+							}
+							if (!resource.isModified()) {
+								myInfo.setSynchronized(resource);
+							}
+						}
+						if (dirtyStateChanged) {
+							fireElementDirtyStateChanged(myInfo.getEditorInput(), modified);
+
+							if (!modified) {
+								myInfo.setModificationStamp(computeModificationStamp(myInfo));
+							}
+						}
+					}
+				}
+			}
+		}
+
+	}
+
+}
Index: src/org/unicase/ui/diagram/urml/part/UrmlNewDiagramFileWizard.java
===================================================================
--- src/org/unicase/ui/diagram/urml/part/UrmlNewDiagramFileWizard.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/part/UrmlNewDiagramFileWizard.java	(working copy)
@@ -53,33 +53,43 @@
 	/**
 	 * @generated
 	 */
-	public UrmlNewDiagramFileWizard(URI domainModelURI, EObject diagramRoot, TransactionalEditingDomain editingDomain) {
+	public UrmlNewDiagramFileWizard(URI domainModelURI, EObject diagramRoot,
+			TransactionalEditingDomain editingDomain) {
 		assert domainModelURI != null : "Domain model uri must be specified"; //$NON-NLS-1$
 		assert diagramRoot != null : "Doagram root element must be specified"; //$NON-NLS-1$
 		assert editingDomain != null : "Editing domain must be specified"; //$NON-NLS-1$
 
-		myFileCreationPage = new WizardNewFileCreationPage(Messages.UrmlNewDiagramFileWizard_CreationPageName,
-			StructuredSelection.EMPTY);
-		myFileCreationPage.setTitle(Messages.UrmlNewDiagramFileWizard_CreationPageTitle);
-		myFileCreationPage.setDescription(NLS.bind(Messages.UrmlNewDiagramFileWizard_CreationPageDescription,
-			URMLDiagramEditPart.MODEL_ID));
+		myFileCreationPage = new WizardNewFileCreationPage(
+				Messages.UrmlNewDiagramFileWizard_CreationPageName,
+				StructuredSelection.EMPTY);
+		myFileCreationPage
+				.setTitle(Messages.UrmlNewDiagramFileWizard_CreationPageTitle);
+		myFileCreationPage.setDescription(NLS.bind(
+				Messages.UrmlNewDiagramFileWizard_CreationPageDescription,
+				URMLDiagramEditPart.MODEL_ID));
 		IPath filePath;
-		String fileName = URI.decode(domainModelURI.trimFileExtension().lastSegment());
+		String fileName = URI.decode(domainModelURI.trimFileExtension()
+				.lastSegment());
 		if (domainModelURI.isPlatformResource()) {
-			filePath = new Path(domainModelURI.trimSegments(1).toPlatformString(true));
+			filePath = new Path(domainModelURI.trimSegments(1)
+					.toPlatformString(true));
 		} else if (domainModelURI.isFile()) {
 			filePath = new Path(domainModelURI.trimSegments(1).toFileString());
 		} else {
 			// TODO : use some default path
-			throw new IllegalArgumentException("Unsupported URI: " + domainModelURI); //$NON-NLS-1$
+			throw new IllegalArgumentException(
+					"Unsupported URI: " + domainModelURI); //$NON-NLS-1$
 		}
 		myFileCreationPage.setContainerFullPath(filePath);
-		myFileCreationPage.setFileName(UrmlDiagramEditorUtil.getUniqueFileName(filePath, fileName, "urml_diagram")); //$NON-NLS-1$
+		myFileCreationPage.setFileName(UrmlDiagramEditorUtil.getUniqueFileName(
+				filePath, fileName, "urml_diagram")); //$NON-NLS-1$
 
 		diagramRootElementSelectionPage = new DiagramRootElementSelectionPage(
-			Messages.UrmlNewDiagramFileWizard_RootSelectionPageName);
-		diagramRootElementSelectionPage.setTitle(Messages.UrmlNewDiagramFileWizard_RootSelectionPageTitle);
-		diagramRootElementSelectionPage.setDescription(Messages.UrmlNewDiagramFileWizard_RootSelectionPageDescription);
+				Messages.UrmlNewDiagramFileWizard_RootSelectionPageName);
+		diagramRootElementSelectionPage
+				.setTitle(Messages.UrmlNewDiagramFileWizard_RootSelectionPageTitle);
+		diagramRootElementSelectionPage
+				.setDescription(Messages.UrmlNewDiagramFileWizard_RootSelectionPageDescription);
 		diagramRootElementSelectionPage.setModelElement(diagramRoot);
 
 		myEditingDomain = editingDomain;
@@ -97,39 +107,52 @@
 	 * @generated
 	 */
 	public boolean performFinish() {
-		List affectedFiles = new LinkedList();
+		LinkedList<IFile> affectedFiles = new LinkedList<IFile>();
 		IFile diagramFile = myFileCreationPage.createNewFile();
 		UrmlDiagramEditorUtil.setCharset(diagramFile);
 		affectedFiles.add(diagramFile);
-		URI diagramModelURI = URI.createPlatformResourceURI(diagramFile.getFullPath().toString(), true);
+		URI diagramModelURI = URI.createPlatformResourceURI(diagramFile
+				.getFullPath().toString(), true);
 		ResourceSet resourceSet = myEditingDomain.getResourceSet();
-		final Resource diagramResource = resourceSet.createResource(diagramModelURI);
-		AbstractTransactionalCommand command = new AbstractTransactionalCommand(myEditingDomain,
-			Messages.UrmlNewDiagramFileWizard_InitDiagramCommand, affectedFiles) {
+		final Resource diagramResource = resourceSet
+				.createResource(diagramModelURI);
+		AbstractTransactionalCommand command = new AbstractTransactionalCommand(
+				myEditingDomain,
+				Messages.UrmlNewDiagramFileWizard_InitDiagramCommand,
+				affectedFiles) {
 
-			protected CommandResult doExecuteWithResult(IProgressMonitor monitor, IAdaptable info)
-				throws ExecutionException {
-				int diagramVID = UrmlVisualIDRegistry.getDiagramVisualID(diagramRootElementSelectionPage
-					.getModelElement());
+			protected CommandResult doExecuteWithResult(
+					IProgressMonitor monitor, IAdaptable info)
+					throws ExecutionException {
+				int diagramVID = UrmlVisualIDRegistry
+						.getDiagramVisualID(diagramRootElementSelectionPage
+								.getModelElement());
 				if (diagramVID != URMLDiagramEditPart.VISUAL_ID) {
-					return CommandResult.newErrorCommandResult(Messages.UrmlNewDiagramFileWizard_IncorrectRootError);
+					return CommandResult
+							.newErrorCommandResult(Messages.UrmlNewDiagramFileWizard_IncorrectRootError);
 				}
-				Diagram diagram = ViewService.createDiagram(diagramRootElementSelectionPage.getModelElement(),
-					URMLDiagramEditPart.MODEL_ID, UrmlDiagramEditorPlugin.DIAGRAM_PREFERENCES_HINT);
+				Diagram diagram = ViewService.createDiagram(
+						diagramRootElementSelectionPage.getModelElement(),
+						URMLDiagramEditPart.MODEL_ID,
+						UrmlDiagramEditorPlugin.DIAGRAM_PREFERENCES_HINT);
 				diagramResource.getContents().add(diagram);
 				return CommandResult.newOKCommandResult();
 			}
 		};
 		try {
-			OperationHistoryFactory.getOperationHistory().execute(command, new NullProgressMonitor(), null);
+			OperationHistoryFactory.getOperationHistory().execute(command,
+					new NullProgressMonitor(), null);
 			diagramResource.save(UrmlDiagramEditorUtil.getSaveOptions());
 			UrmlDiagramEditorUtil.openDiagram(diagramResource);
 		} catch (ExecutionException e) {
-			UrmlDiagramEditorPlugin.getInstance().logError("Unable to create model and diagram", e); //$NON-NLS-1$
+			UrmlDiagramEditorPlugin.getInstance().logError(
+					"Unable to create model and diagram", e); //$NON-NLS-1$
 		} catch (IOException ex) {
-			UrmlDiagramEditorPlugin.getInstance().logError("Save operation failed for: " + diagramModelURI, ex); //$NON-NLS-1$
+			UrmlDiagramEditorPlugin.getInstance().logError(
+					"Save operation failed for: " + diagramModelURI, ex); //$NON-NLS-1$
 		} catch (PartInitException ex) {
-			UrmlDiagramEditorPlugin.getInstance().logError("Unable to open editor", ex); //$NON-NLS-1$
+			UrmlDiagramEditorPlugin.getInstance().logError(
+					"Unable to open editor", ex); //$NON-NLS-1$
 		}
 		return true;
 	}
@@ -137,7 +160,8 @@
 	/**
 	 * @generated
 	 */
-	private static class DiagramRootElementSelectionPage extends ModelElementSelectionPage {
+	private static class DiagramRootElementSelectionPage extends
+			ModelElementSelectionPage {
 
 		/**
 		 * @generated
@@ -162,9 +186,12 @@
 				return false;
 			}
 			boolean result = ViewService.getInstance().provides(
-				new CreateDiagramViewOperation(new EObjectAdapter(selectedModelElement), URMLDiagramEditPart.MODEL_ID,
-					UrmlDiagramEditorPlugin.DIAGRAM_PREFERENCES_HINT));
-			setErrorMessage(result ? null : Messages.UrmlNewDiagramFileWizard_RootSelectionPageInvalidSelectionMessage);
+					new CreateDiagramViewOperation(new EObjectAdapter(
+							selectedModelElement),
+							URMLDiagramEditPart.MODEL_ID,
+							UrmlDiagramEditorPlugin.DIAGRAM_PREFERENCES_HINT));
+			setErrorMessage(result ? null
+					: Messages.UrmlNewDiagramFileWizard_RootSelectionPageInvalidSelectionMessage);
 			return result;
 		}
 	}
Index: src/org/unicase/ui/diagram/urml/part/UrmlVisualIDRegistry.java
===================================================================
--- src/org/unicase/ui/diagram/urml/part/UrmlVisualIDRegistry.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/part/UrmlVisualIDRegistry.java	(working copy)
@@ -82,8 +82,10 @@
 import org.unicase.ui.diagram.urml.edit.parts.StakeholderGoalsEditPart;
 import org.unicase.ui.diagram.urml.edit.parts.StakeholderNameEditPart;
 import org.unicase.ui.diagram.urml.edit.parts.SuggestsLabelEditPart;
+import org.unicase.ui.diagram.urml.edit.parts.TriggersLabel2EditPart;
 import org.unicase.ui.diagram.urml.edit.parts.TriggersLabelEditPart;
 import org.unicase.ui.diagram.urml.edit.parts.URMLDiagramEditPart;
+import org.unicase.ui.diagram.urml.edit.parts.UrmlModelElementAssociationsEditPart;
 import org.unicase.ui.diagram.urml.edit.parts.VariationPointEditPart;
 import org.unicase.ui.diagram.urml.edit.parts.VariationPointInstanceEditPart;
 import org.unicase.ui.diagram.urml.edit.parts.VariationPointInstanceNameEditPart;
@@ -110,26 +112,6 @@
 	/**
 	 * @generated
 	 */
-	private static UrmlAbstractExpression GoalReference_4016_Constraint;
-
-	/**
-	 * @generated
-	 */
-	private static UrmlAbstractExpression GoalReference_4023_Constraint;
-
-	/**
-	 * @generated
-	 */
-	private static UrmlAbstractExpression GoalReference_4024_Constraint;
-
-	/**
-	 * @generated
-	 */
-	private static UrmlAbstractExpression GoalReference_4025_Constraint;
-
-	/**
-	 * @generated
-	 */
 	public static int getVisualID(View view) {
 		if (view instanceof Diagram) {
 			if (URMLDiagramEditPart.MODEL_ID.equals(view.getType())) {
@@ -138,7 +120,8 @@
 				return -1;
 			}
 		}
-		return org.unicase.ui.diagram.urml.part.UrmlVisualIDRegistry.getVisualID(view.getType());
+		return org.unicase.ui.diagram.urml.part.UrmlVisualIDRegistry
+				.getVisualID(view.getType());
 	}
 
 	/**
@@ -163,9 +146,11 @@
 		try {
 			return Integer.parseInt(type);
 		} catch (NumberFormatException e) {
-			if (Boolean.TRUE.toString().equalsIgnoreCase(Platform.getDebugOption(DEBUG_KEY))) {
+			if (Boolean.TRUE.toString().equalsIgnoreCase(
+					Platform.getDebugOption(DEBUG_KEY))) {
 				UrmlDiagramEditorPlugin.getInstance().logError(
-					"Unable to parse view type as a visualID number: " + type);
+						"Unable to parse view type as a visualID number: "
+								+ type);
 			}
 		}
 		return -1;
@@ -175,7 +160,7 @@
 	 * @generated
 	 */
 	public static String getType(int visualID) {
-		return String.valueOf(visualID);
+		return Integer.toString(visualID);
 	}
 
 	/**
@@ -185,8 +170,9 @@
 		if (domainElement == null) {
 			return -1;
 		}
-		if (UrmlPackage.eINSTANCE.getURMLDiagram().isSuperTypeOf(domainElement.eClass())
-			&& isDiagram((URMLDiagram) domainElement)) {
+		if (UrmlPackage.eINSTANCE.getURMLDiagram().isSuperTypeOf(
+				domainElement.eClass())
+				&& isDiagram((URMLDiagram) domainElement)) {
 			return URMLDiagramEditPart.VISUAL_ID;
 		}
 		return -1;
@@ -199,13 +185,15 @@
 		if (domainElement == null) {
 			return -1;
 		}
-		String containerModelID = org.unicase.ui.diagram.urml.part.UrmlVisualIDRegistry.getModelID(containerView);
+		String containerModelID = org.unicase.ui.diagram.urml.part.UrmlVisualIDRegistry
+				.getModelID(containerView);
 		if (!URMLDiagramEditPart.MODEL_ID.equals(containerModelID)) {
 			return -1;
 		}
 		int containerVisualID;
 		if (URMLDiagramEditPart.MODEL_ID.equals(containerModelID)) {
-			containerVisualID = org.unicase.ui.diagram.urml.part.UrmlVisualIDRegistry.getVisualID(containerView);
+			containerVisualID = org.unicase.ui.diagram.urml.part.UrmlVisualIDRegistry
+					.getVisualID(containerView);
 		} else {
 			if (containerView instanceof Diagram) {
 				containerVisualID = URMLDiagramEditPart.VISUAL_ID;
@@ -215,40 +203,52 @@
 		}
 		switch (containerVisualID) {
 		case URMLDiagramEditPart.VISUAL_ID:
-			if (UrmlPackage.eINSTANCE.getStakeholder().isSuperTypeOf(domainElement.eClass())) {
+			if (UrmlPackage.eINSTANCE.getStakeholder().isSuperTypeOf(
+					domainElement.eClass())) {
 				return StakeholderEditPart.VISUAL_ID;
 			}
-			if (GoalPackage.eINSTANCE.getGoal().isSuperTypeOf(domainElement.eClass())) {
+			if (GoalPackage.eINSTANCE.getGoal().isSuperTypeOf(
+					domainElement.eClass())) {
 				return GoalEditPart.VISUAL_ID;
 			}
-			if (RequirementPackage.eINSTANCE.getFunctionalRequirement().isSuperTypeOf(domainElement.eClass())) {
+			if (RequirementPackage.eINSTANCE.getFunctionalRequirement()
+					.isSuperTypeOf(domainElement.eClass())) {
 				return FunctionalRequirementEditPart.VISUAL_ID;
 			}
-			if (FeaturePackage.eINSTANCE.getFeature().isSuperTypeOf(domainElement.eClass())) {
+			if (FeaturePackage.eINSTANCE.getFeature().isSuperTypeOf(
+					domainElement.eClass())) {
 				return FeatureEditPart.VISUAL_ID;
 			}
-			if (ServicePackage.eINSTANCE.getService().isSuperTypeOf(domainElement.eClass())) {
+			if (ServicePackage.eINSTANCE.getService().isSuperTypeOf(
+					domainElement.eClass())) {
 				return ServiceEditPart.VISUAL_ID;
 			}
-			if (RequirementPackage.eINSTANCE.getNonFunctionalRequirement().isSuperTypeOf(domainElement.eClass())) {
+			if (RequirementPackage.eINSTANCE.getNonFunctionalRequirement()
+					.isSuperTypeOf(domainElement.eClass())) {
 				return NonFunctionalRequirementEditPart.VISUAL_ID;
 			}
-			if (DangerPackage.eINSTANCE.getDanger().isSuperTypeOf(domainElement.eClass())) {
+			if (DangerPackage.eINSTANCE.getDanger().isSuperTypeOf(
+					domainElement.eClass())) {
 				return DangerEditPart.VISUAL_ID;
 			}
-			if (UsecasePackage.eINSTANCE.getActor().isSuperTypeOf(domainElement.eClass())) {
+			if (UsecasePackage.eINSTANCE.getActor().isSuperTypeOf(
+					domainElement.eClass())) {
 				return ActorEditPart.VISUAL_ID;
 			}
-			if (DangerPackage.eINSTANCE.getProceduralMitigation().isSuperTypeOf(domainElement.eClass())) {
+			if (DangerPackage.eINSTANCE.getProceduralMitigation()
+					.isSuperTypeOf(domainElement.eClass())) {
 				return ProceduralMitigationEditPart.VISUAL_ID;
 			}
-			if (FeaturePackage.eINSTANCE.getVariationPoint().isSuperTypeOf(domainElement.eClass())) {
+			if (FeaturePackage.eINSTANCE.getVariationPoint().isSuperTypeOf(
+					domainElement.eClass())) {
 				return VariationPointEditPart.VISUAL_ID;
 			}
-			if (FeaturePackage.eINSTANCE.getVariationPointInstance().isSuperTypeOf(domainElement.eClass())) {
+			if (FeaturePackage.eINSTANCE.getVariationPointInstance()
+					.isSuperTypeOf(domainElement.eClass())) {
 				return VariationPointInstanceEditPart.VISUAL_ID;
 			}
-			if (FeaturePackage.eINSTANCE.getProduct().isSuperTypeOf(domainElement.eClass())) {
+			if (FeaturePackage.eINSTANCE.getProduct().isSuperTypeOf(
+					domainElement.eClass())) {
 				return ProductEditPart.VISUAL_ID;
 			}
 			break;
@@ -260,13 +260,15 @@
 	 * @generated
 	 */
 	public static boolean canCreateNode(View containerView, int nodeVisualID) {
-		String containerModelID = org.unicase.ui.diagram.urml.part.UrmlVisualIDRegistry.getModelID(containerView);
+		String containerModelID = org.unicase.ui.diagram.urml.part.UrmlVisualIDRegistry
+				.getModelID(containerView);
 		if (!URMLDiagramEditPart.MODEL_ID.equals(containerModelID)) {
 			return false;
 		}
 		int containerVisualID;
 		if (URMLDiagramEditPart.MODEL_ID.equals(containerModelID)) {
-			containerVisualID = org.unicase.ui.diagram.urml.part.UrmlVisualIDRegistry.getVisualID(containerView);
+			containerVisualID = org.unicase.ui.diagram.urml.part.UrmlVisualIDRegistry
+					.getVisualID(containerView);
 		} else {
 			if (containerView instanceof Diagram) {
 				containerVisualID = URMLDiagramEditPart.VISUAL_ID;
@@ -275,6 +277,44 @@
 			}
 		}
 		switch (containerVisualID) {
+		case URMLDiagramEditPart.VISUAL_ID:
+			if (StakeholderEditPart.VISUAL_ID == nodeVisualID) {
+				return true;
+			}
+			if (GoalEditPart.VISUAL_ID == nodeVisualID) {
+				return true;
+			}
+			if (FunctionalRequirementEditPart.VISUAL_ID == nodeVisualID) {
+				return true;
+			}
+			if (FeatureEditPart.VISUAL_ID == nodeVisualID) {
+				return true;
+			}
+			if (ServiceEditPart.VISUAL_ID == nodeVisualID) {
+				return true;
+			}
+			if (NonFunctionalRequirementEditPart.VISUAL_ID == nodeVisualID) {
+				return true;
+			}
+			if (DangerEditPart.VISUAL_ID == nodeVisualID) {
+				return true;
+			}
+			if (ActorEditPart.VISUAL_ID == nodeVisualID) {
+				return true;
+			}
+			if (ProceduralMitigationEditPart.VISUAL_ID == nodeVisualID) {
+				return true;
+			}
+			if (VariationPointEditPart.VISUAL_ID == nodeVisualID) {
+				return true;
+			}
+			if (VariationPointInstanceEditPart.VISUAL_ID == nodeVisualID) {
+				return true;
+			}
+			if (ProductEditPart.VISUAL_ID == nodeVisualID) {
+				return true;
+			}
+			break;
 		case StakeholderEditPart.VISUAL_ID:
 			if (StakeholderNameEditPart.VISUAL_ID == nodeVisualID) {
 				return true;
@@ -335,44 +375,6 @@
 				return true;
 			}
 			break;
-		case URMLDiagramEditPart.VISUAL_ID:
-			if (StakeholderEditPart.VISUAL_ID == nodeVisualID) {
-				return true;
-			}
-			if (GoalEditPart.VISUAL_ID == nodeVisualID) {
-				return true;
-			}
-			if (FunctionalRequirementEditPart.VISUAL_ID == nodeVisualID) {
-				return true;
-			}
-			if (FeatureEditPart.VISUAL_ID == nodeVisualID) {
-				return true;
-			}
-			if (ServiceEditPart.VISUAL_ID == nodeVisualID) {
-				return true;
-			}
-			if (NonFunctionalRequirementEditPart.VISUAL_ID == nodeVisualID) {
-				return true;
-			}
-			if (DangerEditPart.VISUAL_ID == nodeVisualID) {
-				return true;
-			}
-			if (ActorEditPart.VISUAL_ID == nodeVisualID) {
-				return true;
-			}
-			if (ProceduralMitigationEditPart.VISUAL_ID == nodeVisualID) {
-				return true;
-			}
-			if (VariationPointEditPart.VISUAL_ID == nodeVisualID) {
-				return true;
-			}
-			if (VariationPointInstanceEditPart.VISUAL_ID == nodeVisualID) {
-				return true;
-			}
-			if (ProductEditPart.VISUAL_ID == nodeVisualID) {
-				return true;
-			}
-			break;
 		case StakeholderGoalsEditPart.VISUAL_ID:
 			if (ExpressesLabelEditPart.VISUAL_ID == nodeVisualID) {
 				return true;
@@ -505,6 +507,11 @@
 				return true;
 			}
 			break;
+		case UrmlModelElementAssociationsEditPart.VISUAL_ID:
+			if (TriggersLabel2EditPart.VISUAL_ID == nodeVisualID) {
+				return true;
+			}
+			break;
 		}
 		return false;
 	}
@@ -516,20 +523,24 @@
 		if (domainElement == null) {
 			return -1;
 		}
-		if (GoalPackage.eINSTANCE.getGoalReference().isSuperTypeOf(domainElement.eClass())
-			&& isGoalReference_4016((GoalReference) domainElement)) {
+		if (GoalPackage.eINSTANCE.getGoalReference().isSuperTypeOf(
+				domainElement.eClass())
+				&& isGoalReference_4016((GoalReference) domainElement)) {
 			return GoalReferenceEditPart.VISUAL_ID;
 		}
-		if (GoalPackage.eINSTANCE.getGoalReference().isSuperTypeOf(domainElement.eClass())
-			&& isGoalReference_4023((GoalReference) domainElement)) {
+		if (GoalPackage.eINSTANCE.getGoalReference().isSuperTypeOf(
+				domainElement.eClass())
+				&& isGoalReference_4023((GoalReference) domainElement)) {
 			return GoalReference2EditPart.VISUAL_ID;
 		}
-		if (GoalPackage.eINSTANCE.getGoalReference().isSuperTypeOf(domainElement.eClass())
-			&& isGoalReference_4024((GoalReference) domainElement)) {
+		if (GoalPackage.eINSTANCE.getGoalReference().isSuperTypeOf(
+				domainElement.eClass())
+				&& isGoalReference_4024((GoalReference) domainElement)) {
 			return GoalReference3EditPart.VISUAL_ID;
 		}
-		if (GoalPackage.eINSTANCE.getGoalReference().isSuperTypeOf(domainElement.eClass())
-			&& isGoalReference_4025((GoalReference) domainElement)) {
+		if (GoalPackage.eINSTANCE.getGoalReference().isSuperTypeOf(
+				domainElement.eClass())
+				&& isGoalReference_4025((GoalReference) domainElement)) {
 			return GoalReference4EditPart.VISUAL_ID;
 		}
 		return -1;
@@ -548,11 +559,9 @@
 	 * @generated
 	 */
 	private static boolean isGoalReference_4016(GoalReference domainElement) {
-		if (GoalReference_4016_Constraint == null) { // lazy initialization
-			GoalReference_4016_Constraint = UrmlOCLFactory.getExpression(
-				"self.weight = GoalReferenceType::PLUS_PLUS", GoalPackage.eINSTANCE.getGoalReference()); //$NON-NLS-1$
-		}
-		Object result = GoalReference_4016_Constraint.evaluate(domainElement);
+		Object result = UrmlOCLFactory.getExpression(0,
+				GoalPackage.eINSTANCE.getGoalReference(), null).evaluate(
+				domainElement);
 		return result instanceof Boolean && ((Boolean) result).booleanValue();
 	}
 
@@ -560,11 +569,9 @@
 	 * @generated
 	 */
 	private static boolean isGoalReference_4023(GoalReference domainElement) {
-		if (GoalReference_4023_Constraint == null) { // lazy initialization
-			GoalReference_4023_Constraint = UrmlOCLFactory.getExpression(
-				"self.weight = GoalReferenceType::PLUS", GoalPackage.eINSTANCE.getGoalReference()); //$NON-NLS-1$
-		}
-		Object result = GoalReference_4023_Constraint.evaluate(domainElement);
+		Object result = UrmlOCLFactory.getExpression(2,
+				GoalPackage.eINSTANCE.getGoalReference(), null).evaluate(
+				domainElement);
 		return result instanceof Boolean && ((Boolean) result).booleanValue();
 	}
 
@@ -572,11 +579,9 @@
 	 * @generated
 	 */
 	private static boolean isGoalReference_4024(GoalReference domainElement) {
-		if (GoalReference_4024_Constraint == null) { // lazy initialization
-			GoalReference_4024_Constraint = UrmlOCLFactory.getExpression(
-				"self.weight = GoalReferenceType::MINUS", GoalPackage.eINSTANCE.getGoalReference()); //$NON-NLS-1$
-		}
-		Object result = GoalReference_4024_Constraint.evaluate(domainElement);
+		Object result = UrmlOCLFactory.getExpression(4,
+				GoalPackage.eINSTANCE.getGoalReference(), null).evaluate(
+				domainElement);
 		return result instanceof Boolean && ((Boolean) result).booleanValue();
 	}
 
@@ -584,11 +589,9 @@
 	 * @generated
 	 */
 	private static boolean isGoalReference_4025(GoalReference domainElement) {
-		if (GoalReference_4025_Constraint == null) { // lazy initialization
-			GoalReference_4025_Constraint = UrmlOCLFactory.getExpression(
-				"self.weight = GoalReferenceType::MINUS_MINUS", GoalPackage.eINSTANCE.getGoalReference()); //$NON-NLS-1$
-		}
-		Object result = GoalReference_4025_Constraint.evaluate(domainElement);
+		Object result = UrmlOCLFactory.getExpression(6,
+				GoalPackage.eINSTANCE.getGoalReference(), null).evaluate(
+				domainElement);
 		return result instanceof Boolean && ((Boolean) result).booleanValue();
 	}
 
Index: src/org/unicase/ui/diagram/urml/part/UrmlDiagramUpdater.java
===================================================================
--- src/org/unicase/ui/diagram/urml/part/UrmlDiagramUpdater.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/part/UrmlDiagramUpdater.java	(working copy)
@@ -15,6 +15,7 @@
 import org.unicase.model.diagram.MEDiagram;
 import org.unicase.model.urml.Stakeholder;
 import org.unicase.model.urml.URMLDiagram;
+import org.unicase.model.urml.UrmlModelElement;
 import org.unicase.model.urml.UrmlPackage;
 import org.unicase.model.urml.danger.Asset;
 import org.unicase.model.urml.danger.Danger;
@@ -69,6 +70,7 @@
 import org.unicase.ui.diagram.urml.edit.parts.StakeholderEditPart;
 import org.unicase.ui.diagram.urml.edit.parts.StakeholderGoalsEditPart;
 import org.unicase.ui.diagram.urml.edit.parts.URMLDiagramEditPart;
+import org.unicase.ui.diagram.urml.edit.parts.UrmlModelElementAssociationsEditPart;
 import org.unicase.ui.diagram.urml.edit.parts.VariationPointEditPart;
 import org.unicase.ui.diagram.urml.edit.parts.VariationPointInstanceEditPart;
 import org.unicase.ui.diagram.urml.edit.parts.VariationPointInstanceSelectedFeaturesEditPart;
@@ -84,26 +86,29 @@
 	/**
 	 * @generated
 	 */
-	public static List getSemanticChildren(View view) {
+	public static List<UrmlNodeDescriptor> getSemanticChildren(View view) {
 		switch (UrmlVisualIDRegistry.getVisualID(view)) {
 		case URMLDiagramEditPart.VISUAL_ID:
 			return getURMLDiagram_1000SemanticChildren(view);
 		}
-		return Collections.EMPTY_LIST;
+		return Collections.emptyList();
 	}
 
 	/**
 	 * @generated
 	 */
-	public static List getURMLDiagram_1000SemanticChildren(View view) {
+	public static List<UrmlNodeDescriptor> getURMLDiagram_1000SemanticChildren(
+			View view) {
 		if (!view.isSetElement()) {
-			return Collections.EMPTY_LIST;
+			return Collections.emptyList();
 		}
 		URMLDiagram modelElement = (URMLDiagram) view.getElement();
-		List result = new LinkedList();
-		for (Iterator it = modelElement.getElements().iterator(); it.hasNext();) {
+		LinkedList<UrmlNodeDescriptor> result = new LinkedList<UrmlNodeDescriptor>();
+		for (Iterator<?> it = modelElement.getElements().iterator(); it
+				.hasNext();) {
 			UnicaseModelElement childElement = (UnicaseModelElement) it.next();
-			int visualID = UrmlVisualIDRegistry.getNodeVisualID(view, childElement);
+			int visualID = UrmlVisualIDRegistry.getNodeVisualID(view,
+					childElement);
 			if (visualID == StakeholderEditPart.VISUAL_ID) {
 				result.add(new UrmlNodeDescriptor(childElement, visualID));
 				continue;
@@ -159,7 +164,7 @@
 	/**
 	 * @generated
 	 */
-	public static List getContainedLinks(View view) {
+	public static List<UrmlLinkDescriptor> getContainedLinks(View view) {
 		switch (UrmlVisualIDRegistry.getVisualID(view)) {
 		case URMLDiagramEditPart.VISUAL_ID:
 			return getURMLDiagram_1000ContainedLinks(view);
@@ -196,13 +201,13 @@
 		case GoalReference4EditPart.VISUAL_ID:
 			return getGoalReference_4025ContainedLinks(view);
 		}
-		return Collections.EMPTY_LIST;
+		return Collections.emptyList();
 	}
 
 	/**
 	 * @generated
 	 */
-	public static List getIncomingLinks(View view) {
+	public static List<UrmlLinkDescriptor> getIncomingLinks(View view) {
 		switch (UrmlVisualIDRegistry.getVisualID(view)) {
 		case StakeholderEditPart.VISUAL_ID:
 			return getStakeholder_2002IncomingLinks(view);
@@ -237,13 +242,13 @@
 		case GoalReference4EditPart.VISUAL_ID:
 			return getGoalReference_4025IncomingLinks(view);
 		}
-		return Collections.EMPTY_LIST;
+		return Collections.emptyList();
 	}
 
 	/**
 	 * @generated
 	 */
-	public static List getOutgoingLinks(View view) {
+	public static List<UrmlLinkDescriptor> getOutgoingLinks(View view) {
 		switch (UrmlVisualIDRegistry.getVisualID(view)) {
 		case StakeholderEditPart.VISUAL_ID:
 			return getStakeholder_2002OutgoingLinks(view);
@@ -278,15 +283,16 @@
 		case GoalReference4EditPart.VISUAL_ID:
 			return getGoalReference_4025OutgoingLinks(view);
 		}
-		return Collections.EMPTY_LIST;
+		return Collections.emptyList();
 	}
 
 	/**
 	 * @generated
 	 */
-	public static List getURMLDiagram_1000ContainedLinks(View view) {
+	public static List<UrmlLinkDescriptor> getURMLDiagram_1000ContainedLinks(
+			View view) {
 		URMLDiagram modelElement = (URMLDiagram) view.getElement();
-		List result = new LinkedList();
+		LinkedList<UrmlLinkDescriptor> result = new LinkedList<UrmlLinkDescriptor>();
 		result.addAll(getContainedTypeModelFacetLinks_GoalReference_4016(modelElement));
 		result.addAll(getContainedTypeModelFacetLinks_GoalReference_4023(modelElement));
 		result.addAll(getContainedTypeModelFacetLinks_GoalReference_4024(modelElement));
@@ -297,555 +303,729 @@
 	/**
 	 * @generated
 	 */
-	public static List getStakeholder_2002ContainedLinks(View view) {
+	public static List<UrmlLinkDescriptor> getStakeholder_2002ContainedLinks(
+			View view) {
 		Stakeholder modelElement = (Stakeholder) view.getElement();
-		List result = new LinkedList();
+		LinkedList<UrmlLinkDescriptor> result = new LinkedList<UrmlLinkDescriptor>();
 		result.addAll(getOutgoingFeatureModelFacetLinks_Stakeholder_Goals_4008(modelElement));
+		result.addAll(getOutgoingFeatureModelFacetLinks_UrmlModelElement_Associations_4048(modelElement));
 		return result;
 	}
 
 	/**
 	 * @generated
 	 */
-	public static List getGoal_2001ContainedLinks(View view) {
+	public static List<UrmlLinkDescriptor> getGoal_2001ContainedLinks(View view) {
 		Goal modelElement = (Goal) view.getElement();
-		List result = new LinkedList();
+		LinkedList<UrmlLinkDescriptor> result = new LinkedList<UrmlLinkDescriptor>();
 		result.addAll(getOutgoingFeatureModelFacetLinks_Goal_RealizedFeatures_4004(modelElement));
 		result.addAll(getOutgoingFeatureModelFacetLinks_Goal_SubGoals_4018(modelElement));
+		result.addAll(getOutgoingFeatureModelFacetLinks_UrmlModelElement_Associations_4048(modelElement));
 		return result;
 	}
 
 	/**
 	 * @generated
 	 */
-	public static List getFunctionalRequirement_2006ContainedLinks(View view) {
-		FunctionalRequirement modelElement = (FunctionalRequirement) view.getElement();
-		List result = new LinkedList();
+	public static List<UrmlLinkDescriptor> getFunctionalRequirement_2006ContainedLinks(
+			View view) {
+		FunctionalRequirement modelElement = (FunctionalRequirement) view
+				.getElement();
+		LinkedList<UrmlLinkDescriptor> result = new LinkedList<UrmlLinkDescriptor>();
 		result.addAll(getOutgoingFeatureModelFacetLinks_Requirement_ImplementingServices_4005(modelElement));
-		result
-			.addAll(getOutgoingFeatureModelFacetLinks_FunctionalRequirement_SubFunctionalRequirements_4044(modelElement));
+		result.addAll(getOutgoingFeatureModelFacetLinks_FunctionalRequirement_SubFunctionalRequirements_4044(modelElement));
 		result.addAll(getOutgoingFeatureModelFacetLinks_Mitigation_MitigatedDangers_4012(modelElement));
+		result.addAll(getOutgoingFeatureModelFacetLinks_UrmlModelElement_Associations_4048(modelElement));
 		return result;
 	}
 
 	/**
 	 * @generated
 	 */
-	public static List getFeature_2012ContainedLinks(View view) {
+	public static List<UrmlLinkDescriptor> getFeature_2012ContainedLinks(
+			View view) {
 		Feature modelElement = (Feature) view.getElement();
-		List result = new LinkedList();
+		LinkedList<UrmlLinkDescriptor> result = new LinkedList<UrmlLinkDescriptor>();
 		result.addAll(getOutgoingFeatureModelFacetLinks_AbstractFeature_SubFeatures_4034(modelElement));
-		result
-			.addAll(getOutgoingFeatureModelFacetLinks_AbstractFeature_DetailingFunctionalRequirements_4035(modelElement));
-		result
-			.addAll(getOutgoingFeatureModelFacetLinks_AbstractFeature_ConstrainingNonFunctionalRequirements_4036(modelElement));
+		result.addAll(getOutgoingFeatureModelFacetLinks_AbstractFeature_DetailingFunctionalRequirements_4035(modelElement));
+		result.addAll(getOutgoingFeatureModelFacetLinks_AbstractFeature_ConstrainingNonFunctionalRequirements_4036(modelElement));
 		result.addAll(getOutgoingFeatureModelFacetLinks_AbstractFeature_RequiredFeatures_4045(modelElement));
 		result.addAll(getOutgoingFeatureModelFacetLinks_AbstractFeature_ExcludedFeatures_4038(modelElement));
+		result.addAll(getOutgoingFeatureModelFacetLinks_UrmlModelElement_Associations_4048(modelElement));
 		return result;
 	}
 
 	/**
 	 * @generated
 	 */
-	public static List getService_2007ContainedLinks(View view) {
+	public static List<UrmlLinkDescriptor> getService_2007ContainedLinks(
+			View view) {
 		Service modelElement = (Service) view.getElement();
-		List result = new LinkedList();
+		LinkedList<UrmlLinkDescriptor> result = new LinkedList<UrmlLinkDescriptor>();
 		result.addAll(getOutgoingFeatureModelFacetLinks_Asset_TriggeredDangers_4017(modelElement));
 		result.addAll(getOutgoingFeatureModelFacetLinks_Service_SubServices_4022(modelElement));
+		result.addAll(getOutgoingFeatureModelFacetLinks_UrmlModelElement_Associations_4048(modelElement));
 		return result;
 	}
 
 	/**
 	 * @generated
 	 */
-	public static List getNonFunctionalRequirement_2008ContainedLinks(View view) {
-		NonFunctionalRequirement modelElement = (NonFunctionalRequirement) view.getElement();
-		List result = new LinkedList();
+	public static List<UrmlLinkDescriptor> getNonFunctionalRequirement_2008ContainedLinks(
+			View view) {
+		NonFunctionalRequirement modelElement = (NonFunctionalRequirement) view
+				.getElement();
+		LinkedList<UrmlLinkDescriptor> result = new LinkedList<UrmlLinkDescriptor>();
 		result.addAll(getOutgoingFeatureModelFacetLinks_Requirement_ImplementingServices_4005(modelElement));
-		result
-			.addAll(getOutgoingFeatureModelFacetLinks_NonFunctionalRequirement_SubNonFunctionalRequirements_4043(modelElement));
+		result.addAll(getOutgoingFeatureModelFacetLinks_NonFunctionalRequirement_SubNonFunctionalRequirements_4043(modelElement));
 		result.addAll(getOutgoingFeatureModelFacetLinks_Mitigation_MitigatedDangers_4012(modelElement));
+		result.addAll(getOutgoingFeatureModelFacetLinks_UrmlModelElement_Associations_4048(modelElement));
 		return result;
 	}
 
 	/**
 	 * @generated
 	 */
-	public static List getDanger_2009ContainedLinks(View view) {
+	public static List<UrmlLinkDescriptor> getDanger_2009ContainedLinks(
+			View view) {
 		Danger modelElement = (Danger) view.getElement();
-		List result = new LinkedList();
+		LinkedList<UrmlLinkDescriptor> result = new LinkedList<UrmlLinkDescriptor>();
 		result.addAll(getOutgoingFeatureModelFacetLinks_Danger_HarmedAssets_4013(modelElement));
+		result.addAll(getOutgoingFeatureModelFacetLinks_UrmlModelElement_Associations_4048(modelElement));
 		return result;
 	}
 
 	/**
 	 * @generated
 	 */
-	public static List getActor_2010ContainedLinks(View view) {
+	public static List<UrmlLinkDescriptor> getActor_2010ContainedLinks(View view) {
 		Actor modelElement = (Actor) view.getElement();
-		List result = new LinkedList();
+		LinkedList<UrmlLinkDescriptor> result = new LinkedList<UrmlLinkDescriptor>();
 		result.addAll(getOutgoingFeatureModelFacetLinks_Asset_TriggeredDangers_4017(modelElement));
+		result.addAll(getOutgoingFeatureModelFacetLinks_UrmlModelElement_Associations_4048(modelElement));
 		return result;
 	}
 
 	/**
 	 * @generated
 	 */
-	public static List getProceduralMitigation_2011ContainedLinks(View view) {
-		ProceduralMitigation modelElement = (ProceduralMitigation) view.getElement();
-		List result = new LinkedList();
+	public static List<UrmlLinkDescriptor> getProceduralMitigation_2011ContainedLinks(
+			View view) {
+		ProceduralMitigation modelElement = (ProceduralMitigation) view
+				.getElement();
+		LinkedList<UrmlLinkDescriptor> result = new LinkedList<UrmlLinkDescriptor>();
 		result.addAll(getOutgoingFeatureModelFacetLinks_Mitigation_MitigatedDangers_4012(modelElement));
+		result.addAll(getOutgoingFeatureModelFacetLinks_UrmlModelElement_Associations_4048(modelElement));
 		return result;
 	}
 
 	/**
 	 * @generated
 	 */
-	public static List getVariationPoint_2013ContainedLinks(View view) {
+	public static List<UrmlLinkDescriptor> getVariationPoint_2013ContainedLinks(
+			View view) {
 		VariationPoint modelElement = (VariationPoint) view.getElement();
-		List result = new LinkedList();
+		LinkedList<UrmlLinkDescriptor> result = new LinkedList<UrmlLinkDescriptor>();
 		result.addAll(getOutgoingFeatureModelFacetLinks_AbstractFeature_SubFeatures_4034(modelElement));
-		result
-			.addAll(getOutgoingFeatureModelFacetLinks_AbstractFeature_DetailingFunctionalRequirements_4035(modelElement));
-		result
-			.addAll(getOutgoingFeatureModelFacetLinks_AbstractFeature_ConstrainingNonFunctionalRequirements_4036(modelElement));
+		result.addAll(getOutgoingFeatureModelFacetLinks_AbstractFeature_DetailingFunctionalRequirements_4035(modelElement));
+		result.addAll(getOutgoingFeatureModelFacetLinks_AbstractFeature_ConstrainingNonFunctionalRequirements_4036(modelElement));
 		result.addAll(getOutgoingFeatureModelFacetLinks_AbstractFeature_RequiredFeatures_4045(modelElement));
 		result.addAll(getOutgoingFeatureModelFacetLinks_AbstractFeature_ExcludedFeatures_4038(modelElement));
 		result.addAll(getOutgoingFeatureModelFacetLinks_VariationPoint_OptionalSubFeatures_4046(modelElement));
+		result.addAll(getOutgoingFeatureModelFacetLinks_UrmlModelElement_Associations_4048(modelElement));
 		return result;
 	}
 
 	/**
 	 * @generated
 	 */
-	public static List getVariationPointInstance_2014ContainedLinks(View view) {
-		VariationPointInstance modelElement = (VariationPointInstance) view.getElement();
-		List result = new LinkedList();
+	public static List<UrmlLinkDescriptor> getVariationPointInstance_2014ContainedLinks(
+			View view) {
+		VariationPointInstance modelElement = (VariationPointInstance) view
+				.getElement();
+		LinkedList<UrmlLinkDescriptor> result = new LinkedList<UrmlLinkDescriptor>();
 		result.addAll(getOutgoingFeatureModelFacetLinks_VariationPointInstance_VariationPoint_4033(modelElement));
 		result.addAll(getOutgoingFeatureModelFacetLinks_VariationPointInstance_SelectedFeatures_4040(modelElement));
+		result.addAll(getOutgoingFeatureModelFacetLinks_UrmlModelElement_Associations_4048(modelElement));
 		return result;
 	}
 
 	/**
 	 * @generated
 	 */
-	public static List getProduct_2015ContainedLinks(View view) {
+	public static List<UrmlLinkDescriptor> getProduct_2015ContainedLinks(
+			View view) {
 		Product modelElement = (Product) view.getElement();
-		List result = new LinkedList();
+		LinkedList<UrmlLinkDescriptor> result = new LinkedList<UrmlLinkDescriptor>();
 		result.addAll(getOutgoingFeatureModelFacetLinks_Product_VariationPointInstances_4032(modelElement));
 		result.addAll(getOutgoingFeatureModelFacetLinks_Product_Features_4047(modelElement));
+		result.addAll(getOutgoingFeatureModelFacetLinks_UrmlModelElement_Associations_4048(modelElement));
 		return result;
 	}
 
 	/**
 	 * @generated
 	 */
-	public static List getGoalReference_4016ContainedLinks(View view) {
-		return Collections.EMPTY_LIST;
+	public static List<UrmlLinkDescriptor> getGoalReference_4016ContainedLinks(
+			View view) {
+		GoalReference modelElement = (GoalReference) view.getElement();
+		LinkedList<UrmlLinkDescriptor> result = new LinkedList<UrmlLinkDescriptor>();
+		result.addAll(getOutgoingFeatureModelFacetLinks_UrmlModelElement_Associations_4048(modelElement));
+		return result;
 	}
 
 	/**
 	 * @generated
 	 */
-	public static List getGoalReference_4023ContainedLinks(View view) {
-		return Collections.EMPTY_LIST;
+	public static List<UrmlLinkDescriptor> getGoalReference_4023ContainedLinks(
+			View view) {
+		GoalReference modelElement = (GoalReference) view.getElement();
+		LinkedList<UrmlLinkDescriptor> result = new LinkedList<UrmlLinkDescriptor>();
+		result.addAll(getOutgoingFeatureModelFacetLinks_UrmlModelElement_Associations_4048(modelElement));
+		return result;
 	}
 
 	/**
 	 * @generated
 	 */
-	public static List getGoalReference_4024ContainedLinks(View view) {
-		return Collections.EMPTY_LIST;
+	public static List<UrmlLinkDescriptor> getGoalReference_4024ContainedLinks(
+			View view) {
+		GoalReference modelElement = (GoalReference) view.getElement();
+		LinkedList<UrmlLinkDescriptor> result = new LinkedList<UrmlLinkDescriptor>();
+		result.addAll(getOutgoingFeatureModelFacetLinks_UrmlModelElement_Associations_4048(modelElement));
+		return result;
 	}
 
 	/**
 	 * @generated
 	 */
-	public static List getGoalReference_4025ContainedLinks(View view) {
-		return Collections.EMPTY_LIST;
+	public static List<UrmlLinkDescriptor> getGoalReference_4025ContainedLinks(
+			View view) {
+		GoalReference modelElement = (GoalReference) view.getElement();
+		LinkedList<UrmlLinkDescriptor> result = new LinkedList<UrmlLinkDescriptor>();
+		result.addAll(getOutgoingFeatureModelFacetLinks_UrmlModelElement_Associations_4048(modelElement));
+		return result;
 	}
 
 	/**
 	 * @generated
 	 */
-	public static List getStakeholder_2002IncomingLinks(View view) {
-		return Collections.EMPTY_LIST;
+	public static List<UrmlLinkDescriptor> getStakeholder_2002IncomingLinks(
+			View view) {
+		Stakeholder modelElement = (Stakeholder) view.getElement();
+		Map<EObject, Collection<EStructuralFeature.Setting>> crossReferences = EcoreUtil.CrossReferencer
+				.find(view.eResource().getResourceSet().getResources());
+		LinkedList<UrmlLinkDescriptor> result = new LinkedList<UrmlLinkDescriptor>();
+		result.addAll(getIncomingFeatureModelFacetLinks_UrmlModelElement_Associations_4048(
+				modelElement, crossReferences));
+		return result;
 	}
 
 	/**
 	 * @generated
 	 */
-	public static List getGoal_2001IncomingLinks(View view) {
+	public static List<UrmlLinkDescriptor> getGoal_2001IncomingLinks(View view) {
 		Goal modelElement = (Goal) view.getElement();
-		Map crossReferences = EcoreUtil.CrossReferencer.find(view.eResource().getResourceSet().getResources());
-		List result = new LinkedList();
-		result.addAll(getIncomingFeatureModelFacetLinks_Stakeholder_Goals_4008(modelElement, crossReferences));
-		result.addAll(getIncomingFeatureModelFacetLinks_Goal_SubGoals_4018(modelElement, crossReferences));
-		result.addAll(getIncomingTypeModelFacetLinks_GoalReference_4016(modelElement, crossReferences));
-		result.addAll(getIncomingTypeModelFacetLinks_GoalReference_4023(modelElement, crossReferences));
-		result.addAll(getIncomingTypeModelFacetLinks_GoalReference_4024(modelElement, crossReferences));
-		result.addAll(getIncomingTypeModelFacetLinks_GoalReference_4025(modelElement, crossReferences));
+		Map<EObject, Collection<EStructuralFeature.Setting>> crossReferences = EcoreUtil.CrossReferencer
+				.find(view.eResource().getResourceSet().getResources());
+		LinkedList<UrmlLinkDescriptor> result = new LinkedList<UrmlLinkDescriptor>();
+		result.addAll(getIncomingFeatureModelFacetLinks_Stakeholder_Goals_4008(
+				modelElement, crossReferences));
+		result.addAll(getIncomingFeatureModelFacetLinks_Goal_SubGoals_4018(
+				modelElement, crossReferences));
+		result.addAll(getIncomingTypeModelFacetLinks_GoalReference_4016(
+				modelElement, crossReferences));
+		result.addAll(getIncomingTypeModelFacetLinks_GoalReference_4023(
+				modelElement, crossReferences));
+		result.addAll(getIncomingTypeModelFacetLinks_GoalReference_4024(
+				modelElement, crossReferences));
+		result.addAll(getIncomingTypeModelFacetLinks_GoalReference_4025(
+				modelElement, crossReferences));
+		result.addAll(getIncomingFeatureModelFacetLinks_UrmlModelElement_Associations_4048(
+				modelElement, crossReferences));
 		return result;
 	}
 
 	/**
 	 * @generated
 	 */
-	public static List getFunctionalRequirement_2006IncomingLinks(View view) {
-		FunctionalRequirement modelElement = (FunctionalRequirement) view.getElement();
-		Map crossReferences = EcoreUtil.CrossReferencer.find(view.eResource().getResourceSet().getResources());
-		List result = new LinkedList();
+	public static List<UrmlLinkDescriptor> getFunctionalRequirement_2006IncomingLinks(
+			View view) {
+		FunctionalRequirement modelElement = (FunctionalRequirement) view
+				.getElement();
+		Map<EObject, Collection<EStructuralFeature.Setting>> crossReferences = EcoreUtil.CrossReferencer
+				.find(view.eResource().getResourceSet().getResources());
+		LinkedList<UrmlLinkDescriptor> result = new LinkedList<UrmlLinkDescriptor>();
 		result.addAll(getIncomingFeatureModelFacetLinks_AbstractFeature_DetailingFunctionalRequirements_4035(
-			modelElement, crossReferences));
+				modelElement, crossReferences));
 		result.addAll(getIncomingFeatureModelFacetLinks_FunctionalRequirement_SubFunctionalRequirements_4044(
-			modelElement, crossReferences));
+				modelElement, crossReferences));
+		result.addAll(getIncomingFeatureModelFacetLinks_UrmlModelElement_Associations_4048(
+				modelElement, crossReferences));
 		return result;
 	}
 
 	/**
 	 * @generated
 	 */
-	public static List getFeature_2012IncomingLinks(View view) {
+	public static List<UrmlLinkDescriptor> getFeature_2012IncomingLinks(
+			View view) {
 		Feature modelElement = (Feature) view.getElement();
-		Map crossReferences = EcoreUtil.CrossReferencer.find(view.eResource().getResourceSet().getResources());
-		List result = new LinkedList();
-		result
-			.addAll(getIncomingFeatureModelFacetLinks_AbstractFeature_SubFeatures_4034(modelElement, crossReferences));
-		result.addAll(getIncomingFeatureModelFacetLinks_AbstractFeature_RequiredFeatures_4045(modelElement,
-			crossReferences));
-		result.addAll(getIncomingFeatureModelFacetLinks_AbstractFeature_ExcludedFeatures_4038(modelElement,
-			crossReferences));
-		result.addAll(getIncomingFeatureModelFacetLinks_Goal_RealizedFeatures_4004(modelElement, crossReferences));
-		result.addAll(getIncomingFeatureModelFacetLinks_VariationPoint_OptionalSubFeatures_4046(modelElement,
-			crossReferences));
-		result.addAll(getIncomingFeatureModelFacetLinks_VariationPointInstance_SelectedFeatures_4040(modelElement,
-			crossReferences));
-		result.addAll(getIncomingFeatureModelFacetLinks_Product_Features_4047(modelElement, crossReferences));
+		Map<EObject, Collection<EStructuralFeature.Setting>> crossReferences = EcoreUtil.CrossReferencer
+				.find(view.eResource().getResourceSet().getResources());
+		LinkedList<UrmlLinkDescriptor> result = new LinkedList<UrmlLinkDescriptor>();
+		result.addAll(getIncomingFeatureModelFacetLinks_AbstractFeature_SubFeatures_4034(
+				modelElement, crossReferences));
+		result.addAll(getIncomingFeatureModelFacetLinks_AbstractFeature_RequiredFeatures_4045(
+				modelElement, crossReferences));
+		result.addAll(getIncomingFeatureModelFacetLinks_AbstractFeature_ExcludedFeatures_4038(
+				modelElement, crossReferences));
+		result.addAll(getIncomingFeatureModelFacetLinks_Goal_RealizedFeatures_4004(
+				modelElement, crossReferences));
+		result.addAll(getIncomingFeatureModelFacetLinks_VariationPoint_OptionalSubFeatures_4046(
+				modelElement, crossReferences));
+		result.addAll(getIncomingFeatureModelFacetLinks_VariationPointInstance_SelectedFeatures_4040(
+				modelElement, crossReferences));
+		result.addAll(getIncomingFeatureModelFacetLinks_Product_Features_4047(
+				modelElement, crossReferences));
+		result.addAll(getIncomingFeatureModelFacetLinks_UrmlModelElement_Associations_4048(
+				modelElement, crossReferences));
 		return result;
 	}
 
 	/**
 	 * @generated
 	 */
-	public static List getService_2007IncomingLinks(View view) {
+	public static List<UrmlLinkDescriptor> getService_2007IncomingLinks(
+			View view) {
 		Service modelElement = (Service) view.getElement();
-		Map crossReferences = EcoreUtil.CrossReferencer.find(view.eResource().getResourceSet().getResources());
-		List result = new LinkedList();
-		result.addAll(getIncomingFeatureModelFacetLinks_Requirement_ImplementingServices_4005(modelElement,
-			crossReferences));
-		result.addAll(getIncomingFeatureModelFacetLinks_Danger_HarmedAssets_4013(modelElement, crossReferences));
-		result.addAll(getIncomingFeatureModelFacetLinks_Service_SubServices_4022(modelElement, crossReferences));
+		Map<EObject, Collection<EStructuralFeature.Setting>> crossReferences = EcoreUtil.CrossReferencer
+				.find(view.eResource().getResourceSet().getResources());
+		LinkedList<UrmlLinkDescriptor> result = new LinkedList<UrmlLinkDescriptor>();
+		result.addAll(getIncomingFeatureModelFacetLinks_Requirement_ImplementingServices_4005(
+				modelElement, crossReferences));
+		result.addAll(getIncomingFeatureModelFacetLinks_Danger_HarmedAssets_4013(
+				modelElement, crossReferences));
+		result.addAll(getIncomingFeatureModelFacetLinks_Service_SubServices_4022(
+				modelElement, crossReferences));
+		result.addAll(getIncomingFeatureModelFacetLinks_UrmlModelElement_Associations_4048(
+				modelElement, crossReferences));
 		return result;
 	}
 
 	/**
 	 * @generated
 	 */
-	public static List getNonFunctionalRequirement_2008IncomingLinks(View view) {
-		NonFunctionalRequirement modelElement = (NonFunctionalRequirement) view.getElement();
-		Map crossReferences = EcoreUtil.CrossReferencer.find(view.eResource().getResourceSet().getResources());
-		List result = new LinkedList();
+	public static List<UrmlLinkDescriptor> getNonFunctionalRequirement_2008IncomingLinks(
+			View view) {
+		NonFunctionalRequirement modelElement = (NonFunctionalRequirement) view
+				.getElement();
+		Map<EObject, Collection<EStructuralFeature.Setting>> crossReferences = EcoreUtil.CrossReferencer
+				.find(view.eResource().getResourceSet().getResources());
+		LinkedList<UrmlLinkDescriptor> result = new LinkedList<UrmlLinkDescriptor>();
 		result.addAll(getIncomingFeatureModelFacetLinks_AbstractFeature_ConstrainingNonFunctionalRequirements_4036(
-			modelElement, crossReferences));
+				modelElement, crossReferences));
 		result.addAll(getIncomingFeatureModelFacetLinks_NonFunctionalRequirement_SubNonFunctionalRequirements_4043(
-			modelElement, crossReferences));
+				modelElement, crossReferences));
+		result.addAll(getIncomingFeatureModelFacetLinks_UrmlModelElement_Associations_4048(
+				modelElement, crossReferences));
 		return result;
 	}
 
 	/**
 	 * @generated
 	 */
-	public static List getDanger_2009IncomingLinks(View view) {
+	public static List<UrmlLinkDescriptor> getDanger_2009IncomingLinks(View view) {
 		Danger modelElement = (Danger) view.getElement();
-		Map crossReferences = EcoreUtil.CrossReferencer.find(view.eResource().getResourceSet().getResources());
-		List result = new LinkedList();
-		result
-			.addAll(getIncomingFeatureModelFacetLinks_Mitigation_MitigatedDangers_4012(modelElement, crossReferences));
-		result.addAll(getIncomingFeatureModelFacetLinks_Asset_TriggeredDangers_4017(modelElement, crossReferences));
+		Map<EObject, Collection<EStructuralFeature.Setting>> crossReferences = EcoreUtil.CrossReferencer
+				.find(view.eResource().getResourceSet().getResources());
+		LinkedList<UrmlLinkDescriptor> result = new LinkedList<UrmlLinkDescriptor>();
+		result.addAll(getIncomingFeatureModelFacetLinks_Mitigation_MitigatedDangers_4012(
+				modelElement, crossReferences));
+		result.addAll(getIncomingFeatureModelFacetLinks_Asset_TriggeredDangers_4017(
+				modelElement, crossReferences));
+		result.addAll(getIncomingFeatureModelFacetLinks_UrmlModelElement_Associations_4048(
+				modelElement, crossReferences));
 		return result;
 	}
 
 	/**
 	 * @generated
 	 */
-	public static List getActor_2010IncomingLinks(View view) {
+	public static List<UrmlLinkDescriptor> getActor_2010IncomingLinks(View view) {
 		Actor modelElement = (Actor) view.getElement();
-		Map crossReferences = EcoreUtil.CrossReferencer.find(view.eResource().getResourceSet().getResources());
-		List result = new LinkedList();
-		result.addAll(getIncomingFeatureModelFacetLinks_Danger_HarmedAssets_4013(modelElement, crossReferences));
+		Map<EObject, Collection<EStructuralFeature.Setting>> crossReferences = EcoreUtil.CrossReferencer
+				.find(view.eResource().getResourceSet().getResources());
+		LinkedList<UrmlLinkDescriptor> result = new LinkedList<UrmlLinkDescriptor>();
+		result.addAll(getIncomingFeatureModelFacetLinks_Danger_HarmedAssets_4013(
+				modelElement, crossReferences));
+		result.addAll(getIncomingFeatureModelFacetLinks_UrmlModelElement_Associations_4048(
+				modelElement, crossReferences));
 		return result;
 	}
 
 	/**
 	 * @generated
 	 */
-	public static List getProceduralMitigation_2011IncomingLinks(View view) {
-		return Collections.EMPTY_LIST;
+	public static List<UrmlLinkDescriptor> getProceduralMitigation_2011IncomingLinks(
+			View view) {
+		ProceduralMitigation modelElement = (ProceduralMitigation) view
+				.getElement();
+		Map<EObject, Collection<EStructuralFeature.Setting>> crossReferences = EcoreUtil.CrossReferencer
+				.find(view.eResource().getResourceSet().getResources());
+		LinkedList<UrmlLinkDescriptor> result = new LinkedList<UrmlLinkDescriptor>();
+		result.addAll(getIncomingFeatureModelFacetLinks_UrmlModelElement_Associations_4048(
+				modelElement, crossReferences));
+		return result;
 	}
 
 	/**
 	 * @generated
 	 */
-	public static List getVariationPoint_2013IncomingLinks(View view) {
+	public static List<UrmlLinkDescriptor> getVariationPoint_2013IncomingLinks(
+			View view) {
 		VariationPoint modelElement = (VariationPoint) view.getElement();
-		Map crossReferences = EcoreUtil.CrossReferencer.find(view.eResource().getResourceSet().getResources());
-		List result = new LinkedList();
-		result
-			.addAll(getIncomingFeatureModelFacetLinks_AbstractFeature_SubFeatures_4034(modelElement, crossReferences));
-		result.addAll(getIncomingFeatureModelFacetLinks_AbstractFeature_RequiredFeatures_4045(modelElement,
-			crossReferences));
-		result.addAll(getIncomingFeatureModelFacetLinks_AbstractFeature_ExcludedFeatures_4038(modelElement,
-			crossReferences));
-		result.addAll(getIncomingFeatureModelFacetLinks_Goal_RealizedFeatures_4004(modelElement, crossReferences));
-		result.addAll(getIncomingFeatureModelFacetLinks_VariationPoint_OptionalSubFeatures_4046(modelElement,
-			crossReferences));
-		result.addAll(getIncomingFeatureModelFacetLinks_VariationPointInstance_VariationPoint_4033(modelElement,
-			crossReferences));
-		result.addAll(getIncomingFeatureModelFacetLinks_VariationPointInstance_SelectedFeatures_4040(modelElement,
-			crossReferences));
+		Map<EObject, Collection<EStructuralFeature.Setting>> crossReferences = EcoreUtil.CrossReferencer
+				.find(view.eResource().getResourceSet().getResources());
+		LinkedList<UrmlLinkDescriptor> result = new LinkedList<UrmlLinkDescriptor>();
+		result.addAll(getIncomingFeatureModelFacetLinks_AbstractFeature_SubFeatures_4034(
+				modelElement, crossReferences));
+		result.addAll(getIncomingFeatureModelFacetLinks_AbstractFeature_RequiredFeatures_4045(
+				modelElement, crossReferences));
+		result.addAll(getIncomingFeatureModelFacetLinks_AbstractFeature_ExcludedFeatures_4038(
+				modelElement, crossReferences));
+		result.addAll(getIncomingFeatureModelFacetLinks_Goal_RealizedFeatures_4004(
+				modelElement, crossReferences));
+		result.addAll(getIncomingFeatureModelFacetLinks_VariationPoint_OptionalSubFeatures_4046(
+				modelElement, crossReferences));
+		result.addAll(getIncomingFeatureModelFacetLinks_VariationPointInstance_VariationPoint_4033(
+				modelElement, crossReferences));
+		result.addAll(getIncomingFeatureModelFacetLinks_VariationPointInstance_SelectedFeatures_4040(
+				modelElement, crossReferences));
+		result.addAll(getIncomingFeatureModelFacetLinks_UrmlModelElement_Associations_4048(
+				modelElement, crossReferences));
 		return result;
 	}
 
 	/**
 	 * @generated
 	 */
-	public static List getVariationPointInstance_2014IncomingLinks(View view) {
-		VariationPointInstance modelElement = (VariationPointInstance) view.getElement();
-		Map crossReferences = EcoreUtil.CrossReferencer.find(view.eResource().getResourceSet().getResources());
-		List result = new LinkedList();
-		result.addAll(getIncomingFeatureModelFacetLinks_Product_VariationPointInstances_4032(modelElement,
-			crossReferences));
+	public static List<UrmlLinkDescriptor> getVariationPointInstance_2014IncomingLinks(
+			View view) {
+		VariationPointInstance modelElement = (VariationPointInstance) view
+				.getElement();
+		Map<EObject, Collection<EStructuralFeature.Setting>> crossReferences = EcoreUtil.CrossReferencer
+				.find(view.eResource().getResourceSet().getResources());
+		LinkedList<UrmlLinkDescriptor> result = new LinkedList<UrmlLinkDescriptor>();
+		result.addAll(getIncomingFeatureModelFacetLinks_Product_VariationPointInstances_4032(
+				modelElement, crossReferences));
+		result.addAll(getIncomingFeatureModelFacetLinks_UrmlModelElement_Associations_4048(
+				modelElement, crossReferences));
 		return result;
 	}
 
 	/**
 	 * @generated
 	 */
-	public static List getProduct_2015IncomingLinks(View view) {
-		return Collections.EMPTY_LIST;
+	public static List<UrmlLinkDescriptor> getProduct_2015IncomingLinks(
+			View view) {
+		Product modelElement = (Product) view.getElement();
+		Map<EObject, Collection<EStructuralFeature.Setting>> crossReferences = EcoreUtil.CrossReferencer
+				.find(view.eResource().getResourceSet().getResources());
+		LinkedList<UrmlLinkDescriptor> result = new LinkedList<UrmlLinkDescriptor>();
+		result.addAll(getIncomingFeatureModelFacetLinks_UrmlModelElement_Associations_4048(
+				modelElement, crossReferences));
+		return result;
 	}
 
 	/**
 	 * @generated
 	 */
-	public static List getGoalReference_4016IncomingLinks(View view) {
-		return Collections.EMPTY_LIST;
+	public static List<UrmlLinkDescriptor> getGoalReference_4016IncomingLinks(
+			View view) {
+		GoalReference modelElement = (GoalReference) view.getElement();
+		Map<EObject, Collection<EStructuralFeature.Setting>> crossReferences = EcoreUtil.CrossReferencer
+				.find(view.eResource().getResourceSet().getResources());
+		LinkedList<UrmlLinkDescriptor> result = new LinkedList<UrmlLinkDescriptor>();
+		result.addAll(getIncomingFeatureModelFacetLinks_UrmlModelElement_Associations_4048(
+				modelElement, crossReferences));
+		return result;
 	}
 
 	/**
 	 * @generated
 	 */
-	public static List getGoalReference_4023IncomingLinks(View view) {
-		return Collections.EMPTY_LIST;
+	public static List<UrmlLinkDescriptor> getGoalReference_4023IncomingLinks(
+			View view) {
+		GoalReference modelElement = (GoalReference) view.getElement();
+		Map<EObject, Collection<EStructuralFeature.Setting>> crossReferences = EcoreUtil.CrossReferencer
+				.find(view.eResource().getResourceSet().getResources());
+		LinkedList<UrmlLinkDescriptor> result = new LinkedList<UrmlLinkDescriptor>();
+		result.addAll(getIncomingFeatureModelFacetLinks_UrmlModelElement_Associations_4048(
+				modelElement, crossReferences));
+		return result;
 	}
 
 	/**
 	 * @generated
 	 */
-	public static List getGoalReference_4024IncomingLinks(View view) {
-		return Collections.EMPTY_LIST;
+	public static List<UrmlLinkDescriptor> getGoalReference_4024IncomingLinks(
+			View view) {
+		GoalReference modelElement = (GoalReference) view.getElement();
+		Map<EObject, Collection<EStructuralFeature.Setting>> crossReferences = EcoreUtil.CrossReferencer
+				.find(view.eResource().getResourceSet().getResources());
+		LinkedList<UrmlLinkDescriptor> result = new LinkedList<UrmlLinkDescriptor>();
+		result.addAll(getIncomingFeatureModelFacetLinks_UrmlModelElement_Associations_4048(
+				modelElement, crossReferences));
+		return result;
 	}
 
 	/**
 	 * @generated
 	 */
-	public static List getGoalReference_4025IncomingLinks(View view) {
-		return Collections.EMPTY_LIST;
+	public static List<UrmlLinkDescriptor> getGoalReference_4025IncomingLinks(
+			View view) {
+		GoalReference modelElement = (GoalReference) view.getElement();
+		Map<EObject, Collection<EStructuralFeature.Setting>> crossReferences = EcoreUtil.CrossReferencer
+				.find(view.eResource().getResourceSet().getResources());
+		LinkedList<UrmlLinkDescriptor> result = new LinkedList<UrmlLinkDescriptor>();
+		result.addAll(getIncomingFeatureModelFacetLinks_UrmlModelElement_Associations_4048(
+				modelElement, crossReferences));
+		return result;
 	}
 
 	/**
 	 * @generated
 	 */
-	public static List getStakeholder_2002OutgoingLinks(View view) {
+	public static List<UrmlLinkDescriptor> getStakeholder_2002OutgoingLinks(
+			View view) {
 		Stakeholder modelElement = (Stakeholder) view.getElement();
-		List result = new LinkedList();
+		LinkedList<UrmlLinkDescriptor> result = new LinkedList<UrmlLinkDescriptor>();
 		result.addAll(getOutgoingFeatureModelFacetLinks_Stakeholder_Goals_4008(modelElement));
+		result.addAll(getOutgoingFeatureModelFacetLinks_UrmlModelElement_Associations_4048(modelElement));
 		return result;
 	}
 
 	/**
 	 * @generated
 	 */
-	public static List getGoal_2001OutgoingLinks(View view) {
+	public static List<UrmlLinkDescriptor> getGoal_2001OutgoingLinks(View view) {
 		Goal modelElement = (Goal) view.getElement();
-		List result = new LinkedList();
+		LinkedList<UrmlLinkDescriptor> result = new LinkedList<UrmlLinkDescriptor>();
 		result.addAll(getOutgoingFeatureModelFacetLinks_Goal_RealizedFeatures_4004(modelElement));
 		result.addAll(getOutgoingFeatureModelFacetLinks_Goal_SubGoals_4018(modelElement));
 		result.addAll(getOutgoingTypeModelFacetLinks_GoalReference_4016(modelElement));
 		result.addAll(getOutgoingTypeModelFacetLinks_GoalReference_4023(modelElement));
 		result.addAll(getOutgoingTypeModelFacetLinks_GoalReference_4024(modelElement));
 		result.addAll(getOutgoingTypeModelFacetLinks_GoalReference_4025(modelElement));
+		result.addAll(getOutgoingFeatureModelFacetLinks_UrmlModelElement_Associations_4048(modelElement));
 		return result;
 	}
 
 	/**
 	 * @generated
 	 */
-	public static List getFunctionalRequirement_2006OutgoingLinks(View view) {
-		FunctionalRequirement modelElement = (FunctionalRequirement) view.getElement();
-		List result = new LinkedList();
+	public static List<UrmlLinkDescriptor> getFunctionalRequirement_2006OutgoingLinks(
+			View view) {
+		FunctionalRequirement modelElement = (FunctionalRequirement) view
+				.getElement();
+		LinkedList<UrmlLinkDescriptor> result = new LinkedList<UrmlLinkDescriptor>();
 		result.addAll(getOutgoingFeatureModelFacetLinks_Requirement_ImplementingServices_4005(modelElement));
-		result
-			.addAll(getOutgoingFeatureModelFacetLinks_FunctionalRequirement_SubFunctionalRequirements_4044(modelElement));
+		result.addAll(getOutgoingFeatureModelFacetLinks_FunctionalRequirement_SubFunctionalRequirements_4044(modelElement));
 		result.addAll(getOutgoingFeatureModelFacetLinks_Mitigation_MitigatedDangers_4012(modelElement));
+		result.addAll(getOutgoingFeatureModelFacetLinks_UrmlModelElement_Associations_4048(modelElement));
 		return result;
 	}
 
 	/**
 	 * @generated
 	 */
-	public static List getFeature_2012OutgoingLinks(View view) {
+	public static List<UrmlLinkDescriptor> getFeature_2012OutgoingLinks(
+			View view) {
 		Feature modelElement = (Feature) view.getElement();
-		List result = new LinkedList();
+		LinkedList<UrmlLinkDescriptor> result = new LinkedList<UrmlLinkDescriptor>();
 		result.addAll(getOutgoingFeatureModelFacetLinks_AbstractFeature_SubFeatures_4034(modelElement));
-		result
-			.addAll(getOutgoingFeatureModelFacetLinks_AbstractFeature_DetailingFunctionalRequirements_4035(modelElement));
-		result
-			.addAll(getOutgoingFeatureModelFacetLinks_AbstractFeature_ConstrainingNonFunctionalRequirements_4036(modelElement));
+		result.addAll(getOutgoingFeatureModelFacetLinks_AbstractFeature_DetailingFunctionalRequirements_4035(modelElement));
+		result.addAll(getOutgoingFeatureModelFacetLinks_AbstractFeature_ConstrainingNonFunctionalRequirements_4036(modelElement));
 		result.addAll(getOutgoingFeatureModelFacetLinks_AbstractFeature_RequiredFeatures_4045(modelElement));
 		result.addAll(getOutgoingFeatureModelFacetLinks_AbstractFeature_ExcludedFeatures_4038(modelElement));
+		result.addAll(getOutgoingFeatureModelFacetLinks_UrmlModelElement_Associations_4048(modelElement));
 		return result;
 	}
 
 	/**
 	 * @generated
 	 */
-	public static List getService_2007OutgoingLinks(View view) {
+	public static List<UrmlLinkDescriptor> getService_2007OutgoingLinks(
+			View view) {
 		Service modelElement = (Service) view.getElement();
-		List result = new LinkedList();
+		LinkedList<UrmlLinkDescriptor> result = new LinkedList<UrmlLinkDescriptor>();
 		result.addAll(getOutgoingFeatureModelFacetLinks_Asset_TriggeredDangers_4017(modelElement));
 		result.addAll(getOutgoingFeatureModelFacetLinks_Service_SubServices_4022(modelElement));
+		result.addAll(getOutgoingFeatureModelFacetLinks_UrmlModelElement_Associations_4048(modelElement));
 		return result;
 	}
 
 	/**
 	 * @generated
 	 */
-	public static List getNonFunctionalRequirement_2008OutgoingLinks(View view) {
-		NonFunctionalRequirement modelElement = (NonFunctionalRequirement) view.getElement();
-		List result = new LinkedList();
+	public static List<UrmlLinkDescriptor> getNonFunctionalRequirement_2008OutgoingLinks(
+			View view) {
+		NonFunctionalRequirement modelElement = (NonFunctionalRequirement) view
+				.getElement();
+		LinkedList<UrmlLinkDescriptor> result = new LinkedList<UrmlLinkDescriptor>();
 		result.addAll(getOutgoingFeatureModelFacetLinks_Requirement_ImplementingServices_4005(modelElement));
-		result
-			.addAll(getOutgoingFeatureModelFacetLinks_NonFunctionalRequirement_SubNonFunctionalRequirements_4043(modelElement));
+		result.addAll(getOutgoingFeatureModelFacetLinks_NonFunctionalRequirement_SubNonFunctionalRequirements_4043(modelElement));
 		result.addAll(getOutgoingFeatureModelFacetLinks_Mitigation_MitigatedDangers_4012(modelElement));
+		result.addAll(getOutgoingFeatureModelFacetLinks_UrmlModelElement_Associations_4048(modelElement));
 		return result;
 	}
 
 	/**
 	 * @generated
 	 */
-	public static List getDanger_2009OutgoingLinks(View view) {
+	public static List<UrmlLinkDescriptor> getDanger_2009OutgoingLinks(View view) {
 		Danger modelElement = (Danger) view.getElement();
-		List result = new LinkedList();
+		LinkedList<UrmlLinkDescriptor> result = new LinkedList<UrmlLinkDescriptor>();
 		result.addAll(getOutgoingFeatureModelFacetLinks_Danger_HarmedAssets_4013(modelElement));
+		result.addAll(getOutgoingFeatureModelFacetLinks_UrmlModelElement_Associations_4048(modelElement));
 		return result;
 	}
 
 	/**
 	 * @generated
 	 */
-	public static List getActor_2010OutgoingLinks(View view) {
+	public static List<UrmlLinkDescriptor> getActor_2010OutgoingLinks(View view) {
 		Actor modelElement = (Actor) view.getElement();
-		List result = new LinkedList();
+		LinkedList<UrmlLinkDescriptor> result = new LinkedList<UrmlLinkDescriptor>();
 		result.addAll(getOutgoingFeatureModelFacetLinks_Asset_TriggeredDangers_4017(modelElement));
+		result.addAll(getOutgoingFeatureModelFacetLinks_UrmlModelElement_Associations_4048(modelElement));
 		return result;
 	}
 
 	/**
 	 * @generated
 	 */
-	public static List getProceduralMitigation_2011OutgoingLinks(View view) {
-		ProceduralMitigation modelElement = (ProceduralMitigation) view.getElement();
-		List result = new LinkedList();
+	public static List<UrmlLinkDescriptor> getProceduralMitigation_2011OutgoingLinks(
+			View view) {
+		ProceduralMitigation modelElement = (ProceduralMitigation) view
+				.getElement();
+		LinkedList<UrmlLinkDescriptor> result = new LinkedList<UrmlLinkDescriptor>();
 		result.addAll(getOutgoingFeatureModelFacetLinks_Mitigation_MitigatedDangers_4012(modelElement));
+		result.addAll(getOutgoingFeatureModelFacetLinks_UrmlModelElement_Associations_4048(modelElement));
 		return result;
 	}
 
 	/**
 	 * @generated
 	 */
-	public static List getVariationPoint_2013OutgoingLinks(View view) {
+	public static List<UrmlLinkDescriptor> getVariationPoint_2013OutgoingLinks(
+			View view) {
 		VariationPoint modelElement = (VariationPoint) view.getElement();
-		List result = new LinkedList();
+		LinkedList<UrmlLinkDescriptor> result = new LinkedList<UrmlLinkDescriptor>();
 		result.addAll(getOutgoingFeatureModelFacetLinks_AbstractFeature_SubFeatures_4034(modelElement));
-		result
-			.addAll(getOutgoingFeatureModelFacetLinks_AbstractFeature_DetailingFunctionalRequirements_4035(modelElement));
-		result
-			.addAll(getOutgoingFeatureModelFacetLinks_AbstractFeature_ConstrainingNonFunctionalRequirements_4036(modelElement));
+		result.addAll(getOutgoingFeatureModelFacetLinks_AbstractFeature_DetailingFunctionalRequirements_4035(modelElement));
+		result.addAll(getOutgoingFeatureModelFacetLinks_AbstractFeature_ConstrainingNonFunctionalRequirements_4036(modelElement));
 		result.addAll(getOutgoingFeatureModelFacetLinks_AbstractFeature_RequiredFeatures_4045(modelElement));
 		result.addAll(getOutgoingFeatureModelFacetLinks_AbstractFeature_ExcludedFeatures_4038(modelElement));
 		result.addAll(getOutgoingFeatureModelFacetLinks_VariationPoint_OptionalSubFeatures_4046(modelElement));
+		result.addAll(getOutgoingFeatureModelFacetLinks_UrmlModelElement_Associations_4048(modelElement));
 		return result;
 	}
 
 	/**
 	 * @generated
 	 */
-	public static List getVariationPointInstance_2014OutgoingLinks(View view) {
-		VariationPointInstance modelElement = (VariationPointInstance) view.getElement();
-		List result = new LinkedList();
+	public static List<UrmlLinkDescriptor> getVariationPointInstance_2014OutgoingLinks(
+			View view) {
+		VariationPointInstance modelElement = (VariationPointInstance) view
+				.getElement();
+		LinkedList<UrmlLinkDescriptor> result = new LinkedList<UrmlLinkDescriptor>();
 		result.addAll(getOutgoingFeatureModelFacetLinks_VariationPointInstance_VariationPoint_4033(modelElement));
 		result.addAll(getOutgoingFeatureModelFacetLinks_VariationPointInstance_SelectedFeatures_4040(modelElement));
+		result.addAll(getOutgoingFeatureModelFacetLinks_UrmlModelElement_Associations_4048(modelElement));
 		return result;
 	}
 
 	/**
 	 * @generated
 	 */
-	public static List getProduct_2015OutgoingLinks(View view) {
+	public static List<UrmlLinkDescriptor> getProduct_2015OutgoingLinks(
+			View view) {
 		Product modelElement = (Product) view.getElement();
-		List result = new LinkedList();
+		LinkedList<UrmlLinkDescriptor> result = new LinkedList<UrmlLinkDescriptor>();
 		result.addAll(getOutgoingFeatureModelFacetLinks_Product_VariationPointInstances_4032(modelElement));
 		result.addAll(getOutgoingFeatureModelFacetLinks_Product_Features_4047(modelElement));
+		result.addAll(getOutgoingFeatureModelFacetLinks_UrmlModelElement_Associations_4048(modelElement));
 		return result;
 	}
 
 	/**
 	 * @generated
 	 */
-	public static List getGoalReference_4016OutgoingLinks(View view) {
-		return Collections.EMPTY_LIST;
+	public static List<UrmlLinkDescriptor> getGoalReference_4016OutgoingLinks(
+			View view) {
+		GoalReference modelElement = (GoalReference) view.getElement();
+		LinkedList<UrmlLinkDescriptor> result = new LinkedList<UrmlLinkDescriptor>();
+		result.addAll(getOutgoingFeatureModelFacetLinks_UrmlModelElement_Associations_4048(modelElement));
+		return result;
 	}
 
 	/**
 	 * @generated
 	 */
-	public static List getGoalReference_4023OutgoingLinks(View view) {
-		return Collections.EMPTY_LIST;
+	public static List<UrmlLinkDescriptor> getGoalReference_4023OutgoingLinks(
+			View view) {
+		GoalReference modelElement = (GoalReference) view.getElement();
+		LinkedList<UrmlLinkDescriptor> result = new LinkedList<UrmlLinkDescriptor>();
+		result.addAll(getOutgoingFeatureModelFacetLinks_UrmlModelElement_Associations_4048(modelElement));
+		return result;
 	}
 
 	/**
 	 * @generated
 	 */
-	public static List getGoalReference_4024OutgoingLinks(View view) {
-		return Collections.EMPTY_LIST;
+	public static List<UrmlLinkDescriptor> getGoalReference_4024OutgoingLinks(
+			View view) {
+		GoalReference modelElement = (GoalReference) view.getElement();
+		LinkedList<UrmlLinkDescriptor> result = new LinkedList<UrmlLinkDescriptor>();
+		result.addAll(getOutgoingFeatureModelFacetLinks_UrmlModelElement_Associations_4048(modelElement));
+		return result;
 	}
 
 	/**
 	 * @generated
 	 */
-	public static List getGoalReference_4025OutgoingLinks(View view) {
-		return Collections.EMPTY_LIST;
+	public static List<UrmlLinkDescriptor> getGoalReference_4025OutgoingLinks(
+			View view) {
+		GoalReference modelElement = (GoalReference) view.getElement();
+		LinkedList<UrmlLinkDescriptor> result = new LinkedList<UrmlLinkDescriptor>();
+		result.addAll(getOutgoingFeatureModelFacetLinks_UrmlModelElement_Associations_4048(modelElement));
+		return result;
 	}
 
 	/**
 	 * @generated
 	 */
-	private static Collection getContainedTypeModelFacetLinks_GoalReference_4016(MEDiagram container) {
-		Collection result = new LinkedList();
-		for (Iterator links = container.getNewElements().iterator(); links.hasNext();) {
+	private static Collection<UrmlLinkDescriptor> getContainedTypeModelFacetLinks_GoalReference_4016(
+			MEDiagram container) {
+		LinkedList<UrmlLinkDescriptor> result = new LinkedList<UrmlLinkDescriptor>();
+		for (Iterator<?> links = container.getNewElements().iterator(); links
+				.hasNext();) {
 			EObject linkObject = (EObject) links.next();
 			if (false == linkObject instanceof GoalReference) {
 				continue;
 			}
 			GoalReference link = (GoalReference) linkObject;
-			if (GoalReferenceEditPart.VISUAL_ID != UrmlVisualIDRegistry.getLinkWithClassVisualID(link)) {
+			if (GoalReferenceEditPart.VISUAL_ID != UrmlVisualIDRegistry
+					.getLinkWithClassVisualID(link)) {
 				continue;
 			}
 			Goal dst = link.getTarget();
 			Goal src = link.getSource();
-			result.add(new UrmlLinkDescriptor(src, dst, link, UrmlElementTypes.GoalReference_4016,
-				GoalReferenceEditPart.VISUAL_ID));
+			result.add(new UrmlLinkDescriptor(src, dst, link,
+					UrmlElementTypes.GoalReference_4016,
+					GoalReferenceEditPart.VISUAL_ID));
 		}
 		return result;
 	}
@@ -853,21 +1033,25 @@
 	/**
 	 * @generated
 	 */
-	private static Collection getContainedTypeModelFacetLinks_GoalReference_4023(MEDiagram container) {
-		Collection result = new LinkedList();
-		for (Iterator links = container.getNewElements().iterator(); links.hasNext();) {
+	private static Collection<UrmlLinkDescriptor> getContainedTypeModelFacetLinks_GoalReference_4023(
+			MEDiagram container) {
+		LinkedList<UrmlLinkDescriptor> result = new LinkedList<UrmlLinkDescriptor>();
+		for (Iterator<?> links = container.getNewElements().iterator(); links
+				.hasNext();) {
 			EObject linkObject = (EObject) links.next();
 			if (false == linkObject instanceof GoalReference) {
 				continue;
 			}
 			GoalReference link = (GoalReference) linkObject;
-			if (GoalReference2EditPart.VISUAL_ID != UrmlVisualIDRegistry.getLinkWithClassVisualID(link)) {
+			if (GoalReference2EditPart.VISUAL_ID != UrmlVisualIDRegistry
+					.getLinkWithClassVisualID(link)) {
 				continue;
 			}
 			Goal dst = link.getTarget();
 			Goal src = link.getSource();
-			result.add(new UrmlLinkDescriptor(src, dst, link, UrmlElementTypes.GoalReference_4023,
-				GoalReference2EditPart.VISUAL_ID));
+			result.add(new UrmlLinkDescriptor(src, dst, link,
+					UrmlElementTypes.GoalReference_4023,
+					GoalReference2EditPart.VISUAL_ID));
 		}
 		return result;
 	}
@@ -875,21 +1059,25 @@
 	/**
 	 * @generated
 	 */
-	private static Collection getContainedTypeModelFacetLinks_GoalReference_4024(MEDiagram container) {
-		Collection result = new LinkedList();
-		for (Iterator links = container.getNewElements().iterator(); links.hasNext();) {
+	private static Collection<UrmlLinkDescriptor> getContainedTypeModelFacetLinks_GoalReference_4024(
+			MEDiagram container) {
+		LinkedList<UrmlLinkDescriptor> result = new LinkedList<UrmlLinkDescriptor>();
+		for (Iterator<?> links = container.getNewElements().iterator(); links
+				.hasNext();) {
 			EObject linkObject = (EObject) links.next();
 			if (false == linkObject instanceof GoalReference) {
 				continue;
 			}
 			GoalReference link = (GoalReference) linkObject;
-			if (GoalReference3EditPart.VISUAL_ID != UrmlVisualIDRegistry.getLinkWithClassVisualID(link)) {
+			if (GoalReference3EditPart.VISUAL_ID != UrmlVisualIDRegistry
+					.getLinkWithClassVisualID(link)) {
 				continue;
 			}
 			Goal dst = link.getTarget();
 			Goal src = link.getSource();
-			result.add(new UrmlLinkDescriptor(src, dst, link, UrmlElementTypes.GoalReference_4024,
-				GoalReference3EditPart.VISUAL_ID));
+			result.add(new UrmlLinkDescriptor(src, dst, link,
+					UrmlElementTypes.GoalReference_4024,
+					GoalReference3EditPart.VISUAL_ID));
 		}
 		return result;
 	}
@@ -897,21 +1085,25 @@
 	/**
 	 * @generated
 	 */
-	private static Collection getContainedTypeModelFacetLinks_GoalReference_4025(MEDiagram container) {
-		Collection result = new LinkedList();
-		for (Iterator links = container.getNewElements().iterator(); links.hasNext();) {
+	private static Collection<UrmlLinkDescriptor> getContainedTypeModelFacetLinks_GoalReference_4025(
+			MEDiagram container) {
+		LinkedList<UrmlLinkDescriptor> result = new LinkedList<UrmlLinkDescriptor>();
+		for (Iterator<?> links = container.getNewElements().iterator(); links
+				.hasNext();) {
 			EObject linkObject = (EObject) links.next();
 			if (false == linkObject instanceof GoalReference) {
 				continue;
 			}
 			GoalReference link = (GoalReference) linkObject;
-			if (GoalReference4EditPart.VISUAL_ID != UrmlVisualIDRegistry.getLinkWithClassVisualID(link)) {
+			if (GoalReference4EditPart.VISUAL_ID != UrmlVisualIDRegistry
+					.getLinkWithClassVisualID(link)) {
 				continue;
 			}
 			Goal dst = link.getTarget();
 			Goal src = link.getSource();
-			result.add(new UrmlLinkDescriptor(src, dst, link, UrmlElementTypes.GoalReference_4025,
-				GoalReference4EditPart.VISUAL_ID));
+			result.add(new UrmlLinkDescriptor(src, dst, link,
+					UrmlElementTypes.GoalReference_4025,
+					GoalReference4EditPart.VISUAL_ID));
 		}
 		return result;
 	}
@@ -919,14 +1111,18 @@
 	/**
 	 * @generated
 	 */
-	private static Collection getIncomingFeatureModelFacetLinks_Stakeholder_Goals_4008(Goal target, Map crossReferences) {
-		Collection result = new LinkedList();
-		Collection settings = (Collection) crossReferences.get(target);
-		for (Iterator it = settings.iterator(); it.hasNext();) {
-			EStructuralFeature.Setting setting = (EStructuralFeature.Setting) it.next();
-			if (setting.getEStructuralFeature() == UrmlPackage.eINSTANCE.getStakeholder_Goals()) {
-				result.add(new UrmlLinkDescriptor(setting.getEObject(), target, UrmlElementTypes.StakeholderGoals_4008,
-					StakeholderGoalsEditPart.VISUAL_ID));
+	private static Collection<UrmlLinkDescriptor> getIncomingFeatureModelFacetLinks_Stakeholder_Goals_4008(
+			Goal target,
+			Map<EObject, Collection<EStructuralFeature.Setting>> crossReferences) {
+		LinkedList<UrmlLinkDescriptor> result = new LinkedList<UrmlLinkDescriptor>();
+		Collection<EStructuralFeature.Setting> settings = crossReferences
+				.get(target);
+		for (EStructuralFeature.Setting setting : settings) {
+			if (setting.getEStructuralFeature() == UrmlPackage.eINSTANCE
+					.getStakeholder_Goals()) {
+				result.add(new UrmlLinkDescriptor(setting.getEObject(), target,
+						UrmlElementTypes.StakeholderGoals_4008,
+						StakeholderGoalsEditPart.VISUAL_ID));
 			}
 		}
 		return result;
@@ -935,15 +1131,18 @@
 	/**
 	 * @generated
 	 */
-	private static Collection getIncomingFeatureModelFacetLinks_AbstractFeature_SubFeatures_4034(
-		AbstractFeature target, Map crossReferences) {
-		Collection result = new LinkedList();
-		Collection settings = (Collection) crossReferences.get(target);
-		for (Iterator it = settings.iterator(); it.hasNext();) {
-			EStructuralFeature.Setting setting = (EStructuralFeature.Setting) it.next();
-			if (setting.getEStructuralFeature() == FeaturePackage.eINSTANCE.getAbstractFeature_SubFeatures()) {
+	private static Collection<UrmlLinkDescriptor> getIncomingFeatureModelFacetLinks_AbstractFeature_SubFeatures_4034(
+			AbstractFeature target,
+			Map<EObject, Collection<EStructuralFeature.Setting>> crossReferences) {
+		LinkedList<UrmlLinkDescriptor> result = new LinkedList<UrmlLinkDescriptor>();
+		Collection<EStructuralFeature.Setting> settings = crossReferences
+				.get(target);
+		for (EStructuralFeature.Setting setting : settings) {
+			if (setting.getEStructuralFeature() == FeaturePackage.eINSTANCE
+					.getAbstractFeature_SubFeatures()) {
 				result.add(new UrmlLinkDescriptor(setting.getEObject(), target,
-					UrmlElementTypes.AbstractFeatureSubFeatures_4034, AbstractFeatureSubFeaturesEditPart.VISUAL_ID));
+						UrmlElementTypes.AbstractFeatureSubFeatures_4034,
+						AbstractFeatureSubFeaturesEditPart.VISUAL_ID));
 			}
 		}
 		return result;
@@ -952,17 +1151,20 @@
 	/**
 	 * @generated
 	 */
-	private static Collection getIncomingFeatureModelFacetLinks_AbstractFeature_DetailingFunctionalRequirements_4035(
-		FunctionalRequirement target, Map crossReferences) {
-		Collection result = new LinkedList();
-		Collection settings = (Collection) crossReferences.get(target);
-		for (Iterator it = settings.iterator(); it.hasNext();) {
-			EStructuralFeature.Setting setting = (EStructuralFeature.Setting) it.next();
+	private static Collection<UrmlLinkDescriptor> getIncomingFeatureModelFacetLinks_AbstractFeature_DetailingFunctionalRequirements_4035(
+			FunctionalRequirement target,
+			Map<EObject, Collection<EStructuralFeature.Setting>> crossReferences) {
+		LinkedList<UrmlLinkDescriptor> result = new LinkedList<UrmlLinkDescriptor>();
+		Collection<EStructuralFeature.Setting> settings = crossReferences
+				.get(target);
+		for (EStructuralFeature.Setting setting : settings) {
 			if (setting.getEStructuralFeature() == FeaturePackage.eINSTANCE
-				.getAbstractFeature_DetailingFunctionalRequirements()) {
-				result.add(new UrmlLinkDescriptor(setting.getEObject(), target,
-					UrmlElementTypes.AbstractFeatureDetailingFunctionalRequirements_4035,
-					AbstractFeatureDetailingFunctionalRequirementsEditPart.VISUAL_ID));
+					.getAbstractFeature_DetailingFunctionalRequirements()) {
+				result.add(new UrmlLinkDescriptor(
+						setting.getEObject(),
+						target,
+						UrmlElementTypes.AbstractFeatureDetailingFunctionalRequirements_4035,
+						AbstractFeatureDetailingFunctionalRequirementsEditPart.VISUAL_ID));
 			}
 		}
 		return result;
@@ -971,17 +1173,20 @@
 	/**
 	 * @generated
 	 */
-	private static Collection getIncomingFeatureModelFacetLinks_AbstractFeature_ConstrainingNonFunctionalRequirements_4036(
-		NonFunctionalRequirement target, Map crossReferences) {
-		Collection result = new LinkedList();
-		Collection settings = (Collection) crossReferences.get(target);
-		for (Iterator it = settings.iterator(); it.hasNext();) {
-			EStructuralFeature.Setting setting = (EStructuralFeature.Setting) it.next();
+	private static Collection<UrmlLinkDescriptor> getIncomingFeatureModelFacetLinks_AbstractFeature_ConstrainingNonFunctionalRequirements_4036(
+			NonFunctionalRequirement target,
+			Map<EObject, Collection<EStructuralFeature.Setting>> crossReferences) {
+		LinkedList<UrmlLinkDescriptor> result = new LinkedList<UrmlLinkDescriptor>();
+		Collection<EStructuralFeature.Setting> settings = crossReferences
+				.get(target);
+		for (EStructuralFeature.Setting setting : settings) {
 			if (setting.getEStructuralFeature() == FeaturePackage.eINSTANCE
-				.getAbstractFeature_ConstrainingNonFunctionalRequirements()) {
-				result.add(new UrmlLinkDescriptor(setting.getEObject(), target,
-					UrmlElementTypes.AbstractFeatureConstrainingNonFunctionalRequirements_4036,
-					AbstractFeatureConstrainingNonFunctionalRequirementsEditPart.VISUAL_ID));
+					.getAbstractFeature_ConstrainingNonFunctionalRequirements()) {
+				result.add(new UrmlLinkDescriptor(
+						setting.getEObject(),
+						target,
+						UrmlElementTypes.AbstractFeatureConstrainingNonFunctionalRequirements_4036,
+						AbstractFeatureConstrainingNonFunctionalRequirementsEditPart.VISUAL_ID));
 			}
 		}
 		return result;
@@ -990,16 +1195,18 @@
 	/**
 	 * @generated
 	 */
-	private static Collection getIncomingFeatureModelFacetLinks_AbstractFeature_RequiredFeatures_4045(
-		AbstractFeature target, Map crossReferences) {
-		Collection result = new LinkedList();
-		Collection settings = (Collection) crossReferences.get(target);
-		for (Iterator it = settings.iterator(); it.hasNext();) {
-			EStructuralFeature.Setting setting = (EStructuralFeature.Setting) it.next();
-			if (setting.getEStructuralFeature() == FeaturePackage.eINSTANCE.getAbstractFeature_RequiredFeatures()) {
+	private static Collection<UrmlLinkDescriptor> getIncomingFeatureModelFacetLinks_AbstractFeature_RequiredFeatures_4045(
+			AbstractFeature target,
+			Map<EObject, Collection<EStructuralFeature.Setting>> crossReferences) {
+		LinkedList<UrmlLinkDescriptor> result = new LinkedList<UrmlLinkDescriptor>();
+		Collection<EStructuralFeature.Setting> settings = crossReferences
+				.get(target);
+		for (EStructuralFeature.Setting setting : settings) {
+			if (setting.getEStructuralFeature() == FeaturePackage.eINSTANCE
+					.getAbstractFeature_RequiredFeatures()) {
 				result.add(new UrmlLinkDescriptor(setting.getEObject(), target,
-					UrmlElementTypes.AbstractFeatureRequiredFeatures_4045,
-					AbstractFeatureRequiredFeaturesEditPart.VISUAL_ID));
+						UrmlElementTypes.AbstractFeatureRequiredFeatures_4045,
+						AbstractFeatureRequiredFeaturesEditPart.VISUAL_ID));
 			}
 		}
 		return result;
@@ -1008,16 +1215,18 @@
 	/**
 	 * @generated
 	 */
-	private static Collection getIncomingFeatureModelFacetLinks_AbstractFeature_ExcludedFeatures_4038(
-		AbstractFeature target, Map crossReferences) {
-		Collection result = new LinkedList();
-		Collection settings = (Collection) crossReferences.get(target);
-		for (Iterator it = settings.iterator(); it.hasNext();) {
-			EStructuralFeature.Setting setting = (EStructuralFeature.Setting) it.next();
-			if (setting.getEStructuralFeature() == FeaturePackage.eINSTANCE.getAbstractFeature_ExcludedFeatures()) {
+	private static Collection<UrmlLinkDescriptor> getIncomingFeatureModelFacetLinks_AbstractFeature_ExcludedFeatures_4038(
+			AbstractFeature target,
+			Map<EObject, Collection<EStructuralFeature.Setting>> crossReferences) {
+		LinkedList<UrmlLinkDescriptor> result = new LinkedList<UrmlLinkDescriptor>();
+		Collection<EStructuralFeature.Setting> settings = crossReferences
+				.get(target);
+		for (EStructuralFeature.Setting setting : settings) {
+			if (setting.getEStructuralFeature() == FeaturePackage.eINSTANCE
+					.getAbstractFeature_ExcludedFeatures()) {
 				result.add(new UrmlLinkDescriptor(setting.getEObject(), target,
-					UrmlElementTypes.AbstractFeatureExcludedFeatures_4038,
-					AbstractFeatureExcludedFeaturesEditPart.VISUAL_ID));
+						UrmlElementTypes.AbstractFeatureExcludedFeatures_4038,
+						AbstractFeatureExcludedFeaturesEditPart.VISUAL_ID));
 			}
 		}
 		return result;
@@ -1026,15 +1235,18 @@
 	/**
 	 * @generated
 	 */
-	private static Collection getIncomingFeatureModelFacetLinks_Goal_RealizedFeatures_4004(AbstractFeature target,
-		Map crossReferences) {
-		Collection result = new LinkedList();
-		Collection settings = (Collection) crossReferences.get(target);
-		for (Iterator it = settings.iterator(); it.hasNext();) {
-			EStructuralFeature.Setting setting = (EStructuralFeature.Setting) it.next();
-			if (setting.getEStructuralFeature() == GoalPackage.eINSTANCE.getGoal_RealizedFeatures()) {
+	private static Collection<UrmlLinkDescriptor> getIncomingFeatureModelFacetLinks_Goal_RealizedFeatures_4004(
+			AbstractFeature target,
+			Map<EObject, Collection<EStructuralFeature.Setting>> crossReferences) {
+		LinkedList<UrmlLinkDescriptor> result = new LinkedList<UrmlLinkDescriptor>();
+		Collection<EStructuralFeature.Setting> settings = crossReferences
+				.get(target);
+		for (EStructuralFeature.Setting setting : settings) {
+			if (setting.getEStructuralFeature() == GoalPackage.eINSTANCE
+					.getGoal_RealizedFeatures()) {
 				result.add(new UrmlLinkDescriptor(setting.getEObject(), target,
-					UrmlElementTypes.GoalRealizedFeatures_4004, GoalRealizedFeaturesEditPart.VISUAL_ID));
+						UrmlElementTypes.GoalRealizedFeatures_4004,
+						GoalRealizedFeaturesEditPart.VISUAL_ID));
 			}
 		}
 		return result;
@@ -1043,14 +1255,18 @@
 	/**
 	 * @generated
 	 */
-	private static Collection getIncomingFeatureModelFacetLinks_Goal_SubGoals_4018(Goal target, Map crossReferences) {
-		Collection result = new LinkedList();
-		Collection settings = (Collection) crossReferences.get(target);
-		for (Iterator it = settings.iterator(); it.hasNext();) {
-			EStructuralFeature.Setting setting = (EStructuralFeature.Setting) it.next();
-			if (setting.getEStructuralFeature() == GoalPackage.eINSTANCE.getGoal_SubGoals()) {
-				result.add(new UrmlLinkDescriptor(setting.getEObject(), target, UrmlElementTypes.GoalSubGoals_4018,
-					GoalSubGoalsEditPart.VISUAL_ID));
+	private static Collection<UrmlLinkDescriptor> getIncomingFeatureModelFacetLinks_Goal_SubGoals_4018(
+			Goal target,
+			Map<EObject, Collection<EStructuralFeature.Setting>> crossReferences) {
+		LinkedList<UrmlLinkDescriptor> result = new LinkedList<UrmlLinkDescriptor>();
+		Collection<EStructuralFeature.Setting> settings = crossReferences
+				.get(target);
+		for (EStructuralFeature.Setting setting : settings) {
+			if (setting.getEStructuralFeature() == GoalPackage.eINSTANCE
+					.getGoal_SubGoals()) {
+				result.add(new UrmlLinkDescriptor(setting.getEObject(), target,
+						UrmlElementTypes.GoalSubGoals_4018,
+						GoalSubGoalsEditPart.VISUAL_ID));
 			}
 		}
 		return result;
@@ -1059,22 +1275,27 @@
 	/**
 	 * @generated
 	 */
-	private static Collection getIncomingTypeModelFacetLinks_GoalReference_4016(Goal target, Map crossReferences) {
-		Collection result = new LinkedList();
-		Collection settings = (Collection) crossReferences.get(target);
-		for (Iterator it = settings.iterator(); it.hasNext();) {
-			EStructuralFeature.Setting setting = (EStructuralFeature.Setting) it.next();
-			if (setting.getEStructuralFeature() != GoalPackage.eINSTANCE.getGoalReference_Target()
-				|| false == setting.getEObject() instanceof GoalReference) {
+	private static Collection<UrmlLinkDescriptor> getIncomingTypeModelFacetLinks_GoalReference_4016(
+			Goal target,
+			Map<EObject, Collection<EStructuralFeature.Setting>> crossReferences) {
+		LinkedList<UrmlLinkDescriptor> result = new LinkedList<UrmlLinkDescriptor>();
+		Collection<EStructuralFeature.Setting> settings = crossReferences
+				.get(target);
+		for (EStructuralFeature.Setting setting : settings) {
+			if (setting.getEStructuralFeature() != GoalPackage.eINSTANCE
+					.getGoalReference_Target()
+					|| false == setting.getEObject() instanceof GoalReference) {
 				continue;
 			}
 			GoalReference link = (GoalReference) setting.getEObject();
-			if (GoalReferenceEditPart.VISUAL_ID != UrmlVisualIDRegistry.getLinkWithClassVisualID(link)) {
+			if (GoalReferenceEditPart.VISUAL_ID != UrmlVisualIDRegistry
+					.getLinkWithClassVisualID(link)) {
 				continue;
 			}
 			Goal src = link.getSource();
-			result.add(new UrmlLinkDescriptor(src, target, link, UrmlElementTypes.GoalReference_4016,
-				GoalReferenceEditPart.VISUAL_ID));
+			result.add(new UrmlLinkDescriptor(src, target, link,
+					UrmlElementTypes.GoalReference_4016,
+					GoalReferenceEditPart.VISUAL_ID));
 		}
 		return result;
 	}
@@ -1082,22 +1303,27 @@
 	/**
 	 * @generated
 	 */
-	private static Collection getIncomingTypeModelFacetLinks_GoalReference_4023(Goal target, Map crossReferences) {
-		Collection result = new LinkedList();
-		Collection settings = (Collection) crossReferences.get(target);
-		for (Iterator it = settings.iterator(); it.hasNext();) {
-			EStructuralFeature.Setting setting = (EStructuralFeature.Setting) it.next();
-			if (setting.getEStructuralFeature() != GoalPackage.eINSTANCE.getGoalReference_Target()
-				|| false == setting.getEObject() instanceof GoalReference) {
+	private static Collection<UrmlLinkDescriptor> getIncomingTypeModelFacetLinks_GoalReference_4023(
+			Goal target,
+			Map<EObject, Collection<EStructuralFeature.Setting>> crossReferences) {
+		LinkedList<UrmlLinkDescriptor> result = new LinkedList<UrmlLinkDescriptor>();
+		Collection<EStructuralFeature.Setting> settings = crossReferences
+				.get(target);
+		for (EStructuralFeature.Setting setting : settings) {
+			if (setting.getEStructuralFeature() != GoalPackage.eINSTANCE
+					.getGoalReference_Target()
+					|| false == setting.getEObject() instanceof GoalReference) {
 				continue;
 			}
 			GoalReference link = (GoalReference) setting.getEObject();
-			if (GoalReference2EditPart.VISUAL_ID != UrmlVisualIDRegistry.getLinkWithClassVisualID(link)) {
+			if (GoalReference2EditPart.VISUAL_ID != UrmlVisualIDRegistry
+					.getLinkWithClassVisualID(link)) {
 				continue;
 			}
 			Goal src = link.getSource();
-			result.add(new UrmlLinkDescriptor(src, target, link, UrmlElementTypes.GoalReference_4023,
-				GoalReference2EditPart.VISUAL_ID));
+			result.add(new UrmlLinkDescriptor(src, target, link,
+					UrmlElementTypes.GoalReference_4023,
+					GoalReference2EditPart.VISUAL_ID));
 		}
 		return result;
 	}
@@ -1105,22 +1331,27 @@
 	/**
 	 * @generated
 	 */
-	private static Collection getIncomingTypeModelFacetLinks_GoalReference_4024(Goal target, Map crossReferences) {
-		Collection result = new LinkedList();
-		Collection settings = (Collection) crossReferences.get(target);
-		for (Iterator it = settings.iterator(); it.hasNext();) {
-			EStructuralFeature.Setting setting = (EStructuralFeature.Setting) it.next();
-			if (setting.getEStructuralFeature() != GoalPackage.eINSTANCE.getGoalReference_Target()
-				|| false == setting.getEObject() instanceof GoalReference) {
+	private static Collection<UrmlLinkDescriptor> getIncomingTypeModelFacetLinks_GoalReference_4024(
+			Goal target,
+			Map<EObject, Collection<EStructuralFeature.Setting>> crossReferences) {
+		LinkedList<UrmlLinkDescriptor> result = new LinkedList<UrmlLinkDescriptor>();
+		Collection<EStructuralFeature.Setting> settings = crossReferences
+				.get(target);
+		for (EStructuralFeature.Setting setting : settings) {
+			if (setting.getEStructuralFeature() != GoalPackage.eINSTANCE
+					.getGoalReference_Target()
+					|| false == setting.getEObject() instanceof GoalReference) {
 				continue;
 			}
 			GoalReference link = (GoalReference) setting.getEObject();
-			if (GoalReference3EditPart.VISUAL_ID != UrmlVisualIDRegistry.getLinkWithClassVisualID(link)) {
+			if (GoalReference3EditPart.VISUAL_ID != UrmlVisualIDRegistry
+					.getLinkWithClassVisualID(link)) {
 				continue;
 			}
 			Goal src = link.getSource();
-			result.add(new UrmlLinkDescriptor(src, target, link, UrmlElementTypes.GoalReference_4024,
-				GoalReference3EditPart.VISUAL_ID));
+			result.add(new UrmlLinkDescriptor(src, target, link,
+					UrmlElementTypes.GoalReference_4024,
+					GoalReference3EditPart.VISUAL_ID));
 		}
 		return result;
 	}
@@ -1128,22 +1359,27 @@
 	/**
 	 * @generated
 	 */
-	private static Collection getIncomingTypeModelFacetLinks_GoalReference_4025(Goal target, Map crossReferences) {
-		Collection result = new LinkedList();
-		Collection settings = (Collection) crossReferences.get(target);
-		for (Iterator it = settings.iterator(); it.hasNext();) {
-			EStructuralFeature.Setting setting = (EStructuralFeature.Setting) it.next();
-			if (setting.getEStructuralFeature() != GoalPackage.eINSTANCE.getGoalReference_Target()
-				|| false == setting.getEObject() instanceof GoalReference) {
+	private static Collection<UrmlLinkDescriptor> getIncomingTypeModelFacetLinks_GoalReference_4025(
+			Goal target,
+			Map<EObject, Collection<EStructuralFeature.Setting>> crossReferences) {
+		LinkedList<UrmlLinkDescriptor> result = new LinkedList<UrmlLinkDescriptor>();
+		Collection<EStructuralFeature.Setting> settings = crossReferences
+				.get(target);
+		for (EStructuralFeature.Setting setting : settings) {
+			if (setting.getEStructuralFeature() != GoalPackage.eINSTANCE
+					.getGoalReference_Target()
+					|| false == setting.getEObject() instanceof GoalReference) {
 				continue;
 			}
 			GoalReference link = (GoalReference) setting.getEObject();
-			if (GoalReference4EditPart.VISUAL_ID != UrmlVisualIDRegistry.getLinkWithClassVisualID(link)) {
+			if (GoalReference4EditPart.VISUAL_ID != UrmlVisualIDRegistry
+					.getLinkWithClassVisualID(link)) {
 				continue;
 			}
 			Goal src = link.getSource();
-			result.add(new UrmlLinkDescriptor(src, target, link, UrmlElementTypes.GoalReference_4025,
-				GoalReference4EditPart.VISUAL_ID));
+			result.add(new UrmlLinkDescriptor(src, target, link,
+					UrmlElementTypes.GoalReference_4025,
+					GoalReference4EditPart.VISUAL_ID));
 		}
 		return result;
 	}
@@ -1151,16 +1387,18 @@
 	/**
 	 * @generated
 	 */
-	private static Collection getIncomingFeatureModelFacetLinks_Requirement_ImplementingServices_4005(Service target,
-		Map crossReferences) {
-		Collection result = new LinkedList();
-		Collection settings = (Collection) crossReferences.get(target);
-		for (Iterator it = settings.iterator(); it.hasNext();) {
-			EStructuralFeature.Setting setting = (EStructuralFeature.Setting) it.next();
-			if (setting.getEStructuralFeature() == RequirementPackage.eINSTANCE.getRequirement_ImplementingServices()) {
+	private static Collection<UrmlLinkDescriptor> getIncomingFeatureModelFacetLinks_Requirement_ImplementingServices_4005(
+			Service target,
+			Map<EObject, Collection<EStructuralFeature.Setting>> crossReferences) {
+		LinkedList<UrmlLinkDescriptor> result = new LinkedList<UrmlLinkDescriptor>();
+		Collection<EStructuralFeature.Setting> settings = crossReferences
+				.get(target);
+		for (EStructuralFeature.Setting setting : settings) {
+			if (setting.getEStructuralFeature() == RequirementPackage.eINSTANCE
+					.getRequirement_ImplementingServices()) {
 				result.add(new UrmlLinkDescriptor(setting.getEObject(), target,
-					UrmlElementTypes.RequirementImplementingServices_4005,
-					RequirementImplementingServicesEditPart.VISUAL_ID));
+						UrmlElementTypes.RequirementImplementingServices_4005,
+						RequirementImplementingServicesEditPart.VISUAL_ID));
 			}
 		}
 		return result;
@@ -1169,17 +1407,20 @@
 	/**
 	 * @generated
 	 */
-	private static Collection getIncomingFeatureModelFacetLinks_NonFunctionalRequirement_SubNonFunctionalRequirements_4043(
-		NonFunctionalRequirement target, Map crossReferences) {
-		Collection result = new LinkedList();
-		Collection settings = (Collection) crossReferences.get(target);
-		for (Iterator it = settings.iterator(); it.hasNext();) {
-			EStructuralFeature.Setting setting = (EStructuralFeature.Setting) it.next();
+	private static Collection<UrmlLinkDescriptor> getIncomingFeatureModelFacetLinks_NonFunctionalRequirement_SubNonFunctionalRequirements_4043(
+			NonFunctionalRequirement target,
+			Map<EObject, Collection<EStructuralFeature.Setting>> crossReferences) {
+		LinkedList<UrmlLinkDescriptor> result = new LinkedList<UrmlLinkDescriptor>();
+		Collection<EStructuralFeature.Setting> settings = crossReferences
+				.get(target);
+		for (EStructuralFeature.Setting setting : settings) {
 			if (setting.getEStructuralFeature() == RequirementPackage.eINSTANCE
-				.getNonFunctionalRequirement_SubNonFunctionalRequirements()) {
-				result.add(new UrmlLinkDescriptor(setting.getEObject(), target,
-					UrmlElementTypes.NonFunctionalRequirementSubNonFunctionalRequirements_4043,
-					NonFunctionalRequirementSubNonFunctionalRequirementsEditPart.VISUAL_ID));
+					.getNonFunctionalRequirement_SubNonFunctionalRequirements()) {
+				result.add(new UrmlLinkDescriptor(
+						setting.getEObject(),
+						target,
+						UrmlElementTypes.NonFunctionalRequirementSubNonFunctionalRequirements_4043,
+						NonFunctionalRequirementSubNonFunctionalRequirementsEditPart.VISUAL_ID));
 			}
 		}
 		return result;
@@ -1188,17 +1429,20 @@
 	/**
 	 * @generated
 	 */
-	private static Collection getIncomingFeatureModelFacetLinks_FunctionalRequirement_SubFunctionalRequirements_4044(
-		FunctionalRequirement target, Map crossReferences) {
-		Collection result = new LinkedList();
-		Collection settings = (Collection) crossReferences.get(target);
-		for (Iterator it = settings.iterator(); it.hasNext();) {
-			EStructuralFeature.Setting setting = (EStructuralFeature.Setting) it.next();
+	private static Collection<UrmlLinkDescriptor> getIncomingFeatureModelFacetLinks_FunctionalRequirement_SubFunctionalRequirements_4044(
+			FunctionalRequirement target,
+			Map<EObject, Collection<EStructuralFeature.Setting>> crossReferences) {
+		LinkedList<UrmlLinkDescriptor> result = new LinkedList<UrmlLinkDescriptor>();
+		Collection<EStructuralFeature.Setting> settings = crossReferences
+				.get(target);
+		for (EStructuralFeature.Setting setting : settings) {
 			if (setting.getEStructuralFeature() == RequirementPackage.eINSTANCE
-				.getFunctionalRequirement_SubFunctionalRequirements()) {
-				result.add(new UrmlLinkDescriptor(setting.getEObject(), target,
-					UrmlElementTypes.FunctionalRequirementSubFunctionalRequirements_4044,
-					FunctionalRequirementSubFunctionalRequirementsEditPart.VISUAL_ID));
+					.getFunctionalRequirement_SubFunctionalRequirements()) {
+				result.add(new UrmlLinkDescriptor(
+						setting.getEObject(),
+						target,
+						UrmlElementTypes.FunctionalRequirementSubFunctionalRequirements_4044,
+						FunctionalRequirementSubFunctionalRequirementsEditPart.VISUAL_ID));
 			}
 		}
 		return result;
@@ -1207,15 +1451,18 @@
 	/**
 	 * @generated
 	 */
-	private static Collection getIncomingFeatureModelFacetLinks_Mitigation_MitigatedDangers_4012(Danger target,
-		Map crossReferences) {
-		Collection result = new LinkedList();
-		Collection settings = (Collection) crossReferences.get(target);
-		for (Iterator it = settings.iterator(); it.hasNext();) {
-			EStructuralFeature.Setting setting = (EStructuralFeature.Setting) it.next();
-			if (setting.getEStructuralFeature() == DangerPackage.eINSTANCE.getMitigation_MitigatedDangers()) {
+	private static Collection<UrmlLinkDescriptor> getIncomingFeatureModelFacetLinks_Mitigation_MitigatedDangers_4012(
+			Danger target,
+			Map<EObject, Collection<EStructuralFeature.Setting>> crossReferences) {
+		LinkedList<UrmlLinkDescriptor> result = new LinkedList<UrmlLinkDescriptor>();
+		Collection<EStructuralFeature.Setting> settings = crossReferences
+				.get(target);
+		for (EStructuralFeature.Setting setting : settings) {
+			if (setting.getEStructuralFeature() == DangerPackage.eINSTANCE
+					.getMitigation_MitigatedDangers()) {
 				result.add(new UrmlLinkDescriptor(setting.getEObject(), target,
-					UrmlElementTypes.MitigationMitigatedDangers_4012, MitigationMitigatedDangersEditPart.VISUAL_ID));
+						UrmlElementTypes.MitigationMitigatedDangers_4012,
+						MitigationMitigatedDangersEditPart.VISUAL_ID));
 			}
 		}
 		return result;
@@ -1224,15 +1471,18 @@
 	/**
 	 * @generated
 	 */
-	private static Collection getIncomingFeatureModelFacetLinks_Danger_HarmedAssets_4013(Asset target,
-		Map crossReferences) {
-		Collection result = new LinkedList();
-		Collection settings = (Collection) crossReferences.get(target);
-		for (Iterator it = settings.iterator(); it.hasNext();) {
-			EStructuralFeature.Setting setting = (EStructuralFeature.Setting) it.next();
-			if (setting.getEStructuralFeature() == DangerPackage.eINSTANCE.getDanger_HarmedAssets()) {
+	private static Collection<UrmlLinkDescriptor> getIncomingFeatureModelFacetLinks_Danger_HarmedAssets_4013(
+			Asset target,
+			Map<EObject, Collection<EStructuralFeature.Setting>> crossReferences) {
+		LinkedList<UrmlLinkDescriptor> result = new LinkedList<UrmlLinkDescriptor>();
+		Collection<EStructuralFeature.Setting> settings = crossReferences
+				.get(target);
+		for (EStructuralFeature.Setting setting : settings) {
+			if (setting.getEStructuralFeature() == DangerPackage.eINSTANCE
+					.getDanger_HarmedAssets()) {
 				result.add(new UrmlLinkDescriptor(setting.getEObject(), target,
-					UrmlElementTypes.DangerHarmedAssets_4013, DangerHarmedAssetsEditPart.VISUAL_ID));
+						UrmlElementTypes.DangerHarmedAssets_4013,
+						DangerHarmedAssetsEditPart.VISUAL_ID));
 			}
 		}
 		return result;
@@ -1241,15 +1491,18 @@
 	/**
 	 * @generated
 	 */
-	private static Collection getIncomingFeatureModelFacetLinks_Asset_TriggeredDangers_4017(Danger target,
-		Map crossReferences) {
-		Collection result = new LinkedList();
-		Collection settings = (Collection) crossReferences.get(target);
-		for (Iterator it = settings.iterator(); it.hasNext();) {
-			EStructuralFeature.Setting setting = (EStructuralFeature.Setting) it.next();
-			if (setting.getEStructuralFeature() == DangerPackage.eINSTANCE.getAsset_TriggeredDangers()) {
+	private static Collection<UrmlLinkDescriptor> getIncomingFeatureModelFacetLinks_Asset_TriggeredDangers_4017(
+			Danger target,
+			Map<EObject, Collection<EStructuralFeature.Setting>> crossReferences) {
+		LinkedList<UrmlLinkDescriptor> result = new LinkedList<UrmlLinkDescriptor>();
+		Collection<EStructuralFeature.Setting> settings = crossReferences
+				.get(target);
+		for (EStructuralFeature.Setting setting : settings) {
+			if (setting.getEStructuralFeature() == DangerPackage.eINSTANCE
+					.getAsset_TriggeredDangers()) {
 				result.add(new UrmlLinkDescriptor(setting.getEObject(), target,
-					UrmlElementTypes.AssetTriggeredDangers_4017, AssetTriggeredDangersEditPart.VISUAL_ID));
+						UrmlElementTypes.AssetTriggeredDangers_4017,
+						AssetTriggeredDangersEditPart.VISUAL_ID));
 			}
 		}
 		return result;
@@ -1258,15 +1511,18 @@
 	/**
 	 * @generated
 	 */
-	private static Collection getIncomingFeatureModelFacetLinks_Service_SubServices_4022(Service target,
-		Map crossReferences) {
-		Collection result = new LinkedList();
-		Collection settings = (Collection) crossReferences.get(target);
-		for (Iterator it = settings.iterator(); it.hasNext();) {
-			EStructuralFeature.Setting setting = (EStructuralFeature.Setting) it.next();
-			if (setting.getEStructuralFeature() == ServicePackage.eINSTANCE.getService_SubServices()) {
+	private static Collection<UrmlLinkDescriptor> getIncomingFeatureModelFacetLinks_Service_SubServices_4022(
+			Service target,
+			Map<EObject, Collection<EStructuralFeature.Setting>> crossReferences) {
+		LinkedList<UrmlLinkDescriptor> result = new LinkedList<UrmlLinkDescriptor>();
+		Collection<EStructuralFeature.Setting> settings = crossReferences
+				.get(target);
+		for (EStructuralFeature.Setting setting : settings) {
+			if (setting.getEStructuralFeature() == ServicePackage.eINSTANCE
+					.getService_SubServices()) {
 				result.add(new UrmlLinkDescriptor(setting.getEObject(), target,
-					UrmlElementTypes.ServiceSubServices_4022, ServiceSubServicesEditPart.VISUAL_ID));
+						UrmlElementTypes.ServiceSubServices_4022,
+						ServiceSubServicesEditPart.VISUAL_ID));
 			}
 		}
 		return result;
@@ -1275,16 +1531,20 @@
 	/**
 	 * @generated
 	 */
-	private static Collection getIncomingFeatureModelFacetLinks_VariationPoint_OptionalSubFeatures_4046(
-		AbstractFeature target, Map crossReferences) {
-		Collection result = new LinkedList();
-		Collection settings = (Collection) crossReferences.get(target);
-		for (Iterator it = settings.iterator(); it.hasNext();) {
-			EStructuralFeature.Setting setting = (EStructuralFeature.Setting) it.next();
-			if (setting.getEStructuralFeature() == FeaturePackage.eINSTANCE.getVariationPoint_OptionalSubFeatures()) {
-				result.add(new UrmlLinkDescriptor(setting.getEObject(), target,
-					UrmlElementTypes.VariationPointOptionalSubFeatures_4046,
-					VariationPointOptionalSubFeaturesEditPart.VISUAL_ID));
+	private static Collection<UrmlLinkDescriptor> getIncomingFeatureModelFacetLinks_VariationPoint_OptionalSubFeatures_4046(
+			AbstractFeature target,
+			Map<EObject, Collection<EStructuralFeature.Setting>> crossReferences) {
+		LinkedList<UrmlLinkDescriptor> result = new LinkedList<UrmlLinkDescriptor>();
+		Collection<EStructuralFeature.Setting> settings = crossReferences
+				.get(target);
+		for (EStructuralFeature.Setting setting : settings) {
+			if (setting.getEStructuralFeature() == FeaturePackage.eINSTANCE
+					.getVariationPoint_OptionalSubFeatures()) {
+				result.add(new UrmlLinkDescriptor(
+						setting.getEObject(),
+						target,
+						UrmlElementTypes.VariationPointOptionalSubFeatures_4046,
+						VariationPointOptionalSubFeaturesEditPart.VISUAL_ID));
 			}
 		}
 		return result;
@@ -1293,16 +1553,42 @@
 	/**
 	 * @generated
 	 */
-	private static Collection getIncomingFeatureModelFacetLinks_VariationPointInstance_VariationPoint_4033(
-		VariationPoint target, Map crossReferences) {
-		Collection result = new LinkedList();
-		Collection settings = (Collection) crossReferences.get(target);
-		for (Iterator it = settings.iterator(); it.hasNext();) {
-			EStructuralFeature.Setting setting = (EStructuralFeature.Setting) it.next();
-			if (setting.getEStructuralFeature() == FeaturePackage.eINSTANCE.getVariationPointInstance_VariationPoint()) {
-				result.add(new UrmlLinkDescriptor(setting.getEObject(), target,
-					UrmlElementTypes.VariationPointInstanceVariationPoint_4033,
-					VariationPointInstanceVariationPointEditPart.VISUAL_ID));
+	private static Collection<UrmlLinkDescriptor> getIncomingFeatureModelFacetLinks_VariationPointInstance_VariationPoint_4033(
+			VariationPoint target,
+			Map<EObject, Collection<EStructuralFeature.Setting>> crossReferences) {
+		LinkedList<UrmlLinkDescriptor> result = new LinkedList<UrmlLinkDescriptor>();
+		Collection<EStructuralFeature.Setting> settings = crossReferences
+				.get(target);
+		for (EStructuralFeature.Setting setting : settings) {
+			if (setting.getEStructuralFeature() == FeaturePackage.eINSTANCE
+					.getVariationPointInstance_VariationPoint()) {
+				result.add(new UrmlLinkDescriptor(
+						setting.getEObject(),
+						target,
+						UrmlElementTypes.VariationPointInstanceVariationPoint_4033,
+						VariationPointInstanceVariationPointEditPart.VISUAL_ID));
+			}
+		}
+		return result;
+	}
+
+	/**
+	 * @generated
+	 */
+	private static Collection<UrmlLinkDescriptor> getIncomingFeatureModelFacetLinks_VariationPointInstance_SelectedFeatures_4040(
+			AbstractFeature target,
+			Map<EObject, Collection<EStructuralFeature.Setting>> crossReferences) {
+		LinkedList<UrmlLinkDescriptor> result = new LinkedList<UrmlLinkDescriptor>();
+		Collection<EStructuralFeature.Setting> settings = crossReferences
+				.get(target);
+		for (EStructuralFeature.Setting setting : settings) {
+			if (setting.getEStructuralFeature() == FeaturePackage.eINSTANCE
+					.getVariationPointInstance_SelectedFeatures()) {
+				result.add(new UrmlLinkDescriptor(
+						setting.getEObject(),
+						target,
+						UrmlElementTypes.VariationPointInstanceSelectedFeatures_4040,
+						VariationPointInstanceSelectedFeaturesEditPart.VISUAL_ID));
 			}
 		}
 		return result;
@@ -1311,17 +1597,18 @@
 	/**
 	 * @generated
 	 */
-	private static Collection getIncomingFeatureModelFacetLinks_VariationPointInstance_SelectedFeatures_4040(
-		AbstractFeature target, Map crossReferences) {
-		Collection result = new LinkedList();
-		Collection settings = (Collection) crossReferences.get(target);
-		for (Iterator it = settings.iterator(); it.hasNext();) {
-			EStructuralFeature.Setting setting = (EStructuralFeature.Setting) it.next();
+	private static Collection<UrmlLinkDescriptor> getIncomingFeatureModelFacetLinks_Product_VariationPointInstances_4032(
+			VariationPointInstance target,
+			Map<EObject, Collection<EStructuralFeature.Setting>> crossReferences) {
+		LinkedList<UrmlLinkDescriptor> result = new LinkedList<UrmlLinkDescriptor>();
+		Collection<EStructuralFeature.Setting> settings = crossReferences
+				.get(target);
+		for (EStructuralFeature.Setting setting : settings) {
 			if (setting.getEStructuralFeature() == FeaturePackage.eINSTANCE
-				.getVariationPointInstance_SelectedFeatures()) {
+					.getProduct_VariationPointInstances()) {
 				result.add(new UrmlLinkDescriptor(setting.getEObject(), target,
-					UrmlElementTypes.VariationPointInstanceSelectedFeatures_4040,
-					VariationPointInstanceSelectedFeaturesEditPart.VISUAL_ID));
+						UrmlElementTypes.ProductVariationPointInstances_4032,
+						ProductVariationPointInstancesEditPart.VISUAL_ID));
 			}
 		}
 		return result;
@@ -1330,16 +1617,18 @@
 	/**
 	 * @generated
 	 */
-	private static Collection getIncomingFeatureModelFacetLinks_Product_VariationPointInstances_4032(
-		VariationPointInstance target, Map crossReferences) {
-		Collection result = new LinkedList();
-		Collection settings = (Collection) crossReferences.get(target);
-		for (Iterator it = settings.iterator(); it.hasNext();) {
-			EStructuralFeature.Setting setting = (EStructuralFeature.Setting) it.next();
-			if (setting.getEStructuralFeature() == FeaturePackage.eINSTANCE.getProduct_VariationPointInstances()) {
+	private static Collection<UrmlLinkDescriptor> getIncomingFeatureModelFacetLinks_Product_Features_4047(
+			Feature target,
+			Map<EObject, Collection<EStructuralFeature.Setting>> crossReferences) {
+		LinkedList<UrmlLinkDescriptor> result = new LinkedList<UrmlLinkDescriptor>();
+		Collection<EStructuralFeature.Setting> settings = crossReferences
+				.get(target);
+		for (EStructuralFeature.Setting setting : settings) {
+			if (setting.getEStructuralFeature() == FeaturePackage.eINSTANCE
+					.getProduct_Features()) {
 				result.add(new UrmlLinkDescriptor(setting.getEObject(), target,
-					UrmlElementTypes.ProductVariationPointInstances_4032,
-					ProductVariationPointInstancesEditPart.VISUAL_ID));
+						UrmlElementTypes.ProductFeatures_4047,
+						ProductFeaturesEditPart.VISUAL_ID));
 			}
 		}
 		return result;
@@ -1348,15 +1637,18 @@
 	/**
 	 * @generated
 	 */
-	private static Collection getIncomingFeatureModelFacetLinks_Product_Features_4047(Feature target,
-		Map crossReferences) {
-		Collection result = new LinkedList();
-		Collection settings = (Collection) crossReferences.get(target);
-		for (Iterator it = settings.iterator(); it.hasNext();) {
-			EStructuralFeature.Setting setting = (EStructuralFeature.Setting) it.next();
-			if (setting.getEStructuralFeature() == FeaturePackage.eINSTANCE.getProduct_Features()) {
-				result.add(new UrmlLinkDescriptor(setting.getEObject(), target, UrmlElementTypes.ProductFeatures_4047,
-					ProductFeaturesEditPart.VISUAL_ID));
+	private static Collection<UrmlLinkDescriptor> getIncomingFeatureModelFacetLinks_UrmlModelElement_Associations_4048(
+			UrmlModelElement target,
+			Map<EObject, Collection<EStructuralFeature.Setting>> crossReferences) {
+		LinkedList<UrmlLinkDescriptor> result = new LinkedList<UrmlLinkDescriptor>();
+		Collection<EStructuralFeature.Setting> settings = crossReferences
+				.get(target);
+		for (EStructuralFeature.Setting setting : settings) {
+			if (setting.getEStructuralFeature() == UrmlPackage.eINSTANCE
+					.getUrmlModelElement_Associations()) {
+				result.add(new UrmlLinkDescriptor(setting.getEObject(), target,
+						UrmlElementTypes.UrmlModelElementAssociations_4048,
+						UrmlModelElementAssociationsEditPart.VISUAL_ID));
 			}
 		}
 		return result;
@@ -1365,12 +1657,15 @@
 	/**
 	 * @generated
 	 */
-	private static Collection getOutgoingFeatureModelFacetLinks_Stakeholder_Goals_4008(Stakeholder source) {
-		Collection result = new LinkedList();
-		for (Iterator destinations = source.getGoals().iterator(); destinations.hasNext();) {
+	private static Collection<UrmlLinkDescriptor> getOutgoingFeatureModelFacetLinks_Stakeholder_Goals_4008(
+			Stakeholder source) {
+		LinkedList<UrmlLinkDescriptor> result = new LinkedList<UrmlLinkDescriptor>();
+		for (Iterator<?> destinations = source.getGoals().iterator(); destinations
+				.hasNext();) {
 			Goal destination = (Goal) destinations.next();
-			result.add(new UrmlLinkDescriptor(source, destination, UrmlElementTypes.StakeholderGoals_4008,
-				StakeholderGoalsEditPart.VISUAL_ID));
+			result.add(new UrmlLinkDescriptor(source, destination,
+					UrmlElementTypes.StakeholderGoals_4008,
+					StakeholderGoalsEditPart.VISUAL_ID));
 		}
 		return result;
 	}
@@ -1378,12 +1673,15 @@
 	/**
 	 * @generated
 	 */
-	private static Collection getOutgoingFeatureModelFacetLinks_AbstractFeature_SubFeatures_4034(AbstractFeature source) {
-		Collection result = new LinkedList();
-		for (Iterator destinations = source.getSubFeatures().iterator(); destinations.hasNext();) {
+	private static Collection<UrmlLinkDescriptor> getOutgoingFeatureModelFacetLinks_AbstractFeature_SubFeatures_4034(
+			AbstractFeature source) {
+		LinkedList<UrmlLinkDescriptor> result = new LinkedList<UrmlLinkDescriptor>();
+		for (Iterator<?> destinations = source.getSubFeatures().iterator(); destinations
+				.hasNext();) {
 			AbstractFeature destination = (AbstractFeature) destinations.next();
-			result.add(new UrmlLinkDescriptor(source, destination, UrmlElementTypes.AbstractFeatureSubFeatures_4034,
-				AbstractFeatureSubFeaturesEditPart.VISUAL_ID));
+			result.add(new UrmlLinkDescriptor(source, destination,
+					UrmlElementTypes.AbstractFeatureSubFeatures_4034,
+					AbstractFeatureSubFeaturesEditPart.VISUAL_ID));
 		}
 		return result;
 	}
@@ -1391,14 +1689,19 @@
 	/**
 	 * @generated
 	 */
-	private static Collection getOutgoingFeatureModelFacetLinks_AbstractFeature_DetailingFunctionalRequirements_4035(
-		AbstractFeature source) {
-		Collection result = new LinkedList();
-		for (Iterator destinations = source.getDetailingFunctionalRequirements().iterator(); destinations.hasNext();) {
-			FunctionalRequirement destination = (FunctionalRequirement) destinations.next();
-			result.add(new UrmlLinkDescriptor(source, destination,
-				UrmlElementTypes.AbstractFeatureDetailingFunctionalRequirements_4035,
-				AbstractFeatureDetailingFunctionalRequirementsEditPart.VISUAL_ID));
+	private static Collection<UrmlLinkDescriptor> getOutgoingFeatureModelFacetLinks_AbstractFeature_DetailingFunctionalRequirements_4035(
+			AbstractFeature source) {
+		LinkedList<UrmlLinkDescriptor> result = new LinkedList<UrmlLinkDescriptor>();
+		for (Iterator<?> destinations = source
+				.getDetailingFunctionalRequirements().iterator(); destinations
+				.hasNext();) {
+			FunctionalRequirement destination = (FunctionalRequirement) destinations
+					.next();
+			result.add(new UrmlLinkDescriptor(
+					source,
+					destination,
+					UrmlElementTypes.AbstractFeatureDetailingFunctionalRequirements_4035,
+					AbstractFeatureDetailingFunctionalRequirementsEditPart.VISUAL_ID));
 		}
 		return result;
 	}
@@ -1406,15 +1709,19 @@
 	/**
 	 * @generated
 	 */
-	private static Collection getOutgoingFeatureModelFacetLinks_AbstractFeature_ConstrainingNonFunctionalRequirements_4036(
-		AbstractFeature source) {
-		Collection result = new LinkedList();
-		for (Iterator destinations = source.getConstrainingNonFunctionalRequirements().iterator(); destinations
-			.hasNext();) {
-			NonFunctionalRequirement destination = (NonFunctionalRequirement) destinations.next();
-			result.add(new UrmlLinkDescriptor(source, destination,
-				UrmlElementTypes.AbstractFeatureConstrainingNonFunctionalRequirements_4036,
-				AbstractFeatureConstrainingNonFunctionalRequirementsEditPart.VISUAL_ID));
+	private static Collection<UrmlLinkDescriptor> getOutgoingFeatureModelFacetLinks_AbstractFeature_ConstrainingNonFunctionalRequirements_4036(
+			AbstractFeature source) {
+		LinkedList<UrmlLinkDescriptor> result = new LinkedList<UrmlLinkDescriptor>();
+		for (Iterator<?> destinations = source
+				.getConstrainingNonFunctionalRequirements().iterator(); destinations
+				.hasNext();) {
+			NonFunctionalRequirement destination = (NonFunctionalRequirement) destinations
+					.next();
+			result.add(new UrmlLinkDescriptor(
+					source,
+					destination,
+					UrmlElementTypes.AbstractFeatureConstrainingNonFunctionalRequirements_4036,
+					AbstractFeatureConstrainingNonFunctionalRequirementsEditPart.VISUAL_ID));
 		}
 		return result;
 	}
@@ -1422,14 +1729,15 @@
 	/**
 	 * @generated
 	 */
-	private static Collection getOutgoingFeatureModelFacetLinks_AbstractFeature_RequiredFeatures_4045(
-		AbstractFeature source) {
-		Collection result = new LinkedList();
-		for (Iterator destinations = source.getRequiredFeatures().iterator(); destinations.hasNext();) {
+	private static Collection<UrmlLinkDescriptor> getOutgoingFeatureModelFacetLinks_AbstractFeature_RequiredFeatures_4045(
+			AbstractFeature source) {
+		LinkedList<UrmlLinkDescriptor> result = new LinkedList<UrmlLinkDescriptor>();
+		for (Iterator<?> destinations = source.getRequiredFeatures().iterator(); destinations
+				.hasNext();) {
 			AbstractFeature destination = (AbstractFeature) destinations.next();
 			result.add(new UrmlLinkDescriptor(source, destination,
-				UrmlElementTypes.AbstractFeatureRequiredFeatures_4045,
-				AbstractFeatureRequiredFeaturesEditPart.VISUAL_ID));
+					UrmlElementTypes.AbstractFeatureRequiredFeatures_4045,
+					AbstractFeatureRequiredFeaturesEditPart.VISUAL_ID));
 		}
 		return result;
 	}
@@ -1437,14 +1745,15 @@
 	/**
 	 * @generated
 	 */
-	private static Collection getOutgoingFeatureModelFacetLinks_AbstractFeature_ExcludedFeatures_4038(
-		AbstractFeature source) {
-		Collection result = new LinkedList();
-		for (Iterator destinations = source.getExcludedFeatures().iterator(); destinations.hasNext();) {
+	private static Collection<UrmlLinkDescriptor> getOutgoingFeatureModelFacetLinks_AbstractFeature_ExcludedFeatures_4038(
+			AbstractFeature source) {
+		LinkedList<UrmlLinkDescriptor> result = new LinkedList<UrmlLinkDescriptor>();
+		for (Iterator<?> destinations = source.getExcludedFeatures().iterator(); destinations
+				.hasNext();) {
 			AbstractFeature destination = (AbstractFeature) destinations.next();
 			result.add(new UrmlLinkDescriptor(source, destination,
-				UrmlElementTypes.AbstractFeatureExcludedFeatures_4038,
-				AbstractFeatureExcludedFeaturesEditPart.VISUAL_ID));
+					UrmlElementTypes.AbstractFeatureExcludedFeatures_4038,
+					AbstractFeatureExcludedFeaturesEditPart.VISUAL_ID));
 		}
 		return result;
 	}
@@ -1452,12 +1761,15 @@
 	/**
 	 * @generated
 	 */
-	private static Collection getOutgoingFeatureModelFacetLinks_Goal_RealizedFeatures_4004(Goal source) {
-		Collection result = new LinkedList();
-		for (Iterator destinations = source.getRealizedFeatures().iterator(); destinations.hasNext();) {
+	private static Collection<UrmlLinkDescriptor> getOutgoingFeatureModelFacetLinks_Goal_RealizedFeatures_4004(
+			Goal source) {
+		LinkedList<UrmlLinkDescriptor> result = new LinkedList<UrmlLinkDescriptor>();
+		for (Iterator<?> destinations = source.getRealizedFeatures().iterator(); destinations
+				.hasNext();) {
 			AbstractFeature destination = (AbstractFeature) destinations.next();
-			result.add(new UrmlLinkDescriptor(source, destination, UrmlElementTypes.GoalRealizedFeatures_4004,
-				GoalRealizedFeaturesEditPart.VISUAL_ID));
+			result.add(new UrmlLinkDescriptor(source, destination,
+					UrmlElementTypes.GoalRealizedFeatures_4004,
+					GoalRealizedFeaturesEditPart.VISUAL_ID));
 		}
 		return result;
 	}
@@ -1465,12 +1777,15 @@
 	/**
 	 * @generated
 	 */
-	private static Collection getOutgoingFeatureModelFacetLinks_Goal_SubGoals_4018(Goal source) {
-		Collection result = new LinkedList();
-		for (Iterator destinations = source.getSubGoals().iterator(); destinations.hasNext();) {
+	private static Collection<UrmlLinkDescriptor> getOutgoingFeatureModelFacetLinks_Goal_SubGoals_4018(
+			Goal source) {
+		LinkedList<UrmlLinkDescriptor> result = new LinkedList<UrmlLinkDescriptor>();
+		for (Iterator<?> destinations = source.getSubGoals().iterator(); destinations
+				.hasNext();) {
 			Goal destination = (Goal) destinations.next();
-			result.add(new UrmlLinkDescriptor(source, destination, UrmlElementTypes.GoalSubGoals_4018,
-				GoalSubGoalsEditPart.VISUAL_ID));
+			result.add(new UrmlLinkDescriptor(source, destination,
+					UrmlElementTypes.GoalSubGoals_4018,
+					GoalSubGoalsEditPart.VISUAL_ID));
 		}
 		return result;
 	}
@@ -1478,27 +1793,31 @@
 	/**
 	 * @generated
 	 */
-	private static Collection getOutgoingTypeModelFacetLinks_GoalReference_4016(Goal source) {
+	private static Collection<UrmlLinkDescriptor> getOutgoingTypeModelFacetLinks_GoalReference_4016(
+			Goal source) {
 		MEDiagram container = null;
 		// Find container element for the link.
 		// Climb up by containment hierarchy starting from the source
 		// and return the first element that is instance of the container class.
-		for (EObject element = source; element != null && container == null; element = element.eContainer()) {
+		for (EObject element = source; element != null && container == null; element = element
+				.eContainer()) {
 			if (element instanceof MEDiagram) {
 				container = (MEDiagram) element;
 			}
 		}
 		if (container == null) {
-			return Collections.EMPTY_LIST;
+			return Collections.emptyList();
 		}
-		Collection result = new LinkedList();
-		for (Iterator links = container.getNewElements().iterator(); links.hasNext();) {
+		LinkedList<UrmlLinkDescriptor> result = new LinkedList<UrmlLinkDescriptor>();
+		for (Iterator<?> links = container.getNewElements().iterator(); links
+				.hasNext();) {
 			EObject linkObject = (EObject) links.next();
 			if (false == linkObject instanceof GoalReference) {
 				continue;
 			}
 			GoalReference link = (GoalReference) linkObject;
-			if (GoalReferenceEditPart.VISUAL_ID != UrmlVisualIDRegistry.getLinkWithClassVisualID(link)) {
+			if (GoalReferenceEditPart.VISUAL_ID != UrmlVisualIDRegistry
+					.getLinkWithClassVisualID(link)) {
 				continue;
 			}
 			Goal dst = link.getTarget();
@@ -1506,8 +1825,9 @@
 			if (src != source) {
 				continue;
 			}
-			result.add(new UrmlLinkDescriptor(src, dst, link, UrmlElementTypes.GoalReference_4016,
-				GoalReferenceEditPart.VISUAL_ID));
+			result.add(new UrmlLinkDescriptor(src, dst, link,
+					UrmlElementTypes.GoalReference_4016,
+					GoalReferenceEditPart.VISUAL_ID));
 		}
 		return result;
 	}
@@ -1515,27 +1835,31 @@
 	/**
 	 * @generated
 	 */
-	private static Collection getOutgoingTypeModelFacetLinks_GoalReference_4023(Goal source) {
+	private static Collection<UrmlLinkDescriptor> getOutgoingTypeModelFacetLinks_GoalReference_4023(
+			Goal source) {
 		MEDiagram container = null;
 		// Find container element for the link.
 		// Climb up by containment hierarchy starting from the source
 		// and return the first element that is instance of the container class.
-		for (EObject element = source; element != null && container == null; element = element.eContainer()) {
+		for (EObject element = source; element != null && container == null; element = element
+				.eContainer()) {
 			if (element instanceof MEDiagram) {
 				container = (MEDiagram) element;
 			}
 		}
 		if (container == null) {
-			return Collections.EMPTY_LIST;
+			return Collections.emptyList();
 		}
-		Collection result = new LinkedList();
-		for (Iterator links = container.getNewElements().iterator(); links.hasNext();) {
+		LinkedList<UrmlLinkDescriptor> result = new LinkedList<UrmlLinkDescriptor>();
+		for (Iterator<?> links = container.getNewElements().iterator(); links
+				.hasNext();) {
 			EObject linkObject = (EObject) links.next();
 			if (false == linkObject instanceof GoalReference) {
 				continue;
 			}
 			GoalReference link = (GoalReference) linkObject;
-			if (GoalReference2EditPart.VISUAL_ID != UrmlVisualIDRegistry.getLinkWithClassVisualID(link)) {
+			if (GoalReference2EditPart.VISUAL_ID != UrmlVisualIDRegistry
+					.getLinkWithClassVisualID(link)) {
 				continue;
 			}
 			Goal dst = link.getTarget();
@@ -1543,8 +1867,9 @@
 			if (src != source) {
 				continue;
 			}
-			result.add(new UrmlLinkDescriptor(src, dst, link, UrmlElementTypes.GoalReference_4023,
-				GoalReference2EditPart.VISUAL_ID));
+			result.add(new UrmlLinkDescriptor(src, dst, link,
+					UrmlElementTypes.GoalReference_4023,
+					GoalReference2EditPart.VISUAL_ID));
 		}
 		return result;
 	}
@@ -1552,27 +1877,31 @@
 	/**
 	 * @generated
 	 */
-	private static Collection getOutgoingTypeModelFacetLinks_GoalReference_4024(Goal source) {
+	private static Collection<UrmlLinkDescriptor> getOutgoingTypeModelFacetLinks_GoalReference_4024(
+			Goal source) {
 		MEDiagram container = null;
 		// Find container element for the link.
 		// Climb up by containment hierarchy starting from the source
 		// and return the first element that is instance of the container class.
-		for (EObject element = source; element != null && container == null; element = element.eContainer()) {
+		for (EObject element = source; element != null && container == null; element = element
+				.eContainer()) {
 			if (element instanceof MEDiagram) {
 				container = (MEDiagram) element;
 			}
 		}
 		if (container == null) {
-			return Collections.EMPTY_LIST;
+			return Collections.emptyList();
 		}
-		Collection result = new LinkedList();
-		for (Iterator links = container.getNewElements().iterator(); links.hasNext();) {
+		LinkedList<UrmlLinkDescriptor> result = new LinkedList<UrmlLinkDescriptor>();
+		for (Iterator<?> links = container.getNewElements().iterator(); links
+				.hasNext();) {
 			EObject linkObject = (EObject) links.next();
 			if (false == linkObject instanceof GoalReference) {
 				continue;
 			}
 			GoalReference link = (GoalReference) linkObject;
-			if (GoalReference3EditPart.VISUAL_ID != UrmlVisualIDRegistry.getLinkWithClassVisualID(link)) {
+			if (GoalReference3EditPart.VISUAL_ID != UrmlVisualIDRegistry
+					.getLinkWithClassVisualID(link)) {
 				continue;
 			}
 			Goal dst = link.getTarget();
@@ -1580,8 +1909,9 @@
 			if (src != source) {
 				continue;
 			}
-			result.add(new UrmlLinkDescriptor(src, dst, link, UrmlElementTypes.GoalReference_4024,
-				GoalReference3EditPart.VISUAL_ID));
+			result.add(new UrmlLinkDescriptor(src, dst, link,
+					UrmlElementTypes.GoalReference_4024,
+					GoalReference3EditPart.VISUAL_ID));
 		}
 		return result;
 	}
@@ -1589,27 +1919,31 @@
 	/**
 	 * @generated
 	 */
-	private static Collection getOutgoingTypeModelFacetLinks_GoalReference_4025(Goal source) {
+	private static Collection<UrmlLinkDescriptor> getOutgoingTypeModelFacetLinks_GoalReference_4025(
+			Goal source) {
 		MEDiagram container = null;
 		// Find container element for the link.
 		// Climb up by containment hierarchy starting from the source
 		// and return the first element that is instance of the container class.
-		for (EObject element = source; element != null && container == null; element = element.eContainer()) {
+		for (EObject element = source; element != null && container == null; element = element
+				.eContainer()) {
 			if (element instanceof MEDiagram) {
 				container = (MEDiagram) element;
 			}
 		}
 		if (container == null) {
-			return Collections.EMPTY_LIST;
+			return Collections.emptyList();
 		}
-		Collection result = new LinkedList();
-		for (Iterator links = container.getNewElements().iterator(); links.hasNext();) {
+		LinkedList<UrmlLinkDescriptor> result = new LinkedList<UrmlLinkDescriptor>();
+		for (Iterator<?> links = container.getNewElements().iterator(); links
+				.hasNext();) {
 			EObject linkObject = (EObject) links.next();
 			if (false == linkObject instanceof GoalReference) {
 				continue;
 			}
 			GoalReference link = (GoalReference) linkObject;
-			if (GoalReference4EditPart.VISUAL_ID != UrmlVisualIDRegistry.getLinkWithClassVisualID(link)) {
+			if (GoalReference4EditPart.VISUAL_ID != UrmlVisualIDRegistry
+					.getLinkWithClassVisualID(link)) {
 				continue;
 			}
 			Goal dst = link.getTarget();
@@ -1617,8 +1951,9 @@
 			if (src != source) {
 				continue;
 			}
-			result.add(new UrmlLinkDescriptor(src, dst, link, UrmlElementTypes.GoalReference_4025,
-				GoalReference4EditPart.VISUAL_ID));
+			result.add(new UrmlLinkDescriptor(src, dst, link,
+					UrmlElementTypes.GoalReference_4025,
+					GoalReference4EditPart.VISUAL_ID));
 		}
 		return result;
 	}
@@ -1626,13 +1961,15 @@
 	/**
 	 * @generated
 	 */
-	private static Collection getOutgoingFeatureModelFacetLinks_Requirement_ImplementingServices_4005(Requirement source) {
-		Collection result = new LinkedList();
-		for (Iterator destinations = source.getImplementingServices().iterator(); destinations.hasNext();) {
+	private static Collection<UrmlLinkDescriptor> getOutgoingFeatureModelFacetLinks_Requirement_ImplementingServices_4005(
+			Requirement source) {
+		LinkedList<UrmlLinkDescriptor> result = new LinkedList<UrmlLinkDescriptor>();
+		for (Iterator<?> destinations = source.getImplementingServices()
+				.iterator(); destinations.hasNext();) {
 			Service destination = (Service) destinations.next();
 			result.add(new UrmlLinkDescriptor(source, destination,
-				UrmlElementTypes.RequirementImplementingServices_4005,
-				RequirementImplementingServicesEditPart.VISUAL_ID));
+					UrmlElementTypes.RequirementImplementingServices_4005,
+					RequirementImplementingServicesEditPart.VISUAL_ID));
 		}
 		return result;
 	}
@@ -1640,14 +1977,19 @@
 	/**
 	 * @generated
 	 */
-	private static Collection getOutgoingFeatureModelFacetLinks_NonFunctionalRequirement_SubNonFunctionalRequirements_4043(
-		NonFunctionalRequirement source) {
-		Collection result = new LinkedList();
-		for (Iterator destinations = source.getSubNonFunctionalRequirements().iterator(); destinations.hasNext();) {
-			NonFunctionalRequirement destination = (NonFunctionalRequirement) destinations.next();
-			result.add(new UrmlLinkDescriptor(source, destination,
-				UrmlElementTypes.NonFunctionalRequirementSubNonFunctionalRequirements_4043,
-				NonFunctionalRequirementSubNonFunctionalRequirementsEditPart.VISUAL_ID));
+	private static Collection<UrmlLinkDescriptor> getOutgoingFeatureModelFacetLinks_NonFunctionalRequirement_SubNonFunctionalRequirements_4043(
+			NonFunctionalRequirement source) {
+		LinkedList<UrmlLinkDescriptor> result = new LinkedList<UrmlLinkDescriptor>();
+		for (Iterator<?> destinations = source
+				.getSubNonFunctionalRequirements().iterator(); destinations
+				.hasNext();) {
+			NonFunctionalRequirement destination = (NonFunctionalRequirement) destinations
+					.next();
+			result.add(new UrmlLinkDescriptor(
+					source,
+					destination,
+					UrmlElementTypes.NonFunctionalRequirementSubNonFunctionalRequirements_4043,
+					NonFunctionalRequirementSubNonFunctionalRequirementsEditPart.VISUAL_ID));
 		}
 		return result;
 	}
@@ -1655,14 +1997,18 @@
 	/**
 	 * @generated
 	 */
-	private static Collection getOutgoingFeatureModelFacetLinks_FunctionalRequirement_SubFunctionalRequirements_4044(
-		FunctionalRequirement source) {
-		Collection result = new LinkedList();
-		for (Iterator destinations = source.getSubFunctionalRequirements().iterator(); destinations.hasNext();) {
-			FunctionalRequirement destination = (FunctionalRequirement) destinations.next();
-			result.add(new UrmlLinkDescriptor(source, destination,
-				UrmlElementTypes.FunctionalRequirementSubFunctionalRequirements_4044,
-				FunctionalRequirementSubFunctionalRequirementsEditPart.VISUAL_ID));
+	private static Collection<UrmlLinkDescriptor> getOutgoingFeatureModelFacetLinks_FunctionalRequirement_SubFunctionalRequirements_4044(
+			FunctionalRequirement source) {
+		LinkedList<UrmlLinkDescriptor> result = new LinkedList<UrmlLinkDescriptor>();
+		for (Iterator<?> destinations = source.getSubFunctionalRequirements()
+				.iterator(); destinations.hasNext();) {
+			FunctionalRequirement destination = (FunctionalRequirement) destinations
+					.next();
+			result.add(new UrmlLinkDescriptor(
+					source,
+					destination,
+					UrmlElementTypes.FunctionalRequirementSubFunctionalRequirements_4044,
+					FunctionalRequirementSubFunctionalRequirementsEditPart.VISUAL_ID));
 		}
 		return result;
 	}
@@ -1670,12 +2016,15 @@
 	/**
 	 * @generated
 	 */
-	private static Collection getOutgoingFeatureModelFacetLinks_Mitigation_MitigatedDangers_4012(Mitigation source) {
-		Collection result = new LinkedList();
-		for (Iterator destinations = source.getMitigatedDangers().iterator(); destinations.hasNext();) {
+	private static Collection<UrmlLinkDescriptor> getOutgoingFeatureModelFacetLinks_Mitigation_MitigatedDangers_4012(
+			Mitigation source) {
+		LinkedList<UrmlLinkDescriptor> result = new LinkedList<UrmlLinkDescriptor>();
+		for (Iterator<?> destinations = source.getMitigatedDangers().iterator(); destinations
+				.hasNext();) {
 			Danger destination = (Danger) destinations.next();
-			result.add(new UrmlLinkDescriptor(source, destination, UrmlElementTypes.MitigationMitigatedDangers_4012,
-				MitigationMitigatedDangersEditPart.VISUAL_ID));
+			result.add(new UrmlLinkDescriptor(source, destination,
+					UrmlElementTypes.MitigationMitigatedDangers_4012,
+					MitigationMitigatedDangersEditPart.VISUAL_ID));
 		}
 		return result;
 	}
@@ -1683,12 +2032,15 @@
 	/**
 	 * @generated
 	 */
-	private static Collection getOutgoingFeatureModelFacetLinks_Danger_HarmedAssets_4013(Danger source) {
-		Collection result = new LinkedList();
-		for (Iterator destinations = source.getHarmedAssets().iterator(); destinations.hasNext();) {
+	private static Collection<UrmlLinkDescriptor> getOutgoingFeatureModelFacetLinks_Danger_HarmedAssets_4013(
+			Danger source) {
+		LinkedList<UrmlLinkDescriptor> result = new LinkedList<UrmlLinkDescriptor>();
+		for (Iterator<?> destinations = source.getHarmedAssets().iterator(); destinations
+				.hasNext();) {
 			Asset destination = (Asset) destinations.next();
-			result.add(new UrmlLinkDescriptor(source, destination, UrmlElementTypes.DangerHarmedAssets_4013,
-				DangerHarmedAssetsEditPart.VISUAL_ID));
+			result.add(new UrmlLinkDescriptor(source, destination,
+					UrmlElementTypes.DangerHarmedAssets_4013,
+					DangerHarmedAssetsEditPart.VISUAL_ID));
 		}
 		return result;
 	}
@@ -1696,12 +2048,15 @@
 	/**
 	 * @generated
 	 */
-	private static Collection getOutgoingFeatureModelFacetLinks_Asset_TriggeredDangers_4017(Asset source) {
-		Collection result = new LinkedList();
-		for (Iterator destinations = source.getTriggeredDangers().iterator(); destinations.hasNext();) {
+	private static Collection<UrmlLinkDescriptor> getOutgoingFeatureModelFacetLinks_Asset_TriggeredDangers_4017(
+			Asset source) {
+		LinkedList<UrmlLinkDescriptor> result = new LinkedList<UrmlLinkDescriptor>();
+		for (Iterator<?> destinations = source.getTriggeredDangers().iterator(); destinations
+				.hasNext();) {
 			Danger destination = (Danger) destinations.next();
-			result.add(new UrmlLinkDescriptor(source, destination, UrmlElementTypes.AssetTriggeredDangers_4017,
-				AssetTriggeredDangersEditPart.VISUAL_ID));
+			result.add(new UrmlLinkDescriptor(source, destination,
+					UrmlElementTypes.AssetTriggeredDangers_4017,
+					AssetTriggeredDangersEditPart.VISUAL_ID));
 		}
 		return result;
 	}
@@ -1709,12 +2064,15 @@
 	/**
 	 * @generated
 	 */
-	private static Collection getOutgoingFeatureModelFacetLinks_Service_SubServices_4022(Service source) {
-		Collection result = new LinkedList();
-		for (Iterator destinations = source.getSubServices().iterator(); destinations.hasNext();) {
+	private static Collection<UrmlLinkDescriptor> getOutgoingFeatureModelFacetLinks_Service_SubServices_4022(
+			Service source) {
+		LinkedList<UrmlLinkDescriptor> result = new LinkedList<UrmlLinkDescriptor>();
+		for (Iterator<?> destinations = source.getSubServices().iterator(); destinations
+				.hasNext();) {
 			Service destination = (Service) destinations.next();
-			result.add(new UrmlLinkDescriptor(source, destination, UrmlElementTypes.ServiceSubServices_4022,
-				ServiceSubServicesEditPart.VISUAL_ID));
+			result.add(new UrmlLinkDescriptor(source, destination,
+					UrmlElementTypes.ServiceSubServices_4022,
+					ServiceSubServicesEditPart.VISUAL_ID));
 		}
 		return result;
 	}
@@ -1722,14 +2080,15 @@
 	/**
 	 * @generated
 	 */
-	private static Collection getOutgoingFeatureModelFacetLinks_VariationPoint_OptionalSubFeatures_4046(
-		VariationPoint source) {
-		Collection result = new LinkedList();
-		for (Iterator destinations = source.getOptionalSubFeatures().iterator(); destinations.hasNext();) {
+	private static Collection<UrmlLinkDescriptor> getOutgoingFeatureModelFacetLinks_VariationPoint_OptionalSubFeatures_4046(
+			VariationPoint source) {
+		LinkedList<UrmlLinkDescriptor> result = new LinkedList<UrmlLinkDescriptor>();
+		for (Iterator<?> destinations = source.getOptionalSubFeatures()
+				.iterator(); destinations.hasNext();) {
 			AbstractFeature destination = (AbstractFeature) destinations.next();
 			result.add(new UrmlLinkDescriptor(source, destination,
-				UrmlElementTypes.VariationPointOptionalSubFeatures_4046,
-				VariationPointOptionalSubFeaturesEditPart.VISUAL_ID));
+					UrmlElementTypes.VariationPointOptionalSubFeatures_4046,
+					VariationPointOptionalSubFeaturesEditPart.VISUAL_ID));
 		}
 		return result;
 	}
@@ -1737,30 +2096,33 @@
 	/**
 	 * @generated
 	 */
-	private static Collection getOutgoingFeatureModelFacetLinks_VariationPointInstance_VariationPoint_4033(
-		VariationPointInstance source) {
-		Collection result = new LinkedList();
+	private static Collection<UrmlLinkDescriptor> getOutgoingFeatureModelFacetLinks_VariationPointInstance_VariationPoint_4033(
+			VariationPointInstance source) {
+		LinkedList<UrmlLinkDescriptor> result = new LinkedList<UrmlLinkDescriptor>();
 		VariationPoint destination = source.getVariationPoint();
 		if (destination == null) {
 			return result;
 		}
 		result.add(new UrmlLinkDescriptor(source, destination,
-			UrmlElementTypes.VariationPointInstanceVariationPoint_4033,
-			VariationPointInstanceVariationPointEditPart.VISUAL_ID));
+				UrmlElementTypes.VariationPointInstanceVariationPoint_4033,
+				VariationPointInstanceVariationPointEditPart.VISUAL_ID));
 		return result;
 	}
 
 	/**
 	 * @generated
 	 */
-	private static Collection getOutgoingFeatureModelFacetLinks_VariationPointInstance_SelectedFeatures_4040(
-		VariationPointInstance source) {
-		Collection result = new LinkedList();
-		for (Iterator destinations = source.getSelectedFeatures().iterator(); destinations.hasNext();) {
+	private static Collection<UrmlLinkDescriptor> getOutgoingFeatureModelFacetLinks_VariationPointInstance_SelectedFeatures_4040(
+			VariationPointInstance source) {
+		LinkedList<UrmlLinkDescriptor> result = new LinkedList<UrmlLinkDescriptor>();
+		for (Iterator<?> destinations = source.getSelectedFeatures().iterator(); destinations
+				.hasNext();) {
 			AbstractFeature destination = (AbstractFeature) destinations.next();
-			result.add(new UrmlLinkDescriptor(source, destination,
-				UrmlElementTypes.VariationPointInstanceSelectedFeatures_4040,
-				VariationPointInstanceSelectedFeaturesEditPart.VISUAL_ID));
+			result.add(new UrmlLinkDescriptor(
+					source,
+					destination,
+					UrmlElementTypes.VariationPointInstanceSelectedFeatures_4040,
+					VariationPointInstanceSelectedFeaturesEditPart.VISUAL_ID));
 		}
 		return result;
 	}
@@ -1768,12 +2130,15 @@
 	/**
 	 * @generated
 	 */
-	private static Collection getOutgoingFeatureModelFacetLinks_Product_VariationPointInstances_4032(Product source) {
-		Collection result = new LinkedList();
-		for (Iterator destinations = source.getVariationPointInstances().iterator(); destinations.hasNext();) {
-			VariationPointInstance destination = (VariationPointInstance) destinations.next();
-			result
-				.add(new UrmlLinkDescriptor(source, destination, UrmlElementTypes.ProductVariationPointInstances_4032,
+	private static Collection<UrmlLinkDescriptor> getOutgoingFeatureModelFacetLinks_Product_VariationPointInstances_4032(
+			Product source) {
+		LinkedList<UrmlLinkDescriptor> result = new LinkedList<UrmlLinkDescriptor>();
+		for (Iterator<?> destinations = source.getVariationPointInstances()
+				.iterator(); destinations.hasNext();) {
+			VariationPointInstance destination = (VariationPointInstance) destinations
+					.next();
+			result.add(new UrmlLinkDescriptor(source, destination,
+					UrmlElementTypes.ProductVariationPointInstances_4032,
 					ProductVariationPointInstancesEditPart.VISUAL_ID));
 		}
 		return result;
@@ -1782,12 +2147,32 @@
 	/**
 	 * @generated
 	 */
-	private static Collection getOutgoingFeatureModelFacetLinks_Product_Features_4047(Product source) {
-		Collection result = new LinkedList();
-		for (Iterator destinations = source.getFeatures().iterator(); destinations.hasNext();) {
+	private static Collection<UrmlLinkDescriptor> getOutgoingFeatureModelFacetLinks_Product_Features_4047(
+			Product source) {
+		LinkedList<UrmlLinkDescriptor> result = new LinkedList<UrmlLinkDescriptor>();
+		for (Iterator<?> destinations = source.getFeatures().iterator(); destinations
+				.hasNext();) {
 			Feature destination = (Feature) destinations.next();
-			result.add(new UrmlLinkDescriptor(source, destination, UrmlElementTypes.ProductFeatures_4047,
-				ProductFeaturesEditPart.VISUAL_ID));
+			result.add(new UrmlLinkDescriptor(source, destination,
+					UrmlElementTypes.ProductFeatures_4047,
+					ProductFeaturesEditPart.VISUAL_ID));
+		}
+		return result;
+	}
+
+	/**
+	 * @generated
+	 */
+	private static Collection<UrmlLinkDescriptor> getOutgoingFeatureModelFacetLinks_UrmlModelElement_Associations_4048(
+			UrmlModelElement source) {
+		LinkedList<UrmlLinkDescriptor> result = new LinkedList<UrmlLinkDescriptor>();
+		for (Iterator<?> destinations = source.getAssociations().iterator(); destinations
+				.hasNext();) {
+			UrmlModelElement destination = (UrmlModelElement) destinations
+					.next();
+			result.add(new UrmlLinkDescriptor(source, destination,
+					UrmlElementTypes.UrmlModelElementAssociations_4048,
+					UrmlModelElementAssociationsEditPart.VISUAL_ID));
 		}
 		return result;
 	}
Index: src/org/unicase/ui/diagram/urml/part/LoadResourceAction.java
===================================================================
--- src/org/unicase/ui/diagram/urml/part/LoadResourceAction.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/part/LoadResourceAction.java	(working copy)
@@ -20,9 +20,10 @@
 		IEditorPart diagramEditor = HandlerUtil.getActiveEditorChecked(event);
 		Shell shell = diagramEditor.getEditorSite().getShell();
 		assert diagramEditor instanceof DiagramEditor;
-		TransactionalEditingDomain editingDomain = ((DiagramEditor) diagramEditor).getEditingDomain();
+		TransactionalEditingDomain editingDomain = ((DiagramEditor) diagramEditor)
+				.getEditingDomain();
 		org.eclipse.emf.edit.ui.action.LoadResourceAction.LoadResourceDialog loadResourceDialog = new org.eclipse.emf.edit.ui.action.LoadResourceAction.LoadResourceDialog(
-			shell, editingDomain);
+				shell, editingDomain);
 		loadResourceDialog.open();
 		return null;
 	}
Index: src/org/unicase/ui/diagram/urml/part/DeleteElementAction.java
===================================================================
--- src/org/unicase/ui/diagram/urml/part/DeleteElementAction.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/part/DeleteElementAction.java	(working copy)
@@ -17,8 +17,10 @@
 import org.eclipse.gmf.runtime.diagram.ui.l10n.DiagramUIMessages;
 import org.eclipse.gmf.runtime.emf.commands.core.command.CompositeTransactionalCommand;
 import org.eclipse.jface.resource.ImageDescriptor;
+import org.eclipse.ui.ISharedImages;
 import org.eclipse.ui.IWorkbenchPage;
 import org.eclipse.ui.IWorkbenchPart;
+import org.eclipse.ui.PlatformUI;
 
 /**
  * @generated
@@ -48,12 +50,14 @@
 		setId(ActionIds.ACTION_DELETE_FROM_MODEL);
 		setText(DiagramUIMessages.DiagramEditor_Delete_from_Model);
 		setToolTipText(DiagramUIMessages.DiagramEditor_Delete_from_ModelToolTip);
-		String path = "icons/delete.gif";
-		java.net.URL url = FileLocator.find(Platform.getBundle("org.unicase.ui.unicasecommon"), new Path(path), null);
-		ImageDescriptor id = ImageDescriptor.createFromURL(url);
-		setHoverImageDescriptor(id);
-		setImageDescriptor(id);
-		setDisabledImageDescriptor(id);
+		ISharedImages workbenchImages = PlatformUI.getWorkbench()
+				.getSharedImages();
+		setHoverImageDescriptor(workbenchImages
+				.getImageDescriptor(ISharedImages.IMG_TOOL_DELETE));
+		setImageDescriptor(workbenchImages
+				.getImageDescriptor(ISharedImages.IMG_TOOL_DELETE));
+		setDisabledImageDescriptor(workbenchImages
+				.getImageDescriptor(ISharedImages.IMG_TOOL_DELETE_DISABLED));
 	}
 
 	/**
@@ -72,7 +76,8 @@
 			return UnexecutableCommand.INSTANCE;
 		}
 		Iterator editParts = operationSet.iterator();
-		CompositeTransactionalCommand command = new CompositeTransactionalCommand(getEditingDomain(), getCommandLabel());
+		CompositeTransactionalCommand command = new CompositeTransactionalCommand(
+				getEditingDomain(), getCommandLabel());
 		while (editParts.hasNext()) {
 			EditPart editPart = (EditPart) editParts.next();
 			Command curCommand = editPart.getCommand(request);
Index: src/org/unicase/ui/diagram/urml/preferences/DiagramAppearancePreferencePage.java
===================================================================
--- src/org/unicase/ui/diagram/urml/preferences/DiagramAppearancePreferencePage.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/preferences/DiagramAppearancePreferencePage.java	(working copy)
@@ -12,6 +12,7 @@
 	 * @generated
 	 */
 	public DiagramAppearancePreferencePage() {
-		setPreferenceStore(UrmlDiagramEditorPlugin.getInstance().getPreferenceStore());
+		setPreferenceStore(UrmlDiagramEditorPlugin.getInstance()
+				.getPreferenceStore());
 	}
 }
Index: src/org/unicase/ui/diagram/urml/preferences/DiagramRulersAndGridPreferencePage.java
===================================================================
--- src/org/unicase/ui/diagram/urml/preferences/DiagramRulersAndGridPreferencePage.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/preferences/DiagramRulersAndGridPreferencePage.java	(working copy)
@@ -12,6 +12,7 @@
 	 * @generated
 	 */
 	public DiagramRulersAndGridPreferencePage() {
-		setPreferenceStore(UrmlDiagramEditorPlugin.getInstance().getPreferenceStore());
+		setPreferenceStore(UrmlDiagramEditorPlugin.getInstance()
+				.getPreferenceStore());
 	}
 }
Index: src/org/unicase/ui/diagram/urml/preferences/DiagramGeneralPreferencePage.java
===================================================================
--- src/org/unicase/ui/diagram/urml/preferences/DiagramGeneralPreferencePage.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/preferences/DiagramGeneralPreferencePage.java	(working copy)
@@ -12,6 +12,7 @@
 	 * @generated
 	 */
 	public DiagramGeneralPreferencePage() {
-		setPreferenceStore(UrmlDiagramEditorPlugin.getInstance().getPreferenceStore());
+		setPreferenceStore(UrmlDiagramEditorPlugin.getInstance()
+				.getPreferenceStore());
 	}
 }
Index: src/org/unicase/ui/diagram/urml/preferences/DiagramConnectionsPreferencePage.java
===================================================================
--- src/org/unicase/ui/diagram/urml/preferences/DiagramConnectionsPreferencePage.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/preferences/DiagramConnectionsPreferencePage.java	(working copy)
@@ -12,6 +12,7 @@
 	 * @generated
 	 */
 	public DiagramConnectionsPreferencePage() {
-		setPreferenceStore(UrmlDiagramEditorPlugin.getInstance().getPreferenceStore());
+		setPreferenceStore(UrmlDiagramEditorPlugin.getInstance()
+				.getPreferenceStore());
 	}
 }
Index: src/org/unicase/ui/diagram/urml/preferences/DiagramPrintingPreferencePage.java
===================================================================
--- src/org/unicase/ui/diagram/urml/preferences/DiagramPrintingPreferencePage.java	(revision 12229)
+++ src/org/unicase/ui/diagram/urml/preferences/DiagramPrintingPreferencePage.java	(working copy)
@@ -12,6 +12,7 @@
 	 * @generated
 	 */
 	public DiagramPrintingPreferencePage() {
-		setPreferenceStore(UrmlDiagramEditorPlugin.getInstance().getPreferenceStore());
+		setPreferenceStore(UrmlDiagramEditorPlugin.getInstance()
+				.getPreferenceStore());
 	}
 }
Index: src/org/unicase/ui/urml/UrmlDiagramFilter.java
===================================================================
--- src/org/unicase/ui/urml/UrmlDiagramFilter.java	(revision 0)
+++ src/org/unicase/ui/urml/UrmlDiagramFilter.java	(revision 0)
@@ -0,0 +1,9 @@
+package org.unicase.ui.urml;
+
+import java.util.List;
+
+public interface UrmlDiagramFilter {
+
+	List<?> filter(List<?> elements);
+
+}
Index: messages.properties
===================================================================
--- messages.properties	(revision 12229)
+++ messages.properties	(working copy)
@@ -139,3 +139,16 @@
 MessageFormatParser_InvalidInputError=Invalid input at {0}
 UrmlModelingAssistantProviderTitle=Select domain model element
 UrmlModelingAssistantProviderMessage=Available domain model elements:
+NavigatorGroupName_Product_2015_incominglinks=incoming links
+NavigatorGroupName_Stakeholder_2002_incominglinks=incoming links
+NavigatorGroupName_GoalReference_4023_incominglinks=incoming links
+NavigatorGroupName_GoalReference_4023_outgoinglinks=outgoing links
+NavigatorGroupName_GoalReference_4025_incominglinks=incoming links
+NavigatorGroupName_GoalReference_4025_outgoinglinks=outgoing links
+NavigatorGroupName_GoalReference_4024_incominglinks=incoming links
+NavigatorGroupName_GoalReference_4024_outgoinglinks=outgoing links
+NavigatorGroupName_GoalReference_4016_incominglinks=incoming links
+NavigatorGroupName_GoalReference_4016_outgoinglinks=outgoing links
+NavigatorGroupName_ProceduralMitigation_2011_incominglinks=incoming links
+NavigatorGroupName_UrmlModelElementAssociations_4048_target=target
+NavigatorGroupName_UrmlModelElementAssociations_4048_source=source
Index: schema/org.unicase.ui.diagram.urmlDiagram.filters.exsd
===================================================================
--- schema/org.unicase.ui.diagram.urmlDiagram.filters.exsd	(revision 0)
+++ schema/org.unicase.ui.diagram.urmlDiagram.filters.exsd	(revision 0)
@@ -0,0 +1,102 @@
+<?xml version='1.0' encoding='UTF-8'?>
+<!-- Schema file written by PDE -->
+<schema targetNamespace="org.unicase.ui.diagram.urmlDiagram" xmlns="http://www.w3.org/2001/XMLSchema">
+<annotation>
+      <appInfo>
+         <meta.schema plugin="org.unicase.ui.diagram.urmlDiagram" id="org.unicase.ui.diagram.urmlDiagram.filters" name="URML Diagram Filters"/>
+      </appInfo>
+      <documentation>
+         [Enter description of this extension point.]
+      </documentation>
+   </annotation>
+
+   <element name="extension">
+      <annotation>
+         <appInfo>
+            <meta.element />
+         </appInfo>
+      </annotation>
+      <complexType>
+         <sequence>
+            <element ref="filter"/>
+         </sequence>
+         <attribute name="point" type="string" use="required">
+            <annotation>
+               <documentation>
+                  
+               </documentation>
+            </annotation>
+         </attribute>
+         <attribute name="id" type="string">
+            <annotation>
+               <documentation>
+                  
+               </documentation>
+            </annotation>
+         </attribute>
+         <attribute name="name" type="string">
+            <annotation>
+               <documentation>
+                  
+               </documentation>
+               <appInfo>
+                  <meta.attribute translatable="true"/>
+               </appInfo>
+            </annotation>
+         </attribute>
+      </complexType>
+   </element>
+
+   <element name="filter">
+      <complexType>
+         <attribute name="filterClass" type="string" use="required">
+            <annotation>
+               <documentation>
+                  
+               </documentation>
+               <appInfo>
+                  <meta.attribute kind="java" basedOn=":org.unicase.ui.urml.UrmlDiagramFilter"/>
+               </appInfo>
+            </annotation>
+         </attribute>
+      </complexType>
+   </element>
+
+   <annotation>
+      <appInfo>
+         <meta.section type="since"/>
+      </appInfo>
+      <documentation>
+         [Enter the first release in which this extension point appears.]
+      </documentation>
+   </annotation>
+
+   <annotation>
+      <appInfo>
+         <meta.section type="examples"/>
+      </appInfo>
+      <documentation>
+         [Enter extension point usage example here.]
+      </documentation>
+   </annotation>
+
+   <annotation>
+      <appInfo>
+         <meta.section type="apiinfo"/>
+      </appInfo>
+      <documentation>
+         [Enter API information here.]
+      </documentation>
+   </annotation>
+
+   <annotation>
+      <appInfo>
+         <meta.section type="implementation"/>
+      </appInfo>
+      <documentation>
+         [Enter information about supplied implementation of this extension point.]
+      </documentation>
+   </annotation>
+
+
+</schema>
Index: META-INF/MANIFEST.MF
===================================================================
--- META-INF/MANIFEST.MF	(revision 12229)
+++ META-INF/MANIFEST.MF	(working copy)
@@ -8,7 +8,8 @@
 Bundle-Vendor: %providerName
 Export-Package: org.unicase.ui.diagram.urml.edit.parts,
  org.unicase.ui.diagram.urml.part,
- org.unicase.ui.diagram.urml.providers
+ org.unicase.ui.diagram.urml.providers,
+ org.unicase.ui.urml
 Require-Bundle: org.eclipse.core.runtime,
  org.eclipse.core.resources,
  org.eclipse.core.expressions,
