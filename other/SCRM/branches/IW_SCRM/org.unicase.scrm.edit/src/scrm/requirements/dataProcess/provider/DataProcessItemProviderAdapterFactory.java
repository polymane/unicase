/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package scrm.requirements.dataProcess.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;
import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import scrm.requirements.dataProcess.util.DataProcessAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class DataProcessItemProviderAdapterFactory extends
		DataProcessAdapterFactory implements ComposeableAdapterFactory,
		IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public DataProcessItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link scrm.requirements.dataProcess.Process} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ProcessItemProvider processItemProvider;

	/**
	 * This creates an adapter for a {@link scrm.requirements.dataProcess.Process}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createProcessAdapter() {
		if (processItemProvider == null) {
			processItemProvider = new ProcessItemProvider(this);
		}

		return processItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link scrm.requirements.dataProcess.DataVisualizationProcess} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DataVisualizationProcessItemProvider dataVisualizationProcessItemProvider;

	/**
	 * This creates an adapter for a {@link scrm.requirements.dataProcess.DataVisualizationProcess}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDataVisualizationProcessAdapter() {
		if (dataVisualizationProcessItemProvider == null) {
			dataVisualizationProcessItemProvider = new DataVisualizationProcessItemProvider(
					this);
		}

		return dataVisualizationProcessItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link scrm.requirements.dataProcess.ReportGenerationProcess} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ReportGenerationProcessItemProvider reportGenerationProcessItemProvider;

	/**
	 * This creates an adapter for a {@link scrm.requirements.dataProcess.ReportGenerationProcess}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createReportGenerationProcessAdapter() {
		if (reportGenerationProcessItemProvider == null) {
			reportGenerationProcessItemProvider = new ReportGenerationProcessItemProvider(
					this);
		}

		return reportGenerationProcessItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link scrm.requirements.dataProcess.ErrorHandling} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ErrorHandlingItemProvider errorHandlingItemProvider;

	/**
	 * This creates an adapter for a {@link scrm.requirements.dataProcess.ErrorHandling}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createErrorHandlingAdapter() {
		if (errorHandlingItemProvider == null) {
			errorHandlingItemProvider = new ErrorHandlingItemProvider(this);
		}

		return errorHandlingItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link scrm.requirements.dataProcess.BuildingModelConstructionProcess} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BuildingModelConstructionProcessItemProvider buildingModelConstructionProcessItemProvider;

	/**
	 * This creates an adapter for a {@link scrm.requirements.dataProcess.BuildingModelConstructionProcess}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBuildingModelConstructionProcessAdapter() {
		if (buildingModelConstructionProcessItemProvider == null) {
			buildingModelConstructionProcessItemProvider = new BuildingModelConstructionProcessItemProvider(
					this);
		}

		return buildingModelConstructionProcessItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link scrm.requirements.dataProcess.CostMinimizationCalculationProcess} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CostMinimizationCalculationProcessItemProvider costMinimizationCalculationProcessItemProvider;

	/**
	 * This creates an adapter for a {@link scrm.requirements.dataProcess.CostMinimizationCalculationProcess}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCostMinimizationCalculationProcessAdapter() {
		if (costMinimizationCalculationProcessItemProvider == null) {
			costMinimizationCalculationProcessItemProvider = new CostMinimizationCalculationProcessItemProvider(
					this);
		}

		return costMinimizationCalculationProcessItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link scrm.requirements.dataProcess.ControlSystemDesignProcess} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ControlSystemDesignProcessItemProvider controlSystemDesignProcessItemProvider;

	/**
	 * This creates an adapter for a {@link scrm.requirements.dataProcess.ControlSystemDesignProcess}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createControlSystemDesignProcessAdapter() {
		if (controlSystemDesignProcessItemProvider == null) {
			controlSystemDesignProcessItemProvider = new ControlSystemDesignProcessItemProvider(
					this);
		}

		return controlSystemDesignProcessItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link scrm.requirements.dataProcess.EnergyUsageCalculationProcess} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EnergyUsageCalculationProcessItemProvider energyUsageCalculationProcessItemProvider;

	/**
	 * This creates an adapter for a {@link scrm.requirements.dataProcess.EnergyUsageCalculationProcess}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEnergyUsageCalculationProcessAdapter() {
		if (energyUsageCalculationProcessItemProvider == null) {
			energyUsageCalculationProcessItemProvider = new EnergyUsageCalculationProcessItemProvider(
					this);
		}

		return energyUsageCalculationProcessItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory
				.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(
			ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>)
					|| (((Class<?>) type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (processItemProvider != null)
			processItemProvider.dispose();
		if (dataVisualizationProcessItemProvider != null)
			dataVisualizationProcessItemProvider.dispose();
		if (reportGenerationProcessItemProvider != null)
			reportGenerationProcessItemProvider.dispose();
		if (errorHandlingItemProvider != null)
			errorHandlingItemProvider.dispose();
		if (buildingModelConstructionProcessItemProvider != null)
			buildingModelConstructionProcessItemProvider.dispose();
		if (costMinimizationCalculationProcessItemProvider != null)
			costMinimizationCalculationProcessItemProvider.dispose();
		if (controlSystemDesignProcessItemProvider != null)
			controlSystemDesignProcessItemProvider.dispose();
		if (energyUsageCalculationProcessItemProvider != null)
			energyUsageCalculationProcessItemProvider.dispose();
	}

}
