This archive directory contains JNI4NET DLL files, and "proxygen.exe".
These files are necessary for creating JNI Bridge used to connect to Java side to the C# side (which is the part that communicates to Kinect)

How to generate JNI using JNI4Net?

Assuming you have a C# project, and you want to use it as a DLL within a Java project.
JNI4net is a bridge that is used to generate jar file and an intermediate DLL, that abstract the interaction between the Java side and the original C# DLL.
Notes: 
1. The steps of this tutorial have only been tested in a Windows 7 environment.
2. Basic understanding of the concept of “Java Native Interface” is recommended.


Step1: Create your C# project
Your project should be of type: Class Library Project (so that the output will be generated as a DLL).

Step2: Create the C# classes
Those are the classes that encapsulate the functionality you want to export to the Java side.
A class should implement an interface that contains the methods to be exported to the Java side.
Example:
namespace MyNameSpace {
	public interface ISomethingAwesome {
		void firstAwesomeMethod();
		void secondAwesomeMethod();
}
public class SomethingAwesome : ISomethingAwesome {
	public void firstAwesomeMethod() {
		/* Does awesome stuff */
}
public void secondAwesomeMethod() {
	/* Does other awesome stuff */
}
}
}

Step3: Generate the JNI Bridge
* Create an empty directory. Lets call it “dir”
* Create a sub-directory of “dir”. Lets call it “work”
* In “dir”, put “proxygen.exe”, “proxygen.exe.config”, and the JNI4Net DLL files (you can find all of them in the KinectForEclipse Project’s “Archive” directory)
“proxygen” is a tool that uses reflection to wrap your library, so that finally, you only need to use a generated jar, and the generated DLL.
* Change your Environment variable so that your JAVA_HOME is pointing to a 64bit installation of java. Note: that “bin” should not be part of the Java path! Otherwise “proxygen” won’t work.
* Copy the DLL file generated from your C# Class Library project to dir\work, let’s call it “MyNameSpace.dll”
*Execute the following command:
	proxygen.exe work\MyNameSpace.dll -wd work
* Now, you have Java classes that encapsulate your DLL’s functionality, and C sharp classes that need to build built in order to create the intermediate DLL. You also have a build script that was generated for you in order to build those classes into a jar, and an intermediate.
* You need to run the build script in order to generate the jar. First, you need to fix JAVA_HOME in your environment variables (either use your 64bit java, or use x86, it doesn’t matter at this point). But you need to add “\bin” to the java path (back to normal JAVA_HOME).
* The build script is available under “work” directory, named as “build.cmd”.
* The best way to run the build script is through a “Visual Studio Command Prompt”. Change directory to “dir\work” that run “build.cmd”.


Step4: Integrate the generated jar and DLL with your Java Project
* In your Java project, create a “lib” directory.
* Copy the Jar’s and DLL’s from “dir” and from “work” to the your Java project’s “lib” directory.
* Your Java class path for your project needs to be fixed so that in points to two jars: “jni4net.j-0.8.6.0.jar” and the jar file generated by the build script that encapsulates your C# side classes, or in our simple example “MyNameSpace.j4n.jar”.


Step5: From your Java code, call your C# methods
* At this point, you can use your C# classes or methods seamlessly, as if they are Java classes.
* But first, you need to initialize the JNI4Net Bridge before creating and using JNI objects.
Example:

	public class MyJavaClass {
		public static void main(String[] args) {
try {
				Bridge.init();
	Bridge.LoadAndRegisterAssemblyFrom(new java.io.File("lib/MyNameSpace.j4n.dll"));
			} catch (IOException e1) {
				e1.printStackTrace();
			}
		}
		ISomethingAwesome somethingAwesome = new SomethingAwesome();
		somethingAwesome.firstAwesomeMethod();
		//bla bla
}