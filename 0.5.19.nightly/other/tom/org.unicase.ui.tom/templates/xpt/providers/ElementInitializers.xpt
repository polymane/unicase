/*
 * Copyright (c) 2007, 2008 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Dmitry Stadnik (Borland) - initial API and implementation
 *    Artem Tikhomirov (Borland) - refactored javaInitilizers not to use methods from GMFGen model
 *                               [221347] Got rid of generated interfaces 
 *                               (IObjectInitializer, IFeatureInitializer) and implementation thereof
 */

«IMPORT "http://www.eclipse.org/emf/2002/Ecore"»
«IMPORT "http://www.eclipse.org/gmf/2008/GenModel"»
«IMPORT "http://www.eclipse.org/emf/2002/GenModel"»

«EXTENSION xpt::providers::ElementInitializers»

«DEFINE ElementInitializers FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::copyright FOR editorGen-»
package «providersPackageName»;

«EXPAND xpt::Common::generatedClassComment»
public class ElementInitializers {
	«EXPAND Initializers»
	«EXPAND JavaSupport»
	«EXPAND additions-»
}
«ENDDEFINE»

«DEFINE Initializers FOR GenDiagram-»
	«EXPAND initMethod FOREACH getAllNodes()-»
	«EXPAND initMethod FOREACH links-»
«ENDDEFINE»

«DEFINE JavaSupport FOR GenDiagram-»
«IF editorGen.expressionProviders != null && !editorGen.expressionProviders.providers.typeSelect(GenJavaExpressionProvider).isEmpty()-»
	«EXPAND javaMethod FOREACH getAllNodes()-»
	«EXPAND javaMethod FOREACH links-»
«ENDIF-»
«ENDDEFINE»


«DEFINE additions FOR gmfgen::GenDiagram»«ENDDEFINE»


«REM»
	Definitions of initializer objects.
«ENDREM»

«DEFINE initMethod FOR GenNode»«EXPAND initMethod(this) FOR modelFacet»«ENDDEFINE»
«DEFINE initMethod FOR GenLink»«EXPAND initMethod(this) FOR modelFacet»«ENDDEFINE»

«DEFINE initMethod(GenCommonBase diagramElement) FOR ModelFacet»«ENDDEFINE»

«DEFINE initMethod(GenCommonBase diagramElement) FOR TypeModelFacet-»
«EXPAND initMethod(diagramElement) FOR modelElementInitializer-»
«ENDDEFINE»

«DEFINE initMethod(GenCommonBase diagramElement) FOR GenElementInitializer»«ERROR "No idea how to init using " + this»«ENDDEFINE»

«DEFINE initMethod(GenCommonBase diagramElement) FOR GenFeatureSeqInitializer-»
	«EXPAND xpt::Common::generatedMemberComment»
	public static void init_«diagramElement.getUniqueIdentifier()»(«EXPAND MetaModel::QualifiedClassName FOR elementClass» instance) {
		try {
			«FOREACH initializers AS i»«EXPAND performInit(diagramElement, "instance", elementClass, initializers.indexOf(i)) FOR i»«ENDFOREACH-»
		} catch(RuntimeException e) {
			«diagramElement.getDiagram().editorGen.plugin.getActivatorQualifiedClassName()».getInstance().logError("Element initialization failed", e); //$NON-NLS-1$						
		}
	}
«ENDDEFINE»

«DEFINE performInit(GenCommonBase diagramElement, String instanceVar, GenClass instanceClass, int count) FOR GenFeatureInitializer»«ENDDEFINE»

«DEFINE performInit(GenCommonBase diagramElement, String instanceVar, GenClass instanceClass, int count) FOR GenFeatureValueSpec-»
	Object value«count» = «EXPAND evaluateExpr(diagramElement, this, instanceVar) FOR value.provider»;
«IF isListType(feature)-»
	if (value«count» instanceof java.util.Collection) {
		«EXPAND MetaModel::getFeatureValue(instanceVar, instanceClass, true) FOR feature».clear();
«IF expressionResultNeedsCast(getTypeGenClassifier(feature))-»
		for (java.util.Iterator it = ((java.util.Collection) value«count»).iterator(); it.hasNext(); ) {
			Object next = «diagramElement.getDiagram().editorGen.expressionProviders.getAbstractExpressionQualifiedClassName()».performCast(it.next(), «EXPAND MetaModel::MetaClass FOR getTypeGenClassifier(feature)»);
			«EXPAND MetaModel::getFeatureValue(instanceVar, instanceClass, true) FOR feature».add(next);
		}
«ELSE-»
		«EXPAND MetaModel::getFeatureValue(instanceVar, instanceClass, true) FOR feature».addAll(((java.util.Collection) value«count»));
«ENDIF-»
	} else {
«IF expressionResultNeedsCast(getTypeGenClassifier(feature))-»
		value«count» = «diagramElement.getDiagram().editorGen.expressionProviders.getAbstractExpressionQualifiedClassName()».performCast(value«count», «EXPAND MetaModel::MetaClass FOR getTypeGenClassifier(feature)»);
«ENDIF-»
		«EXPAND MetaModel::getFeatureValue(instanceVar, instanceClass, true) FOR feature».add((«EXPAND MetaModel::QualifiedClassName /*XXX sorta hack, better would be MM::setFeatureValue that supports lists*/FOR getTypeGenClassifier(feature)») value«count»);
	}
«ELSE-»
«IF expressionResultNeedsCast(getTypeGenClassifier(feature))»
	value«count» = «diagramElement.getDiagram().editorGen.expressionProviders.getAbstractExpressionQualifiedClassName()».performCast(value«count», «EXPAND MetaModel::MetaClass FOR getTypeGenClassifier(feature)»);
«ENDIF-»
	«EXPAND MetaModel::setFeatureValue(instanceVar, instanceClass, "value" + count, true) FOR feature»;
«ENDIF /*isListType*/-»
«ENDDEFINE»

«DEFINE performInit(GenCommonBase diagramElement, String instanceVar, GenClass instanceClass, int count) FOR GenReferenceNewElementSpec-»
«FOREACH newElementInitializers AS newElemInit»
«LET (count+1)*100+newElementInitializers.indexOf(newElemInit) AS initializerCount-»
«LET "newInstance" + initializerCount AS newInstanceVar-»
«EXPAND MetaModel::NewInstance(newInstanceVar) FOR newElemInit.elementClass»
«IF isListType(feature)-»
«EXPAND MetaModel::getFeatureValue(instanceVar, instanceClass) FOR feature».add(«newInstanceVar»);
«ELSE-»
«EXPAND MetaModel::setFeatureValue(instanceVar, instanceClass, newInstanceVar) FOR feature»;
«ENDIF-»
«FOREACH newElemInit.initializers AS i»«EXPAND performInit(diagramElement, newInstanceVar, newElemInit.elementClass, (initializerCount+1)*100 + newElemInit.initializers.indexOf(i)) FOR i»«ENDFOREACH-»
«ENDLET-»
«ENDLET-»
«ENDFOREACH-»
«ENDDEFINE»


/////////////////////////////////

«DEFINE evaluateExpr(GenCommonBase diagramElement, GenFeatureValueSpec valueExpr, String instanceVar) FOR GenExpressionProviderBase»«ENDDEFINE»

// XXX perhaps, using instance.eClass() is better option than MetaModel::MetaClass (though, need to rely on instance variable name/type) 
«DEFINE evaluateExpr(GenCommonBase diagramElement, GenFeatureValueSpec valueExpr, String instanceVar) FOR GenExpressionInterpreter-»
«EXPAND xpt::expressions::getExpression::getExpression(valueExpr.value, valueExpr.featureSeqInitializer.elementClass)».evaluate(«instanceVar»)«-»
«ENDDEFINE»

«REM»
	XXX revisit: if emf java merge doesn't support genereated NOT methods with modified
	return type, there's no much sense to keep Object value = invokeJavaMethodWithSpecificReturnType,
	as client won't benefit from such code (he can't modify return type and thus would get duplicated methods on regeneration)
	However, if merge does ignore method return type when merging, allowing Object as return type may help. 
«ENDREM»
«DEFINE evaluateExpr(GenCommonBase diagramElement, GenFeatureValueSpec valueExpr, String instanceVar) FOR GenJavaExpressionProvider-»
«javaMethodName(diagramElement, valueExpr)»(«instanceVar»)«-»
«ENDDEFINE»

/////////////////////////////////

«DEFINE javaMethod FOR GenNode»«EXPAND javaMethod(this) FOR modelFacet»«ENDDEFINE»
«DEFINE javaMethod FOR GenLink»«EXPAND javaMethod(this) FOR modelFacet»«ENDDEFINE»
«DEFINE javaMethod(GenCommonBase diagramElement) FOR ModelFacet»«ENDDEFINE»
«DEFINE javaMethod(GenCommonBase diagramElement) FOR TypeModelFacet-»
«EXPAND javaMethod(diagramElement) FOR modelElementInitializer-»
«ENDDEFINE»

«DEFINE javaMethod(GenCommonBase diagramElement) FOR GenElementInitializer»«ERROR "No idea how to handle " + this»«ENDDEFINE»
«DEFINE javaMethod(GenCommonBase diagramElement) FOR GenFeatureSeqInitializer-»
«FOREACH recurseCollectValueSpec(this) AS vs»«EXPAND javaMethod(diagramElement, vs) FOR vs.value.provider»«ENDFOREACH-»
«ENDDEFINE»

«DEFINE javaMethod(GenCommonBase diagramElement, GenFeatureValueSpec vs) FOR GenExpressionProviderBase-»«ENDDEFINE»
«DEFINE javaMethod(GenCommonBase diagramElement, GenFeatureValueSpec vs) FOR GenJavaExpressionProvider-»
	«EXPAND xpt::Common::generatedMemberComment»
	private static «EXPAND MetaModel::featureTargetType FOR vs.feature» «javaMethodName(diagramElement, vs)»(«EXPAND MetaModel::QualifiedClassName FOR vs.featureSeqInitializer.elementClass» self) {
«IF injectExpressionBody && vs.value.body != null && vs.value.body.length() != 0-»
		«vs.value.body»
«ELSEIF throwException || (injectExpressionBody && (vs.value.body == null || vs.value.body.length() == 0))-»
		// TODO: implement this method to return value  
		// for «EXPAND MetaModel::MetaFeature FOR vs.feature»
		// Ensure that you remove @generated or mark it @generated NOT
		throw new java.lang.UnsupportedOperationException("No user java implementation provided in '«javaMethodName(diagramElement, vs)»' operation");«EXPAND xpt::Common::nonNLS»
«ELSE-»
		return null;
«ENDIF-»	
	}
«ENDDEFINE»